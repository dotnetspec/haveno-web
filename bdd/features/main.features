### **Feature: MVP Mobile Tor-Based Haveno Web App**
Gherkin/BDD scenarios describing the behavior of a mobile Tor-based web app that communicates with a Haveno daemon via HTTPS to handle hardware wallet transactions. The app will use the hardware wallet as the sole form of identity, and no additional authorization is required.

Main is for functionality that persists across all pages (e.g. Dis/Connected indicator)

-- NOTE: For simplicity, 'And' and 'Then' are just 'When' in the code

#### **Background:**
**Given** the user has a mobile device with the Tor Browser installed
**And**  there is an HTTPS server running a Haveno daemon configured for securely handling transactions
**And**  the Haveno-Web app is launched and connected to the Internet

#### **Scenario 1: Display successful API connection status**

**Given** the app is initialized
**When** the application attempts to connect with the Haveno API
**Then** it should display a message indicating whether the connection to the Haveno API was successful

#### **Scenario 2: Display unsuccessful API connection status**

**Given** the application attempts to connect with the Haveno API
**Then** it should display a message indicating that the connection to the Haveno API was unsuccessful


#### **Scenario 3: Fetching an XMR address from the Haveno daemon - success**

**Given** the user accesses the Wallet page
**And** it should display the primary xmraddress
**And** it should display the Dashboard page
**And** it should ensure the navigation menu is enabled

#### **Scenario 5b: Fetching an XMR address from the Haveno daemon - failure**

**Given** the user accesses the Wallet page
**And** there is an error retrieving the primary xmraddress
**Then** it should display the 'XMR Wallet Not Connected' indicator in red
**And** it should ensure the navigation menu is disabled
 

#### **Scenario 6: Show a message that the Haveno core app is not yet connected**  

**Given** the web app is opened
**When** the app is unable to connect to Haveno
**Then** the app location should be root
**And** the footer should display "No Haveno version available"  
**And** the Dashboard page should be displayed  
**And** the model should reflect the current page as the Dashboard page
**And** it should ensure the navigation menu is disabled
  

#### **Scenario 7: Show the Haveno core app version in the footer**  

**Given** the web app is opened 
**And** the Monero wallet address is retrieved from Haveno
**Then** the app location should be root 
**And** the Dashboard page should be displayed  
**And** the model should reflect the current page as the Dashboard page  
**And** the footer should display the version number "1.0.7"
**And** it should ensure the navigation menu is enabled


#### **Scenario 13: Checking the Menu Nav Links Work**

**Given** the application is initialized
**And** the user uses the menu to navigate to the Wallet page
**When** the user clicks the Sell navLink in the menu
**Then** it should be possible to use the Menu
**And** the application should be on the Sell page
**And** the menu should be displayed

#### **Scenario 14: Checking the Wallet Page Initialization After Using NavLink to Wallet**

**Given** the application is initialized
**And** the app returns a valid XMR address
**And** the user navigates to another navLink in the menu
**When** the user clicks the Wallet navLink in the menu
**Then** it should be possible to use the Menu
**And** the menu should be displayed
**And** the application should be on the Wallet page with an updated initial wallet model
**And** the available balance should be displayed correctly
**And** the reserved balance should be displayed correctly
**And** the current address from the wallet page model should be displayed







### **Summary**

These scenarios outline the critical interactions between the mobile Chrome-based web app and the API leveraging a Haveno daemon. 
The scenarios cover essential functions like accessing the web app, connecting hardware wallets, initiating and handling transactions, and ensuring secure communication.

