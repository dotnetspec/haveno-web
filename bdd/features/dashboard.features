Hereâ€™s a series of Gherkin/BDD scenarios describing the behavior of a mobile Tor-based web app that communicates with a user-buildable APK (leveraging a Haveno daemon) via HTTPS to handle hardware wallet transactions. The app will use the hardware wallet as the sole form of identity, and no additional authorization is required.

### **Feature: Haveno-Web Dashboard**

#### **Background:**
As per main.features:
**And** the app is open on the Dashboard (initial) page

---

#### **Scenario 1: Accessing the Dashboard page**

**Given** the page is initialized
**And** the hww is connected
**When** the user navigates to the Dashboard page
**Then** the Dashboard page is visible to the user


---

#### **Scenario 2: Display user's on device balance**

**Given** the mobile Tor-based web app is open
**When** the user can view the Dashboard
**Then** the web app should be able to communicate with the backend service running on the APK 
**And** the user can see his balance on the mobile device

#### **Scenario 2: Display user's on device balance**

**Given** the app is open on the Dashboard page
**When** the user can view the Dashboard
**And** the hw wallet is connected
**And** the Monero app is open on the hw wallet
**Then** the user can see his available balance on the mobile device

---

#### **Scenario 3: Secure Communication**

**Given** the user is interacting with the web app over Tor 
**When** the web app communicates with the APK via HTTPS 
**Then** all data exchanged between the web app and APK should be encrypted 
**And** the communication should be secure against eavesdropping and tampering 

---



### **Summary**

These scenarios outline the critical interactions between the mobile Tor-based web app and the user-buildable APK leveraging a Haveno daemon. 
he scenarios cover essential functions like accessing the web app, connecting hardware wallets, initiating and handling transactions, and 
ensuring secure communication.

