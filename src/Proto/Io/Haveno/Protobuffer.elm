{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Io.Haveno.Protobuffer exposing (AccountAgeWitness, AccountAgeWitnessStore, AccountExistsReply, AccountExistsRequest, AchTransferAccountPayload, AckMessage, AddConnectionReply, AddConnectionRequest, AddDataMessage, AddPersistableNetworkPayloadMessage, AddressBalanceInfo, AddressEntry, AddressEntryList, AdvancedCashAccountPayload, Alert, AliPayAccountPayload, AmazonGiftCardAccountPayload, ArbitrationDisputeList, Arbitrator, ArbitratorTrade, Attachment, AustraliaPayidPayload, AutoConfirmSettings, AvailabilityResultWithDescription, BackupAccountReply, BackupAccountRequest, BalancesInfo, BankAccountPayload, BizumAccountPayload, BlockChainExplorer, BtcBalanceInfo, BundleOfEnvelopes, BundleOfEnvelopes_, BuyerAsMakerTrade, BuyerAsTakerTrade, ByteArray, CancelOfferReply, CancelOfferRequest, CapitualAccountPayload, CashAppAccountPayload, CashAtAtmAccountPayload, CashDepositAccountPayload, CelPayAccountPayload, ChangePasswordReply, ChangePasswordRequest, ChaseQuickPayAccountPayload, ChatMessage, CheckConnectionReply, CheckConnectionRequest, CheckConnectionsReply, CheckConnectionsRequest, CloseAccountReply, CloseAccountRequest, CloseConnectionMessage, CompleteTradeReply, CompleteTradeRequest, ConfirmPaymentReceivedReply, ConfirmPaymentReceivedRequest, ConfirmPaymentSentReply, ConfirmPaymentSentRequest, Contract, ContractInfo, Country, CountryBasedPaymentAccountPayload, CreateAccountReply, CreateAccountRequest, CreateCryptoCurrencyPaymentAccountReply, CreateCryptoCurrencyPaymentAccountRequest, CreatePaymentAccountReply, CreatePaymentAccountRequest, CreateXmrTxReply, CreateXmrTxRequest, CryptoCurrency, CryptoCurrencyAccountPayload, Currency, DataAndSeqNrPair, DecryptedMessageWithPubKey, DeleteAccountReply, DeleteAccountRequest, DepositRequest, DepositResponse, DepositsConfirmedMessage, Dispute, DisputeClosedMessage, DisputeOpenedMessage, DisputeResult, DomesticWireTransferAccountPayload, EncryptedConnection, EncryptedConnectionList, F2FAccountPayload, FasterPaymentsAccountPayload, FileTransferPart, Filter, GetAddressBalanceReply, GetAddressBalanceRequest, GetBalancesReply, GetBalancesRequest, GetBestAvailableConnectionReply, GetBestAvailableConnectionRequest, GetChatMessagesReply, GetChatMessagesRequest, GetConnectionReply, GetConnectionRequest, GetConnectionsReply, GetConnectionsRequest, GetCryptoCurrencyPaymentMethodsReply, GetCryptoCurrencyPaymentMethodsRequest, GetDataResponse, GetDisputeReply, GetDisputeRequest, GetDisputesReply, GetDisputesRequest, GetFundingAddressesReply, GetFundingAddressesRequest, GetInventoryRequest, GetInventoryResponse, GetMethodHelpReply, GetMethodHelpRequest, GetMyOfferReply, GetMyOfferRequest, GetMyOffersReply, GetMyOffersRequest, GetOfferReply, GetOfferRequest, GetOffersReply, GetOffersRequest, GetPaymentAccountFormAsJsonReply, GetPaymentAccountFormAsJsonRequest, GetPaymentAccountFormReply, GetPaymentAccountFormRequest, GetPaymentAccountsReply, GetPaymentAccountsRequest, GetPaymentMethodsReply, GetPaymentMethodsRequest, GetPeersRequest, GetPeersResponse, GetTradeReply, GetTradeRequest, GetTradeStatisticsReply, GetTradeStatisticsRequest, GetTradesReply, GetTradesRequest, GetUpdatedDataRequest, GetVersionReply, GetVersionRequest, GetXmrNewSubaddressReply, GetXmrNewSubaddressRequest, GetXmrNodeSettingsReply, GetXmrNodeSettingsRequest, GetXmrPrimaryAddressReply, GetXmrPrimaryAddressRequest, GetXmrSeedReply, GetXmrSeedRequest, GetXmrTxsReply, GetXmrTxsRequest, HalCashAccountPayload, IfscBasedAccountPayload, IgnoredMailboxMap, ImpsAccountPayload, InitMultisigRequest, InitTradeRequest, InstantCryptoCurrencyAccountPayload, InteracETransferAccountPayload, IsAccountOpenReply, IsAccountOpenRequest, IsAppInitializedReply, IsAppInitializedRequest, IsXmrNodeOnlineReply, IsXmrNodeOnlineRequest, JapanBankAccountPayload, LockWalletReply, LockWalletRequest, MailboxItem, MailboxMessageList, MailboxStoragePayload, MapValue, MarketAlertFilter, MarketDepthInfo, MarketDepthReply, MarketDepthRequest, MarketPriceInfo, MarketPriceReply, MarketPriceRequest, MarketPricesReply, MarketPricesRequest, MediatedPayoutTxPublishedMessage, MediatedPayoutTxSignatureMessage, MediationDisputeList, Mediator, MockMailboxPayload, MockPayload, MoneseAccountPayload, MoneyBeamAccountPayload, MoneyGramAccountPayload, NationalBankAccountPayload, NavigationPath, NeftAccountPayload, NequiAccountPayload, NetworkEnvelope, NetworkEnvelope_, NodeAddress, NotificationMessage, OKPayAccountPayload, Offer, OfferAvailabilityRequest, OfferAvailabilityResponse, OfferInfo, OfferPayload, OpenAccountReply, OpenAccountRequest, OpenDisputeReply, OpenDisputeRequest, OpenOffer, PaxumAccountPayload, PayByMailAccountPayload, PayPalAccountPayload, PaymentAccount, PaymentAccountFilter, PaymentAccountForm, PaymentAccountFormField, PaymentAccountList, PaymentAccountPayload, PaymentMethod, PaymentReceivedMessage, PaymentSentMessage, PayseraAccountPayload, PaytmAccountPayload, Peer, PeerList, PerfectMoneyAccountPayload, PersistableEnvelope, PersistableNetworkPayload, Ping, PixAccountPayload, Pong, PopmoneyAccountPayload, PostOfferReply, PostOfferRequest, PreferencesPayload, PrefixedSealedAndSignedMessage, PreliminaryGetDataRequest, PriceAlertFilter, PrivateNotificationMessage, PrivateNotificationPayload, ProcessModel, PromptPayAccountPayload, ProtectedMailboxStorageEntry, ProtectedStorageEntry, PubKeyRing, RawTransactionInput, RefreshOfferMessage, RefundAgent, RefundDisputeList, Region, RegisterDisputeAgentReply, RegisterDisputeAgentRequest, RegisterNotificationListenerRequest, RelayXmrTxReply, RelayXmrTxRequest, RemoveConnectionReply, RemoveConnectionRequest, RemoveDataMessage, RemoveMailboxDataMessage, RemoveWalletPasswordReply, RemoveWalletPasswordRequest, RemovedPayloadsMap, ResolveDisputeReply, ResolveDisputeRequest, RestoreAccountReply, RestoreAccountRequest, RevolutAccountPayload, RtgsAccountPayload, SameBankAccountPayload, SatispayAccountPayload, SealedAndSigned, SellerAsMakerTrade, SellerAsTakerTrade, SendBtcRequest, SendChatMessageReply, SendChatMessageRequest, SendDisputeChatMessageReply, SendDisputeChatMessageRequest, SendNotificationReply, SendNotificationRequest, SepaAccountPayload, SepaInstantAccountPayload, SequenceNumberEntry, SequenceNumberMap, SetAutoSwitchReply, SetAutoSwitchRequest, SetConnectionReply, SetConnectionRequest, SetWalletPasswordReply, SetWalletPasswordRequest, SignContractRequest, SignContractResponse, SignOfferRequest, SignOfferResponse, SignedOffer, SignedOfferList, SignedWitness, SignedWitnessStore, SpecificBanksAccountPayload, StartCheckingConnectionReply, StartCheckingConnectionRequest, StartXmrNodeReply, StartXmrNodeRequest, StopCheckingConnectionReply, StopCheckingConnectionRequest, StopReply, StopRequest, StopXmrNodeReply, StopXmrNodeRequest, StorageEntryWrapper, StoragePayload, StrikeAccountPayload, SwiftAccountPayload, SwishAccountPayload, TakeOfferReply, TakeOfferRequest, TikkieAccountPayload, Tradable, TradableList, Trade, TradeCurrency, TradeInfo, TradePeer, TradeStatistics3, TradeStatistics3Store, TraditionalCurrency, TransferwiseAccountPayload, TransferwiseUsdAccountPayload, USPostalMoneyOrderAccountPayload, UnlockWalletReply, UnlockWalletRequest, UnregisterDisputeAgentReply, UnregisterDisputeAgentRequest, UpholdAccountPayload, UpiAccountPayload, UrlConnection, UserPayload, ValidateFormFieldReply, ValidateFormFieldRequest, VenmoAccountPayload, VerseAccountPayload, WeChatPayAccountPayload, WesternUnionAccountPayload, WithdrawFundsReply, WithdrawFundsRequest, XmrAddressEntry, XmrAddressEntryList, XmrBalanceInfo, XmrDestination, XmrIncomingTransfer, XmrNodeSettings, XmrOutgoingTransfer, XmrTx, ZelleAccountPayload, decodeAccountAgeWitness, decodeAccountAgeWitnessStore, decodeAccountExistsReply, decodeAccountExistsRequest, decodeAchTransferAccountPayload, decodeAckMessage, decodeAddConnectionReply, decodeAddConnectionRequest, decodeAddDataMessage, decodeAddPersistableNetworkPayloadMessage, decodeAddressBalanceInfo, decodeAddressEntry, decodeAddressEntryList, decodeAdvancedCashAccountPayload, decodeAlert, decodeAliPayAccountPayload, decodeAmazonGiftCardAccountPayload, decodeArbitrationDisputeList, decodeArbitrator, decodeArbitratorTrade, decodeAttachment, decodeAustraliaPayidPayload, decodeAutoConfirmSettings, decodeAvailabilityResultWithDescription, decodeBackupAccountReply, decodeBackupAccountRequest, decodeBalancesInfo, decodeBankAccountPayload, decodeBizumAccountPayload, decodeBlockChainExplorer, decodeBtcBalanceInfo, decodeBundleOfEnvelopes, decodeBuyerAsMakerTrade, decodeBuyerAsTakerTrade, decodeByteArray, decodeCancelOfferReply, decodeCancelOfferRequest, decodeCapitualAccountPayload, decodeCashAppAccountPayload, decodeCashAtAtmAccountPayload, decodeCashDepositAccountPayload, decodeCelPayAccountPayload, decodeChangePasswordReply, decodeChangePasswordRequest, decodeChaseQuickPayAccountPayload, decodeChatMessage, decodeCheckConnectionReply, decodeCheckConnectionRequest, decodeCheckConnectionsReply, decodeCheckConnectionsRequest, decodeCloseAccountReply, decodeCloseAccountRequest, decodeCloseConnectionMessage, decodeCompleteTradeReply, decodeCompleteTradeRequest, decodeConfirmPaymentReceivedReply, decodeConfirmPaymentReceivedRequest, decodeConfirmPaymentSentReply, decodeConfirmPaymentSentRequest, decodeContract, decodeContractInfo, decodeCountry, decodeCountryBasedPaymentAccountPayload, decodeCreateAccountReply, decodeCreateAccountRequest, decodeCreateCryptoCurrencyPaymentAccountReply, decodeCreateCryptoCurrencyPaymentAccountRequest, decodeCreatePaymentAccountReply, decodeCreatePaymentAccountRequest, decodeCreateXmrTxReply, decodeCreateXmrTxRequest, decodeCryptoCurrency, decodeCryptoCurrencyAccountPayload, decodeCurrency, decodeDataAndSeqNrPair, decodeDecryptedMessageWithPubKey, decodeDeleteAccountReply, decodeDeleteAccountRequest, decodeDepositRequest, decodeDepositResponse, decodeDepositsConfirmedMessage, decodeDispute, decodeDisputeClosedMessage, decodeDisputeOpenedMessage, decodeDisputeResult, decodeDomesticWireTransferAccountPayload, decodeEncryptedConnection, decodeEncryptedConnectionList, decodeF2FAccountPayload, decodeFasterPaymentsAccountPayload, decodeFileTransferPart, decodeFilter, decodeGetAddressBalanceReply, decodeGetAddressBalanceRequest, decodeGetBalancesReply, decodeGetBalancesRequest, decodeGetBestAvailableConnectionReply, decodeGetBestAvailableConnectionRequest, decodeGetChatMessagesReply, decodeGetChatMessagesRequest, decodeGetConnectionReply, decodeGetConnectionRequest, decodeGetConnectionsReply, decodeGetConnectionsRequest, decodeGetCryptoCurrencyPaymentMethodsReply, decodeGetCryptoCurrencyPaymentMethodsRequest, decodeGetDataResponse, decodeGetDisputeReply, decodeGetDisputeRequest, decodeGetDisputesReply, decodeGetDisputesRequest, decodeGetFundingAddressesReply, decodeGetFundingAddressesRequest, decodeGetInventoryRequest, decodeGetInventoryResponse, decodeGetMethodHelpReply, decodeGetMethodHelpRequest, decodeGetMyOfferReply, decodeGetMyOfferRequest, decodeGetMyOffersReply, decodeGetMyOffersRequest, decodeGetOfferReply, decodeGetOfferRequest, decodeGetOffersReply, decodeGetOffersRequest, decodeGetPaymentAccountFormAsJsonReply, decodeGetPaymentAccountFormAsJsonRequest, decodeGetPaymentAccountFormReply, decodeGetPaymentAccountFormRequest, decodeGetPaymentAccountsReply, decodeGetPaymentAccountsRequest, decodeGetPaymentMethodsReply, decodeGetPaymentMethodsRequest, decodeGetPeersRequest, decodeGetPeersResponse, decodeGetTradeReply, decodeGetTradeRequest, decodeGetTradeStatisticsReply, decodeGetTradeStatisticsRequest, decodeGetTradesReply, decodeGetTradesRequest, decodeGetUpdatedDataRequest, decodeGetVersionReply, decodeGetVersionRequest, decodeGetXmrNewSubaddressReply, decodeGetXmrNewSubaddressRequest, decodeGetXmrNodeSettingsReply, decodeGetXmrNodeSettingsRequest, decodeGetXmrPrimaryAddressReply, decodeGetXmrPrimaryAddressRequest, decodeGetXmrSeedReply, decodeGetXmrSeedRequest, decodeGetXmrTxsReply, decodeGetXmrTxsRequest, decodeHalCashAccountPayload, decodeIfscBasedAccountPayload, decodeIgnoredMailboxMap, decodeImpsAccountPayload, decodeInitMultisigRequest, decodeInitTradeRequest, decodeInstantCryptoCurrencyAccountPayload, decodeInteracETransferAccountPayload, decodeIsAccountOpenReply, decodeIsAccountOpenRequest, decodeIsAppInitializedReply, decodeIsAppInitializedRequest, decodeIsXmrNodeOnlineReply, decodeIsXmrNodeOnlineRequest, decodeJapanBankAccountPayload, decodeLockWalletReply, decodeLockWalletRequest, decodeMailboxItem, decodeMailboxMessageList, decodeMailboxStoragePayload, decodeMapValue, decodeMarketAlertFilter, decodeMarketDepthInfo, decodeMarketDepthReply, decodeMarketDepthRequest, decodeMarketPriceInfo, decodeMarketPriceReply, decodeMarketPriceRequest, decodeMarketPricesReply, decodeMarketPricesRequest, decodeMediatedPayoutTxPublishedMessage, decodeMediatedPayoutTxSignatureMessage, decodeMediationDisputeList, decodeMediator, decodeMockMailboxPayload, decodeMockPayload, decodeMoneseAccountPayload, decodeMoneyBeamAccountPayload, decodeMoneyGramAccountPayload, decodeNationalBankAccountPayload, decodeNavigationPath, decodeNeftAccountPayload, decodeNequiAccountPayload, decodeNetworkEnvelope, decodeNodeAddress, decodeNotificationMessage, decodeOKPayAccountPayload, decodeOffer, decodeOfferAvailabilityRequest, decodeOfferAvailabilityResponse, decodeOfferInfo, decodeOfferPayload, decodeOpenAccountReply, decodeOpenAccountRequest, decodeOpenDisputeReply, decodeOpenDisputeRequest, decodeOpenOffer, decodePaxumAccountPayload, decodePayByMailAccountPayload, decodePayPalAccountPayload, decodePaymentAccount, decodePaymentAccountFilter, decodePaymentAccountForm, decodePaymentAccountFormField, decodePaymentAccountList, decodePaymentAccountPayload, decodePaymentMethod, decodePaymentReceivedMessage, decodePaymentSentMessage, decodePayseraAccountPayload, decodePaytmAccountPayload, decodePeer, decodePeerList, decodePerfectMoneyAccountPayload, decodePersistableEnvelope, decodePersistableNetworkPayload, decodePing, decodePixAccountPayload, decodePong, decodePopmoneyAccountPayload, decodePostOfferReply, decodePostOfferRequest, decodePreferencesPayload, decodePrefixedSealedAndSignedMessage, decodePreliminaryGetDataRequest, decodePriceAlertFilter, decodePrivateNotificationMessage, decodePrivateNotificationPayload, decodeProcessModel, decodePromptPayAccountPayload, decodeProtectedMailboxStorageEntry, decodeProtectedStorageEntry, decodePubKeyRing, decodeRawTransactionInput, decodeRefreshOfferMessage, decodeRefundAgent, decodeRefundDisputeList, decodeRegion, decodeRegisterDisputeAgentReply, decodeRegisterDisputeAgentRequest, decodeRegisterNotificationListenerRequest, decodeRelayXmrTxReply, decodeRelayXmrTxRequest, decodeRemoveConnectionReply, decodeRemoveConnectionRequest, decodeRemoveDataMessage, decodeRemoveMailboxDataMessage, decodeRemoveWalletPasswordReply, decodeRemoveWalletPasswordRequest, decodeRemovedPayloadsMap, decodeResolveDisputeReply, decodeResolveDisputeRequest, decodeRestoreAccountReply, decodeRestoreAccountRequest, decodeRevolutAccountPayload, decodeRtgsAccountPayload, decodeSameBankAccountPayload, decodeSatispayAccountPayload, decodeSealedAndSigned, decodeSellerAsMakerTrade, decodeSellerAsTakerTrade, decodeSendBtcRequest, decodeSendChatMessageReply, decodeSendChatMessageRequest, decodeSendDisputeChatMessageReply, decodeSendDisputeChatMessageRequest, decodeSendNotificationReply, decodeSendNotificationRequest, decodeSepaAccountPayload, decodeSepaInstantAccountPayload, decodeSequenceNumberEntry, decodeSequenceNumberMap, decodeSetAutoSwitchReply, decodeSetAutoSwitchRequest, decodeSetConnectionReply, decodeSetConnectionRequest, decodeSetWalletPasswordReply, decodeSetWalletPasswordRequest, decodeSignContractRequest, decodeSignContractResponse, decodeSignOfferRequest, decodeSignOfferResponse, decodeSignedOffer, decodeSignedOfferList, decodeSignedWitness, decodeSignedWitnessStore, decodeSpecificBanksAccountPayload, decodeStartCheckingConnectionReply, decodeStartCheckingConnectionRequest, decodeStartXmrNodeReply, decodeStartXmrNodeRequest, decodeStopCheckingConnectionReply, decodeStopCheckingConnectionRequest, decodeStopReply, decodeStopRequest, decodeStopXmrNodeReply, decodeStopXmrNodeRequest, decodeStorageEntryWrapper, decodeStoragePayload, decodeStrikeAccountPayload, decodeSwiftAccountPayload, decodeSwishAccountPayload, decodeTakeOfferReply, decodeTakeOfferRequest, decodeTikkieAccountPayload, decodeTradable, decodeTradableList, decodeTrade, decodeTradeCurrency, decodeTradeInfo, decodeTradePeer, decodeTradeStatistics3, decodeTradeStatistics3Store, decodeTraditionalCurrency, decodeTransferwiseAccountPayload, decodeTransferwiseUsdAccountPayload, decodeUSPostalMoneyOrderAccountPayload, decodeUnlockWalletReply, decodeUnlockWalletRequest, decodeUnregisterDisputeAgentReply, decodeUnregisterDisputeAgentRequest, decodeUpholdAccountPayload, decodeUpiAccountPayload, decodeUrlConnection, decodeUserPayload, decodeValidateFormFieldReply, decodeValidateFormFieldRequest, decodeVenmoAccountPayload, decodeVerseAccountPayload, decodeWeChatPayAccountPayload, decodeWesternUnionAccountPayload, decodeWithdrawFundsReply, decodeWithdrawFundsRequest, decodeXmrAddressEntry, decodeXmrAddressEntryList, decodeXmrBalanceInfo, decodeXmrDestination, decodeXmrIncomingTransfer, decodeXmrNodeSettings, decodeXmrOutgoingTransfer, decodeXmrTx, decodeZelleAccountPayload, defaultAccountAgeWitness, defaultAccountAgeWitnessStore, defaultAccountExistsReply, defaultAccountExistsRequest, defaultAchTransferAccountPayload, defaultAckMessage, defaultAddConnectionReply, defaultAddConnectionRequest, defaultAddDataMessage, defaultAddPersistableNetworkPayloadMessage, defaultAddressBalanceInfo, defaultAddressEntry, defaultAddressEntryList, defaultAdvancedCashAccountPayload, defaultAlert, defaultAliPayAccountPayload, defaultAmazonGiftCardAccountPayload, defaultArbitrationDisputeList, defaultArbitrator, defaultArbitratorTrade, defaultAttachment, defaultAustraliaPayidPayload, defaultAutoConfirmSettings, defaultAvailabilityResultWithDescription, defaultBackupAccountReply, defaultBackupAccountRequest, defaultBalancesInfo, defaultBankAccountPayload, defaultBizumAccountPayload, defaultBlockChainExplorer, defaultBtcBalanceInfo, defaultBundleOfEnvelopes, defaultBuyerAsMakerTrade, defaultBuyerAsTakerTrade, defaultByteArray, defaultCancelOfferReply, defaultCancelOfferRequest, defaultCapitualAccountPayload, defaultCashAppAccountPayload, defaultCashAtAtmAccountPayload, defaultCashDepositAccountPayload, defaultCelPayAccountPayload, defaultChangePasswordReply, defaultChangePasswordRequest, defaultChaseQuickPayAccountPayload, defaultChatMessage, defaultCheckConnectionReply, defaultCheckConnectionRequest, defaultCheckConnectionsReply, defaultCheckConnectionsRequest, defaultCloseAccountReply, defaultCloseAccountRequest, defaultCloseConnectionMessage, defaultCompleteTradeReply, defaultCompleteTradeRequest, defaultConfirmPaymentReceivedReply, defaultConfirmPaymentReceivedRequest, defaultConfirmPaymentSentReply, defaultConfirmPaymentSentRequest, defaultContract, defaultContractInfo, defaultCountry, defaultCountryBasedPaymentAccountPayload, defaultCreateAccountReply, defaultCreateAccountRequest, defaultCreateCryptoCurrencyPaymentAccountReply, defaultCreateCryptoCurrencyPaymentAccountRequest, defaultCreatePaymentAccountReply, defaultCreatePaymentAccountRequest, defaultCreateXmrTxReply, defaultCreateXmrTxRequest, defaultCryptoCurrency, defaultCryptoCurrencyAccountPayload, defaultCurrency, defaultDataAndSeqNrPair, defaultDecryptedMessageWithPubKey, defaultDeleteAccountReply, defaultDeleteAccountRequest, defaultDepositRequest, defaultDepositResponse, defaultDepositsConfirmedMessage, defaultDispute, defaultDisputeClosedMessage, defaultDisputeOpenedMessage, defaultDisputeResult, defaultDomesticWireTransferAccountPayload, defaultEncryptedConnection, defaultEncryptedConnectionList, defaultF2FAccountPayload, defaultFasterPaymentsAccountPayload, defaultFileTransferPart, defaultFilter, defaultGetAddressBalanceReply, defaultGetAddressBalanceRequest, defaultGetBalancesReply, defaultGetBalancesRequest, defaultGetBestAvailableConnectionReply, defaultGetBestAvailableConnectionRequest, defaultGetChatMessagesReply, defaultGetChatMessagesRequest, defaultGetConnectionReply, defaultGetConnectionRequest, defaultGetConnectionsReply, defaultGetConnectionsRequest, defaultGetCryptoCurrencyPaymentMethodsReply, defaultGetCryptoCurrencyPaymentMethodsRequest, defaultGetDataResponse, defaultGetDisputeReply, defaultGetDisputeRequest, defaultGetDisputesReply, defaultGetDisputesRequest, defaultGetFundingAddressesReply, defaultGetFundingAddressesRequest, defaultGetInventoryRequest, defaultGetInventoryResponse, defaultGetMethodHelpReply, defaultGetMethodHelpRequest, defaultGetMyOfferReply, defaultGetMyOfferRequest, defaultGetMyOffersReply, defaultGetMyOffersRequest, defaultGetOfferReply, defaultGetOfferRequest, defaultGetOffersReply, defaultGetOffersRequest, defaultGetPaymentAccountFormAsJsonReply, defaultGetPaymentAccountFormAsJsonRequest, defaultGetPaymentAccountFormReply, defaultGetPaymentAccountFormRequest, defaultGetPaymentAccountsReply, defaultGetPaymentAccountsRequest, defaultGetPaymentMethodsReply, defaultGetPaymentMethodsRequest, defaultGetPeersRequest, defaultGetPeersResponse, defaultGetTradeReply, defaultGetTradeRequest, defaultGetTradeStatisticsReply, defaultGetTradeStatisticsRequest, defaultGetTradesReply, defaultGetTradesRequest, defaultGetUpdatedDataRequest, defaultGetVersionReply, defaultGetVersionRequest, defaultGetXmrNewSubaddressReply, defaultGetXmrNewSubaddressRequest, defaultGetXmrNodeSettingsReply, defaultGetXmrNodeSettingsRequest, defaultGetXmrPrimaryAddressReply, defaultGetXmrPrimaryAddressRequest, defaultGetXmrSeedReply, defaultGetXmrSeedRequest, defaultGetXmrTxsReply, defaultGetXmrTxsRequest, defaultHalCashAccountPayload, defaultIfscBasedAccountPayload, defaultIgnoredMailboxMap, defaultImpsAccountPayload, defaultInitMultisigRequest, defaultInitTradeRequest, defaultInstantCryptoCurrencyAccountPayload, defaultInteracETransferAccountPayload, defaultIsAccountOpenReply, defaultIsAccountOpenRequest, defaultIsAppInitializedReply, defaultIsAppInitializedRequest, defaultIsXmrNodeOnlineReply, defaultIsXmrNodeOnlineRequest, defaultJapanBankAccountPayload, defaultLockWalletReply, defaultLockWalletRequest, defaultMailboxItem, defaultMailboxMessageList, defaultMailboxStoragePayload, defaultMapValue, defaultMarketAlertFilter, defaultMarketDepthInfo, defaultMarketDepthReply, defaultMarketDepthRequest, defaultMarketPriceInfo, defaultMarketPriceReply, defaultMarketPriceRequest, defaultMarketPricesReply, defaultMarketPricesRequest, defaultMediatedPayoutTxPublishedMessage, defaultMediatedPayoutTxSignatureMessage, defaultMediationDisputeList, defaultMediator, defaultMockMailboxPayload, defaultMockPayload, defaultMoneseAccountPayload, defaultMoneyBeamAccountPayload, defaultMoneyGramAccountPayload, defaultNationalBankAccountPayload, defaultNavigationPath, defaultNeftAccountPayload, defaultNequiAccountPayload, defaultNetworkEnvelope, defaultNodeAddress, defaultNotificationMessage, defaultOKPayAccountPayload, defaultOffer, defaultOfferAvailabilityRequest, defaultOfferAvailabilityResponse, defaultOfferInfo, defaultOfferPayload, defaultOpenAccountReply, defaultOpenAccountRequest, defaultOpenDisputeReply, defaultOpenDisputeRequest, defaultOpenOffer, defaultPaxumAccountPayload, defaultPayByMailAccountPayload, defaultPayPalAccountPayload, defaultPaymentAccount, defaultPaymentAccountFilter, defaultPaymentAccountForm, defaultPaymentAccountFormField, defaultPaymentAccountList, defaultPaymentAccountPayload, defaultPaymentMethod, defaultPaymentReceivedMessage, defaultPaymentSentMessage, defaultPayseraAccountPayload, defaultPaytmAccountPayload, defaultPeer, defaultPeerList, defaultPerfectMoneyAccountPayload, defaultPersistableEnvelope, defaultPersistableNetworkPayload, defaultPing, defaultPixAccountPayload, defaultPong, defaultPopmoneyAccountPayload, defaultPostOfferReply, defaultPostOfferRequest, defaultPreferencesPayload, defaultPrefixedSealedAndSignedMessage, defaultPreliminaryGetDataRequest, defaultPriceAlertFilter, defaultPrivateNotificationMessage, defaultPrivateNotificationPayload, defaultProcessModel, defaultPromptPayAccountPayload, defaultProtectedMailboxStorageEntry, defaultProtectedStorageEntry, defaultPubKeyRing, defaultRawTransactionInput, defaultRefreshOfferMessage, defaultRefundAgent, defaultRefundDisputeList, defaultRegion, defaultRegisterDisputeAgentReply, defaultRegisterDisputeAgentRequest, defaultRegisterNotificationListenerRequest, defaultRelayXmrTxReply, defaultRelayXmrTxRequest, defaultRemoveConnectionReply, defaultRemoveConnectionRequest, defaultRemoveDataMessage, defaultRemoveMailboxDataMessage, defaultRemoveWalletPasswordReply, defaultRemoveWalletPasswordRequest, defaultRemovedPayloadsMap, defaultResolveDisputeReply, defaultResolveDisputeRequest, defaultRestoreAccountReply, defaultRestoreAccountRequest, defaultRevolutAccountPayload, defaultRtgsAccountPayload, defaultSameBankAccountPayload, defaultSatispayAccountPayload, defaultSealedAndSigned, defaultSellerAsMakerTrade, defaultSellerAsTakerTrade, defaultSendBtcRequest, defaultSendChatMessageReply, defaultSendChatMessageRequest, defaultSendDisputeChatMessageReply, defaultSendDisputeChatMessageRequest, defaultSendNotificationReply, defaultSendNotificationRequest, defaultSepaAccountPayload, defaultSepaInstantAccountPayload, defaultSequenceNumberEntry, defaultSequenceNumberMap, defaultSetAutoSwitchReply, defaultSetAutoSwitchRequest, defaultSetConnectionReply, defaultSetConnectionRequest, defaultSetWalletPasswordReply, defaultSetWalletPasswordRequest, defaultSignContractRequest, defaultSignContractResponse, defaultSignOfferRequest, defaultSignOfferResponse, defaultSignedOffer, defaultSignedOfferList, defaultSignedWitness, defaultSignedWitnessStore, defaultSpecificBanksAccountPayload, defaultStartCheckingConnectionReply, defaultStartCheckingConnectionRequest, defaultStartXmrNodeReply, defaultStartXmrNodeRequest, defaultStopCheckingConnectionReply, defaultStopCheckingConnectionRequest, defaultStopReply, defaultStopRequest, defaultStopXmrNodeReply, defaultStopXmrNodeRequest, defaultStorageEntryWrapper, defaultStoragePayload, defaultStrikeAccountPayload, defaultSwiftAccountPayload, defaultSwishAccountPayload, defaultTakeOfferReply, defaultTakeOfferRequest, defaultTikkieAccountPayload, defaultTradable, defaultTradableList, defaultTrade, defaultTradeCurrency, defaultTradeInfo, defaultTradePeer, defaultTradeStatistics3, defaultTradeStatistics3Store, defaultTraditionalCurrency, defaultTransferwiseAccountPayload, defaultTransferwiseUsdAccountPayload, defaultUSPostalMoneyOrderAccountPayload, defaultUnlockWalletReply, defaultUnlockWalletRequest, defaultUnregisterDisputeAgentReply, defaultUnregisterDisputeAgentRequest, defaultUpholdAccountPayload, defaultUpiAccountPayload, defaultUrlConnection, defaultUserPayload, defaultValidateFormFieldReply, defaultValidateFormFieldRequest, defaultVenmoAccountPayload, defaultVerseAccountPayload, defaultWeChatPayAccountPayload, defaultWesternUnionAccountPayload, defaultWithdrawFundsReply, defaultWithdrawFundsRequest, defaultXmrAddressEntry, defaultXmrAddressEntryList, defaultXmrBalanceInfo, defaultXmrDestination, defaultXmrIncomingTransfer, defaultXmrNodeSettings, defaultXmrOutgoingTransfer, defaultXmrTx, defaultZelleAccountPayload, encodeAccountAgeWitness, encodeAccountAgeWitnessStore, encodeAccountExistsReply, encodeAccountExistsRequest, encodeAchTransferAccountPayload, encodeAckMessage, encodeAddConnectionReply, encodeAddConnectionRequest, encodeAddDataMessage, encodeAddPersistableNetworkPayloadMessage, encodeAddressBalanceInfo, encodeAddressEntry, encodeAddressEntryList, encodeAdvancedCashAccountPayload, encodeAlert, encodeAliPayAccountPayload, encodeAmazonGiftCardAccountPayload, encodeArbitrationDisputeList, encodeArbitrator, encodeArbitratorTrade, encodeAttachment, encodeAustraliaPayidPayload, encodeAutoConfirmSettings, encodeAvailabilityResultWithDescription, encodeBackupAccountReply, encodeBackupAccountRequest, encodeBalancesInfo, encodeBankAccountPayload, encodeBizumAccountPayload, encodeBlockChainExplorer, encodeBtcBalanceInfo, encodeBundleOfEnvelopes, encodeBuyerAsMakerTrade, encodeBuyerAsTakerTrade, encodeByteArray, encodeCancelOfferReply, encodeCancelOfferRequest, encodeCapitualAccountPayload, encodeCashAppAccountPayload, encodeCashAtAtmAccountPayload, encodeCashDepositAccountPayload, encodeCelPayAccountPayload, encodeChangePasswordReply, encodeChangePasswordRequest, encodeChaseQuickPayAccountPayload, encodeChatMessage, encodeCheckConnectionReply, encodeCheckConnectionRequest, encodeCheckConnectionsReply, encodeCheckConnectionsRequest, encodeCloseAccountReply, encodeCloseAccountRequest, encodeCloseConnectionMessage, encodeCompleteTradeReply, encodeCompleteTradeRequest, encodeConfirmPaymentReceivedReply, encodeConfirmPaymentReceivedRequest, encodeConfirmPaymentSentReply, encodeConfirmPaymentSentRequest, encodeContract, encodeContractInfo, encodeCountry, encodeCountryBasedPaymentAccountPayload, encodeCreateAccountReply, encodeCreateAccountRequest, encodeCreateCryptoCurrencyPaymentAccountReply, encodeCreateCryptoCurrencyPaymentAccountRequest, encodeCreatePaymentAccountReply, encodeCreatePaymentAccountRequest, encodeCreateXmrTxReply, encodeCreateXmrTxRequest, encodeCryptoCurrency, encodeCryptoCurrencyAccountPayload, encodeCurrency, encodeDataAndSeqNrPair, encodeDecryptedMessageWithPubKey, encodeDeleteAccountReply, encodeDeleteAccountRequest, encodeDepositRequest, encodeDepositResponse, encodeDepositsConfirmedMessage, encodeDispute, encodeDisputeClosedMessage, encodeDisputeOpenedMessage, encodeDisputeResult, encodeDomesticWireTransferAccountPayload, encodeEncryptedConnection, encodeEncryptedConnectionList, encodeF2FAccountPayload, encodeFasterPaymentsAccountPayload, encodeFileTransferPart, encodeFilter, encodeGetAddressBalanceReply, encodeGetAddressBalanceRequest, encodeGetBalancesReply, encodeGetBalancesRequest, encodeGetBestAvailableConnectionReply, encodeGetBestAvailableConnectionRequest, encodeGetChatMessagesReply, encodeGetChatMessagesRequest, encodeGetConnectionReply, encodeGetConnectionRequest, encodeGetConnectionsReply, encodeGetConnectionsRequest, encodeGetCryptoCurrencyPaymentMethodsReply, encodeGetCryptoCurrencyPaymentMethodsRequest, encodeGetDataResponse, encodeGetDisputeReply, encodeGetDisputeRequest, encodeGetDisputesReply, encodeGetDisputesRequest, encodeGetFundingAddressesReply, encodeGetFundingAddressesRequest, encodeGetInventoryRequest, encodeGetInventoryResponse, encodeGetMethodHelpReply, encodeGetMethodHelpRequest, encodeGetMyOfferReply, encodeGetMyOfferRequest, encodeGetMyOffersReply, encodeGetMyOffersRequest, encodeGetOfferReply, encodeGetOfferRequest, encodeGetOffersReply, encodeGetOffersRequest, encodeGetPaymentAccountFormAsJsonReply, encodeGetPaymentAccountFormAsJsonRequest, encodeGetPaymentAccountFormReply, encodeGetPaymentAccountFormRequest, encodeGetPaymentAccountsReply, encodeGetPaymentAccountsRequest, encodeGetPaymentMethodsReply, encodeGetPaymentMethodsRequest, encodeGetPeersRequest, encodeGetPeersResponse, encodeGetTradeReply, encodeGetTradeRequest, encodeGetTradeStatisticsReply, encodeGetTradeStatisticsRequest, encodeGetTradesReply, encodeGetTradesRequest, encodeGetUpdatedDataRequest, encodeGetVersionReply, encodeGetVersionRequest, encodeGetXmrNewSubaddressReply, encodeGetXmrNewSubaddressRequest, encodeGetXmrNodeSettingsReply, encodeGetXmrNodeSettingsRequest, encodeGetXmrPrimaryAddressReply, encodeGetXmrPrimaryAddressRequest, encodeGetXmrSeedReply, encodeGetXmrSeedRequest, encodeGetXmrTxsReply, encodeGetXmrTxsRequest, encodeHalCashAccountPayload, encodeIfscBasedAccountPayload, encodeIgnoredMailboxMap, encodeImpsAccountPayload, encodeInitMultisigRequest, encodeInitTradeRequest, encodeInstantCryptoCurrencyAccountPayload, encodeInteracETransferAccountPayload, encodeIsAccountOpenReply, encodeIsAccountOpenRequest, encodeIsAppInitializedReply, encodeIsAppInitializedRequest, encodeIsXmrNodeOnlineReply, encodeIsXmrNodeOnlineRequest, encodeJapanBankAccountPayload, encodeLockWalletReply, encodeLockWalletRequest, encodeMailboxItem, encodeMailboxMessageList, encodeMailboxStoragePayload, encodeMapValue, encodeMarketAlertFilter, encodeMarketDepthInfo, encodeMarketDepthReply, encodeMarketDepthRequest, encodeMarketPriceInfo, encodeMarketPriceReply, encodeMarketPriceRequest, encodeMarketPricesReply, encodeMarketPricesRequest, encodeMediatedPayoutTxPublishedMessage, encodeMediatedPayoutTxSignatureMessage, encodeMediationDisputeList, encodeMediator, encodeMockMailboxPayload, encodeMockPayload, encodeMoneseAccountPayload, encodeMoneyBeamAccountPayload, encodeMoneyGramAccountPayload, encodeNationalBankAccountPayload, encodeNavigationPath, encodeNeftAccountPayload, encodeNequiAccountPayload, encodeNetworkEnvelope, encodeNodeAddress, encodeNotificationMessage, encodeOKPayAccountPayload, encodeOffer, encodeOfferAvailabilityRequest, encodeOfferAvailabilityResponse, encodeOfferInfo, encodeOfferPayload, encodeOpenAccountReply, encodeOpenAccountRequest, encodeOpenDisputeReply, encodeOpenDisputeRequest, encodeOpenOffer, encodePaxumAccountPayload, encodePayByMailAccountPayload, encodePayPalAccountPayload, encodePaymentAccount, encodePaymentAccountFilter, encodePaymentAccountForm, encodePaymentAccountFormField, encodePaymentAccountList, encodePaymentAccountPayload, encodePaymentMethod, encodePaymentReceivedMessage, encodePaymentSentMessage, encodePayseraAccountPayload, encodePaytmAccountPayload, encodePeer, encodePeerList, encodePerfectMoneyAccountPayload, encodePersistableEnvelope, encodePersistableNetworkPayload, encodePing, encodePixAccountPayload, encodePong, encodePopmoneyAccountPayload, encodePostOfferReply, encodePostOfferRequest, encodePreferencesPayload, encodePrefixedSealedAndSignedMessage, encodePreliminaryGetDataRequest, encodePriceAlertFilter, encodePrivateNotificationMessage, encodePrivateNotificationPayload, encodeProcessModel, encodePromptPayAccountPayload, encodeProtectedMailboxStorageEntry, encodeProtectedStorageEntry, encodePubKeyRing, encodeRawTransactionInput, encodeRefreshOfferMessage, encodeRefundAgent, encodeRefundDisputeList, encodeRegion, encodeRegisterDisputeAgentReply, encodeRegisterDisputeAgentRequest, encodeRegisterNotificationListenerRequest, encodeRelayXmrTxReply, encodeRelayXmrTxRequest, encodeRemoveConnectionReply, encodeRemoveConnectionRequest, encodeRemoveDataMessage, encodeRemoveMailboxDataMessage, encodeRemoveWalletPasswordReply, encodeRemoveWalletPasswordRequest, encodeRemovedPayloadsMap, encodeResolveDisputeReply, encodeResolveDisputeRequest, encodeRestoreAccountReply, encodeRestoreAccountRequest, encodeRevolutAccountPayload, encodeRtgsAccountPayload, encodeSameBankAccountPayload, encodeSatispayAccountPayload, encodeSealedAndSigned, encodeSellerAsMakerTrade, encodeSellerAsTakerTrade, encodeSendBtcRequest, encodeSendChatMessageReply, encodeSendChatMessageRequest, encodeSendDisputeChatMessageReply, encodeSendDisputeChatMessageRequest, encodeSendNotificationReply, encodeSendNotificationRequest, encodeSepaAccountPayload, encodeSepaInstantAccountPayload, encodeSequenceNumberEntry, encodeSequenceNumberMap, encodeSetAutoSwitchReply, encodeSetAutoSwitchRequest, encodeSetConnectionReply, encodeSetConnectionRequest, encodeSetWalletPasswordReply, encodeSetWalletPasswordRequest, encodeSignContractRequest, encodeSignContractResponse, encodeSignOfferRequest, encodeSignOfferResponse, encodeSignedOffer, encodeSignedOfferList, encodeSignedWitness, encodeSignedWitnessStore, encodeSpecificBanksAccountPayload, encodeStartCheckingConnectionReply, encodeStartCheckingConnectionRequest, encodeStartXmrNodeReply, encodeStartXmrNodeRequest, encodeStopCheckingConnectionReply, encodeStopCheckingConnectionRequest, encodeStopReply, encodeStopRequest, encodeStopXmrNodeReply, encodeStopXmrNodeRequest, encodeStorageEntryWrapper, encodeStoragePayload, encodeStrikeAccountPayload, encodeSwiftAccountPayload, encodeSwishAccountPayload, encodeTakeOfferReply, encodeTakeOfferRequest, encodeTikkieAccountPayload, encodeTradable, encodeTradableList, encodeTrade, encodeTradeCurrency, encodeTradeInfo, encodeTradePeer, encodeTradeStatistics3, encodeTradeStatistics3Store, encodeTraditionalCurrency, encodeTransferwiseAccountPayload, encodeTransferwiseUsdAccountPayload, encodeUSPostalMoneyOrderAccountPayload, encodeUnlockWalletReply, encodeUnlockWalletRequest, encodeUnregisterDisputeAgentReply, encodeUnregisterDisputeAgentRequest, encodeUpholdAccountPayload, encodeUpiAccountPayload, encodeUrlConnection, encodeUserPayload, encodeValidateFormFieldReply, encodeValidateFormFieldRequest, encodeVenmoAccountPayload, encodeVerseAccountPayload, encodeWeChatPayAccountPayload, encodeWesternUnionAccountPayload, encodeWithdrawFundsReply, encodeWithdrawFundsRequest, encodeXmrAddressEntry, encodeXmrAddressEntryList, encodeXmrBalanceInfo, encodeXmrDestination, encodeXmrIncomingTransfer, encodeXmrNodeSettings, encodeXmrOutgoingTransfer, encodeXmrTx, encodeZelleAccountPayload, fieldNumbersAccountAgeWitness, fieldNumbersAccountAgeWitnessStore, fieldNumbersAccountExistsReply, fieldNumbersAccountExistsRequest, fieldNumbersAchTransferAccountPayload, fieldNumbersAckMessage, fieldNumbersAddConnectionReply, fieldNumbersAddConnectionRequest, fieldNumbersAddDataMessage, fieldNumbersAddPersistableNetworkPayloadMessage, fieldNumbersAddressBalanceInfo, fieldNumbersAddressEntry, fieldNumbersAddressEntryList, fieldNumbersAdvancedCashAccountPayload, fieldNumbersAlert, fieldNumbersAliPayAccountPayload, fieldNumbersAmazonGiftCardAccountPayload, fieldNumbersArbitrationDisputeList, fieldNumbersArbitrator, fieldNumbersArbitratorTrade, fieldNumbersAttachment, fieldNumbersAustraliaPayidPayload, fieldNumbersAutoConfirmSettings, fieldNumbersAvailabilityResultWithDescription, fieldNumbersBackupAccountReply, fieldNumbersBackupAccountRequest, fieldNumbersBalancesInfo, fieldNumbersBankAccountPayload, fieldNumbersBizumAccountPayload, fieldNumbersBlockChainExplorer, fieldNumbersBtcBalanceInfo, fieldNumbersBundleOfEnvelopes, fieldNumbersBuyerAsMakerTrade, fieldNumbersBuyerAsTakerTrade, fieldNumbersByteArray, fieldNumbersCancelOfferReply, fieldNumbersCancelOfferRequest, fieldNumbersCapitualAccountPayload, fieldNumbersCashAppAccountPayload, fieldNumbersCashAtAtmAccountPayload, fieldNumbersCashDepositAccountPayload, fieldNumbersCelPayAccountPayload, fieldNumbersChangePasswordReply, fieldNumbersChangePasswordRequest, fieldNumbersChaseQuickPayAccountPayload, fieldNumbersChatMessage, fieldNumbersCheckConnectionReply, fieldNumbersCheckConnectionRequest, fieldNumbersCheckConnectionsReply, fieldNumbersCheckConnectionsRequest, fieldNumbersCloseAccountReply, fieldNumbersCloseAccountRequest, fieldNumbersCloseConnectionMessage, fieldNumbersCompleteTradeReply, fieldNumbersCompleteTradeRequest, fieldNumbersConfirmPaymentReceivedReply, fieldNumbersConfirmPaymentReceivedRequest, fieldNumbersConfirmPaymentSentReply, fieldNumbersConfirmPaymentSentRequest, fieldNumbersContract, fieldNumbersContractInfo, fieldNumbersCountry, fieldNumbersCountryBasedPaymentAccountPayload, fieldNumbersCreateAccountReply, fieldNumbersCreateAccountRequest, fieldNumbersCreateCryptoCurrencyPaymentAccountReply, fieldNumbersCreateCryptoCurrencyPaymentAccountRequest, fieldNumbersCreatePaymentAccountReply, fieldNumbersCreatePaymentAccountRequest, fieldNumbersCreateXmrTxReply, fieldNumbersCreateXmrTxRequest, fieldNumbersCryptoCurrency, fieldNumbersCryptoCurrencyAccountPayload, fieldNumbersCurrency, fieldNumbersDataAndSeqNrPair, fieldNumbersDecryptedMessageWithPubKey, fieldNumbersDeleteAccountReply, fieldNumbersDeleteAccountRequest, fieldNumbersDepositRequest, fieldNumbersDepositResponse, fieldNumbersDepositsConfirmedMessage, fieldNumbersDispute, fieldNumbersDisputeClosedMessage, fieldNumbersDisputeOpenedMessage, fieldNumbersDisputeResult, fieldNumbersDomesticWireTransferAccountPayload, fieldNumbersEncryptedConnection, fieldNumbersEncryptedConnectionList, fieldNumbersF2FAccountPayload, fieldNumbersFasterPaymentsAccountPayload, fieldNumbersFileTransferPart, fieldNumbersFilter, fieldNumbersGetAddressBalanceReply, fieldNumbersGetAddressBalanceRequest, fieldNumbersGetBalancesReply, fieldNumbersGetBalancesRequest, fieldNumbersGetBestAvailableConnectionReply, fieldNumbersGetBestAvailableConnectionRequest, fieldNumbersGetChatMessagesReply, fieldNumbersGetChatMessagesRequest, fieldNumbersGetConnectionReply, fieldNumbersGetConnectionRequest, fieldNumbersGetConnectionsReply, fieldNumbersGetConnectionsRequest, fieldNumbersGetCryptoCurrencyPaymentMethodsReply, fieldNumbersGetCryptoCurrencyPaymentMethodsRequest, fieldNumbersGetDataResponse, fieldNumbersGetDisputeReply, fieldNumbersGetDisputeRequest, fieldNumbersGetDisputesReply, fieldNumbersGetDisputesRequest, fieldNumbersGetFundingAddressesReply, fieldNumbersGetFundingAddressesRequest, fieldNumbersGetInventoryRequest, fieldNumbersGetInventoryResponse, fieldNumbersGetMethodHelpReply, fieldNumbersGetMethodHelpRequest, fieldNumbersGetMyOfferReply, fieldNumbersGetMyOfferRequest, fieldNumbersGetMyOffersReply, fieldNumbersGetMyOffersRequest, fieldNumbersGetOfferReply, fieldNumbersGetOfferRequest, fieldNumbersGetOffersReply, fieldNumbersGetOffersRequest, fieldNumbersGetPaymentAccountFormAsJsonReply, fieldNumbersGetPaymentAccountFormAsJsonRequest, fieldNumbersGetPaymentAccountFormReply, fieldNumbersGetPaymentAccountFormRequest, fieldNumbersGetPaymentAccountsReply, fieldNumbersGetPaymentAccountsRequest, fieldNumbersGetPaymentMethodsReply, fieldNumbersGetPaymentMethodsRequest, fieldNumbersGetPeersRequest, fieldNumbersGetPeersResponse, fieldNumbersGetTradeReply, fieldNumbersGetTradeRequest, fieldNumbersGetTradeStatisticsReply, fieldNumbersGetTradeStatisticsRequest, fieldNumbersGetTradesReply, fieldNumbersGetTradesRequest, fieldNumbersGetUpdatedDataRequest, fieldNumbersGetVersionReply, fieldNumbersGetVersionRequest, fieldNumbersGetXmrNewSubaddressReply, fieldNumbersGetXmrNewSubaddressRequest, fieldNumbersGetXmrNodeSettingsReply, fieldNumbersGetXmrNodeSettingsRequest, fieldNumbersGetXmrPrimaryAddressReply, fieldNumbersGetXmrPrimaryAddressRequest, fieldNumbersGetXmrSeedReply, fieldNumbersGetXmrSeedRequest, fieldNumbersGetXmrTxsReply, fieldNumbersGetXmrTxsRequest, fieldNumbersHalCashAccountPayload, fieldNumbersIfscBasedAccountPayload, fieldNumbersIgnoredMailboxMap, fieldNumbersImpsAccountPayload, fieldNumbersInitMultisigRequest, fieldNumbersInitTradeRequest, fieldNumbersInstantCryptoCurrencyAccountPayload, fieldNumbersInteracETransferAccountPayload, fieldNumbersIsAccountOpenReply, fieldNumbersIsAccountOpenRequest, fieldNumbersIsAppInitializedReply, fieldNumbersIsAppInitializedRequest, fieldNumbersIsXmrNodeOnlineReply, fieldNumbersIsXmrNodeOnlineRequest, fieldNumbersJapanBankAccountPayload, fieldNumbersLockWalletReply, fieldNumbersLockWalletRequest, fieldNumbersMailboxItem, fieldNumbersMailboxMessageList, fieldNumbersMailboxStoragePayload, fieldNumbersMapValue, fieldNumbersMarketAlertFilter, fieldNumbersMarketDepthInfo, fieldNumbersMarketDepthReply, fieldNumbersMarketDepthRequest, fieldNumbersMarketPriceInfo, fieldNumbersMarketPriceReply, fieldNumbersMarketPriceRequest, fieldNumbersMarketPricesReply, fieldNumbersMarketPricesRequest, fieldNumbersMediatedPayoutTxPublishedMessage, fieldNumbersMediatedPayoutTxSignatureMessage, fieldNumbersMediationDisputeList, fieldNumbersMediator, fieldNumbersMockMailboxPayload, fieldNumbersMockPayload, fieldNumbersMoneseAccountPayload, fieldNumbersMoneyBeamAccountPayload, fieldNumbersMoneyGramAccountPayload, fieldNumbersNationalBankAccountPayload, fieldNumbersNavigationPath, fieldNumbersNeftAccountPayload, fieldNumbersNequiAccountPayload, fieldNumbersNetworkEnvelope, fieldNumbersNodeAddress, fieldNumbersNotificationMessage, fieldNumbersOKPayAccountPayload, fieldNumbersOffer, fieldNumbersOfferAvailabilityRequest, fieldNumbersOfferAvailabilityResponse, fieldNumbersOfferInfo, fieldNumbersOfferPayload, fieldNumbersOpenAccountReply, fieldNumbersOpenAccountRequest, fieldNumbersOpenDisputeReply, fieldNumbersOpenDisputeRequest, fieldNumbersOpenOffer, fieldNumbersPaxumAccountPayload, fieldNumbersPayByMailAccountPayload, fieldNumbersPayPalAccountPayload, fieldNumbersPaymentAccount, fieldNumbersPaymentAccountFilter, fieldNumbersPaymentAccountForm, fieldNumbersPaymentAccountFormField, fieldNumbersPaymentAccountList, fieldNumbersPaymentAccountPayload, fieldNumbersPaymentMethod, fieldNumbersPaymentReceivedMessage, fieldNumbersPaymentSentMessage, fieldNumbersPayseraAccountPayload, fieldNumbersPaytmAccountPayload, fieldNumbersPeer, fieldNumbersPeerList, fieldNumbersPerfectMoneyAccountPayload, fieldNumbersPersistableEnvelope, fieldNumbersPersistableNetworkPayload, fieldNumbersPing, fieldNumbersPixAccountPayload, fieldNumbersPong, fieldNumbersPopmoneyAccountPayload, fieldNumbersPostOfferReply, fieldNumbersPostOfferRequest, fieldNumbersPreferencesPayload, fieldNumbersPrefixedSealedAndSignedMessage, fieldNumbersPreliminaryGetDataRequest, fieldNumbersPriceAlertFilter, fieldNumbersPrivateNotificationMessage, fieldNumbersPrivateNotificationPayload, fieldNumbersProcessModel, fieldNumbersPromptPayAccountPayload, fieldNumbersProtectedMailboxStorageEntry, fieldNumbersProtectedStorageEntry, fieldNumbersPubKeyRing, fieldNumbersRawTransactionInput, fieldNumbersRefreshOfferMessage, fieldNumbersRefundAgent, fieldNumbersRefundDisputeList, fieldNumbersRegion, fieldNumbersRegisterDisputeAgentReply, fieldNumbersRegisterDisputeAgentRequest, fieldNumbersRegisterNotificationListenerRequest, fieldNumbersRelayXmrTxReply, fieldNumbersRelayXmrTxRequest, fieldNumbersRemoveConnectionReply, fieldNumbersRemoveConnectionRequest, fieldNumbersRemoveDataMessage, fieldNumbersRemoveMailboxDataMessage, fieldNumbersRemoveWalletPasswordReply, fieldNumbersRemoveWalletPasswordRequest, fieldNumbersRemovedPayloadsMap, fieldNumbersResolveDisputeReply, fieldNumbersResolveDisputeRequest, fieldNumbersRestoreAccountReply, fieldNumbersRestoreAccountRequest, fieldNumbersRevolutAccountPayload, fieldNumbersRtgsAccountPayload, fieldNumbersSameBankAccountPayload, fieldNumbersSatispayAccountPayload, fieldNumbersSealedAndSigned, fieldNumbersSellerAsMakerTrade, fieldNumbersSellerAsTakerTrade, fieldNumbersSendBtcRequest, fieldNumbersSendChatMessageReply, fieldNumbersSendChatMessageRequest, fieldNumbersSendDisputeChatMessageReply, fieldNumbersSendDisputeChatMessageRequest, fieldNumbersSendNotificationReply, fieldNumbersSendNotificationRequest, fieldNumbersSepaAccountPayload, fieldNumbersSepaInstantAccountPayload, fieldNumbersSequenceNumberEntry, fieldNumbersSequenceNumberMap, fieldNumbersSetAutoSwitchReply, fieldNumbersSetAutoSwitchRequest, fieldNumbersSetConnectionReply, fieldNumbersSetConnectionRequest, fieldNumbersSetWalletPasswordReply, fieldNumbersSetWalletPasswordRequest, fieldNumbersSignContractRequest, fieldNumbersSignContractResponse, fieldNumbersSignOfferRequest, fieldNumbersSignOfferResponse, fieldNumbersSignedOffer, fieldNumbersSignedOfferList, fieldNumbersSignedWitness, fieldNumbersSignedWitnessStore, fieldNumbersSpecificBanksAccountPayload, fieldNumbersStartCheckingConnectionReply, fieldNumbersStartCheckingConnectionRequest, fieldNumbersStartXmrNodeReply, fieldNumbersStartXmrNodeRequest, fieldNumbersStopCheckingConnectionReply, fieldNumbersStopCheckingConnectionRequest, fieldNumbersStopReply, fieldNumbersStopRequest, fieldNumbersStopXmrNodeReply, fieldNumbersStopXmrNodeRequest, fieldNumbersStorageEntryWrapper, fieldNumbersStoragePayload, fieldNumbersStrikeAccountPayload, fieldNumbersSwiftAccountPayload, fieldNumbersSwishAccountPayload, fieldNumbersTakeOfferReply, fieldNumbersTakeOfferRequest, fieldNumbersTikkieAccountPayload, fieldNumbersTradable, fieldNumbersTradableList, fieldNumbersTrade, fieldNumbersTradeCurrency, fieldNumbersTradeInfo, fieldNumbersTradePeer, fieldNumbersTradeStatistics3, fieldNumbersTradeStatistics3Store, fieldNumbersTraditionalCurrency, fieldNumbersTransferwiseAccountPayload, fieldNumbersTransferwiseUsdAccountPayload, fieldNumbersUSPostalMoneyOrderAccountPayload, fieldNumbersUnlockWalletReply, fieldNumbersUnlockWalletRequest, fieldNumbersUnregisterDisputeAgentReply, fieldNumbersUnregisterDisputeAgentRequest, fieldNumbersUpholdAccountPayload, fieldNumbersUpiAccountPayload, fieldNumbersUrlConnection, fieldNumbersUserPayload, fieldNumbersValidateFormFieldReply, fieldNumbersValidateFormFieldRequest, fieldNumbersVenmoAccountPayload, fieldNumbersVerseAccountPayload, fieldNumbersWeChatPayAccountPayload, fieldNumbersWesternUnionAccountPayload, fieldNumbersWithdrawFundsReply, fieldNumbersWithdrawFundsRequest, fieldNumbersXmrAddressEntry, fieldNumbersXmrAddressEntryList, fieldNumbersXmrBalanceInfo, fieldNumbersXmrDestination, fieldNumbersXmrIncomingTransfer, fieldNumbersXmrNodeSettings, fieldNumbersXmrOutgoingTransfer, fieldNumbersXmrTx, fieldNumbersZelleAccountPayload, unwrapBundleOfEnvelopes, unwrapNetworkEnvelope, wrapBundleOfEnvelopes, wrapNetworkEnvelope)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 4.0.3
- `protoc` 3.12.4
- the following specification files: `grpc.proto, pb.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version latest or higher.


 This file is part of Bisq.

 Bisq is free software: you can redistribute it and/or modify it
 under the terms of the GNU Affero General Public License as published by
 the Free Software Foundation, either version 3 of the License, or (at
 your option) any later version.

 Bisq is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
 License for more details.

 You should have received a copy of the GNU Affero General Public License
 along with Bisq. If not, see <http://www.gnu.org/licenses/>.



 This file is part of Haveno.

 Haveno is free software: you can redistribute it and/or modify it
 under the terms of the GNU Affero General Public License as published by
 the Free Software Foundation, either version 3 of the License, or (at
 your option) any later version.

 Haveno is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
 License for more details.

 You should have received a copy of the GNU Affero General Public License
 along with Haveno. If not, see <http://www.gnu.org/licenses/>.


@docs AccountAgeWitness, AccountAgeWitnessStore, AccountExistsReply, AccountExistsRequest, AchTransferAccountPayload, AckMessage

@docs AddConnectionReply, AddConnectionRequest, AddDataMessage, AddPersistableNetworkPayloadMessage, AddressBalanceInfo, AddressEntry

@docs AddressEntryList, AdvancedCashAccountPayload, Alert, AliPayAccountPayload, AmazonGiftCardAccountPayload, ArbitrationDisputeList

@docs Arbitrator, ArbitratorTrade, Attachment, AustraliaPayidPayload, AutoConfirmSettings, AvailabilityResultWithDescription

@docs BackupAccountReply, BackupAccountRequest, BalancesInfo, BankAccountPayload, BizumAccountPayload, BlockChainExplorer, BtcBalanceInfo

@docs BundleOfEnvelopes, BundleOfEnvelopes_, BuyerAsMakerTrade, BuyerAsTakerTrade, ByteArray, CancelOfferReply, CancelOfferRequest

@docs CapitualAccountPayload, CashAppAccountPayload, CashAtAtmAccountPayload, CashDepositAccountPayload, CelPayAccountPayload

@docs ChangePasswordReply, ChangePasswordRequest, ChaseQuickPayAccountPayload, ChatMessage, CheckConnectionReply, CheckConnectionRequest

@docs CheckConnectionsReply, CheckConnectionsRequest, CloseAccountReply, CloseAccountRequest, CloseConnectionMessage, CompleteTradeReply

@docs CompleteTradeRequest, ConfirmPaymentReceivedReply, ConfirmPaymentReceivedRequest, ConfirmPaymentSentReply

@docs ConfirmPaymentSentRequest, Contract, ContractInfo, Country, CountryBasedPaymentAccountPayload, CreateAccountReply

@docs CreateAccountRequest, CreateCryptoCurrencyPaymentAccountReply, CreateCryptoCurrencyPaymentAccountRequest

@docs CreatePaymentAccountReply, CreatePaymentAccountRequest, CreateXmrTxReply, CreateXmrTxRequest, CryptoCurrency

@docs CryptoCurrencyAccountPayload, Currency, DataAndSeqNrPair, DecryptedMessageWithPubKey, DeleteAccountReply, DeleteAccountRequest

@docs DepositRequest, DepositResponse, DepositsConfirmedMessage, Dispute, DisputeClosedMessage, DisputeOpenedMessage, DisputeResult

@docs DomesticWireTransferAccountPayload, EncryptedConnection, EncryptedConnectionList, F2FAccountPayload

@docs FasterPaymentsAccountPayload, FileTransferPart, Filter, GetAddressBalanceReply, GetAddressBalanceRequest, GetBalancesReply

@docs GetBalancesRequest, GetBestAvailableConnectionReply, GetBestAvailableConnectionRequest, GetChatMessagesReply

@docs GetChatMessagesRequest, GetConnectionReply, GetConnectionRequest, GetConnectionsReply, GetConnectionsRequest

@docs GetCryptoCurrencyPaymentMethodsReply, GetCryptoCurrencyPaymentMethodsRequest, GetDataResponse, GetDisputeReply

@docs GetDisputeRequest, GetDisputesReply, GetDisputesRequest, GetFundingAddressesReply, GetFundingAddressesRequest, GetInventoryRequest

@docs GetInventoryResponse, GetMethodHelpReply, GetMethodHelpRequest, GetMyOfferReply, GetMyOfferRequest, GetMyOffersReply

@docs GetMyOffersRequest, GetOfferReply, GetOfferRequest, GetOffersReply, GetOffersRequest, GetPaymentAccountFormAsJsonReply

@docs GetPaymentAccountFormAsJsonRequest, GetPaymentAccountFormReply, GetPaymentAccountFormRequest, GetPaymentAccountsReply

@docs GetPaymentAccountsRequest, GetPaymentMethodsReply, GetPaymentMethodsRequest, GetPeersRequest, GetPeersResponse, GetTradeReply

@docs GetTradeRequest, GetTradeStatisticsReply, GetTradeStatisticsRequest, GetTradesReply, GetTradesRequest, GetUpdatedDataRequest

@docs GetVersionReply, GetVersionRequest, GetXmrNewSubaddressReply, GetXmrNewSubaddressRequest, GetXmrNodeSettingsReply

@docs GetXmrNodeSettingsRequest, GetXmrPrimaryAddressReply, GetXmrPrimaryAddressRequest, GetXmrSeedReply, GetXmrSeedRequest

@docs GetXmrTxsReply, GetXmrTxsRequest, HalCashAccountPayload, IfscBasedAccountPayload, IgnoredMailboxMap, ImpsAccountPayload

@docs InitMultisigRequest, InitTradeRequest, InstantCryptoCurrencyAccountPayload, InteracETransferAccountPayload, IsAccountOpenReply

@docs IsAccountOpenRequest, IsAppInitializedReply, IsAppInitializedRequest, IsXmrNodeOnlineReply, IsXmrNodeOnlineRequest

@docs JapanBankAccountPayload, LockWalletReply, LockWalletRequest, MailboxItem, MailboxMessageList, MailboxStoragePayload, MapValue

@docs MarketAlertFilter, MarketDepthInfo, MarketDepthReply, MarketDepthRequest, MarketPriceInfo, MarketPriceReply, MarketPriceRequest

@docs MarketPricesReply, MarketPricesRequest, MediatedPayoutTxPublishedMessage, MediatedPayoutTxSignatureMessage, MediationDisputeList

@docs Mediator, MockMailboxPayload, MockPayload, MoneseAccountPayload, MoneyBeamAccountPayload, MoneyGramAccountPayload

@docs NationalBankAccountPayload, NavigationPath, NeftAccountPayload, NequiAccountPayload, NetworkEnvelope, NetworkEnvelope_, NodeAddress

@docs NotificationMessage, OKPayAccountPayload, Offer, OfferAvailabilityRequest, OfferAvailabilityResponse, OfferInfo, OfferPayload

@docs OpenAccountReply, OpenAccountRequest, OpenDisputeReply, OpenDisputeRequest, OpenOffer, PaxumAccountPayload, PayByMailAccountPayload

@docs PayPalAccountPayload, PaymentAccount, PaymentAccountFilter, PaymentAccountForm, PaymentAccountFormField, PaymentAccountList

@docs PaymentAccountPayload, PaymentMethod, PaymentReceivedMessage, PaymentSentMessage, PayseraAccountPayload, PaytmAccountPayload, Peer

@docs PeerList, PerfectMoneyAccountPayload, PersistableEnvelope, PersistableNetworkPayload, Ping, PixAccountPayload, Pong

@docs PopmoneyAccountPayload, PostOfferReply, PostOfferRequest, PreferencesPayload, PrefixedSealedAndSignedMessage

@docs PreliminaryGetDataRequest, PriceAlertFilter, PrivateNotificationMessage, PrivateNotificationPayload, ProcessModel

@docs PromptPayAccountPayload, ProtectedMailboxStorageEntry, ProtectedStorageEntry, PubKeyRing, RawTransactionInput, RefreshOfferMessage

@docs RefundAgent, RefundDisputeList, Region, RegisterDisputeAgentReply, RegisterDisputeAgentRequest

@docs RegisterNotificationListenerRequest, RelayXmrTxReply, RelayXmrTxRequest, RemoveConnectionReply, RemoveConnectionRequest

@docs RemoveDataMessage, RemoveMailboxDataMessage, RemoveWalletPasswordReply, RemoveWalletPasswordRequest, RemovedPayloadsMap

@docs ResolveDisputeReply, ResolveDisputeRequest, RestoreAccountReply, RestoreAccountRequest, RevolutAccountPayload, RtgsAccountPayload

@docs SameBankAccountPayload, SatispayAccountPayload, SealedAndSigned, SellerAsMakerTrade, SellerAsTakerTrade, SendBtcRequest

@docs SendChatMessageReply, SendChatMessageRequest, SendDisputeChatMessageReply, SendDisputeChatMessageRequest, SendNotificationReply

@docs SendNotificationRequest, SepaAccountPayload, SepaInstantAccountPayload, SequenceNumberEntry, SequenceNumberMap, SetAutoSwitchReply

@docs SetAutoSwitchRequest, SetConnectionReply, SetConnectionRequest, SetWalletPasswordReply, SetWalletPasswordRequest

@docs SignContractRequest, SignContractResponse, SignOfferRequest, SignOfferResponse, SignedOffer, SignedOfferList, SignedWitness

@docs SignedWitnessStore, SpecificBanksAccountPayload, StartCheckingConnectionReply, StartCheckingConnectionRequest, StartXmrNodeReply

@docs StartXmrNodeRequest, StopCheckingConnectionReply, StopCheckingConnectionRequest, StopReply, StopRequest, StopXmrNodeReply

@docs StopXmrNodeRequest, StorageEntryWrapper, StoragePayload, StrikeAccountPayload, SwiftAccountPayload, SwishAccountPayload

@docs TakeOfferReply, TakeOfferRequest, TikkieAccountPayload, Tradable, TradableList, Trade, TradeCurrency, TradeInfo, TradePeer

@docs TradeStatistics3, TradeStatistics3Store, TraditionalCurrency, TransferwiseAccountPayload, TransferwiseUsdAccountPayload

@docs USPostalMoneyOrderAccountPayload, UnlockWalletReply, UnlockWalletRequest, UnregisterDisputeAgentReply

@docs UnregisterDisputeAgentRequest, UpholdAccountPayload, UpiAccountPayload, UrlConnection, UserPayload, ValidateFormFieldReply

@docs ValidateFormFieldRequest, VenmoAccountPayload, VerseAccountPayload, WeChatPayAccountPayload, WesternUnionAccountPayload

@docs WithdrawFundsReply, WithdrawFundsRequest, XmrAddressEntry, XmrAddressEntryList, XmrBalanceInfo, XmrDestination, XmrIncomingTransfer

@docs XmrNodeSettings, XmrOutgoingTransfer, XmrTx, ZelleAccountPayload, decodeAccountAgeWitness, decodeAccountAgeWitnessStore

@docs decodeAccountExistsReply, decodeAccountExistsRequest, decodeAchTransferAccountPayload, decodeAckMessage

@docs decodeAddConnectionReply, decodeAddConnectionRequest, decodeAddDataMessage, decodeAddPersistableNetworkPayloadMessage

@docs decodeAddressBalanceInfo, decodeAddressEntry, decodeAddressEntryList, decodeAdvancedCashAccountPayload, decodeAlert

@docs decodeAliPayAccountPayload, decodeAmazonGiftCardAccountPayload, decodeArbitrationDisputeList, decodeArbitrator

@docs decodeArbitratorTrade, decodeAttachment, decodeAustraliaPayidPayload, decodeAutoConfirmSettings

@docs decodeAvailabilityResultWithDescription, decodeBackupAccountReply, decodeBackupAccountRequest, decodeBalancesInfo

@docs decodeBankAccountPayload, decodeBizumAccountPayload, decodeBlockChainExplorer, decodeBtcBalanceInfo, decodeBundleOfEnvelopes

@docs decodeBuyerAsMakerTrade, decodeBuyerAsTakerTrade, decodeByteArray, decodeCancelOfferReply, decodeCancelOfferRequest

@docs decodeCapitualAccountPayload, decodeCashAppAccountPayload, decodeCashAtAtmAccountPayload, decodeCashDepositAccountPayload

@docs decodeCelPayAccountPayload, decodeChangePasswordReply, decodeChangePasswordRequest, decodeChaseQuickPayAccountPayload

@docs decodeChatMessage, decodeCheckConnectionReply, decodeCheckConnectionRequest, decodeCheckConnectionsReply

@docs decodeCheckConnectionsRequest, decodeCloseAccountReply, decodeCloseAccountRequest, decodeCloseConnectionMessage

@docs decodeCompleteTradeReply, decodeCompleteTradeRequest, decodeConfirmPaymentReceivedReply, decodeConfirmPaymentReceivedRequest

@docs decodeConfirmPaymentSentReply, decodeConfirmPaymentSentRequest, decodeContract, decodeContractInfo, decodeCountry

@docs decodeCountryBasedPaymentAccountPayload, decodeCreateAccountReply, decodeCreateAccountRequest

@docs decodeCreateCryptoCurrencyPaymentAccountReply, decodeCreateCryptoCurrencyPaymentAccountRequest

@docs decodeCreatePaymentAccountReply, decodeCreatePaymentAccountRequest, decodeCreateXmrTxReply, decodeCreateXmrTxRequest

@docs decodeCryptoCurrency, decodeCryptoCurrencyAccountPayload, decodeCurrency, decodeDataAndSeqNrPair

@docs decodeDecryptedMessageWithPubKey, decodeDeleteAccountReply, decodeDeleteAccountRequest, decodeDepositRequest

@docs decodeDepositResponse, decodeDepositsConfirmedMessage, decodeDispute, decodeDisputeClosedMessage, decodeDisputeOpenedMessage

@docs decodeDisputeResult, decodeDomesticWireTransferAccountPayload, decodeEncryptedConnection, decodeEncryptedConnectionList

@docs decodeF2FAccountPayload, decodeFasterPaymentsAccountPayload, decodeFileTransferPart, decodeFilter, decodeGetAddressBalanceReply

@docs decodeGetAddressBalanceRequest, decodeGetBalancesReply, decodeGetBalancesRequest, decodeGetBestAvailableConnectionReply

@docs decodeGetBestAvailableConnectionRequest, decodeGetChatMessagesReply, decodeGetChatMessagesRequest, decodeGetConnectionReply

@docs decodeGetConnectionRequest, decodeGetConnectionsReply, decodeGetConnectionsRequest, decodeGetCryptoCurrencyPaymentMethodsReply

@docs decodeGetCryptoCurrencyPaymentMethodsRequest, decodeGetDataResponse, decodeGetDisputeReply, decodeGetDisputeRequest

@docs decodeGetDisputesReply, decodeGetDisputesRequest, decodeGetFundingAddressesReply, decodeGetFundingAddressesRequest

@docs decodeGetInventoryRequest, decodeGetInventoryResponse, decodeGetMethodHelpReply, decodeGetMethodHelpRequest

@docs decodeGetMyOfferReply, decodeGetMyOfferRequest, decodeGetMyOffersReply, decodeGetMyOffersRequest, decodeGetOfferReply

@docs decodeGetOfferRequest, decodeGetOffersReply, decodeGetOffersRequest, decodeGetPaymentAccountFormAsJsonReply

@docs decodeGetPaymentAccountFormAsJsonRequest, decodeGetPaymentAccountFormReply, decodeGetPaymentAccountFormRequest

@docs decodeGetPaymentAccountsReply, decodeGetPaymentAccountsRequest, decodeGetPaymentMethodsReply, decodeGetPaymentMethodsRequest

@docs decodeGetPeersRequest, decodeGetPeersResponse, decodeGetTradeReply, decodeGetTradeRequest, decodeGetTradeStatisticsReply

@docs decodeGetTradeStatisticsRequest, decodeGetTradesReply, decodeGetTradesRequest, decodeGetUpdatedDataRequest

@docs decodeGetVersionReply, decodeGetVersionRequest, decodeGetXmrNewSubaddressReply, decodeGetXmrNewSubaddressRequest

@docs decodeGetXmrNodeSettingsReply, decodeGetXmrNodeSettingsRequest, decodeGetXmrPrimaryAddressReply

@docs decodeGetXmrPrimaryAddressRequest, decodeGetXmrSeedReply, decodeGetXmrSeedRequest, decodeGetXmrTxsReply, decodeGetXmrTxsRequest

@docs decodeHalCashAccountPayload, decodeIfscBasedAccountPayload, decodeIgnoredMailboxMap, decodeImpsAccountPayload

@docs decodeInitMultisigRequest, decodeInitTradeRequest, decodeInstantCryptoCurrencyAccountPayload

@docs decodeInteracETransferAccountPayload, decodeIsAccountOpenReply, decodeIsAccountOpenRequest, decodeIsAppInitializedReply

@docs decodeIsAppInitializedRequest, decodeIsXmrNodeOnlineReply, decodeIsXmrNodeOnlineRequest, decodeJapanBankAccountPayload

@docs decodeLockWalletReply, decodeLockWalletRequest, decodeMailboxItem, decodeMailboxMessageList, decodeMailboxStoragePayload

@docs decodeMapValue, decodeMarketAlertFilter, decodeMarketDepthInfo, decodeMarketDepthReply, decodeMarketDepthRequest

@docs decodeMarketPriceInfo, decodeMarketPriceReply, decodeMarketPriceRequest, decodeMarketPricesReply, decodeMarketPricesRequest

@docs decodeMediatedPayoutTxPublishedMessage, decodeMediatedPayoutTxSignatureMessage, decodeMediationDisputeList, decodeMediator

@docs decodeMockMailboxPayload, decodeMockPayload, decodeMoneseAccountPayload, decodeMoneyBeamAccountPayload

@docs decodeMoneyGramAccountPayload, decodeNationalBankAccountPayload, decodeNavigationPath, decodeNeftAccountPayload

@docs decodeNequiAccountPayload, decodeNetworkEnvelope, decodeNodeAddress, decodeNotificationMessage, decodeOKPayAccountPayload

@docs decodeOffer, decodeOfferAvailabilityRequest, decodeOfferAvailabilityResponse, decodeOfferInfo, decodeOfferPayload

@docs decodeOpenAccountReply, decodeOpenAccountRequest, decodeOpenDisputeReply, decodeOpenDisputeRequest, decodeOpenOffer

@docs decodePaxumAccountPayload, decodePayByMailAccountPayload, decodePayPalAccountPayload, decodePaymentAccount

@docs decodePaymentAccountFilter, decodePaymentAccountForm, decodePaymentAccountFormField, decodePaymentAccountList

@docs decodePaymentAccountPayload, decodePaymentMethod, decodePaymentReceivedMessage, decodePaymentSentMessage

@docs decodePayseraAccountPayload, decodePaytmAccountPayload, decodePeer, decodePeerList, decodePerfectMoneyAccountPayload

@docs decodePersistableEnvelope, decodePersistableNetworkPayload, decodePing, decodePixAccountPayload, decodePong

@docs decodePopmoneyAccountPayload, decodePostOfferReply, decodePostOfferRequest, decodePreferencesPayload

@docs decodePrefixedSealedAndSignedMessage, decodePreliminaryGetDataRequest, decodePriceAlertFilter

@docs decodePrivateNotificationMessage, decodePrivateNotificationPayload, decodeProcessModel, decodePromptPayAccountPayload

@docs decodeProtectedMailboxStorageEntry, decodeProtectedStorageEntry, decodePubKeyRing, decodeRawTransactionInput

@docs decodeRefreshOfferMessage, decodeRefundAgent, decodeRefundDisputeList, decodeRegion, decodeRegisterDisputeAgentReply

@docs decodeRegisterDisputeAgentRequest, decodeRegisterNotificationListenerRequest, decodeRelayXmrTxReply, decodeRelayXmrTxRequest

@docs decodeRemoveConnectionReply, decodeRemoveConnectionRequest, decodeRemoveDataMessage, decodeRemoveMailboxDataMessage

@docs decodeRemoveWalletPasswordReply, decodeRemoveWalletPasswordRequest, decodeRemovedPayloadsMap, decodeResolveDisputeReply

@docs decodeResolveDisputeRequest, decodeRestoreAccountReply, decodeRestoreAccountRequest, decodeRevolutAccountPayload

@docs decodeRtgsAccountPayload, decodeSameBankAccountPayload, decodeSatispayAccountPayload, decodeSealedAndSigned

@docs decodeSellerAsMakerTrade, decodeSellerAsTakerTrade, decodeSendBtcRequest, decodeSendChatMessageReply

@docs decodeSendChatMessageRequest, decodeSendDisputeChatMessageReply, decodeSendDisputeChatMessageRequest

@docs decodeSendNotificationReply, decodeSendNotificationRequest, decodeSepaAccountPayload, decodeSepaInstantAccountPayload

@docs decodeSequenceNumberEntry, decodeSequenceNumberMap, decodeSetAutoSwitchReply, decodeSetAutoSwitchRequest

@docs decodeSetConnectionReply, decodeSetConnectionRequest, decodeSetWalletPasswordReply, decodeSetWalletPasswordRequest

@docs decodeSignContractRequest, decodeSignContractResponse, decodeSignOfferRequest, decodeSignOfferResponse, decodeSignedOffer

@docs decodeSignedOfferList, decodeSignedWitness, decodeSignedWitnessStore, decodeSpecificBanksAccountPayload

@docs decodeStartCheckingConnectionReply, decodeStartCheckingConnectionRequest, decodeStartXmrNodeReply, decodeStartXmrNodeRequest

@docs decodeStopCheckingConnectionReply, decodeStopCheckingConnectionRequest, decodeStopReply, decodeStopRequest

@docs decodeStopXmrNodeReply, decodeStopXmrNodeRequest, decodeStorageEntryWrapper, decodeStoragePayload, decodeStrikeAccountPayload

@docs decodeSwiftAccountPayload, decodeSwishAccountPayload, decodeTakeOfferReply, decodeTakeOfferRequest, decodeTikkieAccountPayload

@docs decodeTradable, decodeTradableList, decodeTrade, decodeTradeCurrency, decodeTradeInfo, decodeTradePeer, decodeTradeStatistics3

@docs decodeTradeStatistics3Store, decodeTraditionalCurrency, decodeTransferwiseAccountPayload, decodeTransferwiseUsdAccountPayload

@docs decodeUSPostalMoneyOrderAccountPayload, decodeUnlockWalletReply, decodeUnlockWalletRequest, decodeUnregisterDisputeAgentReply

@docs decodeUnregisterDisputeAgentRequest, decodeUpholdAccountPayload, decodeUpiAccountPayload, decodeUrlConnection, decodeUserPayload

@docs decodeValidateFormFieldReply, decodeValidateFormFieldRequest, decodeVenmoAccountPayload, decodeVerseAccountPayload

@docs decodeWeChatPayAccountPayload, decodeWesternUnionAccountPayload, decodeWithdrawFundsReply, decodeWithdrawFundsRequest

@docs decodeXmrAddressEntry, decodeXmrAddressEntryList, decodeXmrBalanceInfo, decodeXmrDestination, decodeXmrIncomingTransfer

@docs decodeXmrNodeSettings, decodeXmrOutgoingTransfer, decodeXmrTx, decodeZelleAccountPayload, defaultAccountAgeWitness

@docs defaultAccountAgeWitnessStore, defaultAccountExistsReply, defaultAccountExistsRequest, defaultAchTransferAccountPayload

@docs defaultAckMessage, defaultAddConnectionReply, defaultAddConnectionRequest, defaultAddDataMessage

@docs defaultAddPersistableNetworkPayloadMessage, defaultAddressBalanceInfo, defaultAddressEntry, defaultAddressEntryList

@docs defaultAdvancedCashAccountPayload, defaultAlert, defaultAliPayAccountPayload, defaultAmazonGiftCardAccountPayload

@docs defaultArbitrationDisputeList, defaultArbitrator, defaultArbitratorTrade, defaultAttachment, defaultAustraliaPayidPayload

@docs defaultAutoConfirmSettings, defaultAvailabilityResultWithDescription, defaultBackupAccountReply, defaultBackupAccountRequest

@docs defaultBalancesInfo, defaultBankAccountPayload, defaultBizumAccountPayload, defaultBlockChainExplorer, defaultBtcBalanceInfo

@docs defaultBundleOfEnvelopes, defaultBuyerAsMakerTrade, defaultBuyerAsTakerTrade, defaultByteArray, defaultCancelOfferReply

@docs defaultCancelOfferRequest, defaultCapitualAccountPayload, defaultCashAppAccountPayload, defaultCashAtAtmAccountPayload

@docs defaultCashDepositAccountPayload, defaultCelPayAccountPayload, defaultChangePasswordReply, defaultChangePasswordRequest

@docs defaultChaseQuickPayAccountPayload, defaultChatMessage, defaultCheckConnectionReply, defaultCheckConnectionRequest

@docs defaultCheckConnectionsReply, defaultCheckConnectionsRequest, defaultCloseAccountReply, defaultCloseAccountRequest

@docs defaultCloseConnectionMessage, defaultCompleteTradeReply, defaultCompleteTradeRequest, defaultConfirmPaymentReceivedReply

@docs defaultConfirmPaymentReceivedRequest, defaultConfirmPaymentSentReply, defaultConfirmPaymentSentRequest, defaultContract

@docs defaultContractInfo, defaultCountry, defaultCountryBasedPaymentAccountPayload, defaultCreateAccountReply

@docs defaultCreateAccountRequest, defaultCreateCryptoCurrencyPaymentAccountReply

@docs defaultCreateCryptoCurrencyPaymentAccountRequest, defaultCreatePaymentAccountReply, defaultCreatePaymentAccountRequest

@docs defaultCreateXmrTxReply, defaultCreateXmrTxRequest, defaultCryptoCurrency, defaultCryptoCurrencyAccountPayload, defaultCurrency

@docs defaultDataAndSeqNrPair, defaultDecryptedMessageWithPubKey, defaultDeleteAccountReply, defaultDeleteAccountRequest

@docs defaultDepositRequest, defaultDepositResponse, defaultDepositsConfirmedMessage, defaultDispute, defaultDisputeClosedMessage

@docs defaultDisputeOpenedMessage, defaultDisputeResult, defaultDomesticWireTransferAccountPayload, defaultEncryptedConnection

@docs defaultEncryptedConnectionList, defaultF2FAccountPayload, defaultFasterPaymentsAccountPayload, defaultFileTransferPart

@docs defaultFilter, defaultGetAddressBalanceReply, defaultGetAddressBalanceRequest, defaultGetBalancesReply

@docs defaultGetBalancesRequest, defaultGetBestAvailableConnectionReply, defaultGetBestAvailableConnectionRequest

@docs defaultGetChatMessagesReply, defaultGetChatMessagesRequest, defaultGetConnectionReply, defaultGetConnectionRequest

@docs defaultGetConnectionsReply, defaultGetConnectionsRequest, defaultGetCryptoCurrencyPaymentMethodsReply

@docs defaultGetCryptoCurrencyPaymentMethodsRequest, defaultGetDataResponse, defaultGetDisputeReply, defaultGetDisputeRequest

@docs defaultGetDisputesReply, defaultGetDisputesRequest, defaultGetFundingAddressesReply, defaultGetFundingAddressesRequest

@docs defaultGetInventoryRequest, defaultGetInventoryResponse, defaultGetMethodHelpReply, defaultGetMethodHelpRequest

@docs defaultGetMyOfferReply, defaultGetMyOfferRequest, defaultGetMyOffersReply, defaultGetMyOffersRequest, defaultGetOfferReply

@docs defaultGetOfferRequest, defaultGetOffersReply, defaultGetOffersRequest, defaultGetPaymentAccountFormAsJsonReply

@docs defaultGetPaymentAccountFormAsJsonRequest, defaultGetPaymentAccountFormReply, defaultGetPaymentAccountFormRequest

@docs defaultGetPaymentAccountsReply, defaultGetPaymentAccountsRequest, defaultGetPaymentMethodsReply

@docs defaultGetPaymentMethodsRequest, defaultGetPeersRequest, defaultGetPeersResponse, defaultGetTradeReply, defaultGetTradeRequest

@docs defaultGetTradeStatisticsReply, defaultGetTradeStatisticsRequest, defaultGetTradesReply, defaultGetTradesRequest

@docs defaultGetUpdatedDataRequest, defaultGetVersionReply, defaultGetVersionRequest, defaultGetXmrNewSubaddressReply

@docs defaultGetXmrNewSubaddressRequest, defaultGetXmrNodeSettingsReply, defaultGetXmrNodeSettingsRequest

@docs defaultGetXmrPrimaryAddressReply, defaultGetXmrPrimaryAddressRequest, defaultGetXmrSeedReply, defaultGetXmrSeedRequest

@docs defaultGetXmrTxsReply, defaultGetXmrTxsRequest, defaultHalCashAccountPayload, defaultIfscBasedAccountPayload

@docs defaultIgnoredMailboxMap, defaultImpsAccountPayload, defaultInitMultisigRequest, defaultInitTradeRequest

@docs defaultInstantCryptoCurrencyAccountPayload, defaultInteracETransferAccountPayload, defaultIsAccountOpenReply

@docs defaultIsAccountOpenRequest, defaultIsAppInitializedReply, defaultIsAppInitializedRequest, defaultIsXmrNodeOnlineReply

@docs defaultIsXmrNodeOnlineRequest, defaultJapanBankAccountPayload, defaultLockWalletReply, defaultLockWalletRequest

@docs defaultMailboxItem, defaultMailboxMessageList, defaultMailboxStoragePayload, defaultMapValue, defaultMarketAlertFilter

@docs defaultMarketDepthInfo, defaultMarketDepthReply, defaultMarketDepthRequest, defaultMarketPriceInfo, defaultMarketPriceReply

@docs defaultMarketPriceRequest, defaultMarketPricesReply, defaultMarketPricesRequest, defaultMediatedPayoutTxPublishedMessage

@docs defaultMediatedPayoutTxSignatureMessage, defaultMediationDisputeList, defaultMediator, defaultMockMailboxPayload

@docs defaultMockPayload, defaultMoneseAccountPayload, defaultMoneyBeamAccountPayload, defaultMoneyGramAccountPayload

@docs defaultNationalBankAccountPayload, defaultNavigationPath, defaultNeftAccountPayload, defaultNequiAccountPayload

@docs defaultNetworkEnvelope, defaultNodeAddress, defaultNotificationMessage, defaultOKPayAccountPayload, defaultOffer

@docs defaultOfferAvailabilityRequest, defaultOfferAvailabilityResponse, defaultOfferInfo, defaultOfferPayload

@docs defaultOpenAccountReply, defaultOpenAccountRequest, defaultOpenDisputeReply, defaultOpenDisputeRequest, defaultOpenOffer

@docs defaultPaxumAccountPayload, defaultPayByMailAccountPayload, defaultPayPalAccountPayload, defaultPaymentAccount

@docs defaultPaymentAccountFilter, defaultPaymentAccountForm, defaultPaymentAccountFormField, defaultPaymentAccountList

@docs defaultPaymentAccountPayload, defaultPaymentMethod, defaultPaymentReceivedMessage, defaultPaymentSentMessage

@docs defaultPayseraAccountPayload, defaultPaytmAccountPayload, defaultPeer, defaultPeerList, defaultPerfectMoneyAccountPayload

@docs defaultPersistableEnvelope, defaultPersistableNetworkPayload, defaultPing, defaultPixAccountPayload, defaultPong

@docs defaultPopmoneyAccountPayload, defaultPostOfferReply, defaultPostOfferRequest, defaultPreferencesPayload

@docs defaultPrefixedSealedAndSignedMessage, defaultPreliminaryGetDataRequest, defaultPriceAlertFilter

@docs defaultPrivateNotificationMessage, defaultPrivateNotificationPayload, defaultProcessModel, defaultPromptPayAccountPayload

@docs defaultProtectedMailboxStorageEntry, defaultProtectedStorageEntry, defaultPubKeyRing, defaultRawTransactionInput

@docs defaultRefreshOfferMessage, defaultRefundAgent, defaultRefundDisputeList, defaultRegion, defaultRegisterDisputeAgentReply

@docs defaultRegisterDisputeAgentRequest, defaultRegisterNotificationListenerRequest, defaultRelayXmrTxReply

@docs defaultRelayXmrTxRequest, defaultRemoveConnectionReply, defaultRemoveConnectionRequest, defaultRemoveDataMessage

@docs defaultRemoveMailboxDataMessage, defaultRemoveWalletPasswordReply, defaultRemoveWalletPasswordRequest

@docs defaultRemovedPayloadsMap, defaultResolveDisputeReply, defaultResolveDisputeRequest, defaultRestoreAccountReply

@docs defaultRestoreAccountRequest, defaultRevolutAccountPayload, defaultRtgsAccountPayload, defaultSameBankAccountPayload

@docs defaultSatispayAccountPayload, defaultSealedAndSigned, defaultSellerAsMakerTrade, defaultSellerAsTakerTrade

@docs defaultSendBtcRequest, defaultSendChatMessageReply, defaultSendChatMessageRequest, defaultSendDisputeChatMessageReply

@docs defaultSendDisputeChatMessageRequest, defaultSendNotificationReply, defaultSendNotificationRequest, defaultSepaAccountPayload

@docs defaultSepaInstantAccountPayload, defaultSequenceNumberEntry, defaultSequenceNumberMap, defaultSetAutoSwitchReply

@docs defaultSetAutoSwitchRequest, defaultSetConnectionReply, defaultSetConnectionRequest, defaultSetWalletPasswordReply

@docs defaultSetWalletPasswordRequest, defaultSignContractRequest, defaultSignContractResponse, defaultSignOfferRequest

@docs defaultSignOfferResponse, defaultSignedOffer, defaultSignedOfferList, defaultSignedWitness, defaultSignedWitnessStore

@docs defaultSpecificBanksAccountPayload, defaultStartCheckingConnectionReply, defaultStartCheckingConnectionRequest

@docs defaultStartXmrNodeReply, defaultStartXmrNodeRequest, defaultStopCheckingConnectionReply, defaultStopCheckingConnectionRequest

@docs defaultStopReply, defaultStopRequest, defaultStopXmrNodeReply, defaultStopXmrNodeRequest, defaultStorageEntryWrapper

@docs defaultStoragePayload, defaultStrikeAccountPayload, defaultSwiftAccountPayload, defaultSwishAccountPayload

@docs defaultTakeOfferReply, defaultTakeOfferRequest, defaultTikkieAccountPayload, defaultTradable, defaultTradableList, defaultTrade

@docs defaultTradeCurrency, defaultTradeInfo, defaultTradePeer, defaultTradeStatistics3, defaultTradeStatistics3Store

@docs defaultTraditionalCurrency, defaultTransferwiseAccountPayload, defaultTransferwiseUsdAccountPayload

@docs defaultUSPostalMoneyOrderAccountPayload, defaultUnlockWalletReply, defaultUnlockWalletRequest

@docs defaultUnregisterDisputeAgentReply, defaultUnregisterDisputeAgentRequest, defaultUpholdAccountPayload

@docs defaultUpiAccountPayload, defaultUrlConnection, defaultUserPayload, defaultValidateFormFieldReply

@docs defaultValidateFormFieldRequest, defaultVenmoAccountPayload, defaultVerseAccountPayload, defaultWeChatPayAccountPayload

@docs defaultWesternUnionAccountPayload, defaultWithdrawFundsReply, defaultWithdrawFundsRequest, defaultXmrAddressEntry

@docs defaultXmrAddressEntryList, defaultXmrBalanceInfo, defaultXmrDestination, defaultXmrIncomingTransfer, defaultXmrNodeSettings

@docs defaultXmrOutgoingTransfer, defaultXmrTx, defaultZelleAccountPayload, encodeAccountAgeWitness, encodeAccountAgeWitnessStore

@docs encodeAccountExistsReply, encodeAccountExistsRequest, encodeAchTransferAccountPayload, encodeAckMessage

@docs encodeAddConnectionReply, encodeAddConnectionRequest, encodeAddDataMessage, encodeAddPersistableNetworkPayloadMessage

@docs encodeAddressBalanceInfo, encodeAddressEntry, encodeAddressEntryList, encodeAdvancedCashAccountPayload, encodeAlert

@docs encodeAliPayAccountPayload, encodeAmazonGiftCardAccountPayload, encodeArbitrationDisputeList, encodeArbitrator

@docs encodeArbitratorTrade, encodeAttachment, encodeAustraliaPayidPayload, encodeAutoConfirmSettings

@docs encodeAvailabilityResultWithDescription, encodeBackupAccountReply, encodeBackupAccountRequest, encodeBalancesInfo

@docs encodeBankAccountPayload, encodeBizumAccountPayload, encodeBlockChainExplorer, encodeBtcBalanceInfo, encodeBundleOfEnvelopes

@docs encodeBuyerAsMakerTrade, encodeBuyerAsTakerTrade, encodeByteArray, encodeCancelOfferReply, encodeCancelOfferRequest

@docs encodeCapitualAccountPayload, encodeCashAppAccountPayload, encodeCashAtAtmAccountPayload, encodeCashDepositAccountPayload

@docs encodeCelPayAccountPayload, encodeChangePasswordReply, encodeChangePasswordRequest, encodeChaseQuickPayAccountPayload

@docs encodeChatMessage, encodeCheckConnectionReply, encodeCheckConnectionRequest, encodeCheckConnectionsReply

@docs encodeCheckConnectionsRequest, encodeCloseAccountReply, encodeCloseAccountRequest, encodeCloseConnectionMessage

@docs encodeCompleteTradeReply, encodeCompleteTradeRequest, encodeConfirmPaymentReceivedReply, encodeConfirmPaymentReceivedRequest

@docs encodeConfirmPaymentSentReply, encodeConfirmPaymentSentRequest, encodeContract, encodeContractInfo, encodeCountry

@docs encodeCountryBasedPaymentAccountPayload, encodeCreateAccountReply, encodeCreateAccountRequest

@docs encodeCreateCryptoCurrencyPaymentAccountReply, encodeCreateCryptoCurrencyPaymentAccountRequest

@docs encodeCreatePaymentAccountReply, encodeCreatePaymentAccountRequest, encodeCreateXmrTxReply, encodeCreateXmrTxRequest

@docs encodeCryptoCurrency, encodeCryptoCurrencyAccountPayload, encodeCurrency, encodeDataAndSeqNrPair

@docs encodeDecryptedMessageWithPubKey, encodeDeleteAccountReply, encodeDeleteAccountRequest, encodeDepositRequest

@docs encodeDepositResponse, encodeDepositsConfirmedMessage, encodeDispute, encodeDisputeClosedMessage, encodeDisputeOpenedMessage

@docs encodeDisputeResult, encodeDomesticWireTransferAccountPayload, encodeEncryptedConnection, encodeEncryptedConnectionList

@docs encodeF2FAccountPayload, encodeFasterPaymentsAccountPayload, encodeFileTransferPart, encodeFilter, encodeGetAddressBalanceReply

@docs encodeGetAddressBalanceRequest, encodeGetBalancesReply, encodeGetBalancesRequest, encodeGetBestAvailableConnectionReply

@docs encodeGetBestAvailableConnectionRequest, encodeGetChatMessagesReply, encodeGetChatMessagesRequest, encodeGetConnectionReply

@docs encodeGetConnectionRequest, encodeGetConnectionsReply, encodeGetConnectionsRequest, encodeGetCryptoCurrencyPaymentMethodsReply

@docs encodeGetCryptoCurrencyPaymentMethodsRequest, encodeGetDataResponse, encodeGetDisputeReply, encodeGetDisputeRequest

@docs encodeGetDisputesReply, encodeGetDisputesRequest, encodeGetFundingAddressesReply, encodeGetFundingAddressesRequest

@docs encodeGetInventoryRequest, encodeGetInventoryResponse, encodeGetMethodHelpReply, encodeGetMethodHelpRequest

@docs encodeGetMyOfferReply, encodeGetMyOfferRequest, encodeGetMyOffersReply, encodeGetMyOffersRequest, encodeGetOfferReply

@docs encodeGetOfferRequest, encodeGetOffersReply, encodeGetOffersRequest, encodeGetPaymentAccountFormAsJsonReply

@docs encodeGetPaymentAccountFormAsJsonRequest, encodeGetPaymentAccountFormReply, encodeGetPaymentAccountFormRequest

@docs encodeGetPaymentAccountsReply, encodeGetPaymentAccountsRequest, encodeGetPaymentMethodsReply, encodeGetPaymentMethodsRequest

@docs encodeGetPeersRequest, encodeGetPeersResponse, encodeGetTradeReply, encodeGetTradeRequest, encodeGetTradeStatisticsReply

@docs encodeGetTradeStatisticsRequest, encodeGetTradesReply, encodeGetTradesRequest, encodeGetUpdatedDataRequest

@docs encodeGetVersionReply, encodeGetVersionRequest, encodeGetXmrNewSubaddressReply, encodeGetXmrNewSubaddressRequest

@docs encodeGetXmrNodeSettingsReply, encodeGetXmrNodeSettingsRequest, encodeGetXmrPrimaryAddressReply

@docs encodeGetXmrPrimaryAddressRequest, encodeGetXmrSeedReply, encodeGetXmrSeedRequest, encodeGetXmrTxsReply, encodeGetXmrTxsRequest

@docs encodeHalCashAccountPayload, encodeIfscBasedAccountPayload, encodeIgnoredMailboxMap, encodeImpsAccountPayload

@docs encodeInitMultisigRequest, encodeInitTradeRequest, encodeInstantCryptoCurrencyAccountPayload

@docs encodeInteracETransferAccountPayload, encodeIsAccountOpenReply, encodeIsAccountOpenRequest, encodeIsAppInitializedReply

@docs encodeIsAppInitializedRequest, encodeIsXmrNodeOnlineReply, encodeIsXmrNodeOnlineRequest, encodeJapanBankAccountPayload

@docs encodeLockWalletReply, encodeLockWalletRequest, encodeMailboxItem, encodeMailboxMessageList, encodeMailboxStoragePayload

@docs encodeMapValue, encodeMarketAlertFilter, encodeMarketDepthInfo, encodeMarketDepthReply, encodeMarketDepthRequest

@docs encodeMarketPriceInfo, encodeMarketPriceReply, encodeMarketPriceRequest, encodeMarketPricesReply, encodeMarketPricesRequest

@docs encodeMediatedPayoutTxPublishedMessage, encodeMediatedPayoutTxSignatureMessage, encodeMediationDisputeList, encodeMediator

@docs encodeMockMailboxPayload, encodeMockPayload, encodeMoneseAccountPayload, encodeMoneyBeamAccountPayload

@docs encodeMoneyGramAccountPayload, encodeNationalBankAccountPayload, encodeNavigationPath, encodeNeftAccountPayload

@docs encodeNequiAccountPayload, encodeNetworkEnvelope, encodeNodeAddress, encodeNotificationMessage, encodeOKPayAccountPayload

@docs encodeOffer, encodeOfferAvailabilityRequest, encodeOfferAvailabilityResponse, encodeOfferInfo, encodeOfferPayload

@docs encodeOpenAccountReply, encodeOpenAccountRequest, encodeOpenDisputeReply, encodeOpenDisputeRequest, encodeOpenOffer

@docs encodePaxumAccountPayload, encodePayByMailAccountPayload, encodePayPalAccountPayload, encodePaymentAccount

@docs encodePaymentAccountFilter, encodePaymentAccountForm, encodePaymentAccountFormField, encodePaymentAccountList

@docs encodePaymentAccountPayload, encodePaymentMethod, encodePaymentReceivedMessage, encodePaymentSentMessage

@docs encodePayseraAccountPayload, encodePaytmAccountPayload, encodePeer, encodePeerList, encodePerfectMoneyAccountPayload

@docs encodePersistableEnvelope, encodePersistableNetworkPayload, encodePing, encodePixAccountPayload, encodePong

@docs encodePopmoneyAccountPayload, encodePostOfferReply, encodePostOfferRequest, encodePreferencesPayload

@docs encodePrefixedSealedAndSignedMessage, encodePreliminaryGetDataRequest, encodePriceAlertFilter

@docs encodePrivateNotificationMessage, encodePrivateNotificationPayload, encodeProcessModel, encodePromptPayAccountPayload

@docs encodeProtectedMailboxStorageEntry, encodeProtectedStorageEntry, encodePubKeyRing, encodeRawTransactionInput

@docs encodeRefreshOfferMessage, encodeRefundAgent, encodeRefundDisputeList, encodeRegion, encodeRegisterDisputeAgentReply

@docs encodeRegisterDisputeAgentRequest, encodeRegisterNotificationListenerRequest, encodeRelayXmrTxReply, encodeRelayXmrTxRequest

@docs encodeRemoveConnectionReply, encodeRemoveConnectionRequest, encodeRemoveDataMessage, encodeRemoveMailboxDataMessage

@docs encodeRemoveWalletPasswordReply, encodeRemoveWalletPasswordRequest, encodeRemovedPayloadsMap, encodeResolveDisputeReply

@docs encodeResolveDisputeRequest, encodeRestoreAccountReply, encodeRestoreAccountRequest, encodeRevolutAccountPayload

@docs encodeRtgsAccountPayload, encodeSameBankAccountPayload, encodeSatispayAccountPayload, encodeSealedAndSigned

@docs encodeSellerAsMakerTrade, encodeSellerAsTakerTrade, encodeSendBtcRequest, encodeSendChatMessageReply

@docs encodeSendChatMessageRequest, encodeSendDisputeChatMessageReply, encodeSendDisputeChatMessageRequest

@docs encodeSendNotificationReply, encodeSendNotificationRequest, encodeSepaAccountPayload, encodeSepaInstantAccountPayload

@docs encodeSequenceNumberEntry, encodeSequenceNumberMap, encodeSetAutoSwitchReply, encodeSetAutoSwitchRequest

@docs encodeSetConnectionReply, encodeSetConnectionRequest, encodeSetWalletPasswordReply, encodeSetWalletPasswordRequest

@docs encodeSignContractRequest, encodeSignContractResponse, encodeSignOfferRequest, encodeSignOfferResponse, encodeSignedOffer

@docs encodeSignedOfferList, encodeSignedWitness, encodeSignedWitnessStore, encodeSpecificBanksAccountPayload

@docs encodeStartCheckingConnectionReply, encodeStartCheckingConnectionRequest, encodeStartXmrNodeReply, encodeStartXmrNodeRequest

@docs encodeStopCheckingConnectionReply, encodeStopCheckingConnectionRequest, encodeStopReply, encodeStopRequest

@docs encodeStopXmrNodeReply, encodeStopXmrNodeRequest, encodeStorageEntryWrapper, encodeStoragePayload, encodeStrikeAccountPayload

@docs encodeSwiftAccountPayload, encodeSwishAccountPayload, encodeTakeOfferReply, encodeTakeOfferRequest, encodeTikkieAccountPayload

@docs encodeTradable, encodeTradableList, encodeTrade, encodeTradeCurrency, encodeTradeInfo, encodeTradePeer, encodeTradeStatistics3

@docs encodeTradeStatistics3Store, encodeTraditionalCurrency, encodeTransferwiseAccountPayload, encodeTransferwiseUsdAccountPayload

@docs encodeUSPostalMoneyOrderAccountPayload, encodeUnlockWalletReply, encodeUnlockWalletRequest, encodeUnregisterDisputeAgentReply

@docs encodeUnregisterDisputeAgentRequest, encodeUpholdAccountPayload, encodeUpiAccountPayload, encodeUrlConnection, encodeUserPayload

@docs encodeValidateFormFieldReply, encodeValidateFormFieldRequest, encodeVenmoAccountPayload, encodeVerseAccountPayload

@docs encodeWeChatPayAccountPayload, encodeWesternUnionAccountPayload, encodeWithdrawFundsReply, encodeWithdrawFundsRequest

@docs encodeXmrAddressEntry, encodeXmrAddressEntryList, encodeXmrBalanceInfo, encodeXmrDestination, encodeXmrIncomingTransfer

@docs encodeXmrNodeSettings, encodeXmrOutgoingTransfer, encodeXmrTx, encodeZelleAccountPayload, fieldNumbersAccountAgeWitness

@docs fieldNumbersAccountAgeWitnessStore, fieldNumbersAccountExistsReply, fieldNumbersAccountExistsRequest

@docs fieldNumbersAchTransferAccountPayload, fieldNumbersAckMessage, fieldNumbersAddConnectionReply

@docs fieldNumbersAddConnectionRequest, fieldNumbersAddDataMessage, fieldNumbersAddPersistableNetworkPayloadMessage

@docs fieldNumbersAddressBalanceInfo, fieldNumbersAddressEntry, fieldNumbersAddressEntryList, fieldNumbersAdvancedCashAccountPayload

@docs fieldNumbersAlert, fieldNumbersAliPayAccountPayload, fieldNumbersAmazonGiftCardAccountPayload

@docs fieldNumbersArbitrationDisputeList, fieldNumbersArbitrator, fieldNumbersArbitratorTrade, fieldNumbersAttachment

@docs fieldNumbersAustraliaPayidPayload, fieldNumbersAutoConfirmSettings, fieldNumbersAvailabilityResultWithDescription

@docs fieldNumbersBackupAccountReply, fieldNumbersBackupAccountRequest, fieldNumbersBalancesInfo, fieldNumbersBankAccountPayload

@docs fieldNumbersBizumAccountPayload, fieldNumbersBlockChainExplorer, fieldNumbersBtcBalanceInfo, fieldNumbersBundleOfEnvelopes

@docs fieldNumbersBuyerAsMakerTrade, fieldNumbersBuyerAsTakerTrade, fieldNumbersByteArray, fieldNumbersCancelOfferReply

@docs fieldNumbersCancelOfferRequest, fieldNumbersCapitualAccountPayload, fieldNumbersCashAppAccountPayload

@docs fieldNumbersCashAtAtmAccountPayload, fieldNumbersCashDepositAccountPayload, fieldNumbersCelPayAccountPayload

@docs fieldNumbersChangePasswordReply, fieldNumbersChangePasswordRequest, fieldNumbersChaseQuickPayAccountPayload

@docs fieldNumbersChatMessage, fieldNumbersCheckConnectionReply, fieldNumbersCheckConnectionRequest

@docs fieldNumbersCheckConnectionsReply, fieldNumbersCheckConnectionsRequest, fieldNumbersCloseAccountReply

@docs fieldNumbersCloseAccountRequest, fieldNumbersCloseConnectionMessage, fieldNumbersCompleteTradeReply

@docs fieldNumbersCompleteTradeRequest, fieldNumbersConfirmPaymentReceivedReply, fieldNumbersConfirmPaymentReceivedRequest

@docs fieldNumbersConfirmPaymentSentReply, fieldNumbersConfirmPaymentSentRequest, fieldNumbersContract, fieldNumbersContractInfo

@docs fieldNumbersCountry, fieldNumbersCountryBasedPaymentAccountPayload, fieldNumbersCreateAccountReply

@docs fieldNumbersCreateAccountRequest, fieldNumbersCreateCryptoCurrencyPaymentAccountReply

@docs fieldNumbersCreateCryptoCurrencyPaymentAccountRequest, fieldNumbersCreatePaymentAccountReply

@docs fieldNumbersCreatePaymentAccountRequest, fieldNumbersCreateXmrTxReply, fieldNumbersCreateXmrTxRequest

@docs fieldNumbersCryptoCurrency, fieldNumbersCryptoCurrencyAccountPayload, fieldNumbersCurrency, fieldNumbersDataAndSeqNrPair

@docs fieldNumbersDecryptedMessageWithPubKey, fieldNumbersDeleteAccountReply, fieldNumbersDeleteAccountRequest

@docs fieldNumbersDepositRequest, fieldNumbersDepositResponse, fieldNumbersDepositsConfirmedMessage, fieldNumbersDispute

@docs fieldNumbersDisputeClosedMessage, fieldNumbersDisputeOpenedMessage, fieldNumbersDisputeResult

@docs fieldNumbersDomesticWireTransferAccountPayload, fieldNumbersEncryptedConnection, fieldNumbersEncryptedConnectionList

@docs fieldNumbersF2FAccountPayload, fieldNumbersFasterPaymentsAccountPayload, fieldNumbersFileTransferPart, fieldNumbersFilter

@docs fieldNumbersGetAddressBalanceReply, fieldNumbersGetAddressBalanceRequest, fieldNumbersGetBalancesReply

@docs fieldNumbersGetBalancesRequest, fieldNumbersGetBestAvailableConnectionReply, fieldNumbersGetBestAvailableConnectionRequest

@docs fieldNumbersGetChatMessagesReply, fieldNumbersGetChatMessagesRequest, fieldNumbersGetConnectionReply

@docs fieldNumbersGetConnectionRequest, fieldNumbersGetConnectionsReply, fieldNumbersGetConnectionsRequest

@docs fieldNumbersGetCryptoCurrencyPaymentMethodsReply, fieldNumbersGetCryptoCurrencyPaymentMethodsRequest

@docs fieldNumbersGetDataResponse, fieldNumbersGetDisputeReply, fieldNumbersGetDisputeRequest, fieldNumbersGetDisputesReply

@docs fieldNumbersGetDisputesRequest, fieldNumbersGetFundingAddressesReply, fieldNumbersGetFundingAddressesRequest

@docs fieldNumbersGetInventoryRequest, fieldNumbersGetInventoryResponse, fieldNumbersGetMethodHelpReply

@docs fieldNumbersGetMethodHelpRequest, fieldNumbersGetMyOfferReply, fieldNumbersGetMyOfferRequest, fieldNumbersGetMyOffersReply

@docs fieldNumbersGetMyOffersRequest, fieldNumbersGetOfferReply, fieldNumbersGetOfferRequest, fieldNumbersGetOffersReply

@docs fieldNumbersGetOffersRequest, fieldNumbersGetPaymentAccountFormAsJsonReply, fieldNumbersGetPaymentAccountFormAsJsonRequest

@docs fieldNumbersGetPaymentAccountFormReply, fieldNumbersGetPaymentAccountFormRequest, fieldNumbersGetPaymentAccountsReply

@docs fieldNumbersGetPaymentAccountsRequest, fieldNumbersGetPaymentMethodsReply, fieldNumbersGetPaymentMethodsRequest

@docs fieldNumbersGetPeersRequest, fieldNumbersGetPeersResponse, fieldNumbersGetTradeReply, fieldNumbersGetTradeRequest

@docs fieldNumbersGetTradeStatisticsReply, fieldNumbersGetTradeStatisticsRequest, fieldNumbersGetTradesReply

@docs fieldNumbersGetTradesRequest, fieldNumbersGetUpdatedDataRequest, fieldNumbersGetVersionReply, fieldNumbersGetVersionRequest

@docs fieldNumbersGetXmrNewSubaddressReply, fieldNumbersGetXmrNewSubaddressRequest, fieldNumbersGetXmrNodeSettingsReply

@docs fieldNumbersGetXmrNodeSettingsRequest, fieldNumbersGetXmrPrimaryAddressReply, fieldNumbersGetXmrPrimaryAddressRequest

@docs fieldNumbersGetXmrSeedReply, fieldNumbersGetXmrSeedRequest, fieldNumbersGetXmrTxsReply, fieldNumbersGetXmrTxsRequest

@docs fieldNumbersHalCashAccountPayload, fieldNumbersIfscBasedAccountPayload, fieldNumbersIgnoredMailboxMap

@docs fieldNumbersImpsAccountPayload, fieldNumbersInitMultisigRequest, fieldNumbersInitTradeRequest

@docs fieldNumbersInstantCryptoCurrencyAccountPayload, fieldNumbersInteracETransferAccountPayload, fieldNumbersIsAccountOpenReply

@docs fieldNumbersIsAccountOpenRequest, fieldNumbersIsAppInitializedReply, fieldNumbersIsAppInitializedRequest

@docs fieldNumbersIsXmrNodeOnlineReply, fieldNumbersIsXmrNodeOnlineRequest, fieldNumbersJapanBankAccountPayload

@docs fieldNumbersLockWalletReply, fieldNumbersLockWalletRequest, fieldNumbersMailboxItem, fieldNumbersMailboxMessageList

@docs fieldNumbersMailboxStoragePayload, fieldNumbersMapValue, fieldNumbersMarketAlertFilter, fieldNumbersMarketDepthInfo

@docs fieldNumbersMarketDepthReply, fieldNumbersMarketDepthRequest, fieldNumbersMarketPriceInfo, fieldNumbersMarketPriceReply

@docs fieldNumbersMarketPriceRequest, fieldNumbersMarketPricesReply, fieldNumbersMarketPricesRequest

@docs fieldNumbersMediatedPayoutTxPublishedMessage, fieldNumbersMediatedPayoutTxSignatureMessage, fieldNumbersMediationDisputeList

@docs fieldNumbersMediator, fieldNumbersMockMailboxPayload, fieldNumbersMockPayload, fieldNumbersMoneseAccountPayload

@docs fieldNumbersMoneyBeamAccountPayload, fieldNumbersMoneyGramAccountPayload, fieldNumbersNationalBankAccountPayload

@docs fieldNumbersNavigationPath, fieldNumbersNeftAccountPayload, fieldNumbersNequiAccountPayload, fieldNumbersNetworkEnvelope

@docs fieldNumbersNodeAddress, fieldNumbersNotificationMessage, fieldNumbersOKPayAccountPayload, fieldNumbersOffer

@docs fieldNumbersOfferAvailabilityRequest, fieldNumbersOfferAvailabilityResponse, fieldNumbersOfferInfo, fieldNumbersOfferPayload

@docs fieldNumbersOpenAccountReply, fieldNumbersOpenAccountRequest, fieldNumbersOpenDisputeReply, fieldNumbersOpenDisputeRequest

@docs fieldNumbersOpenOffer, fieldNumbersPaxumAccountPayload, fieldNumbersPayByMailAccountPayload, fieldNumbersPayPalAccountPayload

@docs fieldNumbersPaymentAccount, fieldNumbersPaymentAccountFilter, fieldNumbersPaymentAccountForm

@docs fieldNumbersPaymentAccountFormField, fieldNumbersPaymentAccountList, fieldNumbersPaymentAccountPayload

@docs fieldNumbersPaymentMethod, fieldNumbersPaymentReceivedMessage, fieldNumbersPaymentSentMessage

@docs fieldNumbersPayseraAccountPayload, fieldNumbersPaytmAccountPayload, fieldNumbersPeer, fieldNumbersPeerList

@docs fieldNumbersPerfectMoneyAccountPayload, fieldNumbersPersistableEnvelope, fieldNumbersPersistableNetworkPayload

@docs fieldNumbersPing, fieldNumbersPixAccountPayload, fieldNumbersPong, fieldNumbersPopmoneyAccountPayload

@docs fieldNumbersPostOfferReply, fieldNumbersPostOfferRequest, fieldNumbersPreferencesPayload

@docs fieldNumbersPrefixedSealedAndSignedMessage, fieldNumbersPreliminaryGetDataRequest, fieldNumbersPriceAlertFilter

@docs fieldNumbersPrivateNotificationMessage, fieldNumbersPrivateNotificationPayload, fieldNumbersProcessModel

@docs fieldNumbersPromptPayAccountPayload, fieldNumbersProtectedMailboxStorageEntry, fieldNumbersProtectedStorageEntry

@docs fieldNumbersPubKeyRing, fieldNumbersRawTransactionInput, fieldNumbersRefreshOfferMessage, fieldNumbersRefundAgent

@docs fieldNumbersRefundDisputeList, fieldNumbersRegion, fieldNumbersRegisterDisputeAgentReply

@docs fieldNumbersRegisterDisputeAgentRequest, fieldNumbersRegisterNotificationListenerRequest, fieldNumbersRelayXmrTxReply

@docs fieldNumbersRelayXmrTxRequest, fieldNumbersRemoveConnectionReply, fieldNumbersRemoveConnectionRequest

@docs fieldNumbersRemoveDataMessage, fieldNumbersRemoveMailboxDataMessage, fieldNumbersRemoveWalletPasswordReply

@docs fieldNumbersRemoveWalletPasswordRequest, fieldNumbersRemovedPayloadsMap, fieldNumbersResolveDisputeReply

@docs fieldNumbersResolveDisputeRequest, fieldNumbersRestoreAccountReply, fieldNumbersRestoreAccountRequest

@docs fieldNumbersRevolutAccountPayload, fieldNumbersRtgsAccountPayload, fieldNumbersSameBankAccountPayload

@docs fieldNumbersSatispayAccountPayload, fieldNumbersSealedAndSigned, fieldNumbersSellerAsMakerTrade

@docs fieldNumbersSellerAsTakerTrade, fieldNumbersSendBtcRequest, fieldNumbersSendChatMessageReply

@docs fieldNumbersSendChatMessageRequest, fieldNumbersSendDisputeChatMessageReply, fieldNumbersSendDisputeChatMessageRequest

@docs fieldNumbersSendNotificationReply, fieldNumbersSendNotificationRequest, fieldNumbersSepaAccountPayload

@docs fieldNumbersSepaInstantAccountPayload, fieldNumbersSequenceNumberEntry, fieldNumbersSequenceNumberMap

@docs fieldNumbersSetAutoSwitchReply, fieldNumbersSetAutoSwitchRequest, fieldNumbersSetConnectionReply

@docs fieldNumbersSetConnectionRequest, fieldNumbersSetWalletPasswordReply, fieldNumbersSetWalletPasswordRequest

@docs fieldNumbersSignContractRequest, fieldNumbersSignContractResponse, fieldNumbersSignOfferRequest, fieldNumbersSignOfferResponse

@docs fieldNumbersSignedOffer, fieldNumbersSignedOfferList, fieldNumbersSignedWitness, fieldNumbersSignedWitnessStore

@docs fieldNumbersSpecificBanksAccountPayload, fieldNumbersStartCheckingConnectionReply

@docs fieldNumbersStartCheckingConnectionRequest, fieldNumbersStartXmrNodeReply, fieldNumbersStartXmrNodeRequest

@docs fieldNumbersStopCheckingConnectionReply, fieldNumbersStopCheckingConnectionRequest, fieldNumbersStopReply

@docs fieldNumbersStopRequest, fieldNumbersStopXmrNodeReply, fieldNumbersStopXmrNodeRequest, fieldNumbersStorageEntryWrapper

@docs fieldNumbersStoragePayload, fieldNumbersStrikeAccountPayload, fieldNumbersSwiftAccountPayload, fieldNumbersSwishAccountPayload

@docs fieldNumbersTakeOfferReply, fieldNumbersTakeOfferRequest, fieldNumbersTikkieAccountPayload, fieldNumbersTradable

@docs fieldNumbersTradableList, fieldNumbersTrade, fieldNumbersTradeCurrency, fieldNumbersTradeInfo, fieldNumbersTradePeer

@docs fieldNumbersTradeStatistics3, fieldNumbersTradeStatistics3Store, fieldNumbersTraditionalCurrency

@docs fieldNumbersTransferwiseAccountPayload, fieldNumbersTransferwiseUsdAccountPayload

@docs fieldNumbersUSPostalMoneyOrderAccountPayload, fieldNumbersUnlockWalletReply, fieldNumbersUnlockWalletRequest

@docs fieldNumbersUnregisterDisputeAgentReply, fieldNumbersUnregisterDisputeAgentRequest, fieldNumbersUpholdAccountPayload

@docs fieldNumbersUpiAccountPayload, fieldNumbersUrlConnection, fieldNumbersUserPayload, fieldNumbersValidateFormFieldReply

@docs fieldNumbersValidateFormFieldRequest, fieldNumbersVenmoAccountPayload, fieldNumbersVerseAccountPayload

@docs fieldNumbersWeChatPayAccountPayload, fieldNumbersWesternUnionAccountPayload, fieldNumbersWithdrawFundsReply

@docs fieldNumbersWithdrawFundsRequest, fieldNumbersXmrAddressEntry, fieldNumbersXmrAddressEntryList, fieldNumbersXmrBalanceInfo

@docs fieldNumbersXmrDestination, fieldNumbersXmrIncomingTransfer, fieldNumbersXmrNodeSettings, fieldNumbersXmrOutgoingTransfer

@docs fieldNumbersXmrTx, fieldNumbersZelleAccountPayload, unwrapBundleOfEnvelopes, unwrapNetworkEnvelope, wrapBundleOfEnvelopes

@docs wrapNetworkEnvelope

-}

import Proto.Io.Haveno.Protobuffer.Internals_
import Protobuf.Decode
import Protobuf.Encode


{-| The field numbers for the fields of `AddressBalanceInfo`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAddressBalanceInfo : { address : Int, balance : Int, numConfirmations : Int, isAddressUnused : Int }
fieldNumbersAddressBalanceInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__AddressBalanceInfo


{-| Default for AddressBalanceInfo. Should only be used for 'required' decoders as an initial value.

-}
defaultAddressBalanceInfo : AddressBalanceInfo
defaultAddressBalanceInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__AddressBalanceInfo


{-| Declares how to decode a `AddressBalanceInfo` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAddressBalanceInfo : Protobuf.Decode.Decoder AddressBalanceInfo
decodeAddressBalanceInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__AddressBalanceInfo


{-| Declares how to encode a `AddressBalanceInfo` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAddressBalanceInfo : AddressBalanceInfo -> Protobuf.Encode.Encoder
encodeAddressBalanceInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__AddressBalanceInfo


{-| `AddressBalanceInfo` message

-}
type alias AddressBalanceInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__AddressBalanceInfo


{-| The field numbers for the fields of `XmrBalanceInfo`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersXmrBalanceInfo :
    { balance : Int
    , availableBalance : Int
    , pendingBalance : Int
    , reservedOfferBalance : Int
    , reservedTradeBalance : Int
    }
fieldNumbersXmrBalanceInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__XmrBalanceInfo


{-| Default for XmrBalanceInfo. Should only be used for 'required' decoders as an initial value.

-}
defaultXmrBalanceInfo : XmrBalanceInfo
defaultXmrBalanceInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__XmrBalanceInfo


{-| Declares how to decode a `XmrBalanceInfo` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeXmrBalanceInfo : Protobuf.Decode.Decoder XmrBalanceInfo
decodeXmrBalanceInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__XmrBalanceInfo


{-| Declares how to encode a `XmrBalanceInfo` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeXmrBalanceInfo : XmrBalanceInfo -> Protobuf.Encode.Encoder
encodeXmrBalanceInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__XmrBalanceInfo


{-| `XmrBalanceInfo` message

-}
type alias XmrBalanceInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__XmrBalanceInfo


{-| The field numbers for the fields of `BtcBalanceInfo`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersBtcBalanceInfo :
    { availableBalance : Int, reservedBalance : Int, totalAvailableBalance : Int, lockedBalance : Int }
fieldNumbersBtcBalanceInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__BtcBalanceInfo


{-| Default for BtcBalanceInfo. Should only be used for 'required' decoders as an initial value.

-}
defaultBtcBalanceInfo : BtcBalanceInfo
defaultBtcBalanceInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__BtcBalanceInfo


{-| Declares how to decode a `BtcBalanceInfo` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeBtcBalanceInfo : Protobuf.Decode.Decoder BtcBalanceInfo
decodeBtcBalanceInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__BtcBalanceInfo


{-| Declares how to encode a `BtcBalanceInfo` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeBtcBalanceInfo : BtcBalanceInfo -> Protobuf.Encode.Encoder
encodeBtcBalanceInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__BtcBalanceInfo


{-| `BtcBalanceInfo` message

-}
type alias BtcBalanceInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__BtcBalanceInfo


{-| The field numbers for the fields of `BalancesInfo`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersBalancesInfo : { btc : Int, xmr : Int }
fieldNumbersBalancesInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__BalancesInfo


{-| Default for BalancesInfo. Should only be used for 'required' decoders as an initial value.

-}
defaultBalancesInfo : BalancesInfo
defaultBalancesInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__BalancesInfo


{-| Declares how to decode a `BalancesInfo` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeBalancesInfo : Protobuf.Decode.Decoder BalancesInfo
decodeBalancesInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__BalancesInfo


{-| Declares how to encode a `BalancesInfo` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeBalancesInfo : BalancesInfo -> Protobuf.Encode.Encoder
encodeBalancesInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__BalancesInfo


{-| ## Fields

### btc

 Field names are shortened for readability's sake, i.e.,
 balancesInfo.getBtc().getAvailableBalance() is cleaner than
 balancesInfo.getBtcBalanceInfo().getAvailableBalance().


-}
type alias BalancesInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__BalancesInfo


{-| The field numbers for the fields of `UnlockWalletReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersUnlockWalletReply : {}
fieldNumbersUnlockWalletReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__UnlockWalletReply


{-| Default for UnlockWalletReply. Should only be used for 'required' decoders as an initial value.

-}
defaultUnlockWalletReply : UnlockWalletReply
defaultUnlockWalletReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__UnlockWalletReply


{-| Declares how to decode a `UnlockWalletReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeUnlockWalletReply : Protobuf.Decode.Decoder UnlockWalletReply
decodeUnlockWalletReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__UnlockWalletReply


{-| Declares how to encode a `UnlockWalletReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeUnlockWalletReply : UnlockWalletReply -> Protobuf.Encode.Encoder
encodeUnlockWalletReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__UnlockWalletReply


{-| `UnlockWalletReply` message

-}
type alias UnlockWalletReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__UnlockWalletReply


{-| The field numbers for the fields of `UnlockWalletRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersUnlockWalletRequest : { password : Int, timeout : Int }
fieldNumbersUnlockWalletRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__UnlockWalletRequest


{-| Default for UnlockWalletRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultUnlockWalletRequest : UnlockWalletRequest
defaultUnlockWalletRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__UnlockWalletRequest


{-| Declares how to decode a `UnlockWalletRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeUnlockWalletRequest : Protobuf.Decode.Decoder UnlockWalletRequest
decodeUnlockWalletRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__UnlockWalletRequest


{-| Declares how to encode a `UnlockWalletRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeUnlockWalletRequest : UnlockWalletRequest -> Protobuf.Encode.Encoder
encodeUnlockWalletRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__UnlockWalletRequest


{-| `UnlockWalletRequest` message

-}
type alias UnlockWalletRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__UnlockWalletRequest


{-| The field numbers for the fields of `LockWalletReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersLockWalletReply : {}
fieldNumbersLockWalletReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__LockWalletReply


{-| Default for LockWalletReply. Should only be used for 'required' decoders as an initial value.

-}
defaultLockWalletReply : LockWalletReply
defaultLockWalletReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__LockWalletReply


{-| Declares how to decode a `LockWalletReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeLockWalletReply : Protobuf.Decode.Decoder LockWalletReply
decodeLockWalletReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__LockWalletReply


{-| Declares how to encode a `LockWalletReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeLockWalletReply : LockWalletReply -> Protobuf.Encode.Encoder
encodeLockWalletReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__LockWalletReply


{-| `LockWalletReply` message

-}
type alias LockWalletReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__LockWalletReply


{-| The field numbers for the fields of `LockWalletRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersLockWalletRequest : {}
fieldNumbersLockWalletRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__LockWalletRequest


{-| Default for LockWalletRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultLockWalletRequest : LockWalletRequest
defaultLockWalletRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__LockWalletRequest


{-| Declares how to decode a `LockWalletRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeLockWalletRequest : Protobuf.Decode.Decoder LockWalletRequest
decodeLockWalletRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__LockWalletRequest


{-| Declares how to encode a `LockWalletRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeLockWalletRequest : LockWalletRequest -> Protobuf.Encode.Encoder
encodeLockWalletRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__LockWalletRequest


{-| `LockWalletRequest` message

-}
type alias LockWalletRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__LockWalletRequest


{-| The field numbers for the fields of `RemoveWalletPasswordReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRemoveWalletPasswordReply : {}
fieldNumbersRemoveWalletPasswordReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__RemoveWalletPasswordReply


{-| Default for RemoveWalletPasswordReply. Should only be used for 'required' decoders as an initial value.

-}
defaultRemoveWalletPasswordReply : RemoveWalletPasswordReply
defaultRemoveWalletPasswordReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__RemoveWalletPasswordReply


{-| Declares how to decode a `RemoveWalletPasswordReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRemoveWalletPasswordReply : Protobuf.Decode.Decoder RemoveWalletPasswordReply
decodeRemoveWalletPasswordReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__RemoveWalletPasswordReply


{-| Declares how to encode a `RemoveWalletPasswordReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRemoveWalletPasswordReply : RemoveWalletPasswordReply -> Protobuf.Encode.Encoder
encodeRemoveWalletPasswordReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__RemoveWalletPasswordReply


{-| `RemoveWalletPasswordReply` message

-}
type alias RemoveWalletPasswordReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__RemoveWalletPasswordReply


{-| The field numbers for the fields of `RemoveWalletPasswordRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRemoveWalletPasswordRequest : { password : Int }
fieldNumbersRemoveWalletPasswordRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__RemoveWalletPasswordRequest


{-| Default for RemoveWalletPasswordRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultRemoveWalletPasswordRequest : RemoveWalletPasswordRequest
defaultRemoveWalletPasswordRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__RemoveWalletPasswordRequest


{-| Declares how to decode a `RemoveWalletPasswordRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRemoveWalletPasswordRequest : Protobuf.Decode.Decoder RemoveWalletPasswordRequest
decodeRemoveWalletPasswordRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__RemoveWalletPasswordRequest


{-| Declares how to encode a `RemoveWalletPasswordRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRemoveWalletPasswordRequest : RemoveWalletPasswordRequest -> Protobuf.Encode.Encoder
encodeRemoveWalletPasswordRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__RemoveWalletPasswordRequest


{-| `RemoveWalletPasswordRequest` message

-}
type alias RemoveWalletPasswordRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__RemoveWalletPasswordRequest


{-| The field numbers for the fields of `SetWalletPasswordReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSetWalletPasswordReply : {}
fieldNumbersSetWalletPasswordReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SetWalletPasswordReply


{-| Default for SetWalletPasswordReply. Should only be used for 'required' decoders as an initial value.

-}
defaultSetWalletPasswordReply : SetWalletPasswordReply
defaultSetWalletPasswordReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SetWalletPasswordReply


{-| Declares how to decode a `SetWalletPasswordReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSetWalletPasswordReply : Protobuf.Decode.Decoder SetWalletPasswordReply
decodeSetWalletPasswordReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SetWalletPasswordReply


{-| Declares how to encode a `SetWalletPasswordReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSetWalletPasswordReply : SetWalletPasswordReply -> Protobuf.Encode.Encoder
encodeSetWalletPasswordReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SetWalletPasswordReply


{-| `SetWalletPasswordReply` message

-}
type alias SetWalletPasswordReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SetWalletPasswordReply


{-| The field numbers for the fields of `SetWalletPasswordRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSetWalletPasswordRequest : { password : Int, newPassword : Int }
fieldNumbersSetWalletPasswordRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SetWalletPasswordRequest


{-| Default for SetWalletPasswordRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultSetWalletPasswordRequest : SetWalletPasswordRequest
defaultSetWalletPasswordRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SetWalletPasswordRequest


{-| Declares how to decode a `SetWalletPasswordRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSetWalletPasswordRequest : Protobuf.Decode.Decoder SetWalletPasswordRequest
decodeSetWalletPasswordRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SetWalletPasswordRequest


{-| Declares how to encode a `SetWalletPasswordRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSetWalletPasswordRequest : SetWalletPasswordRequest -> Protobuf.Encode.Encoder
encodeSetWalletPasswordRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SetWalletPasswordRequest


{-| `SetWalletPasswordRequest` message

-}
type alias SetWalletPasswordRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SetWalletPasswordRequest


{-| The field numbers for the fields of `GetFundingAddressesReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetFundingAddressesReply : { addressBalanceInfo : Int }
fieldNumbersGetFundingAddressesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetFundingAddressesReply


{-| Default for GetFundingAddressesReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetFundingAddressesReply : GetFundingAddressesReply
defaultGetFundingAddressesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetFundingAddressesReply


{-| Declares how to decode a `GetFundingAddressesReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetFundingAddressesReply : Protobuf.Decode.Decoder GetFundingAddressesReply
decodeGetFundingAddressesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetFundingAddressesReply


{-| Declares how to encode a `GetFundingAddressesReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetFundingAddressesReply : GetFundingAddressesReply -> Protobuf.Encode.Encoder
encodeGetFundingAddressesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetFundingAddressesReply


{-| `GetFundingAddressesReply` message

-}
type alias GetFundingAddressesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetFundingAddressesReply


{-| The field numbers for the fields of `GetFundingAddressesRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetFundingAddressesRequest : {}
fieldNumbersGetFundingAddressesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetFundingAddressesRequest


{-| Default for GetFundingAddressesRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetFundingAddressesRequest : GetFundingAddressesRequest
defaultGetFundingAddressesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetFundingAddressesRequest


{-| Declares how to decode a `GetFundingAddressesRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetFundingAddressesRequest : Protobuf.Decode.Decoder GetFundingAddressesRequest
decodeGetFundingAddressesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetFundingAddressesRequest


{-| Declares how to encode a `GetFundingAddressesRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetFundingAddressesRequest : GetFundingAddressesRequest -> Protobuf.Encode.Encoder
encodeGetFundingAddressesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetFundingAddressesRequest


{-| `GetFundingAddressesRequest` message

-}
type alias GetFundingAddressesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetFundingAddressesRequest


{-| The field numbers for the fields of `SendBtcRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSendBtcRequest : { address : Int, amount : Int, txFeeRate : Int, memo : Int }
fieldNumbersSendBtcRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SendBtcRequest


{-| Default for SendBtcRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultSendBtcRequest : SendBtcRequest
defaultSendBtcRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SendBtcRequest


{-| Declares how to decode a `SendBtcRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSendBtcRequest : Protobuf.Decode.Decoder SendBtcRequest
decodeSendBtcRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SendBtcRequest


{-| Declares how to encode a `SendBtcRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSendBtcRequest : SendBtcRequest -> Protobuf.Encode.Encoder
encodeSendBtcRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SendBtcRequest


{-| `SendBtcRequest` message

-}
type alias SendBtcRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SendBtcRequest


{-| The field numbers for the fields of `GetAddressBalanceReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetAddressBalanceReply : { addressBalanceInfo : Int }
fieldNumbersGetAddressBalanceReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetAddressBalanceReply


{-| Default for GetAddressBalanceReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetAddressBalanceReply : GetAddressBalanceReply
defaultGetAddressBalanceReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetAddressBalanceReply


{-| Declares how to decode a `GetAddressBalanceReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetAddressBalanceReply : Protobuf.Decode.Decoder GetAddressBalanceReply
decodeGetAddressBalanceReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetAddressBalanceReply


{-| Declares how to encode a `GetAddressBalanceReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetAddressBalanceReply : GetAddressBalanceReply -> Protobuf.Encode.Encoder
encodeGetAddressBalanceReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetAddressBalanceReply


{-| `GetAddressBalanceReply` message

-}
type alias GetAddressBalanceReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetAddressBalanceReply


{-| The field numbers for the fields of `GetAddressBalanceRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetAddressBalanceRequest : { address : Int }
fieldNumbersGetAddressBalanceRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetAddressBalanceRequest


{-| Default for GetAddressBalanceRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetAddressBalanceRequest : GetAddressBalanceRequest
defaultGetAddressBalanceRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetAddressBalanceRequest


{-| Declares how to decode a `GetAddressBalanceRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetAddressBalanceRequest : Protobuf.Decode.Decoder GetAddressBalanceRequest
decodeGetAddressBalanceRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetAddressBalanceRequest


{-| Declares how to encode a `GetAddressBalanceRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetAddressBalanceRequest : GetAddressBalanceRequest -> Protobuf.Encode.Encoder
encodeGetAddressBalanceRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetAddressBalanceRequest


{-| `GetAddressBalanceRequest` message

-}
type alias GetAddressBalanceRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetAddressBalanceRequest


{-| The field numbers for the fields of `RelayXmrTxReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRelayXmrTxReply : { hash : Int }
fieldNumbersRelayXmrTxReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__RelayXmrTxReply


{-| Default for RelayXmrTxReply. Should only be used for 'required' decoders as an initial value.

-}
defaultRelayXmrTxReply : RelayXmrTxReply
defaultRelayXmrTxReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__RelayXmrTxReply


{-| Declares how to decode a `RelayXmrTxReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRelayXmrTxReply : Protobuf.Decode.Decoder RelayXmrTxReply
decodeRelayXmrTxReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__RelayXmrTxReply


{-| Declares how to encode a `RelayXmrTxReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRelayXmrTxReply : RelayXmrTxReply -> Protobuf.Encode.Encoder
encodeRelayXmrTxReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__RelayXmrTxReply


{-| `RelayXmrTxReply` message

-}
type alias RelayXmrTxReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__RelayXmrTxReply


{-| The field numbers for the fields of `RelayXmrTxRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRelayXmrTxRequest : { metadata : Int }
fieldNumbersRelayXmrTxRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__RelayXmrTxRequest


{-| Default for RelayXmrTxRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultRelayXmrTxRequest : RelayXmrTxRequest
defaultRelayXmrTxRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__RelayXmrTxRequest


{-| Declares how to decode a `RelayXmrTxRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRelayXmrTxRequest : Protobuf.Decode.Decoder RelayXmrTxRequest
decodeRelayXmrTxRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__RelayXmrTxRequest


{-| Declares how to encode a `RelayXmrTxRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRelayXmrTxRequest : RelayXmrTxRequest -> Protobuf.Encode.Encoder
encodeRelayXmrTxRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__RelayXmrTxRequest


{-| `RelayXmrTxRequest` message

-}
type alias RelayXmrTxRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__RelayXmrTxRequest


{-| The field numbers for the fields of `CreateXmrTxReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCreateXmrTxReply : { tx : Int }
fieldNumbersCreateXmrTxReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CreateXmrTxReply


{-| Default for CreateXmrTxReply. Should only be used for 'required' decoders as an initial value.

-}
defaultCreateXmrTxReply : CreateXmrTxReply
defaultCreateXmrTxReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CreateXmrTxReply


{-| Declares how to decode a `CreateXmrTxReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCreateXmrTxReply : Protobuf.Decode.Decoder CreateXmrTxReply
decodeCreateXmrTxReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CreateXmrTxReply


{-| Declares how to encode a `CreateXmrTxReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCreateXmrTxReply : CreateXmrTxReply -> Protobuf.Encode.Encoder
encodeCreateXmrTxReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CreateXmrTxReply


{-| `CreateXmrTxReply` message

-}
type alias CreateXmrTxReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CreateXmrTxReply


{-| The field numbers for the fields of `CreateXmrTxRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCreateXmrTxRequest : { destinations : Int }
fieldNumbersCreateXmrTxRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CreateXmrTxRequest


{-| Default for CreateXmrTxRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultCreateXmrTxRequest : CreateXmrTxRequest
defaultCreateXmrTxRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CreateXmrTxRequest


{-| Declares how to decode a `CreateXmrTxRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCreateXmrTxRequest : Protobuf.Decode.Decoder CreateXmrTxRequest
decodeCreateXmrTxRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CreateXmrTxRequest


{-| Declares how to encode a `CreateXmrTxRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCreateXmrTxRequest : CreateXmrTxRequest -> Protobuf.Encode.Encoder
encodeCreateXmrTxRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CreateXmrTxRequest


{-| `CreateXmrTxRequest` message

-}
type alias CreateXmrTxRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CreateXmrTxRequest


{-| The field numbers for the fields of `XmrOutgoingTransfer`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersXmrOutgoingTransfer : { amount : Int, accountIndex : Int, subaddressIndices : Int, destinations : Int }
fieldNumbersXmrOutgoingTransfer =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__XmrOutgoingTransfer


{-| Default for XmrOutgoingTransfer. Should only be used for 'required' decoders as an initial value.

-}
defaultXmrOutgoingTransfer : XmrOutgoingTransfer
defaultXmrOutgoingTransfer =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__XmrOutgoingTransfer


{-| Declares how to decode a `XmrOutgoingTransfer` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeXmrOutgoingTransfer : Protobuf.Decode.Decoder XmrOutgoingTransfer
decodeXmrOutgoingTransfer =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__XmrOutgoingTransfer


{-| Declares how to encode a `XmrOutgoingTransfer` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeXmrOutgoingTransfer : XmrOutgoingTransfer -> Protobuf.Encode.Encoder
encodeXmrOutgoingTransfer =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__XmrOutgoingTransfer


{-| `XmrOutgoingTransfer` message

-}
type alias XmrOutgoingTransfer =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__XmrOutgoingTransfer


{-| The field numbers for the fields of `XmrIncomingTransfer`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersXmrIncomingTransfer :
    { amount : Int, accountIndex : Int, subaddressIndex : Int, address : Int, numSuggestedConfirmations : Int }
fieldNumbersXmrIncomingTransfer =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__XmrIncomingTransfer


{-| Default for XmrIncomingTransfer. Should only be used for 'required' decoders as an initial value.

-}
defaultXmrIncomingTransfer : XmrIncomingTransfer
defaultXmrIncomingTransfer =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__XmrIncomingTransfer


{-| Declares how to decode a `XmrIncomingTransfer` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeXmrIncomingTransfer : Protobuf.Decode.Decoder XmrIncomingTransfer
decodeXmrIncomingTransfer =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__XmrIncomingTransfer


{-| Declares how to encode a `XmrIncomingTransfer` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeXmrIncomingTransfer : XmrIncomingTransfer -> Protobuf.Encode.Encoder
encodeXmrIncomingTransfer =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__XmrIncomingTransfer


{-| `XmrIncomingTransfer` message

-}
type alias XmrIncomingTransfer =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__XmrIncomingTransfer


{-| The field numbers for the fields of `XmrDestination`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersXmrDestination : { address : Int, amount : Int }
fieldNumbersXmrDestination =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__XmrDestination


{-| Default for XmrDestination. Should only be used for 'required' decoders as an initial value.

-}
defaultXmrDestination : XmrDestination
defaultXmrDestination =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__XmrDestination


{-| Declares how to decode a `XmrDestination` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeXmrDestination : Protobuf.Decode.Decoder XmrDestination
decodeXmrDestination =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__XmrDestination


{-| Declares how to encode a `XmrDestination` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeXmrDestination : XmrDestination -> Protobuf.Encode.Encoder
encodeXmrDestination =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__XmrDestination


{-| `XmrDestination` message

-}
type alias XmrDestination =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__XmrDestination


{-| The field numbers for the fields of `XmrTx`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersXmrTx :
    { hash : Int
    , fee : Int
    , isConfirmed : Int
    , isLocked : Int
    , height : Int
    , timestamp : Int
    , incomingTransfers : Int
    , outgoingTransfer : Int
    , metadata : Int
    }
fieldNumbersXmrTx =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__XmrTx


{-| Default for XmrTx. Should only be used for 'required' decoders as an initial value.

-}
defaultXmrTx : XmrTx
defaultXmrTx =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__XmrTx


{-| Declares how to decode a `XmrTx` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeXmrTx : Protobuf.Decode.Decoder XmrTx
decodeXmrTx =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__XmrTx


{-| Declares how to encode a `XmrTx` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeXmrTx : XmrTx -> Protobuf.Encode.Encoder
encodeXmrTx =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__XmrTx


{-| `XmrTx` message

-}
type alias XmrTx =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__XmrTx


{-| The field numbers for the fields of `GetXmrTxsReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetXmrTxsReply : { txs : Int }
fieldNumbersGetXmrTxsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetXmrTxsReply


{-| Default for GetXmrTxsReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetXmrTxsReply : GetXmrTxsReply
defaultGetXmrTxsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetXmrTxsReply


{-| Declares how to decode a `GetXmrTxsReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetXmrTxsReply : Protobuf.Decode.Decoder GetXmrTxsReply
decodeGetXmrTxsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetXmrTxsReply


{-| Declares how to encode a `GetXmrTxsReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetXmrTxsReply : GetXmrTxsReply -> Protobuf.Encode.Encoder
encodeGetXmrTxsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetXmrTxsReply


{-| `GetXmrTxsReply` message

-}
type alias GetXmrTxsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetXmrTxsReply


{-| The field numbers for the fields of `GetXmrTxsRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetXmrTxsRequest : {}
fieldNumbersGetXmrTxsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetXmrTxsRequest


{-| Default for GetXmrTxsRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetXmrTxsRequest : GetXmrTxsRequest
defaultGetXmrTxsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetXmrTxsRequest


{-| Declares how to decode a `GetXmrTxsRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetXmrTxsRequest : Protobuf.Decode.Decoder GetXmrTxsRequest
decodeGetXmrTxsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetXmrTxsRequest


{-| Declares how to encode a `GetXmrTxsRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetXmrTxsRequest : GetXmrTxsRequest -> Protobuf.Encode.Encoder
encodeGetXmrTxsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetXmrTxsRequest


{-| `GetXmrTxsRequest` message

-}
type alias GetXmrTxsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetXmrTxsRequest


{-| The field numbers for the fields of `GetXmrNewSubaddressReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetXmrNewSubaddressReply : { subaddress : Int }
fieldNumbersGetXmrNewSubaddressReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetXmrNewSubaddressReply


{-| Default for GetXmrNewSubaddressReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetXmrNewSubaddressReply : GetXmrNewSubaddressReply
defaultGetXmrNewSubaddressReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetXmrNewSubaddressReply


{-| Declares how to decode a `GetXmrNewSubaddressReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetXmrNewSubaddressReply : Protobuf.Decode.Decoder GetXmrNewSubaddressReply
decodeGetXmrNewSubaddressReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetXmrNewSubaddressReply


{-| Declares how to encode a `GetXmrNewSubaddressReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetXmrNewSubaddressReply : GetXmrNewSubaddressReply -> Protobuf.Encode.Encoder
encodeGetXmrNewSubaddressReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetXmrNewSubaddressReply


{-| `GetXmrNewSubaddressReply` message

-}
type alias GetXmrNewSubaddressReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetXmrNewSubaddressReply


{-| The field numbers for the fields of `GetXmrNewSubaddressRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetXmrNewSubaddressRequest : {}
fieldNumbersGetXmrNewSubaddressRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetXmrNewSubaddressRequest


{-| Default for GetXmrNewSubaddressRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetXmrNewSubaddressRequest : GetXmrNewSubaddressRequest
defaultGetXmrNewSubaddressRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetXmrNewSubaddressRequest


{-| Declares how to decode a `GetXmrNewSubaddressRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetXmrNewSubaddressRequest : Protobuf.Decode.Decoder GetXmrNewSubaddressRequest
decodeGetXmrNewSubaddressRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetXmrNewSubaddressRequest


{-| Declares how to encode a `GetXmrNewSubaddressRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetXmrNewSubaddressRequest : GetXmrNewSubaddressRequest -> Protobuf.Encode.Encoder
encodeGetXmrNewSubaddressRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetXmrNewSubaddressRequest


{-| `GetXmrNewSubaddressRequest` message

-}
type alias GetXmrNewSubaddressRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetXmrNewSubaddressRequest


{-| The field numbers for the fields of `GetXmrPrimaryAddressReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetXmrPrimaryAddressReply : { primaryAddress : Int }
fieldNumbersGetXmrPrimaryAddressReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetXmrPrimaryAddressReply


{-| Default for GetXmrPrimaryAddressReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetXmrPrimaryAddressReply : GetXmrPrimaryAddressReply
defaultGetXmrPrimaryAddressReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetXmrPrimaryAddressReply


{-| Declares how to decode a `GetXmrPrimaryAddressReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetXmrPrimaryAddressReply : Protobuf.Decode.Decoder GetXmrPrimaryAddressReply
decodeGetXmrPrimaryAddressReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetXmrPrimaryAddressReply


{-| Declares how to encode a `GetXmrPrimaryAddressReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetXmrPrimaryAddressReply : GetXmrPrimaryAddressReply -> Protobuf.Encode.Encoder
encodeGetXmrPrimaryAddressReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetXmrPrimaryAddressReply


{-| `GetXmrPrimaryAddressReply` message

-}
type alias GetXmrPrimaryAddressReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetXmrPrimaryAddressReply


{-| The field numbers for the fields of `GetXmrPrimaryAddressRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetXmrPrimaryAddressRequest : {}
fieldNumbersGetXmrPrimaryAddressRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetXmrPrimaryAddressRequest


{-| Default for GetXmrPrimaryAddressRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetXmrPrimaryAddressRequest : GetXmrPrimaryAddressRequest
defaultGetXmrPrimaryAddressRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetXmrPrimaryAddressRequest


{-| Declares how to decode a `GetXmrPrimaryAddressRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetXmrPrimaryAddressRequest : Protobuf.Decode.Decoder GetXmrPrimaryAddressRequest
decodeGetXmrPrimaryAddressRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetXmrPrimaryAddressRequest


{-| Declares how to encode a `GetXmrPrimaryAddressRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetXmrPrimaryAddressRequest : GetXmrPrimaryAddressRequest -> Protobuf.Encode.Encoder
encodeGetXmrPrimaryAddressRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetXmrPrimaryAddressRequest


{-| `GetXmrPrimaryAddressRequest` message

-}
type alias GetXmrPrimaryAddressRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetXmrPrimaryAddressRequest


{-| The field numbers for the fields of `GetXmrSeedReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetXmrSeedReply : { seed : Int }
fieldNumbersGetXmrSeedReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetXmrSeedReply


{-| Default for GetXmrSeedReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetXmrSeedReply : GetXmrSeedReply
defaultGetXmrSeedReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetXmrSeedReply


{-| Declares how to decode a `GetXmrSeedReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetXmrSeedReply : Protobuf.Decode.Decoder GetXmrSeedReply
decodeGetXmrSeedReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetXmrSeedReply


{-| Declares how to encode a `GetXmrSeedReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetXmrSeedReply : GetXmrSeedReply -> Protobuf.Encode.Encoder
encodeGetXmrSeedReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetXmrSeedReply


{-| `GetXmrSeedReply` message

-}
type alias GetXmrSeedReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetXmrSeedReply


{-| The field numbers for the fields of `GetXmrSeedRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetXmrSeedRequest : {}
fieldNumbersGetXmrSeedRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetXmrSeedRequest


{-| Default for GetXmrSeedRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetXmrSeedRequest : GetXmrSeedRequest
defaultGetXmrSeedRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetXmrSeedRequest


{-| Declares how to decode a `GetXmrSeedRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetXmrSeedRequest : Protobuf.Decode.Decoder GetXmrSeedRequest
decodeGetXmrSeedRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetXmrSeedRequest


{-| Declares how to encode a `GetXmrSeedRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetXmrSeedRequest : GetXmrSeedRequest -> Protobuf.Encode.Encoder
encodeGetXmrSeedRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetXmrSeedRequest


{-| `GetXmrSeedRequest` message

-}
type alias GetXmrSeedRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetXmrSeedRequest


{-| The field numbers for the fields of `GetBalancesReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetBalancesReply : { balances : Int }
fieldNumbersGetBalancesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetBalancesReply


{-| Default for GetBalancesReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetBalancesReply : GetBalancesReply
defaultGetBalancesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetBalancesReply


{-| Declares how to decode a `GetBalancesReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetBalancesReply : Protobuf.Decode.Decoder GetBalancesReply
decodeGetBalancesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetBalancesReply


{-| Declares how to encode a `GetBalancesReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetBalancesReply : GetBalancesReply -> Protobuf.Encode.Encoder
encodeGetBalancesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetBalancesReply


{-| `GetBalancesReply` message

-}
type alias GetBalancesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetBalancesReply


{-| The field numbers for the fields of `GetBalancesRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetBalancesRequest : { currencyCode : Int }
fieldNumbersGetBalancesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetBalancesRequest


{-| Default for GetBalancesRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetBalancesRequest : GetBalancesRequest
defaultGetBalancesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetBalancesRequest


{-| Declares how to decode a `GetBalancesRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetBalancesRequest : Protobuf.Decode.Decoder GetBalancesRequest
decodeGetBalancesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetBalancesRequest


{-| Declares how to encode a `GetBalancesRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetBalancesRequest : GetBalancesRequest -> Protobuf.Encode.Encoder
encodeGetBalancesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetBalancesRequest


{-| `GetBalancesRequest` message

-}
type alias GetBalancesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetBalancesRequest


{-| The field numbers for the fields of `ContractInfo`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersContractInfo :
    { buyerNodeAddress : Int
    , sellerNodeAddress : Int
    , arbitratorNodeAddress : Int
    , isBuyerMakerAndSellerTaker : Int
    , makerAccountId : Int
    , takerAccountId : Int
    , makerPaymentAccountPayload : Int
    , takerPaymentAccountPayload : Int
    , makerPayoutAddressString : Int
    , takerPayoutAddressString : Int
    , lockTime : Int
    }
fieldNumbersContractInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ContractInfo


{-| Default for ContractInfo. Should only be used for 'required' decoders as an initial value.

-}
defaultContractInfo : ContractInfo
defaultContractInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ContractInfo


{-| Declares how to decode a `ContractInfo` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeContractInfo : Protobuf.Decode.Decoder ContractInfo
decodeContractInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ContractInfo


{-| Declares how to encode a `ContractInfo` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeContractInfo : ContractInfo -> Protobuf.Encode.Encoder
encodeContractInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ContractInfo


{-| `ContractInfo` message

-}
type alias ContractInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ContractInfo


{-| The field numbers for the fields of `TradeInfo`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersTradeInfo :
    { offer : Int
    , tradeId : Int
    , shortId : Int
    , date : Int
    , role : Int
    , amount : Int
    , makerFee : Int
    , takerFee : Int
    , buyerSecurityDeposit : Int
    , sellerSecurityDeposit : Int
    , buyerDepositTxFee : Int
    , sellerDepositTxFee : Int
    , buyerPayoutTxFee : Int
    , sellerPayoutTxFee : Int
    , buyerPayoutAmount : Int
    , sellerPayoutAmount : Int
    , price : Int
    , arbitratorNodeAddress : Int
    , tradePeerNodeAddress : Int
    , state : Int
    , phase : Int
    , periodState : Int
    , payoutState : Int
    , disputeState : Int
    , isDepositsPublished : Int
    , isDepositsConfirmed : Int
    , isDepositsUnlocked : Int
    , isPaymentSent : Int
    , isPaymentReceived : Int
    , isPayoutPublished : Int
    , isPayoutConfirmed : Int
    , isPayoutUnlocked : Int
    , isCompleted : Int
    , contractAsJson : Int
    , contract : Int
    , tradeVolume : Int
    , makerDepositTxId : Int
    , takerDepositTxId : Int
    , payoutTxId : Int
    }
fieldNumbersTradeInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__TradeInfo


{-| Default for TradeInfo. Should only be used for 'required' decoders as an initial value.

-}
defaultTradeInfo : TradeInfo
defaultTradeInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__TradeInfo


{-| Declares how to decode a `TradeInfo` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeTradeInfo : Protobuf.Decode.Decoder TradeInfo
decodeTradeInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__TradeInfo


{-| Declares how to encode a `TradeInfo` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeTradeInfo : TradeInfo -> Protobuf.Encode.Encoder
encodeTradeInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__TradeInfo


{-| `TradeInfo` message

-}
type alias TradeInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__TradeInfo


{-| The field numbers for the fields of `SendChatMessageReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSendChatMessageReply : {}
fieldNumbersSendChatMessageReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SendChatMessageReply


{-| Default for SendChatMessageReply. Should only be used for 'required' decoders as an initial value.

-}
defaultSendChatMessageReply : SendChatMessageReply
defaultSendChatMessageReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SendChatMessageReply


{-| Declares how to decode a `SendChatMessageReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSendChatMessageReply : Protobuf.Decode.Decoder SendChatMessageReply
decodeSendChatMessageReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SendChatMessageReply


{-| Declares how to encode a `SendChatMessageReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSendChatMessageReply : SendChatMessageReply -> Protobuf.Encode.Encoder
encodeSendChatMessageReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SendChatMessageReply


{-| `SendChatMessageReply` message

-}
type alias SendChatMessageReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SendChatMessageReply


{-| The field numbers for the fields of `SendChatMessageRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSendChatMessageRequest : { tradeId : Int, message : Int }
fieldNumbersSendChatMessageRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SendChatMessageRequest


{-| Default for SendChatMessageRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultSendChatMessageRequest : SendChatMessageRequest
defaultSendChatMessageRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SendChatMessageRequest


{-| Declares how to decode a `SendChatMessageRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSendChatMessageRequest : Protobuf.Decode.Decoder SendChatMessageRequest
decodeSendChatMessageRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SendChatMessageRequest


{-| Declares how to encode a `SendChatMessageRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSendChatMessageRequest : SendChatMessageRequest -> Protobuf.Encode.Encoder
encodeSendChatMessageRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SendChatMessageRequest


{-| `SendChatMessageRequest` message

-}
type alias SendChatMessageRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SendChatMessageRequest


{-| The field numbers for the fields of `GetChatMessagesReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetChatMessagesReply : { message : Int }
fieldNumbersGetChatMessagesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetChatMessagesReply


{-| Default for GetChatMessagesReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetChatMessagesReply : GetChatMessagesReply
defaultGetChatMessagesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetChatMessagesReply


{-| Declares how to decode a `GetChatMessagesReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetChatMessagesReply : Protobuf.Decode.Decoder GetChatMessagesReply
decodeGetChatMessagesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetChatMessagesReply


{-| Declares how to encode a `GetChatMessagesReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetChatMessagesReply : GetChatMessagesReply -> Protobuf.Encode.Encoder
encodeGetChatMessagesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetChatMessagesReply


{-| `GetChatMessagesReply` message

-}
type alias GetChatMessagesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetChatMessagesReply


{-| The field numbers for the fields of `GetChatMessagesRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetChatMessagesRequest : { tradeId : Int }
fieldNumbersGetChatMessagesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetChatMessagesRequest


{-| Default for GetChatMessagesRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetChatMessagesRequest : GetChatMessagesRequest
defaultGetChatMessagesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetChatMessagesRequest


{-| Declares how to decode a `GetChatMessagesRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetChatMessagesRequest : Protobuf.Decode.Decoder GetChatMessagesRequest
decodeGetChatMessagesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetChatMessagesRequest


{-| Declares how to encode a `GetChatMessagesRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetChatMessagesRequest : GetChatMessagesRequest -> Protobuf.Encode.Encoder
encodeGetChatMessagesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetChatMessagesRequest


{-| `GetChatMessagesRequest` message

-}
type alias GetChatMessagesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetChatMessagesRequest


{-| The field numbers for the fields of `WithdrawFundsReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersWithdrawFundsReply : {}
fieldNumbersWithdrawFundsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__WithdrawFundsReply


{-| Default for WithdrawFundsReply. Should only be used for 'required' decoders as an initial value.

-}
defaultWithdrawFundsReply : WithdrawFundsReply
defaultWithdrawFundsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__WithdrawFundsReply


{-| Declares how to decode a `WithdrawFundsReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeWithdrawFundsReply : Protobuf.Decode.Decoder WithdrawFundsReply
decodeWithdrawFundsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__WithdrawFundsReply


{-| Declares how to encode a `WithdrawFundsReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeWithdrawFundsReply : WithdrawFundsReply -> Protobuf.Encode.Encoder
encodeWithdrawFundsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__WithdrawFundsReply


{-| `WithdrawFundsReply` message

-}
type alias WithdrawFundsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__WithdrawFundsReply


{-| The field numbers for the fields of `WithdrawFundsRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersWithdrawFundsRequest : { tradeId : Int, address : Int, memo : Int }
fieldNumbersWithdrawFundsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__WithdrawFundsRequest


{-| Default for WithdrawFundsRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultWithdrawFundsRequest : WithdrawFundsRequest
defaultWithdrawFundsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__WithdrawFundsRequest


{-| Declares how to decode a `WithdrawFundsRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeWithdrawFundsRequest : Protobuf.Decode.Decoder WithdrawFundsRequest
decodeWithdrawFundsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__WithdrawFundsRequest


{-| Declares how to encode a `WithdrawFundsRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeWithdrawFundsRequest : WithdrawFundsRequest -> Protobuf.Encode.Encoder
encodeWithdrawFundsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__WithdrawFundsRequest


{-| `WithdrawFundsRequest` message

-}
type alias WithdrawFundsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__WithdrawFundsRequest


{-| The field numbers for the fields of `CompleteTradeReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCompleteTradeReply : {}
fieldNumbersCompleteTradeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CompleteTradeReply


{-| Default for CompleteTradeReply. Should only be used for 'required' decoders as an initial value.

-}
defaultCompleteTradeReply : CompleteTradeReply
defaultCompleteTradeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CompleteTradeReply


{-| Declares how to decode a `CompleteTradeReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCompleteTradeReply : Protobuf.Decode.Decoder CompleteTradeReply
decodeCompleteTradeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CompleteTradeReply


{-| Declares how to encode a `CompleteTradeReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCompleteTradeReply : CompleteTradeReply -> Protobuf.Encode.Encoder
encodeCompleteTradeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CompleteTradeReply


{-| `CompleteTradeReply` message

-}
type alias CompleteTradeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CompleteTradeReply


{-| The field numbers for the fields of `CompleteTradeRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCompleteTradeRequest : { tradeId : Int }
fieldNumbersCompleteTradeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CompleteTradeRequest


{-| Default for CompleteTradeRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultCompleteTradeRequest : CompleteTradeRequest
defaultCompleteTradeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CompleteTradeRequest


{-| Declares how to decode a `CompleteTradeRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCompleteTradeRequest : Protobuf.Decode.Decoder CompleteTradeRequest
decodeCompleteTradeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CompleteTradeRequest


{-| Declares how to encode a `CompleteTradeRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCompleteTradeRequest : CompleteTradeRequest -> Protobuf.Encode.Encoder
encodeCompleteTradeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CompleteTradeRequest


{-| `CompleteTradeRequest` message

-}
type alias CompleteTradeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CompleteTradeRequest


{-| The field numbers for the fields of `GetTradesReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetTradesReply : { trades : Int }
fieldNumbersGetTradesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetTradesReply


{-| Default for GetTradesReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetTradesReply : GetTradesReply
defaultGetTradesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetTradesReply


{-| Declares how to decode a `GetTradesReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetTradesReply : Protobuf.Decode.Decoder GetTradesReply
decodeGetTradesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetTradesReply


{-| Declares how to encode a `GetTradesReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetTradesReply : GetTradesReply -> Protobuf.Encode.Encoder
encodeGetTradesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetTradesReply


{-| `GetTradesReply` message

-}
type alias GetTradesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetTradesReply


{-| The field numbers for the fields of `GetTradesRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetTradesRequest : { category : Int }
fieldNumbersGetTradesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetTradesRequest


{-| Default for GetTradesRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetTradesRequest : GetTradesRequest
defaultGetTradesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetTradesRequest


{-| Declares how to decode a `GetTradesRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetTradesRequest : Protobuf.Decode.Decoder GetTradesRequest
decodeGetTradesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetTradesRequest


{-| Declares how to encode a `GetTradesRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetTradesRequest : GetTradesRequest -> Protobuf.Encode.Encoder
encodeGetTradesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetTradesRequest


{-| `GetTradesRequest` message

-}
type alias GetTradesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetTradesRequest


{-| The field numbers for the fields of `GetTradeReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetTradeReply : { trade : Int }
fieldNumbersGetTradeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetTradeReply


{-| Default for GetTradeReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetTradeReply : GetTradeReply
defaultGetTradeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetTradeReply


{-| Declares how to decode a `GetTradeReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetTradeReply : Protobuf.Decode.Decoder GetTradeReply
decodeGetTradeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetTradeReply


{-| Declares how to encode a `GetTradeReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetTradeReply : GetTradeReply -> Protobuf.Encode.Encoder
encodeGetTradeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetTradeReply


{-| `GetTradeReply` message

-}
type alias GetTradeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetTradeReply


{-| The field numbers for the fields of `GetTradeRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetTradeRequest : { tradeId : Int }
fieldNumbersGetTradeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetTradeRequest


{-| Default for GetTradeRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetTradeRequest : GetTradeRequest
defaultGetTradeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetTradeRequest


{-| Declares how to decode a `GetTradeRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetTradeRequest : Protobuf.Decode.Decoder GetTradeRequest
decodeGetTradeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetTradeRequest


{-| Declares how to encode a `GetTradeRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetTradeRequest : GetTradeRequest -> Protobuf.Encode.Encoder
encodeGetTradeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetTradeRequest


{-| `GetTradeRequest` message

-}
type alias GetTradeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetTradeRequest


{-| The field numbers for the fields of `ConfirmPaymentReceivedReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersConfirmPaymentReceivedReply : {}
fieldNumbersConfirmPaymentReceivedReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ConfirmPaymentReceivedReply


{-| Default for ConfirmPaymentReceivedReply. Should only be used for 'required' decoders as an initial value.

-}
defaultConfirmPaymentReceivedReply : ConfirmPaymentReceivedReply
defaultConfirmPaymentReceivedReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ConfirmPaymentReceivedReply


{-| Declares how to decode a `ConfirmPaymentReceivedReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeConfirmPaymentReceivedReply : Protobuf.Decode.Decoder ConfirmPaymentReceivedReply
decodeConfirmPaymentReceivedReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ConfirmPaymentReceivedReply


{-| Declares how to encode a `ConfirmPaymentReceivedReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeConfirmPaymentReceivedReply : ConfirmPaymentReceivedReply -> Protobuf.Encode.Encoder
encodeConfirmPaymentReceivedReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ConfirmPaymentReceivedReply


{-| `ConfirmPaymentReceivedReply` message

-}
type alias ConfirmPaymentReceivedReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ConfirmPaymentReceivedReply


{-| The field numbers for the fields of `ConfirmPaymentReceivedRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersConfirmPaymentReceivedRequest : { tradeId : Int }
fieldNumbersConfirmPaymentReceivedRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ConfirmPaymentReceivedRequest


{-| Default for ConfirmPaymentReceivedRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultConfirmPaymentReceivedRequest : ConfirmPaymentReceivedRequest
defaultConfirmPaymentReceivedRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ConfirmPaymentReceivedRequest


{-| Declares how to decode a `ConfirmPaymentReceivedRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeConfirmPaymentReceivedRequest : Protobuf.Decode.Decoder ConfirmPaymentReceivedRequest
decodeConfirmPaymentReceivedRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ConfirmPaymentReceivedRequest


{-| Declares how to encode a `ConfirmPaymentReceivedRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeConfirmPaymentReceivedRequest : ConfirmPaymentReceivedRequest -> Protobuf.Encode.Encoder
encodeConfirmPaymentReceivedRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ConfirmPaymentReceivedRequest


{-| `ConfirmPaymentReceivedRequest` message

-}
type alias ConfirmPaymentReceivedRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ConfirmPaymentReceivedRequest


{-| The field numbers for the fields of `ConfirmPaymentSentReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersConfirmPaymentSentReply : {}
fieldNumbersConfirmPaymentSentReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ConfirmPaymentSentReply


{-| Default for ConfirmPaymentSentReply. Should only be used for 'required' decoders as an initial value.

-}
defaultConfirmPaymentSentReply : ConfirmPaymentSentReply
defaultConfirmPaymentSentReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ConfirmPaymentSentReply


{-| Declares how to decode a `ConfirmPaymentSentReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeConfirmPaymentSentReply : Protobuf.Decode.Decoder ConfirmPaymentSentReply
decodeConfirmPaymentSentReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ConfirmPaymentSentReply


{-| Declares how to encode a `ConfirmPaymentSentReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeConfirmPaymentSentReply : ConfirmPaymentSentReply -> Protobuf.Encode.Encoder
encodeConfirmPaymentSentReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ConfirmPaymentSentReply


{-| `ConfirmPaymentSentReply` message

-}
type alias ConfirmPaymentSentReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ConfirmPaymentSentReply


{-| The field numbers for the fields of `ConfirmPaymentSentRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersConfirmPaymentSentRequest : { tradeId : Int }
fieldNumbersConfirmPaymentSentRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ConfirmPaymentSentRequest


{-| Default for ConfirmPaymentSentRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultConfirmPaymentSentRequest : ConfirmPaymentSentRequest
defaultConfirmPaymentSentRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ConfirmPaymentSentRequest


{-| Declares how to decode a `ConfirmPaymentSentRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeConfirmPaymentSentRequest : Protobuf.Decode.Decoder ConfirmPaymentSentRequest
decodeConfirmPaymentSentRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ConfirmPaymentSentRequest


{-| Declares how to encode a `ConfirmPaymentSentRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeConfirmPaymentSentRequest : ConfirmPaymentSentRequest -> Protobuf.Encode.Encoder
encodeConfirmPaymentSentRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ConfirmPaymentSentRequest


{-| `ConfirmPaymentSentRequest` message

-}
type alias ConfirmPaymentSentRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ConfirmPaymentSentRequest


{-| The field numbers for the fields of `TakeOfferReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersTakeOfferReply : { trade : Int, failureReason : Int }
fieldNumbersTakeOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__TakeOfferReply


{-| Default for TakeOfferReply. Should only be used for 'required' decoders as an initial value.

-}
defaultTakeOfferReply : TakeOfferReply
defaultTakeOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__TakeOfferReply


{-| Declares how to decode a `TakeOfferReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeTakeOfferReply : Protobuf.Decode.Decoder TakeOfferReply
decodeTakeOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__TakeOfferReply


{-| Declares how to encode a `TakeOfferReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeTakeOfferReply : TakeOfferReply -> Protobuf.Encode.Encoder
encodeTakeOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__TakeOfferReply


{-| `TakeOfferReply` message

-}
type alias TakeOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__TakeOfferReply


{-| The field numbers for the fields of `TakeOfferRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersTakeOfferRequest : { offerId : Int, paymentAccountId : Int, amount : Int }
fieldNumbersTakeOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__TakeOfferRequest


{-| Default for TakeOfferRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultTakeOfferRequest : TakeOfferRequest
defaultTakeOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__TakeOfferRequest


{-| Declares how to decode a `TakeOfferRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeTakeOfferRequest : Protobuf.Decode.Decoder TakeOfferRequest
decodeTakeOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__TakeOfferRequest


{-| Declares how to encode a `TakeOfferRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeTakeOfferRequest : TakeOfferRequest -> Protobuf.Encode.Encoder
encodeTakeOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__TakeOfferRequest


{-| `TakeOfferRequest` message

-}
type alias TakeOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__TakeOfferRequest


{-| The field numbers for the fields of `StopReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersStopReply : {}
fieldNumbersStopReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__StopReply


{-| Default for StopReply. Should only be used for 'required' decoders as an initial value.

-}
defaultStopReply : StopReply
defaultStopReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__StopReply


{-| Declares how to decode a `StopReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeStopReply : Protobuf.Decode.Decoder StopReply
decodeStopReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__StopReply


{-| Declares how to encode a `StopReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeStopReply : StopReply -> Protobuf.Encode.Encoder
encodeStopReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__StopReply


{-| `StopReply` message

-}
type alias StopReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__StopReply


{-| The field numbers for the fields of `StopRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersStopRequest : {}
fieldNumbersStopRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__StopRequest


{-| Default for StopRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultStopRequest : StopRequest
defaultStopRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__StopRequest


{-| Declares how to decode a `StopRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeStopRequest : Protobuf.Decode.Decoder StopRequest
decodeStopRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__StopRequest


{-| Declares how to encode a `StopRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeStopRequest : StopRequest -> Protobuf.Encode.Encoder
encodeStopRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__StopRequest


{-| `StopRequest` message

-}
type alias StopRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__StopRequest


{-| The field numbers for the fields of `GetTradeStatisticsReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetTradeStatisticsReply : { tradeStatistics : Int }
fieldNumbersGetTradeStatisticsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetTradeStatisticsReply


{-| Default for GetTradeStatisticsReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetTradeStatisticsReply : GetTradeStatisticsReply
defaultGetTradeStatisticsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetTradeStatisticsReply


{-| Declares how to decode a `GetTradeStatisticsReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetTradeStatisticsReply : Protobuf.Decode.Decoder GetTradeStatisticsReply
decodeGetTradeStatisticsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetTradeStatisticsReply


{-| Declares how to encode a `GetTradeStatisticsReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetTradeStatisticsReply : GetTradeStatisticsReply -> Protobuf.Encode.Encoder
encodeGetTradeStatisticsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetTradeStatisticsReply


{-| `GetTradeStatisticsReply` message

-}
type alias GetTradeStatisticsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetTradeStatisticsReply


{-| The field numbers for the fields of `GetTradeStatisticsRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetTradeStatisticsRequest : {}
fieldNumbersGetTradeStatisticsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetTradeStatisticsRequest


{-| Default for GetTradeStatisticsRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetTradeStatisticsRequest : GetTradeStatisticsRequest
defaultGetTradeStatisticsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetTradeStatisticsRequest


{-| Declares how to decode a `GetTradeStatisticsRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetTradeStatisticsRequest : Protobuf.Decode.Decoder GetTradeStatisticsRequest
decodeGetTradeStatisticsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetTradeStatisticsRequest


{-| Declares how to encode a `GetTradeStatisticsRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetTradeStatisticsRequest : GetTradeStatisticsRequest -> Protobuf.Encode.Encoder
encodeGetTradeStatisticsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetTradeStatisticsRequest


{-| `GetTradeStatisticsRequest` message

-}
type alias GetTradeStatisticsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetTradeStatisticsRequest


{-| The field numbers for the fields of `MarketDepthInfo`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMarketDepthInfo : { currencyCode : Int, buyPrices : Int, buyDepth : Int, sellPrices : Int, sellDepth : Int }
fieldNumbersMarketDepthInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MarketDepthInfo


{-| Default for MarketDepthInfo. Should only be used for 'required' decoders as an initial value.

-}
defaultMarketDepthInfo : MarketDepthInfo
defaultMarketDepthInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MarketDepthInfo


{-| Declares how to decode a `MarketDepthInfo` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMarketDepthInfo : Protobuf.Decode.Decoder MarketDepthInfo
decodeMarketDepthInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MarketDepthInfo


{-| Declares how to encode a `MarketDepthInfo` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMarketDepthInfo : MarketDepthInfo -> Protobuf.Encode.Encoder
encodeMarketDepthInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MarketDepthInfo


{-| `MarketDepthInfo` message

-}
type alias MarketDepthInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MarketDepthInfo


{-| The field numbers for the fields of `MarketDepthReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMarketDepthReply : { marketDepth : Int }
fieldNumbersMarketDepthReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MarketDepthReply


{-| Default for MarketDepthReply. Should only be used for 'required' decoders as an initial value.

-}
defaultMarketDepthReply : MarketDepthReply
defaultMarketDepthReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MarketDepthReply


{-| Declares how to decode a `MarketDepthReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMarketDepthReply : Protobuf.Decode.Decoder MarketDepthReply
decodeMarketDepthReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MarketDepthReply


{-| Declares how to encode a `MarketDepthReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMarketDepthReply : MarketDepthReply -> Protobuf.Encode.Encoder
encodeMarketDepthReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MarketDepthReply


{-| `MarketDepthReply` message

-}
type alias MarketDepthReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MarketDepthReply


{-| The field numbers for the fields of `MarketDepthRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMarketDepthRequest : { currencyCode : Int }
fieldNumbersMarketDepthRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MarketDepthRequest


{-| Default for MarketDepthRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultMarketDepthRequest : MarketDepthRequest
defaultMarketDepthRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MarketDepthRequest


{-| Declares how to decode a `MarketDepthRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMarketDepthRequest : Protobuf.Decode.Decoder MarketDepthRequest
decodeMarketDepthRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MarketDepthRequest


{-| Declares how to encode a `MarketDepthRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMarketDepthRequest : MarketDepthRequest -> Protobuf.Encode.Encoder
encodeMarketDepthRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MarketDepthRequest


{-| `MarketDepthRequest` message

-}
type alias MarketDepthRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MarketDepthRequest


{-| The field numbers for the fields of `MarketPriceInfo`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMarketPriceInfo : { currencyCode : Int, price : Int }
fieldNumbersMarketPriceInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MarketPriceInfo


{-| Default for MarketPriceInfo. Should only be used for 'required' decoders as an initial value.

-}
defaultMarketPriceInfo : MarketPriceInfo
defaultMarketPriceInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MarketPriceInfo


{-| Declares how to decode a `MarketPriceInfo` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMarketPriceInfo : Protobuf.Decode.Decoder MarketPriceInfo
decodeMarketPriceInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MarketPriceInfo


{-| Declares how to encode a `MarketPriceInfo` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMarketPriceInfo : MarketPriceInfo -> Protobuf.Encode.Encoder
encodeMarketPriceInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MarketPriceInfo


{-| `MarketPriceInfo` message

-}
type alias MarketPriceInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MarketPriceInfo


{-| The field numbers for the fields of `MarketPricesReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMarketPricesReply : { marketPrice : Int }
fieldNumbersMarketPricesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MarketPricesReply


{-| Default for MarketPricesReply. Should only be used for 'required' decoders as an initial value.

-}
defaultMarketPricesReply : MarketPricesReply
defaultMarketPricesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MarketPricesReply


{-| Declares how to decode a `MarketPricesReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMarketPricesReply : Protobuf.Decode.Decoder MarketPricesReply
decodeMarketPricesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MarketPricesReply


{-| Declares how to encode a `MarketPricesReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMarketPricesReply : MarketPricesReply -> Protobuf.Encode.Encoder
encodeMarketPricesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MarketPricesReply


{-| `MarketPricesReply` message

-}
type alias MarketPricesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MarketPricesReply


{-| The field numbers for the fields of `MarketPricesRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMarketPricesRequest : {}
fieldNumbersMarketPricesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MarketPricesRequest


{-| Default for MarketPricesRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultMarketPricesRequest : MarketPricesRequest
defaultMarketPricesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MarketPricesRequest


{-| Declares how to decode a `MarketPricesRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMarketPricesRequest : Protobuf.Decode.Decoder MarketPricesRequest
decodeMarketPricesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MarketPricesRequest


{-| Declares how to encode a `MarketPricesRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMarketPricesRequest : MarketPricesRequest -> Protobuf.Encode.Encoder
encodeMarketPricesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MarketPricesRequest


{-| `MarketPricesRequest` message

-}
type alias MarketPricesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MarketPricesRequest


{-| The field numbers for the fields of `MarketPriceReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMarketPriceReply : { price : Int }
fieldNumbersMarketPriceReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MarketPriceReply


{-| Default for MarketPriceReply. Should only be used for 'required' decoders as an initial value.

-}
defaultMarketPriceReply : MarketPriceReply
defaultMarketPriceReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MarketPriceReply


{-| Declares how to decode a `MarketPriceReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMarketPriceReply : Protobuf.Decode.Decoder MarketPriceReply
decodeMarketPriceReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MarketPriceReply


{-| Declares how to encode a `MarketPriceReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMarketPriceReply : MarketPriceReply -> Protobuf.Encode.Encoder
encodeMarketPriceReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MarketPriceReply


{-| `MarketPriceReply` message

-}
type alias MarketPriceReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MarketPriceReply


{-| The field numbers for the fields of `MarketPriceRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMarketPriceRequest : { currencyCode : Int }
fieldNumbersMarketPriceRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MarketPriceRequest


{-| Default for MarketPriceRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultMarketPriceRequest : MarketPriceRequest
defaultMarketPriceRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MarketPriceRequest


{-| Declares how to decode a `MarketPriceRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMarketPriceRequest : Protobuf.Decode.Decoder MarketPriceRequest
decodeMarketPriceRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MarketPriceRequest


{-| Declares how to encode a `MarketPriceRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMarketPriceRequest : MarketPriceRequest -> Protobuf.Encode.Encoder
encodeMarketPriceRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MarketPriceRequest


{-| `MarketPriceRequest` message

-}
type alias MarketPriceRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MarketPriceRequest


{-| The field numbers for the fields of `ValidateFormFieldReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersValidateFormFieldReply : {}
fieldNumbersValidateFormFieldReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ValidateFormFieldReply


{-| Default for ValidateFormFieldReply. Should only be used for 'required' decoders as an initial value.

-}
defaultValidateFormFieldReply : ValidateFormFieldReply
defaultValidateFormFieldReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ValidateFormFieldReply


{-| Declares how to decode a `ValidateFormFieldReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeValidateFormFieldReply : Protobuf.Decode.Decoder ValidateFormFieldReply
decodeValidateFormFieldReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ValidateFormFieldReply


{-| Declares how to encode a `ValidateFormFieldReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeValidateFormFieldReply : ValidateFormFieldReply -> Protobuf.Encode.Encoder
encodeValidateFormFieldReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ValidateFormFieldReply


{-| `ValidateFormFieldReply` message

-}
type alias ValidateFormFieldReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ValidateFormFieldReply


{-| The field numbers for the fields of `ValidateFormFieldRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersValidateFormFieldRequest : { form : Int, fieldId : Int, value : Int }
fieldNumbersValidateFormFieldRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ValidateFormFieldRequest


{-| Default for ValidateFormFieldRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultValidateFormFieldRequest : ValidateFormFieldRequest
defaultValidateFormFieldRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ValidateFormFieldRequest


{-| Declares how to decode a `ValidateFormFieldRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeValidateFormFieldRequest : Protobuf.Decode.Decoder ValidateFormFieldRequest
decodeValidateFormFieldRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ValidateFormFieldRequest


{-| Declares how to encode a `ValidateFormFieldRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeValidateFormFieldRequest : ValidateFormFieldRequest -> Protobuf.Encode.Encoder
encodeValidateFormFieldRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ValidateFormFieldRequest


{-| `ValidateFormFieldRequest` message

-}
type alias ValidateFormFieldRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ValidateFormFieldRequest


{-| The field numbers for the fields of `GetCryptoCurrencyPaymentMethodsReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetCryptoCurrencyPaymentMethodsReply : { paymentMethods : Int }
fieldNumbersGetCryptoCurrencyPaymentMethodsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetCryptoCurrencyPaymentMethodsReply


{-| Default for GetCryptoCurrencyPaymentMethodsReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetCryptoCurrencyPaymentMethodsReply : GetCryptoCurrencyPaymentMethodsReply
defaultGetCryptoCurrencyPaymentMethodsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetCryptoCurrencyPaymentMethodsReply


{-| Declares how to decode a `GetCryptoCurrencyPaymentMethodsReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetCryptoCurrencyPaymentMethodsReply : Protobuf.Decode.Decoder GetCryptoCurrencyPaymentMethodsReply
decodeGetCryptoCurrencyPaymentMethodsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetCryptoCurrencyPaymentMethodsReply


{-| Declares how to encode a `GetCryptoCurrencyPaymentMethodsReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetCryptoCurrencyPaymentMethodsReply : GetCryptoCurrencyPaymentMethodsReply -> Protobuf.Encode.Encoder
encodeGetCryptoCurrencyPaymentMethodsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetCryptoCurrencyPaymentMethodsReply


{-| `GetCryptoCurrencyPaymentMethodsReply` message

-}
type alias GetCryptoCurrencyPaymentMethodsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetCryptoCurrencyPaymentMethodsReply


{-| The field numbers for the fields of `GetCryptoCurrencyPaymentMethodsRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetCryptoCurrencyPaymentMethodsRequest : {}
fieldNumbersGetCryptoCurrencyPaymentMethodsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetCryptoCurrencyPaymentMethodsRequest


{-| Default for GetCryptoCurrencyPaymentMethodsRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetCryptoCurrencyPaymentMethodsRequest : GetCryptoCurrencyPaymentMethodsRequest
defaultGetCryptoCurrencyPaymentMethodsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetCryptoCurrencyPaymentMethodsRequest


{-| Declares how to decode a `GetCryptoCurrencyPaymentMethodsRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetCryptoCurrencyPaymentMethodsRequest : Protobuf.Decode.Decoder GetCryptoCurrencyPaymentMethodsRequest
decodeGetCryptoCurrencyPaymentMethodsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetCryptoCurrencyPaymentMethodsRequest


{-| Declares how to encode a `GetCryptoCurrencyPaymentMethodsRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetCryptoCurrencyPaymentMethodsRequest : GetCryptoCurrencyPaymentMethodsRequest -> Protobuf.Encode.Encoder
encodeGetCryptoCurrencyPaymentMethodsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetCryptoCurrencyPaymentMethodsRequest


{-| `GetCryptoCurrencyPaymentMethodsRequest` message

-}
type alias GetCryptoCurrencyPaymentMethodsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetCryptoCurrencyPaymentMethodsRequest


{-| The field numbers for the fields of `CreateCryptoCurrencyPaymentAccountReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCreateCryptoCurrencyPaymentAccountReply : { paymentAccount : Int }
fieldNumbersCreateCryptoCurrencyPaymentAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CreateCryptoCurrencyPaymentAccountReply


{-| Default for CreateCryptoCurrencyPaymentAccountReply. Should only be used for 'required' decoders as an initial value.

-}
defaultCreateCryptoCurrencyPaymentAccountReply : CreateCryptoCurrencyPaymentAccountReply
defaultCreateCryptoCurrencyPaymentAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CreateCryptoCurrencyPaymentAccountReply


{-| Declares how to decode a `CreateCryptoCurrencyPaymentAccountReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCreateCryptoCurrencyPaymentAccountReply : Protobuf.Decode.Decoder CreateCryptoCurrencyPaymentAccountReply
decodeCreateCryptoCurrencyPaymentAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CreateCryptoCurrencyPaymentAccountReply


{-| Declares how to encode a `CreateCryptoCurrencyPaymentAccountReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCreateCryptoCurrencyPaymentAccountReply : CreateCryptoCurrencyPaymentAccountReply -> Protobuf.Encode.Encoder
encodeCreateCryptoCurrencyPaymentAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CreateCryptoCurrencyPaymentAccountReply


{-| `CreateCryptoCurrencyPaymentAccountReply` message

-}
type alias CreateCryptoCurrencyPaymentAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CreateCryptoCurrencyPaymentAccountReply


{-| The field numbers for the fields of `CreateCryptoCurrencyPaymentAccountRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCreateCryptoCurrencyPaymentAccountRequest :
    { accountName : Int, currencyCode : Int, address : Int, tradeInstant : Int }
fieldNumbersCreateCryptoCurrencyPaymentAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CreateCryptoCurrencyPaymentAccountRequest


{-| Default for CreateCryptoCurrencyPaymentAccountRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultCreateCryptoCurrencyPaymentAccountRequest : CreateCryptoCurrencyPaymentAccountRequest
defaultCreateCryptoCurrencyPaymentAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CreateCryptoCurrencyPaymentAccountRequest


{-| Declares how to decode a `CreateCryptoCurrencyPaymentAccountRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCreateCryptoCurrencyPaymentAccountRequest : Protobuf.Decode.Decoder CreateCryptoCurrencyPaymentAccountRequest
decodeCreateCryptoCurrencyPaymentAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CreateCryptoCurrencyPaymentAccountRequest


{-| Declares how to encode a `CreateCryptoCurrencyPaymentAccountRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCreateCryptoCurrencyPaymentAccountRequest : CreateCryptoCurrencyPaymentAccountRequest -> Protobuf.Encode.Encoder
encodeCreateCryptoCurrencyPaymentAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CreateCryptoCurrencyPaymentAccountRequest


{-| `CreateCryptoCurrencyPaymentAccountRequest` message

-}
type alias CreateCryptoCurrencyPaymentAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CreateCryptoCurrencyPaymentAccountRequest


{-| The field numbers for the fields of `GetPaymentAccountFormAsJsonReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetPaymentAccountFormAsJsonReply : { paymentAccountFormAsJson : Int }
fieldNumbersGetPaymentAccountFormAsJsonReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetPaymentAccountFormAsJsonReply


{-| Default for GetPaymentAccountFormAsJsonReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetPaymentAccountFormAsJsonReply : GetPaymentAccountFormAsJsonReply
defaultGetPaymentAccountFormAsJsonReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetPaymentAccountFormAsJsonReply


{-| Declares how to decode a `GetPaymentAccountFormAsJsonReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetPaymentAccountFormAsJsonReply : Protobuf.Decode.Decoder GetPaymentAccountFormAsJsonReply
decodeGetPaymentAccountFormAsJsonReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetPaymentAccountFormAsJsonReply


{-| Declares how to encode a `GetPaymentAccountFormAsJsonReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetPaymentAccountFormAsJsonReply : GetPaymentAccountFormAsJsonReply -> Protobuf.Encode.Encoder
encodeGetPaymentAccountFormAsJsonReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetPaymentAccountFormAsJsonReply


{-| `GetPaymentAccountFormAsJsonReply` message

-}
type alias GetPaymentAccountFormAsJsonReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetPaymentAccountFormAsJsonReply


{-| The field numbers for the fields of `GetPaymentAccountFormAsJsonRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetPaymentAccountFormAsJsonRequest : { paymentMethodId : Int }
fieldNumbersGetPaymentAccountFormAsJsonRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetPaymentAccountFormAsJsonRequest


{-| Default for GetPaymentAccountFormAsJsonRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetPaymentAccountFormAsJsonRequest : GetPaymentAccountFormAsJsonRequest
defaultGetPaymentAccountFormAsJsonRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetPaymentAccountFormAsJsonRequest


{-| Declares how to decode a `GetPaymentAccountFormAsJsonRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetPaymentAccountFormAsJsonRequest : Protobuf.Decode.Decoder GetPaymentAccountFormAsJsonRequest
decodeGetPaymentAccountFormAsJsonRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetPaymentAccountFormAsJsonRequest


{-| Declares how to encode a `GetPaymentAccountFormAsJsonRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetPaymentAccountFormAsJsonRequest : GetPaymentAccountFormAsJsonRequest -> Protobuf.Encode.Encoder
encodeGetPaymentAccountFormAsJsonRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetPaymentAccountFormAsJsonRequest


{-| `GetPaymentAccountFormAsJsonRequest` message

-}
type alias GetPaymentAccountFormAsJsonRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetPaymentAccountFormAsJsonRequest


{-| The field numbers for the fields of `GetPaymentAccountFormReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetPaymentAccountFormReply : { paymentAccountForm : Int }
fieldNumbersGetPaymentAccountFormReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetPaymentAccountFormReply


{-| Default for GetPaymentAccountFormReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetPaymentAccountFormReply : GetPaymentAccountFormReply
defaultGetPaymentAccountFormReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetPaymentAccountFormReply


{-| Declares how to decode a `GetPaymentAccountFormReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetPaymentAccountFormReply : Protobuf.Decode.Decoder GetPaymentAccountFormReply
decodeGetPaymentAccountFormReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetPaymentAccountFormReply


{-| Declares how to encode a `GetPaymentAccountFormReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetPaymentAccountFormReply : GetPaymentAccountFormReply -> Protobuf.Encode.Encoder
encodeGetPaymentAccountFormReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetPaymentAccountFormReply


{-| `GetPaymentAccountFormReply` message

-}
type alias GetPaymentAccountFormReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetPaymentAccountFormReply


{-| The field numbers for the fields of `GetPaymentAccountFormRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetPaymentAccountFormRequest : { paymentMethodId : Int, paymentAccountPayload : Int }
fieldNumbersGetPaymentAccountFormRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetPaymentAccountFormRequest


{-| Default for GetPaymentAccountFormRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetPaymentAccountFormRequest : GetPaymentAccountFormRequest
defaultGetPaymentAccountFormRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetPaymentAccountFormRequest


{-| Declares how to decode a `GetPaymentAccountFormRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetPaymentAccountFormRequest : Protobuf.Decode.Decoder GetPaymentAccountFormRequest
decodeGetPaymentAccountFormRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetPaymentAccountFormRequest


{-| Declares how to encode a `GetPaymentAccountFormRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetPaymentAccountFormRequest : GetPaymentAccountFormRequest -> Protobuf.Encode.Encoder
encodeGetPaymentAccountFormRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetPaymentAccountFormRequest


{-| `GetPaymentAccountFormRequest` message

-}
type alias GetPaymentAccountFormRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetPaymentAccountFormRequest


{-| The field numbers for the fields of `GetPaymentMethodsReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetPaymentMethodsReply : { paymentMethods : Int }
fieldNumbersGetPaymentMethodsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetPaymentMethodsReply


{-| Default for GetPaymentMethodsReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetPaymentMethodsReply : GetPaymentMethodsReply
defaultGetPaymentMethodsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetPaymentMethodsReply


{-| Declares how to decode a `GetPaymentMethodsReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetPaymentMethodsReply : Protobuf.Decode.Decoder GetPaymentMethodsReply
decodeGetPaymentMethodsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetPaymentMethodsReply


{-| Declares how to encode a `GetPaymentMethodsReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetPaymentMethodsReply : GetPaymentMethodsReply -> Protobuf.Encode.Encoder
encodeGetPaymentMethodsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetPaymentMethodsReply


{-| `GetPaymentMethodsReply` message

-}
type alias GetPaymentMethodsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetPaymentMethodsReply


{-| The field numbers for the fields of `GetPaymentMethodsRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetPaymentMethodsRequest : {}
fieldNumbersGetPaymentMethodsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetPaymentMethodsRequest


{-| Default for GetPaymentMethodsRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetPaymentMethodsRequest : GetPaymentMethodsRequest
defaultGetPaymentMethodsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetPaymentMethodsRequest


{-| Declares how to decode a `GetPaymentMethodsRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetPaymentMethodsRequest : Protobuf.Decode.Decoder GetPaymentMethodsRequest
decodeGetPaymentMethodsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetPaymentMethodsRequest


{-| Declares how to encode a `GetPaymentMethodsRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetPaymentMethodsRequest : GetPaymentMethodsRequest -> Protobuf.Encode.Encoder
encodeGetPaymentMethodsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetPaymentMethodsRequest


{-| `GetPaymentMethodsRequest` message

-}
type alias GetPaymentMethodsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetPaymentMethodsRequest


{-| The field numbers for the fields of `GetPaymentAccountsReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetPaymentAccountsReply : { paymentAccounts : Int }
fieldNumbersGetPaymentAccountsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetPaymentAccountsReply


{-| Default for GetPaymentAccountsReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetPaymentAccountsReply : GetPaymentAccountsReply
defaultGetPaymentAccountsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetPaymentAccountsReply


{-| Declares how to decode a `GetPaymentAccountsReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetPaymentAccountsReply : Protobuf.Decode.Decoder GetPaymentAccountsReply
decodeGetPaymentAccountsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetPaymentAccountsReply


{-| Declares how to encode a `GetPaymentAccountsReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetPaymentAccountsReply : GetPaymentAccountsReply -> Protobuf.Encode.Encoder
encodeGetPaymentAccountsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetPaymentAccountsReply


{-| `GetPaymentAccountsReply` message

-}
type alias GetPaymentAccountsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetPaymentAccountsReply


{-| The field numbers for the fields of `GetPaymentAccountsRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetPaymentAccountsRequest : {}
fieldNumbersGetPaymentAccountsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetPaymentAccountsRequest


{-| Default for GetPaymentAccountsRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetPaymentAccountsRequest : GetPaymentAccountsRequest
defaultGetPaymentAccountsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetPaymentAccountsRequest


{-| Declares how to decode a `GetPaymentAccountsRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetPaymentAccountsRequest : Protobuf.Decode.Decoder GetPaymentAccountsRequest
decodeGetPaymentAccountsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetPaymentAccountsRequest


{-| Declares how to encode a `GetPaymentAccountsRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetPaymentAccountsRequest : GetPaymentAccountsRequest -> Protobuf.Encode.Encoder
encodeGetPaymentAccountsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetPaymentAccountsRequest


{-| `GetPaymentAccountsRequest` message

-}
type alias GetPaymentAccountsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetPaymentAccountsRequest


{-| The field numbers for the fields of `CreatePaymentAccountReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCreatePaymentAccountReply : { paymentAccount : Int }
fieldNumbersCreatePaymentAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CreatePaymentAccountReply


{-| Default for CreatePaymentAccountReply. Should only be used for 'required' decoders as an initial value.

-}
defaultCreatePaymentAccountReply : CreatePaymentAccountReply
defaultCreatePaymentAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CreatePaymentAccountReply


{-| Declares how to decode a `CreatePaymentAccountReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCreatePaymentAccountReply : Protobuf.Decode.Decoder CreatePaymentAccountReply
decodeCreatePaymentAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CreatePaymentAccountReply


{-| Declares how to encode a `CreatePaymentAccountReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCreatePaymentAccountReply : CreatePaymentAccountReply -> Protobuf.Encode.Encoder
encodeCreatePaymentAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CreatePaymentAccountReply


{-| `CreatePaymentAccountReply` message

-}
type alias CreatePaymentAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CreatePaymentAccountReply


{-| The field numbers for the fields of `CreatePaymentAccountRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCreatePaymentAccountRequest : { paymentAccountForm : Int, paymentAccountFormAsJson : Int }
fieldNumbersCreatePaymentAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CreatePaymentAccountRequest


{-| Default for CreatePaymentAccountRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultCreatePaymentAccountRequest : CreatePaymentAccountRequest
defaultCreatePaymentAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CreatePaymentAccountRequest


{-| Declares how to decode a `CreatePaymentAccountRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCreatePaymentAccountRequest : Protobuf.Decode.Decoder CreatePaymentAccountRequest
decodeCreatePaymentAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CreatePaymentAccountRequest


{-| Declares how to encode a `CreatePaymentAccountRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCreatePaymentAccountRequest : CreatePaymentAccountRequest -> Protobuf.Encode.Encoder
encodeCreatePaymentAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CreatePaymentAccountRequest


{-| `CreatePaymentAccountRequest` message

-}
type alias CreatePaymentAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CreatePaymentAccountRequest


{-| The field numbers for the fields of `AvailabilityResultWithDescription`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAvailabilityResultWithDescription : { availabilityResult : Int, description : Int }
fieldNumbersAvailabilityResultWithDescription =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__AvailabilityResultWithDescription


{-| Default for AvailabilityResultWithDescription. Should only be used for 'required' decoders as an initial value.

-}
defaultAvailabilityResultWithDescription : AvailabilityResultWithDescription
defaultAvailabilityResultWithDescription =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__AvailabilityResultWithDescription


{-| Declares how to decode a `AvailabilityResultWithDescription` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAvailabilityResultWithDescription : Protobuf.Decode.Decoder AvailabilityResultWithDescription
decodeAvailabilityResultWithDescription =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__AvailabilityResultWithDescription


{-| Declares how to encode a `AvailabilityResultWithDescription` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAvailabilityResultWithDescription : AvailabilityResultWithDescription -> Protobuf.Encode.Encoder
encodeAvailabilityResultWithDescription =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__AvailabilityResultWithDescription


{-| `AvailabilityResultWithDescription` message

-}
type alias AvailabilityResultWithDescription =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__AvailabilityResultWithDescription


{-| The field numbers for the fields of `OfferInfo`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersOfferInfo :
    { id : Int
    , direction : Int
    , price : Int
    , useMarketBasedPrice : Int
    , marketPriceMarginPct : Int
    , amount : Int
    , minAmount : Int
    , makerFeePct : Int
    , takerFeePct : Int
    , penaltyFeePct : Int
    , buyerSecurityDepositPct : Int
    , sellerSecurityDepositPct : Int
    , volume : Int
    , minVolume : Int
    , triggerPrice : Int
    , paymentAccountId : Int
    , paymentMethodId : Int
    , paymentMethodShortName : Int
    , baseCurrencyCode : Int
    , counterCurrencyCode : Int
    , date : Int
    , state : Int
    , isActivated : Int
    , isMyOffer : Int
    , ownerNodeAddress : Int
    , pubKeyRing : Int
    , versionNr : Int
    , protocolVersion : Int
    , arbitratorSigner : Int
    , splitOutputTxHash : Int
    , splitOutputTxFee : Int
    }
fieldNumbersOfferInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__OfferInfo


{-| Default for OfferInfo. Should only be used for 'required' decoders as an initial value.

-}
defaultOfferInfo : OfferInfo
defaultOfferInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__OfferInfo


{-| Declares how to decode a `OfferInfo` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeOfferInfo : Protobuf.Decode.Decoder OfferInfo
decodeOfferInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__OfferInfo


{-| Declares how to encode a `OfferInfo` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeOfferInfo : OfferInfo -> Protobuf.Encode.Encoder
encodeOfferInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__OfferInfo


{-| `OfferInfo` message

-}
type alias OfferInfo =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__OfferInfo


{-| The field numbers for the fields of `CancelOfferReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCancelOfferReply : {}
fieldNumbersCancelOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CancelOfferReply


{-| Default for CancelOfferReply. Should only be used for 'required' decoders as an initial value.

-}
defaultCancelOfferReply : CancelOfferReply
defaultCancelOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CancelOfferReply


{-| Declares how to decode a `CancelOfferReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCancelOfferReply : Protobuf.Decode.Decoder CancelOfferReply
decodeCancelOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CancelOfferReply


{-| Declares how to encode a `CancelOfferReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCancelOfferReply : CancelOfferReply -> Protobuf.Encode.Encoder
encodeCancelOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CancelOfferReply


{-| `CancelOfferReply` message

-}
type alias CancelOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CancelOfferReply


{-| The field numbers for the fields of `CancelOfferRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCancelOfferRequest : { id : Int }
fieldNumbersCancelOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CancelOfferRequest


{-| Default for CancelOfferRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultCancelOfferRequest : CancelOfferRequest
defaultCancelOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CancelOfferRequest


{-| Declares how to decode a `CancelOfferRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCancelOfferRequest : Protobuf.Decode.Decoder CancelOfferRequest
decodeCancelOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CancelOfferRequest


{-| Declares how to encode a `CancelOfferRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCancelOfferRequest : CancelOfferRequest -> Protobuf.Encode.Encoder
encodeCancelOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CancelOfferRequest


{-| `CancelOfferRequest` message

-}
type alias CancelOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CancelOfferRequest


{-| The field numbers for the fields of `PostOfferReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPostOfferReply : { offer : Int }
fieldNumbersPostOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PostOfferReply


{-| Default for PostOfferReply. Should only be used for 'required' decoders as an initial value.

-}
defaultPostOfferReply : PostOfferReply
defaultPostOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PostOfferReply


{-| Declares how to decode a `PostOfferReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePostOfferReply : Protobuf.Decode.Decoder PostOfferReply
decodePostOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PostOfferReply


{-| Declares how to encode a `PostOfferReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePostOfferReply : PostOfferReply -> Protobuf.Encode.Encoder
encodePostOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PostOfferReply


{-| `PostOfferReply` message

-}
type alias PostOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PostOfferReply


{-| The field numbers for the fields of `PostOfferRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPostOfferRequest :
    { currencyCode : Int
    , direction : Int
    , price : Int
    , useMarketBasedPrice : Int
    , marketPriceMarginPct : Int
    , amount : Int
    , minAmount : Int
    , buyerSecurityDepositPct : Int
    , triggerPrice : Int
    , reserveExactAmount : Int
    , paymentAccountId : Int
    }
fieldNumbersPostOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PostOfferRequest


{-| Default for PostOfferRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultPostOfferRequest : PostOfferRequest
defaultPostOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PostOfferRequest


{-| Declares how to decode a `PostOfferRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePostOfferRequest : Protobuf.Decode.Decoder PostOfferRequest
decodePostOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PostOfferRequest


{-| Declares how to encode a `PostOfferRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePostOfferRequest : PostOfferRequest -> Protobuf.Encode.Encoder
encodePostOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PostOfferRequest


{-| `PostOfferRequest` message

-}
type alias PostOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PostOfferRequest


{-| The field numbers for the fields of `GetMyOffersReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetMyOffersReply : { offers : Int }
fieldNumbersGetMyOffersReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetMyOffersReply


{-| Default for GetMyOffersReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetMyOffersReply : GetMyOffersReply
defaultGetMyOffersReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetMyOffersReply


{-| Declares how to decode a `GetMyOffersReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetMyOffersReply : Protobuf.Decode.Decoder GetMyOffersReply
decodeGetMyOffersReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetMyOffersReply


{-| Declares how to encode a `GetMyOffersReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetMyOffersReply : GetMyOffersReply -> Protobuf.Encode.Encoder
encodeGetMyOffersReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetMyOffersReply


{-| `GetMyOffersReply` message

-}
type alias GetMyOffersReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetMyOffersReply


{-| The field numbers for the fields of `GetMyOffersRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetMyOffersRequest : { direction : Int, currencyCode : Int }
fieldNumbersGetMyOffersRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetMyOffersRequest


{-| Default for GetMyOffersRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetMyOffersRequest : GetMyOffersRequest
defaultGetMyOffersRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetMyOffersRequest


{-| Declares how to decode a `GetMyOffersRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetMyOffersRequest : Protobuf.Decode.Decoder GetMyOffersRequest
decodeGetMyOffersRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetMyOffersRequest


{-| Declares how to encode a `GetMyOffersRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetMyOffersRequest : GetMyOffersRequest -> Protobuf.Encode.Encoder
encodeGetMyOffersRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetMyOffersRequest


{-| `GetMyOffersRequest` message

-}
type alias GetMyOffersRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetMyOffersRequest


{-| The field numbers for the fields of `GetOffersReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetOffersReply : { offers : Int }
fieldNumbersGetOffersReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetOffersReply


{-| Default for GetOffersReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetOffersReply : GetOffersReply
defaultGetOffersReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetOffersReply


{-| Declares how to decode a `GetOffersReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetOffersReply : Protobuf.Decode.Decoder GetOffersReply
decodeGetOffersReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetOffersReply


{-| Declares how to encode a `GetOffersReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetOffersReply : GetOffersReply -> Protobuf.Encode.Encoder
encodeGetOffersReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetOffersReply


{-| `GetOffersReply` message

-}
type alias GetOffersReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetOffersReply


{-| The field numbers for the fields of `GetOffersRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetOffersRequest : { direction : Int, currencyCode : Int }
fieldNumbersGetOffersRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetOffersRequest


{-| Default for GetOffersRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetOffersRequest : GetOffersRequest
defaultGetOffersRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetOffersRequest


{-| Declares how to decode a `GetOffersRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetOffersRequest : Protobuf.Decode.Decoder GetOffersRequest
decodeGetOffersRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetOffersRequest


{-| Declares how to encode a `GetOffersRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetOffersRequest : GetOffersRequest -> Protobuf.Encode.Encoder
encodeGetOffersRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetOffersRequest


{-| `GetOffersRequest` message

-}
type alias GetOffersRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetOffersRequest


{-| The field numbers for the fields of `GetMyOfferReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetMyOfferReply : { offer : Int }
fieldNumbersGetMyOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetMyOfferReply


{-| Default for GetMyOfferReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetMyOfferReply : GetMyOfferReply
defaultGetMyOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetMyOfferReply


{-| Declares how to decode a `GetMyOfferReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetMyOfferReply : Protobuf.Decode.Decoder GetMyOfferReply
decodeGetMyOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetMyOfferReply


{-| Declares how to encode a `GetMyOfferReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetMyOfferReply : GetMyOfferReply -> Protobuf.Encode.Encoder
encodeGetMyOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetMyOfferReply


{-| `GetMyOfferReply` message

-}
type alias GetMyOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetMyOfferReply


{-| The field numbers for the fields of `GetMyOfferRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetMyOfferRequest : { id : Int }
fieldNumbersGetMyOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetMyOfferRequest


{-| Default for GetMyOfferRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetMyOfferRequest : GetMyOfferRequest
defaultGetMyOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetMyOfferRequest


{-| Declares how to decode a `GetMyOfferRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetMyOfferRequest : Protobuf.Decode.Decoder GetMyOfferRequest
decodeGetMyOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetMyOfferRequest


{-| Declares how to encode a `GetMyOfferRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetMyOfferRequest : GetMyOfferRequest -> Protobuf.Encode.Encoder
encodeGetMyOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetMyOfferRequest


{-| `GetMyOfferRequest` message

-}
type alias GetMyOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetMyOfferRequest


{-| The field numbers for the fields of `GetOfferReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetOfferReply : { offer : Int }
fieldNumbersGetOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetOfferReply


{-| Default for GetOfferReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetOfferReply : GetOfferReply
defaultGetOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetOfferReply


{-| Declares how to decode a `GetOfferReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetOfferReply : Protobuf.Decode.Decoder GetOfferReply
decodeGetOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetOfferReply


{-| Declares how to encode a `GetOfferReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetOfferReply : GetOfferReply -> Protobuf.Encode.Encoder
encodeGetOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetOfferReply


{-| `GetOfferReply` message

-}
type alias GetOfferReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetOfferReply


{-| The field numbers for the fields of `GetOfferRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetOfferRequest : { id : Int }
fieldNumbersGetOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetOfferRequest


{-| Default for GetOfferRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetOfferRequest : GetOfferRequest
defaultGetOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetOfferRequest


{-| Declares how to decode a `GetOfferRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetOfferRequest : Protobuf.Decode.Decoder GetOfferRequest
decodeGetOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetOfferRequest


{-| Declares how to encode a `GetOfferRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetOfferRequest : GetOfferRequest -> Protobuf.Encode.Encoder
encodeGetOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetOfferRequest


{-| `GetOfferRequest` message

-}
type alias GetOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetOfferRequest


{-| The field numbers for the fields of `StopXmrNodeReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersStopXmrNodeReply : {}
fieldNumbersStopXmrNodeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__StopXmrNodeReply


{-| Default for StopXmrNodeReply. Should only be used for 'required' decoders as an initial value.

-}
defaultStopXmrNodeReply : StopXmrNodeReply
defaultStopXmrNodeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__StopXmrNodeReply


{-| Declares how to decode a `StopXmrNodeReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeStopXmrNodeReply : Protobuf.Decode.Decoder StopXmrNodeReply
decodeStopXmrNodeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__StopXmrNodeReply


{-| Declares how to encode a `StopXmrNodeReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeStopXmrNodeReply : StopXmrNodeReply -> Protobuf.Encode.Encoder
encodeStopXmrNodeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__StopXmrNodeReply


{-| `StopXmrNodeReply` message

-}
type alias StopXmrNodeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__StopXmrNodeReply


{-| The field numbers for the fields of `StopXmrNodeRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersStopXmrNodeRequest : {}
fieldNumbersStopXmrNodeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__StopXmrNodeRequest


{-| Default for StopXmrNodeRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultStopXmrNodeRequest : StopXmrNodeRequest
defaultStopXmrNodeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__StopXmrNodeRequest


{-| Declares how to decode a `StopXmrNodeRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeStopXmrNodeRequest : Protobuf.Decode.Decoder StopXmrNodeRequest
decodeStopXmrNodeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__StopXmrNodeRequest


{-| Declares how to encode a `StopXmrNodeRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeStopXmrNodeRequest : StopXmrNodeRequest -> Protobuf.Encode.Encoder
encodeStopXmrNodeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__StopXmrNodeRequest


{-| `StopXmrNodeRequest` message

-}
type alias StopXmrNodeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__StopXmrNodeRequest


{-| The field numbers for the fields of `StartXmrNodeReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersStartXmrNodeReply : {}
fieldNumbersStartXmrNodeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__StartXmrNodeReply


{-| Default for StartXmrNodeReply. Should only be used for 'required' decoders as an initial value.

-}
defaultStartXmrNodeReply : StartXmrNodeReply
defaultStartXmrNodeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__StartXmrNodeReply


{-| Declares how to decode a `StartXmrNodeReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeStartXmrNodeReply : Protobuf.Decode.Decoder StartXmrNodeReply
decodeStartXmrNodeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__StartXmrNodeReply


{-| Declares how to encode a `StartXmrNodeReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeStartXmrNodeReply : StartXmrNodeReply -> Protobuf.Encode.Encoder
encodeStartXmrNodeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__StartXmrNodeReply


{-| `StartXmrNodeReply` message

-}
type alias StartXmrNodeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__StartXmrNodeReply


{-| The field numbers for the fields of `StartXmrNodeRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersStartXmrNodeRequest : { settings : Int }
fieldNumbersStartXmrNodeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__StartXmrNodeRequest


{-| Default for StartXmrNodeRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultStartXmrNodeRequest : StartXmrNodeRequest
defaultStartXmrNodeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__StartXmrNodeRequest


{-| Declares how to decode a `StartXmrNodeRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeStartXmrNodeRequest : Protobuf.Decode.Decoder StartXmrNodeRequest
decodeStartXmrNodeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__StartXmrNodeRequest


{-| Declares how to encode a `StartXmrNodeRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeStartXmrNodeRequest : StartXmrNodeRequest -> Protobuf.Encode.Encoder
encodeStartXmrNodeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__StartXmrNodeRequest


{-| `StartXmrNodeRequest` message

-}
type alias StartXmrNodeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__StartXmrNodeRequest


{-| The field numbers for the fields of `GetXmrNodeSettingsReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetXmrNodeSettingsReply : { settings : Int }
fieldNumbersGetXmrNodeSettingsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetXmrNodeSettingsReply


{-| Default for GetXmrNodeSettingsReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetXmrNodeSettingsReply : GetXmrNodeSettingsReply
defaultGetXmrNodeSettingsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetXmrNodeSettingsReply


{-| Declares how to decode a `GetXmrNodeSettingsReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetXmrNodeSettingsReply : Protobuf.Decode.Decoder GetXmrNodeSettingsReply
decodeGetXmrNodeSettingsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetXmrNodeSettingsReply


{-| Declares how to encode a `GetXmrNodeSettingsReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetXmrNodeSettingsReply : GetXmrNodeSettingsReply -> Protobuf.Encode.Encoder
encodeGetXmrNodeSettingsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetXmrNodeSettingsReply


{-| ## Fields

### settings

 pb.proto


-}
type alias GetXmrNodeSettingsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetXmrNodeSettingsReply


{-| The field numbers for the fields of `GetXmrNodeSettingsRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetXmrNodeSettingsRequest : {}
fieldNumbersGetXmrNodeSettingsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetXmrNodeSettingsRequest


{-| Default for GetXmrNodeSettingsRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetXmrNodeSettingsRequest : GetXmrNodeSettingsRequest
defaultGetXmrNodeSettingsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetXmrNodeSettingsRequest


{-| Declares how to decode a `GetXmrNodeSettingsRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetXmrNodeSettingsRequest : Protobuf.Decode.Decoder GetXmrNodeSettingsRequest
decodeGetXmrNodeSettingsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetXmrNodeSettingsRequest


{-| Declares how to encode a `GetXmrNodeSettingsRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetXmrNodeSettingsRequest : GetXmrNodeSettingsRequest -> Protobuf.Encode.Encoder
encodeGetXmrNodeSettingsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetXmrNodeSettingsRequest


{-| `GetXmrNodeSettingsRequest` message

-}
type alias GetXmrNodeSettingsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetXmrNodeSettingsRequest


{-| The field numbers for the fields of `IsXmrNodeOnlineReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersIsXmrNodeOnlineReply : { isRunning : Int }
fieldNumbersIsXmrNodeOnlineReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__IsXmrNodeOnlineReply


{-| Default for IsXmrNodeOnlineReply. Should only be used for 'required' decoders as an initial value.

-}
defaultIsXmrNodeOnlineReply : IsXmrNodeOnlineReply
defaultIsXmrNodeOnlineReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__IsXmrNodeOnlineReply


{-| Declares how to decode a `IsXmrNodeOnlineReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeIsXmrNodeOnlineReply : Protobuf.Decode.Decoder IsXmrNodeOnlineReply
decodeIsXmrNodeOnlineReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__IsXmrNodeOnlineReply


{-| Declares how to encode a `IsXmrNodeOnlineReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeIsXmrNodeOnlineReply : IsXmrNodeOnlineReply -> Protobuf.Encode.Encoder
encodeIsXmrNodeOnlineReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__IsXmrNodeOnlineReply


{-| `IsXmrNodeOnlineReply` message

-}
type alias IsXmrNodeOnlineReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__IsXmrNodeOnlineReply


{-| The field numbers for the fields of `IsXmrNodeOnlineRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersIsXmrNodeOnlineRequest : {}
fieldNumbersIsXmrNodeOnlineRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__IsXmrNodeOnlineRequest


{-| Default for IsXmrNodeOnlineRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultIsXmrNodeOnlineRequest : IsXmrNodeOnlineRequest
defaultIsXmrNodeOnlineRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__IsXmrNodeOnlineRequest


{-| Declares how to decode a `IsXmrNodeOnlineRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeIsXmrNodeOnlineRequest : Protobuf.Decode.Decoder IsXmrNodeOnlineRequest
decodeIsXmrNodeOnlineRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__IsXmrNodeOnlineRequest


{-| Declares how to encode a `IsXmrNodeOnlineRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeIsXmrNodeOnlineRequest : IsXmrNodeOnlineRequest -> Protobuf.Encode.Encoder
encodeIsXmrNodeOnlineRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__IsXmrNodeOnlineRequest


{-| `IsXmrNodeOnlineRequest` message

-}
type alias IsXmrNodeOnlineRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__IsXmrNodeOnlineRequest


{-| The field numbers for the fields of `SetAutoSwitchReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSetAutoSwitchReply : {}
fieldNumbersSetAutoSwitchReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SetAutoSwitchReply


{-| Default for SetAutoSwitchReply. Should only be used for 'required' decoders as an initial value.

-}
defaultSetAutoSwitchReply : SetAutoSwitchReply
defaultSetAutoSwitchReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SetAutoSwitchReply


{-| Declares how to decode a `SetAutoSwitchReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSetAutoSwitchReply : Protobuf.Decode.Decoder SetAutoSwitchReply
decodeSetAutoSwitchReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SetAutoSwitchReply


{-| Declares how to encode a `SetAutoSwitchReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSetAutoSwitchReply : SetAutoSwitchReply -> Protobuf.Encode.Encoder
encodeSetAutoSwitchReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SetAutoSwitchReply


{-| `SetAutoSwitchReply` message

-}
type alias SetAutoSwitchReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SetAutoSwitchReply


{-| The field numbers for the fields of `SetAutoSwitchRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSetAutoSwitchRequest : { autoSwitch : Int }
fieldNumbersSetAutoSwitchRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SetAutoSwitchRequest


{-| Default for SetAutoSwitchRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultSetAutoSwitchRequest : SetAutoSwitchRequest
defaultSetAutoSwitchRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SetAutoSwitchRequest


{-| Declares how to decode a `SetAutoSwitchRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSetAutoSwitchRequest : Protobuf.Decode.Decoder SetAutoSwitchRequest
decodeSetAutoSwitchRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SetAutoSwitchRequest


{-| Declares how to encode a `SetAutoSwitchRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSetAutoSwitchRequest : SetAutoSwitchRequest -> Protobuf.Encode.Encoder
encodeSetAutoSwitchRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SetAutoSwitchRequest


{-| `SetAutoSwitchRequest` message

-}
type alias SetAutoSwitchRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SetAutoSwitchRequest


{-| The field numbers for the fields of `GetBestAvailableConnectionReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetBestAvailableConnectionReply : { connection : Int }
fieldNumbersGetBestAvailableConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetBestAvailableConnectionReply


{-| Default for GetBestAvailableConnectionReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetBestAvailableConnectionReply : GetBestAvailableConnectionReply
defaultGetBestAvailableConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetBestAvailableConnectionReply


{-| Declares how to decode a `GetBestAvailableConnectionReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetBestAvailableConnectionReply : Protobuf.Decode.Decoder GetBestAvailableConnectionReply
decodeGetBestAvailableConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetBestAvailableConnectionReply


{-| Declares how to encode a `GetBestAvailableConnectionReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetBestAvailableConnectionReply : GetBestAvailableConnectionReply -> Protobuf.Encode.Encoder
encodeGetBestAvailableConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetBestAvailableConnectionReply


{-| `GetBestAvailableConnectionReply` message

-}
type alias GetBestAvailableConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetBestAvailableConnectionReply


{-| The field numbers for the fields of `GetBestAvailableConnectionRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetBestAvailableConnectionRequest : {}
fieldNumbersGetBestAvailableConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetBestAvailableConnectionRequest


{-| Default for GetBestAvailableConnectionRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetBestAvailableConnectionRequest : GetBestAvailableConnectionRequest
defaultGetBestAvailableConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetBestAvailableConnectionRequest


{-| Declares how to decode a `GetBestAvailableConnectionRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetBestAvailableConnectionRequest : Protobuf.Decode.Decoder GetBestAvailableConnectionRequest
decodeGetBestAvailableConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetBestAvailableConnectionRequest


{-| Declares how to encode a `GetBestAvailableConnectionRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetBestAvailableConnectionRequest : GetBestAvailableConnectionRequest -> Protobuf.Encode.Encoder
encodeGetBestAvailableConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetBestAvailableConnectionRequest


{-| `GetBestAvailableConnectionRequest` message

-}
type alias GetBestAvailableConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetBestAvailableConnectionRequest


{-| The field numbers for the fields of `StopCheckingConnectionReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersStopCheckingConnectionReply : {}
fieldNumbersStopCheckingConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__StopCheckingConnectionReply


{-| Default for StopCheckingConnectionReply. Should only be used for 'required' decoders as an initial value.

-}
defaultStopCheckingConnectionReply : StopCheckingConnectionReply
defaultStopCheckingConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__StopCheckingConnectionReply


{-| Declares how to decode a `StopCheckingConnectionReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeStopCheckingConnectionReply : Protobuf.Decode.Decoder StopCheckingConnectionReply
decodeStopCheckingConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__StopCheckingConnectionReply


{-| Declares how to encode a `StopCheckingConnectionReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeStopCheckingConnectionReply : StopCheckingConnectionReply -> Protobuf.Encode.Encoder
encodeStopCheckingConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__StopCheckingConnectionReply


{-| `StopCheckingConnectionReply` message

-}
type alias StopCheckingConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__StopCheckingConnectionReply


{-| The field numbers for the fields of `StopCheckingConnectionRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersStopCheckingConnectionRequest : {}
fieldNumbersStopCheckingConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__StopCheckingConnectionRequest


{-| Default for StopCheckingConnectionRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultStopCheckingConnectionRequest : StopCheckingConnectionRequest
defaultStopCheckingConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__StopCheckingConnectionRequest


{-| Declares how to decode a `StopCheckingConnectionRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeStopCheckingConnectionRequest : Protobuf.Decode.Decoder StopCheckingConnectionRequest
decodeStopCheckingConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__StopCheckingConnectionRequest


{-| Declares how to encode a `StopCheckingConnectionRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeStopCheckingConnectionRequest : StopCheckingConnectionRequest -> Protobuf.Encode.Encoder
encodeStopCheckingConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__StopCheckingConnectionRequest


{-| `StopCheckingConnectionRequest` message

-}
type alias StopCheckingConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__StopCheckingConnectionRequest


{-| The field numbers for the fields of `StartCheckingConnectionReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersStartCheckingConnectionReply : {}
fieldNumbersStartCheckingConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__StartCheckingConnectionReply


{-| Default for StartCheckingConnectionReply. Should only be used for 'required' decoders as an initial value.

-}
defaultStartCheckingConnectionReply : StartCheckingConnectionReply
defaultStartCheckingConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__StartCheckingConnectionReply


{-| Declares how to decode a `StartCheckingConnectionReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeStartCheckingConnectionReply : Protobuf.Decode.Decoder StartCheckingConnectionReply
decodeStartCheckingConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__StartCheckingConnectionReply


{-| Declares how to encode a `StartCheckingConnectionReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeStartCheckingConnectionReply : StartCheckingConnectionReply -> Protobuf.Encode.Encoder
encodeStartCheckingConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__StartCheckingConnectionReply


{-| `StartCheckingConnectionReply` message

-}
type alias StartCheckingConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__StartCheckingConnectionReply


{-| The field numbers for the fields of `StartCheckingConnectionRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersStartCheckingConnectionRequest : { refreshPeriod : Int }
fieldNumbersStartCheckingConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__StartCheckingConnectionRequest


{-| Default for StartCheckingConnectionRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultStartCheckingConnectionRequest : StartCheckingConnectionRequest
defaultStartCheckingConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__StartCheckingConnectionRequest


{-| Declares how to decode a `StartCheckingConnectionRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeStartCheckingConnectionRequest : Protobuf.Decode.Decoder StartCheckingConnectionRequest
decodeStartCheckingConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__StartCheckingConnectionRequest


{-| Declares how to encode a `StartCheckingConnectionRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeStartCheckingConnectionRequest : StartCheckingConnectionRequest -> Protobuf.Encode.Encoder
encodeStartCheckingConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__StartCheckingConnectionRequest


{-| ## Fields

### refreshPeriod

 milliseconds


-}
type alias StartCheckingConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__StartCheckingConnectionRequest


{-| The field numbers for the fields of `CheckConnectionsReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCheckConnectionsReply : { connections : Int }
fieldNumbersCheckConnectionsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CheckConnectionsReply


{-| Default for CheckConnectionsReply. Should only be used for 'required' decoders as an initial value.

-}
defaultCheckConnectionsReply : CheckConnectionsReply
defaultCheckConnectionsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CheckConnectionsReply


{-| Declares how to decode a `CheckConnectionsReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCheckConnectionsReply : Protobuf.Decode.Decoder CheckConnectionsReply
decodeCheckConnectionsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CheckConnectionsReply


{-| Declares how to encode a `CheckConnectionsReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCheckConnectionsReply : CheckConnectionsReply -> Protobuf.Encode.Encoder
encodeCheckConnectionsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CheckConnectionsReply


{-| `CheckConnectionsReply` message

-}
type alias CheckConnectionsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CheckConnectionsReply


{-| The field numbers for the fields of `CheckConnectionsRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCheckConnectionsRequest : {}
fieldNumbersCheckConnectionsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CheckConnectionsRequest


{-| Default for CheckConnectionsRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultCheckConnectionsRequest : CheckConnectionsRequest
defaultCheckConnectionsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CheckConnectionsRequest


{-| Declares how to decode a `CheckConnectionsRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCheckConnectionsRequest : Protobuf.Decode.Decoder CheckConnectionsRequest
decodeCheckConnectionsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CheckConnectionsRequest


{-| Declares how to encode a `CheckConnectionsRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCheckConnectionsRequest : CheckConnectionsRequest -> Protobuf.Encode.Encoder
encodeCheckConnectionsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CheckConnectionsRequest


{-| `CheckConnectionsRequest` message

-}
type alias CheckConnectionsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CheckConnectionsRequest


{-| The field numbers for the fields of `CheckConnectionReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCheckConnectionReply : { connection : Int }
fieldNumbersCheckConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CheckConnectionReply


{-| Default for CheckConnectionReply. Should only be used for 'required' decoders as an initial value.

-}
defaultCheckConnectionReply : CheckConnectionReply
defaultCheckConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CheckConnectionReply


{-| Declares how to decode a `CheckConnectionReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCheckConnectionReply : Protobuf.Decode.Decoder CheckConnectionReply
decodeCheckConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CheckConnectionReply


{-| Declares how to encode a `CheckConnectionReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCheckConnectionReply : CheckConnectionReply -> Protobuf.Encode.Encoder
encodeCheckConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CheckConnectionReply


{-| `CheckConnectionReply` message

-}
type alias CheckConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CheckConnectionReply


{-| The field numbers for the fields of `CheckConnectionRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCheckConnectionRequest : {}
fieldNumbersCheckConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CheckConnectionRequest


{-| Default for CheckConnectionRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultCheckConnectionRequest : CheckConnectionRequest
defaultCheckConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CheckConnectionRequest


{-| Declares how to decode a `CheckConnectionRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCheckConnectionRequest : Protobuf.Decode.Decoder CheckConnectionRequest
decodeCheckConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CheckConnectionRequest


{-| Declares how to encode a `CheckConnectionRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCheckConnectionRequest : CheckConnectionRequest -> Protobuf.Encode.Encoder
encodeCheckConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CheckConnectionRequest


{-| `CheckConnectionRequest` message

-}
type alias CheckConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CheckConnectionRequest


{-| The field numbers for the fields of `SetConnectionReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSetConnectionReply : {}
fieldNumbersSetConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SetConnectionReply


{-| Default for SetConnectionReply. Should only be used for 'required' decoders as an initial value.

-}
defaultSetConnectionReply : SetConnectionReply
defaultSetConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SetConnectionReply


{-| Declares how to decode a `SetConnectionReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSetConnectionReply : Protobuf.Decode.Decoder SetConnectionReply
decodeSetConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SetConnectionReply


{-| Declares how to encode a `SetConnectionReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSetConnectionReply : SetConnectionReply -> Protobuf.Encode.Encoder
encodeSetConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SetConnectionReply


{-| `SetConnectionReply` message

-}
type alias SetConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SetConnectionReply


{-| The field numbers for the fields of `SetConnectionRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSetConnectionRequest : { url : Int, connection : Int }
fieldNumbersSetConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SetConnectionRequest


{-| Default for SetConnectionRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultSetConnectionRequest : SetConnectionRequest
defaultSetConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SetConnectionRequest


{-| Declares how to decode a `SetConnectionRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSetConnectionRequest : Protobuf.Decode.Decoder SetConnectionRequest
decodeSetConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SetConnectionRequest


{-| Declares how to encode a `SetConnectionRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSetConnectionRequest : SetConnectionRequest -> Protobuf.Encode.Encoder
encodeSetConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SetConnectionRequest


{-| `SetConnectionRequest` message

-}
type alias SetConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SetConnectionRequest


{-| The field numbers for the fields of `GetConnectionsReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetConnectionsReply : { connections : Int }
fieldNumbersGetConnectionsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetConnectionsReply


{-| Default for GetConnectionsReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetConnectionsReply : GetConnectionsReply
defaultGetConnectionsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetConnectionsReply


{-| Declares how to decode a `GetConnectionsReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetConnectionsReply : Protobuf.Decode.Decoder GetConnectionsReply
decodeGetConnectionsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetConnectionsReply


{-| Declares how to encode a `GetConnectionsReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetConnectionsReply : GetConnectionsReply -> Protobuf.Encode.Encoder
encodeGetConnectionsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetConnectionsReply


{-| `GetConnectionsReply` message

-}
type alias GetConnectionsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetConnectionsReply


{-| The field numbers for the fields of `GetConnectionsRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetConnectionsRequest : {}
fieldNumbersGetConnectionsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetConnectionsRequest


{-| Default for GetConnectionsRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetConnectionsRequest : GetConnectionsRequest
defaultGetConnectionsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetConnectionsRequest


{-| Declares how to decode a `GetConnectionsRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetConnectionsRequest : Protobuf.Decode.Decoder GetConnectionsRequest
decodeGetConnectionsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetConnectionsRequest


{-| Declares how to encode a `GetConnectionsRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetConnectionsRequest : GetConnectionsRequest -> Protobuf.Encode.Encoder
encodeGetConnectionsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetConnectionsRequest


{-| `GetConnectionsRequest` message

-}
type alias GetConnectionsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetConnectionsRequest


{-| The field numbers for the fields of `GetConnectionReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetConnectionReply : { connection : Int }
fieldNumbersGetConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetConnectionReply


{-| Default for GetConnectionReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetConnectionReply : GetConnectionReply
defaultGetConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetConnectionReply


{-| Declares how to decode a `GetConnectionReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetConnectionReply : Protobuf.Decode.Decoder GetConnectionReply
decodeGetConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetConnectionReply


{-| Declares how to encode a `GetConnectionReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetConnectionReply : GetConnectionReply -> Protobuf.Encode.Encoder
encodeGetConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetConnectionReply


{-| `GetConnectionReply` message

-}
type alias GetConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetConnectionReply


{-| The field numbers for the fields of `GetConnectionRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetConnectionRequest : {}
fieldNumbersGetConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetConnectionRequest


{-| Default for GetConnectionRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetConnectionRequest : GetConnectionRequest
defaultGetConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetConnectionRequest


{-| Declares how to decode a `GetConnectionRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetConnectionRequest : Protobuf.Decode.Decoder GetConnectionRequest
decodeGetConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetConnectionRequest


{-| Declares how to encode a `GetConnectionRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetConnectionRequest : GetConnectionRequest -> Protobuf.Encode.Encoder
encodeGetConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetConnectionRequest


{-| `GetConnectionRequest` message

-}
type alias GetConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetConnectionRequest


{-| The field numbers for the fields of `RemoveConnectionReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRemoveConnectionReply : {}
fieldNumbersRemoveConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__RemoveConnectionReply


{-| Default for RemoveConnectionReply. Should only be used for 'required' decoders as an initial value.

-}
defaultRemoveConnectionReply : RemoveConnectionReply
defaultRemoveConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__RemoveConnectionReply


{-| Declares how to decode a `RemoveConnectionReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRemoveConnectionReply : Protobuf.Decode.Decoder RemoveConnectionReply
decodeRemoveConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__RemoveConnectionReply


{-| Declares how to encode a `RemoveConnectionReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRemoveConnectionReply : RemoveConnectionReply -> Protobuf.Encode.Encoder
encodeRemoveConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__RemoveConnectionReply


{-| `RemoveConnectionReply` message

-}
type alias RemoveConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__RemoveConnectionReply


{-| The field numbers for the fields of `RemoveConnectionRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRemoveConnectionRequest : { url : Int }
fieldNumbersRemoveConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__RemoveConnectionRequest


{-| Default for RemoveConnectionRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultRemoveConnectionRequest : RemoveConnectionRequest
defaultRemoveConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__RemoveConnectionRequest


{-| Declares how to decode a `RemoveConnectionRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRemoveConnectionRequest : Protobuf.Decode.Decoder RemoveConnectionRequest
decodeRemoveConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__RemoveConnectionRequest


{-| Declares how to encode a `RemoveConnectionRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRemoveConnectionRequest : RemoveConnectionRequest -> Protobuf.Encode.Encoder
encodeRemoveConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__RemoveConnectionRequest


{-| `RemoveConnectionRequest` message

-}
type alias RemoveConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__RemoveConnectionRequest


{-| The field numbers for the fields of `AddConnectionReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAddConnectionReply : {}
fieldNumbersAddConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__AddConnectionReply


{-| Default for AddConnectionReply. Should only be used for 'required' decoders as an initial value.

-}
defaultAddConnectionReply : AddConnectionReply
defaultAddConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__AddConnectionReply


{-| Declares how to decode a `AddConnectionReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAddConnectionReply : Protobuf.Decode.Decoder AddConnectionReply
decodeAddConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__AddConnectionReply


{-| Declares how to encode a `AddConnectionReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAddConnectionReply : AddConnectionReply -> Protobuf.Encode.Encoder
encodeAddConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__AddConnectionReply


{-| `AddConnectionReply` message

-}
type alias AddConnectionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__AddConnectionReply


{-| The field numbers for the fields of `AddConnectionRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAddConnectionRequest : { connection : Int }
fieldNumbersAddConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__AddConnectionRequest


{-| Default for AddConnectionRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultAddConnectionRequest : AddConnectionRequest
defaultAddConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__AddConnectionRequest


{-| Declares how to decode a `AddConnectionRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAddConnectionRequest : Protobuf.Decode.Decoder AddConnectionRequest
decodeAddConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__AddConnectionRequest


{-| Declares how to encode a `AddConnectionRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAddConnectionRequest : AddConnectionRequest -> Protobuf.Encode.Encoder
encodeAddConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__AddConnectionRequest


{-| `AddConnectionRequest` message

-}
type alias AddConnectionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__AddConnectionRequest


{-| The field numbers for the fields of `UrlConnection`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersUrlConnection :
    { url : Int, username : Int, password : Int, priority : Int, onlineStatus : Int, authenticationStatus : Int }
fieldNumbersUrlConnection =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__UrlConnection


{-| Default for UrlConnection. Should only be used for 'required' decoders as an initial value.

-}
defaultUrlConnection : UrlConnection
defaultUrlConnection =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__UrlConnection


{-| Declares how to decode a `UrlConnection` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeUrlConnection : Protobuf.Decode.Decoder UrlConnection
decodeUrlConnection =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__UrlConnection


{-| Declares how to encode a `UrlConnection` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeUrlConnection : UrlConnection -> Protobuf.Encode.Encoder
encodeUrlConnection =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__UrlConnection


{-| ## Fields

### username

 request only


### password

 request only


### onlineStatus

 reply only


### authenticationStatus

 reply only


-}
type alias UrlConnection =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__UrlConnection


{-| The field numbers for the fields of `SendNotificationReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSendNotificationReply : {}
fieldNumbersSendNotificationReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SendNotificationReply


{-| Default for SendNotificationReply. Should only be used for 'required' decoders as an initial value.

-}
defaultSendNotificationReply : SendNotificationReply
defaultSendNotificationReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SendNotificationReply


{-| Declares how to decode a `SendNotificationReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSendNotificationReply : Protobuf.Decode.Decoder SendNotificationReply
decodeSendNotificationReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SendNotificationReply


{-| Declares how to encode a `SendNotificationReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSendNotificationReply : SendNotificationReply -> Protobuf.Encode.Encoder
encodeSendNotificationReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SendNotificationReply


{-| `SendNotificationReply` message

-}
type alias SendNotificationReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SendNotificationReply


{-| The field numbers for the fields of `SendNotificationRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSendNotificationRequest : { notification : Int }
fieldNumbersSendNotificationRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SendNotificationRequest


{-| Default for SendNotificationRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultSendNotificationRequest : SendNotificationRequest
defaultSendNotificationRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SendNotificationRequest


{-| Declares how to decode a `SendNotificationRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSendNotificationRequest : Protobuf.Decode.Decoder SendNotificationRequest
decodeSendNotificationRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SendNotificationRequest


{-| Declares how to encode a `SendNotificationRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSendNotificationRequest : SendNotificationRequest -> Protobuf.Encode.Encoder
encodeSendNotificationRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SendNotificationRequest


{-| `SendNotificationRequest` message

-}
type alias SendNotificationRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SendNotificationRequest


{-| The field numbers for the fields of `NotificationMessage`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersNotificationMessage :
    { id : Int, type_ : Int, timestamp : Int, title : Int, message : Int, trade : Int, chatMessage : Int }
fieldNumbersNotificationMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__NotificationMessage


{-| Default for NotificationMessage. Should only be used for 'required' decoders as an initial value.

-}
defaultNotificationMessage : NotificationMessage
defaultNotificationMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__NotificationMessage


{-| Declares how to decode a `NotificationMessage` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeNotificationMessage : Protobuf.Decode.Decoder NotificationMessage
decodeNotificationMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__NotificationMessage


{-| Declares how to encode a `NotificationMessage` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeNotificationMessage : NotificationMessage -> Protobuf.Encode.Encoder
encodeNotificationMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__NotificationMessage


{-| `NotificationMessage` message

-}
type alias NotificationMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__NotificationMessage


{-| The field numbers for the fields of `RegisterNotificationListenerRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRegisterNotificationListenerRequest : {}
fieldNumbersRegisterNotificationListenerRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__RegisterNotificationListenerRequest


{-| Default for RegisterNotificationListenerRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultRegisterNotificationListenerRequest : RegisterNotificationListenerRequest
defaultRegisterNotificationListenerRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__RegisterNotificationListenerRequest


{-| Declares how to decode a `RegisterNotificationListenerRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRegisterNotificationListenerRequest : Protobuf.Decode.Decoder RegisterNotificationListenerRequest
decodeRegisterNotificationListenerRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__RegisterNotificationListenerRequest


{-| Declares how to encode a `RegisterNotificationListenerRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRegisterNotificationListenerRequest : RegisterNotificationListenerRequest -> Protobuf.Encode.Encoder
encodeRegisterNotificationListenerRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__RegisterNotificationListenerRequest


{-| `RegisterNotificationListenerRequest` message

-}
type alias RegisterNotificationListenerRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__RegisterNotificationListenerRequest


{-| The field numbers for the fields of `UnregisterDisputeAgentReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersUnregisterDisputeAgentReply : {}
fieldNumbersUnregisterDisputeAgentReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__UnregisterDisputeAgentReply


{-| Default for UnregisterDisputeAgentReply. Should only be used for 'required' decoders as an initial value.

-}
defaultUnregisterDisputeAgentReply : UnregisterDisputeAgentReply
defaultUnregisterDisputeAgentReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__UnregisterDisputeAgentReply


{-| Declares how to decode a `UnregisterDisputeAgentReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeUnregisterDisputeAgentReply : Protobuf.Decode.Decoder UnregisterDisputeAgentReply
decodeUnregisterDisputeAgentReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__UnregisterDisputeAgentReply


{-| Declares how to encode a `UnregisterDisputeAgentReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeUnregisterDisputeAgentReply : UnregisterDisputeAgentReply -> Protobuf.Encode.Encoder
encodeUnregisterDisputeAgentReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__UnregisterDisputeAgentReply


{-| `UnregisterDisputeAgentReply` message

-}
type alias UnregisterDisputeAgentReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__UnregisterDisputeAgentReply


{-| The field numbers for the fields of `UnregisterDisputeAgentRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersUnregisterDisputeAgentRequest : { disputeAgentType : Int }
fieldNumbersUnregisterDisputeAgentRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__UnregisterDisputeAgentRequest


{-| Default for UnregisterDisputeAgentRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultUnregisterDisputeAgentRequest : UnregisterDisputeAgentRequest
defaultUnregisterDisputeAgentRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__UnregisterDisputeAgentRequest


{-| Declares how to decode a `UnregisterDisputeAgentRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeUnregisterDisputeAgentRequest : Protobuf.Decode.Decoder UnregisterDisputeAgentRequest
decodeUnregisterDisputeAgentRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__UnregisterDisputeAgentRequest


{-| Declares how to encode a `UnregisterDisputeAgentRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeUnregisterDisputeAgentRequest : UnregisterDisputeAgentRequest -> Protobuf.Encode.Encoder
encodeUnregisterDisputeAgentRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__UnregisterDisputeAgentRequest


{-| `UnregisterDisputeAgentRequest` message

-}
type alias UnregisterDisputeAgentRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__UnregisterDisputeAgentRequest


{-| The field numbers for the fields of `RegisterDisputeAgentReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRegisterDisputeAgentReply : {}
fieldNumbersRegisterDisputeAgentReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__RegisterDisputeAgentReply


{-| Default for RegisterDisputeAgentReply. Should only be used for 'required' decoders as an initial value.

-}
defaultRegisterDisputeAgentReply : RegisterDisputeAgentReply
defaultRegisterDisputeAgentReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__RegisterDisputeAgentReply


{-| Declares how to decode a `RegisterDisputeAgentReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRegisterDisputeAgentReply : Protobuf.Decode.Decoder RegisterDisputeAgentReply
decodeRegisterDisputeAgentReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__RegisterDisputeAgentReply


{-| Declares how to encode a `RegisterDisputeAgentReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRegisterDisputeAgentReply : RegisterDisputeAgentReply -> Protobuf.Encode.Encoder
encodeRegisterDisputeAgentReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__RegisterDisputeAgentReply


{-| `RegisterDisputeAgentReply` message

-}
type alias RegisterDisputeAgentReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__RegisterDisputeAgentReply


{-| The field numbers for the fields of `RegisterDisputeAgentRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRegisterDisputeAgentRequest : { disputeAgentType : Int, registrationKey : Int }
fieldNumbersRegisterDisputeAgentRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__RegisterDisputeAgentRequest


{-| Default for RegisterDisputeAgentRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultRegisterDisputeAgentRequest : RegisterDisputeAgentRequest
defaultRegisterDisputeAgentRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__RegisterDisputeAgentRequest


{-| Declares how to decode a `RegisterDisputeAgentRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRegisterDisputeAgentRequest : Protobuf.Decode.Decoder RegisterDisputeAgentRequest
decodeRegisterDisputeAgentRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__RegisterDisputeAgentRequest


{-| Declares how to encode a `RegisterDisputeAgentRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRegisterDisputeAgentRequest : RegisterDisputeAgentRequest -> Protobuf.Encode.Encoder
encodeRegisterDisputeAgentRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__RegisterDisputeAgentRequest


{-| `RegisterDisputeAgentRequest` message

-}
type alias RegisterDisputeAgentRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__RegisterDisputeAgentRequest


{-| The field numbers for the fields of `SendDisputeChatMessageReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSendDisputeChatMessageReply : {}
fieldNumbersSendDisputeChatMessageReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SendDisputeChatMessageReply


{-| Default for SendDisputeChatMessageReply. Should only be used for 'required' decoders as an initial value.

-}
defaultSendDisputeChatMessageReply : SendDisputeChatMessageReply
defaultSendDisputeChatMessageReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SendDisputeChatMessageReply


{-| Declares how to decode a `SendDisputeChatMessageReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSendDisputeChatMessageReply : Protobuf.Decode.Decoder SendDisputeChatMessageReply
decodeSendDisputeChatMessageReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SendDisputeChatMessageReply


{-| Declares how to encode a `SendDisputeChatMessageReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSendDisputeChatMessageReply : SendDisputeChatMessageReply -> Protobuf.Encode.Encoder
encodeSendDisputeChatMessageReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SendDisputeChatMessageReply


{-| `SendDisputeChatMessageReply` message

-}
type alias SendDisputeChatMessageReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SendDisputeChatMessageReply


{-| The field numbers for the fields of `SendDisputeChatMessageRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSendDisputeChatMessageRequest : { disputeId : Int, message : Int, attachments : Int }
fieldNumbersSendDisputeChatMessageRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SendDisputeChatMessageRequest


{-| Default for SendDisputeChatMessageRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultSendDisputeChatMessageRequest : SendDisputeChatMessageRequest
defaultSendDisputeChatMessageRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SendDisputeChatMessageRequest


{-| Declares how to decode a `SendDisputeChatMessageRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSendDisputeChatMessageRequest : Protobuf.Decode.Decoder SendDisputeChatMessageRequest
decodeSendDisputeChatMessageRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SendDisputeChatMessageRequest


{-| Declares how to encode a `SendDisputeChatMessageRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSendDisputeChatMessageRequest : SendDisputeChatMessageRequest -> Protobuf.Encode.Encoder
encodeSendDisputeChatMessageRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SendDisputeChatMessageRequest


{-| ## Fields

### attachments

 pb.proto


-}
type alias SendDisputeChatMessageRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SendDisputeChatMessageRequest


{-| The field numbers for the fields of `ResolveDisputeRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersResolveDisputeRequest :
    { tradeId : Int, winner : Int, reason : Int, summaryNotes : Int, customPayoutAmount : Int }
fieldNumbersResolveDisputeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ResolveDisputeRequest


{-| Default for ResolveDisputeRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultResolveDisputeRequest : ResolveDisputeRequest
defaultResolveDisputeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ResolveDisputeRequest


{-| Declares how to decode a `ResolveDisputeRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeResolveDisputeRequest : Protobuf.Decode.Decoder ResolveDisputeRequest
decodeResolveDisputeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ResolveDisputeRequest


{-| Declares how to encode a `ResolveDisputeRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeResolveDisputeRequest : ResolveDisputeRequest -> Protobuf.Encode.Encoder
encodeResolveDisputeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ResolveDisputeRequest


{-| `ResolveDisputeRequest` message

-}
type alias ResolveDisputeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ResolveDisputeRequest


{-| The field numbers for the fields of `ResolveDisputeReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersResolveDisputeReply : {}
fieldNumbersResolveDisputeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ResolveDisputeReply


{-| Default for ResolveDisputeReply. Should only be used for 'required' decoders as an initial value.

-}
defaultResolveDisputeReply : ResolveDisputeReply
defaultResolveDisputeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ResolveDisputeReply


{-| Declares how to decode a `ResolveDisputeReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeResolveDisputeReply : Protobuf.Decode.Decoder ResolveDisputeReply
decodeResolveDisputeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ResolveDisputeReply


{-| Declares how to encode a `ResolveDisputeReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeResolveDisputeReply : ResolveDisputeReply -> Protobuf.Encode.Encoder
encodeResolveDisputeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ResolveDisputeReply


{-| `ResolveDisputeReply` message

-}
type alias ResolveDisputeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ResolveDisputeReply


{-| The field numbers for the fields of `OpenDisputeReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersOpenDisputeReply : {}
fieldNumbersOpenDisputeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__OpenDisputeReply


{-| Default for OpenDisputeReply. Should only be used for 'required' decoders as an initial value.

-}
defaultOpenDisputeReply : OpenDisputeReply
defaultOpenDisputeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__OpenDisputeReply


{-| Declares how to decode a `OpenDisputeReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeOpenDisputeReply : Protobuf.Decode.Decoder OpenDisputeReply
decodeOpenDisputeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__OpenDisputeReply


{-| Declares how to encode a `OpenDisputeReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeOpenDisputeReply : OpenDisputeReply -> Protobuf.Encode.Encoder
encodeOpenDisputeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__OpenDisputeReply


{-| `OpenDisputeReply` message

-}
type alias OpenDisputeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__OpenDisputeReply


{-| The field numbers for the fields of `OpenDisputeRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersOpenDisputeRequest : { tradeId : Int }
fieldNumbersOpenDisputeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__OpenDisputeRequest


{-| Default for OpenDisputeRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultOpenDisputeRequest : OpenDisputeRequest
defaultOpenDisputeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__OpenDisputeRequest


{-| Declares how to decode a `OpenDisputeRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeOpenDisputeRequest : Protobuf.Decode.Decoder OpenDisputeRequest
decodeOpenDisputeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__OpenDisputeRequest


{-| Declares how to encode a `OpenDisputeRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeOpenDisputeRequest : OpenDisputeRequest -> Protobuf.Encode.Encoder
encodeOpenDisputeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__OpenDisputeRequest


{-| `OpenDisputeRequest` message

-}
type alias OpenDisputeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__OpenDisputeRequest


{-| The field numbers for the fields of `GetDisputeReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetDisputeReply : { dispute : Int }
fieldNumbersGetDisputeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetDisputeReply


{-| Default for GetDisputeReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetDisputeReply : GetDisputeReply
defaultGetDisputeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetDisputeReply


{-| Declares how to decode a `GetDisputeReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetDisputeReply : Protobuf.Decode.Decoder GetDisputeReply
decodeGetDisputeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetDisputeReply


{-| Declares how to encode a `GetDisputeReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetDisputeReply : GetDisputeReply -> Protobuf.Encode.Encoder
encodeGetDisputeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetDisputeReply


{-| ## Fields

### dispute

 pb.proto


-}
type alias GetDisputeReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetDisputeReply


{-| The field numbers for the fields of `GetDisputeRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetDisputeRequest : { tradeId : Int }
fieldNumbersGetDisputeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetDisputeRequest


{-| Default for GetDisputeRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetDisputeRequest : GetDisputeRequest
defaultGetDisputeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetDisputeRequest


{-| Declares how to decode a `GetDisputeRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetDisputeRequest : Protobuf.Decode.Decoder GetDisputeRequest
decodeGetDisputeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetDisputeRequest


{-| Declares how to encode a `GetDisputeRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetDisputeRequest : GetDisputeRequest -> Protobuf.Encode.Encoder
encodeGetDisputeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetDisputeRequest


{-| `GetDisputeRequest` message

-}
type alias GetDisputeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetDisputeRequest


{-| The field numbers for the fields of `GetDisputesReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetDisputesReply : { disputes : Int }
fieldNumbersGetDisputesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetDisputesReply


{-| Default for GetDisputesReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetDisputesReply : GetDisputesReply
defaultGetDisputesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetDisputesReply


{-| Declares how to decode a `GetDisputesReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetDisputesReply : Protobuf.Decode.Decoder GetDisputesReply
decodeGetDisputesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetDisputesReply


{-| Declares how to encode a `GetDisputesReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetDisputesReply : GetDisputesReply -> Protobuf.Encode.Encoder
encodeGetDisputesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetDisputesReply


{-| ## Fields

### disputes

 pb.proto


-}
type alias GetDisputesReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetDisputesReply


{-| The field numbers for the fields of `GetDisputesRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetDisputesRequest : {}
fieldNumbersGetDisputesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetDisputesRequest


{-| Default for GetDisputesRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetDisputesRequest : GetDisputesRequest
defaultGetDisputesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetDisputesRequest


{-| Declares how to decode a `GetDisputesRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetDisputesRequest : Protobuf.Decode.Decoder GetDisputesRequest
decodeGetDisputesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetDisputesRequest


{-| Declares how to encode a `GetDisputesRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetDisputesRequest : GetDisputesRequest -> Protobuf.Encode.Encoder
encodeGetDisputesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetDisputesRequest


{-| `GetDisputesRequest` message

-}
type alias GetDisputesRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetDisputesRequest


{-| The field numbers for the fields of `RestoreAccountReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRestoreAccountReply : {}
fieldNumbersRestoreAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__RestoreAccountReply


{-| Default for RestoreAccountReply. Should only be used for 'required' decoders as an initial value.

-}
defaultRestoreAccountReply : RestoreAccountReply
defaultRestoreAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__RestoreAccountReply


{-| Declares how to decode a `RestoreAccountReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRestoreAccountReply : Protobuf.Decode.Decoder RestoreAccountReply
decodeRestoreAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__RestoreAccountReply


{-| Declares how to encode a `RestoreAccountReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRestoreAccountReply : RestoreAccountReply -> Protobuf.Encode.Encoder
encodeRestoreAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__RestoreAccountReply


{-| `RestoreAccountReply` message

-}
type alias RestoreAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__RestoreAccountReply


{-| The field numbers for the fields of `RestoreAccountRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRestoreAccountRequest : { zipBytes : Int, offset : Int, totalLength : Int, hasMore : Int }
fieldNumbersRestoreAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__RestoreAccountRequest


{-| Default for RestoreAccountRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultRestoreAccountRequest : RestoreAccountRequest
defaultRestoreAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__RestoreAccountRequest


{-| Declares how to decode a `RestoreAccountRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRestoreAccountRequest : Protobuf.Decode.Decoder RestoreAccountRequest
decodeRestoreAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__RestoreAccountRequest


{-| Declares how to encode a `RestoreAccountRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRestoreAccountRequest : RestoreAccountRequest -> Protobuf.Encode.Encoder
encodeRestoreAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__RestoreAccountRequest


{-| `RestoreAccountRequest` message

-}
type alias RestoreAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__RestoreAccountRequest


{-| The field numbers for the fields of `BackupAccountReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersBackupAccountReply : { zipBytes : Int }
fieldNumbersBackupAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__BackupAccountReply


{-| Default for BackupAccountReply. Should only be used for 'required' decoders as an initial value.

-}
defaultBackupAccountReply : BackupAccountReply
defaultBackupAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__BackupAccountReply


{-| Declares how to decode a `BackupAccountReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeBackupAccountReply : Protobuf.Decode.Decoder BackupAccountReply
decodeBackupAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__BackupAccountReply


{-| Declares how to encode a `BackupAccountReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeBackupAccountReply : BackupAccountReply -> Protobuf.Encode.Encoder
encodeBackupAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__BackupAccountReply


{-| `BackupAccountReply` message

-}
type alias BackupAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__BackupAccountReply


{-| The field numbers for the fields of `BackupAccountRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersBackupAccountRequest : {}
fieldNumbersBackupAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__BackupAccountRequest


{-| Default for BackupAccountRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultBackupAccountRequest : BackupAccountRequest
defaultBackupAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__BackupAccountRequest


{-| Declares how to decode a `BackupAccountRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeBackupAccountRequest : Protobuf.Decode.Decoder BackupAccountRequest
decodeBackupAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__BackupAccountRequest


{-| Declares how to encode a `BackupAccountRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeBackupAccountRequest : BackupAccountRequest -> Protobuf.Encode.Encoder
encodeBackupAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__BackupAccountRequest


{-| `BackupAccountRequest` message

-}
type alias BackupAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__BackupAccountRequest


{-| The field numbers for the fields of `DeleteAccountReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersDeleteAccountReply : {}
fieldNumbersDeleteAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__DeleteAccountReply


{-| Default for DeleteAccountReply. Should only be used for 'required' decoders as an initial value.

-}
defaultDeleteAccountReply : DeleteAccountReply
defaultDeleteAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__DeleteAccountReply


{-| Declares how to decode a `DeleteAccountReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeDeleteAccountReply : Protobuf.Decode.Decoder DeleteAccountReply
decodeDeleteAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__DeleteAccountReply


{-| Declares how to encode a `DeleteAccountReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeDeleteAccountReply : DeleteAccountReply -> Protobuf.Encode.Encoder
encodeDeleteAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__DeleteAccountReply


{-| `DeleteAccountReply` message

-}
type alias DeleteAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__DeleteAccountReply


{-| The field numbers for the fields of `DeleteAccountRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersDeleteAccountRequest : {}
fieldNumbersDeleteAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__DeleteAccountRequest


{-| Default for DeleteAccountRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultDeleteAccountRequest : DeleteAccountRequest
defaultDeleteAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__DeleteAccountRequest


{-| Declares how to decode a `DeleteAccountRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeDeleteAccountRequest : Protobuf.Decode.Decoder DeleteAccountRequest
decodeDeleteAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__DeleteAccountRequest


{-| Declares how to encode a `DeleteAccountRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeDeleteAccountRequest : DeleteAccountRequest -> Protobuf.Encode.Encoder
encodeDeleteAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__DeleteAccountRequest


{-| `DeleteAccountRequest` message

-}
type alias DeleteAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__DeleteAccountRequest


{-| The field numbers for the fields of `CloseAccountReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCloseAccountReply : {}
fieldNumbersCloseAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CloseAccountReply


{-| Default for CloseAccountReply. Should only be used for 'required' decoders as an initial value.

-}
defaultCloseAccountReply : CloseAccountReply
defaultCloseAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CloseAccountReply


{-| Declares how to decode a `CloseAccountReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCloseAccountReply : Protobuf.Decode.Decoder CloseAccountReply
decodeCloseAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CloseAccountReply


{-| Declares how to encode a `CloseAccountReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCloseAccountReply : CloseAccountReply -> Protobuf.Encode.Encoder
encodeCloseAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CloseAccountReply


{-| `CloseAccountReply` message

-}
type alias CloseAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CloseAccountReply


{-| The field numbers for the fields of `CloseAccountRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCloseAccountRequest : {}
fieldNumbersCloseAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CloseAccountRequest


{-| Default for CloseAccountRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultCloseAccountRequest : CloseAccountRequest
defaultCloseAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CloseAccountRequest


{-| Declares how to decode a `CloseAccountRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCloseAccountRequest : Protobuf.Decode.Decoder CloseAccountRequest
decodeCloseAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CloseAccountRequest


{-| Declares how to encode a `CloseAccountRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCloseAccountRequest : CloseAccountRequest -> Protobuf.Encode.Encoder
encodeCloseAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CloseAccountRequest


{-| `CloseAccountRequest` message

-}
type alias CloseAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CloseAccountRequest


{-| The field numbers for the fields of `ChangePasswordReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersChangePasswordReply : {}
fieldNumbersChangePasswordReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ChangePasswordReply


{-| Default for ChangePasswordReply. Should only be used for 'required' decoders as an initial value.

-}
defaultChangePasswordReply : ChangePasswordReply
defaultChangePasswordReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ChangePasswordReply


{-| Declares how to decode a `ChangePasswordReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeChangePasswordReply : Protobuf.Decode.Decoder ChangePasswordReply
decodeChangePasswordReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ChangePasswordReply


{-| Declares how to encode a `ChangePasswordReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeChangePasswordReply : ChangePasswordReply -> Protobuf.Encode.Encoder
encodeChangePasswordReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ChangePasswordReply


{-| `ChangePasswordReply` message

-}
type alias ChangePasswordReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ChangePasswordReply


{-| The field numbers for the fields of `ChangePasswordRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersChangePasswordRequest : { oldPassword : Int, newPassword : Int }
fieldNumbersChangePasswordRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ChangePasswordRequest


{-| Default for ChangePasswordRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultChangePasswordRequest : ChangePasswordRequest
defaultChangePasswordRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ChangePasswordRequest


{-| Declares how to decode a `ChangePasswordRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeChangePasswordRequest : Protobuf.Decode.Decoder ChangePasswordRequest
decodeChangePasswordRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ChangePasswordRequest


{-| Declares how to encode a `ChangePasswordRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeChangePasswordRequest : ChangePasswordRequest -> Protobuf.Encode.Encoder
encodeChangePasswordRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ChangePasswordRequest


{-| `ChangePasswordRequest` message

-}
type alias ChangePasswordRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ChangePasswordRequest


{-| The field numbers for the fields of `IsAppInitializedReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersIsAppInitializedReply : { isAppInitialized : Int }
fieldNumbersIsAppInitializedReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__IsAppInitializedReply


{-| Default for IsAppInitializedReply. Should only be used for 'required' decoders as an initial value.

-}
defaultIsAppInitializedReply : IsAppInitializedReply
defaultIsAppInitializedReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__IsAppInitializedReply


{-| Declares how to decode a `IsAppInitializedReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeIsAppInitializedReply : Protobuf.Decode.Decoder IsAppInitializedReply
decodeIsAppInitializedReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__IsAppInitializedReply


{-| Declares how to encode a `IsAppInitializedReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeIsAppInitializedReply : IsAppInitializedReply -> Protobuf.Encode.Encoder
encodeIsAppInitializedReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__IsAppInitializedReply


{-| `IsAppInitializedReply` message

-}
type alias IsAppInitializedReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__IsAppInitializedReply


{-| The field numbers for the fields of `IsAppInitializedRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersIsAppInitializedRequest : {}
fieldNumbersIsAppInitializedRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__IsAppInitializedRequest


{-| Default for IsAppInitializedRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultIsAppInitializedRequest : IsAppInitializedRequest
defaultIsAppInitializedRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__IsAppInitializedRequest


{-| Declares how to decode a `IsAppInitializedRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeIsAppInitializedRequest : Protobuf.Decode.Decoder IsAppInitializedRequest
decodeIsAppInitializedRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__IsAppInitializedRequest


{-| Declares how to encode a `IsAppInitializedRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeIsAppInitializedRequest : IsAppInitializedRequest -> Protobuf.Encode.Encoder
encodeIsAppInitializedRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__IsAppInitializedRequest


{-| `IsAppInitializedRequest` message

-}
type alias IsAppInitializedRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__IsAppInitializedRequest


{-| The field numbers for the fields of `OpenAccountReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersOpenAccountReply : {}
fieldNumbersOpenAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__OpenAccountReply


{-| Default for OpenAccountReply. Should only be used for 'required' decoders as an initial value.

-}
defaultOpenAccountReply : OpenAccountReply
defaultOpenAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__OpenAccountReply


{-| Declares how to decode a `OpenAccountReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeOpenAccountReply : Protobuf.Decode.Decoder OpenAccountReply
decodeOpenAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__OpenAccountReply


{-| Declares how to encode a `OpenAccountReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeOpenAccountReply : OpenAccountReply -> Protobuf.Encode.Encoder
encodeOpenAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__OpenAccountReply


{-| `OpenAccountReply` message

-}
type alias OpenAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__OpenAccountReply


{-| The field numbers for the fields of `OpenAccountRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersOpenAccountRequest : { password : Int }
fieldNumbersOpenAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__OpenAccountRequest


{-| Default for OpenAccountRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultOpenAccountRequest : OpenAccountRequest
defaultOpenAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__OpenAccountRequest


{-| Declares how to decode a `OpenAccountRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeOpenAccountRequest : Protobuf.Decode.Decoder OpenAccountRequest
decodeOpenAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__OpenAccountRequest


{-| Declares how to encode a `OpenAccountRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeOpenAccountRequest : OpenAccountRequest -> Protobuf.Encode.Encoder
encodeOpenAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__OpenAccountRequest


{-| `OpenAccountRequest` message

-}
type alias OpenAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__OpenAccountRequest


{-| The field numbers for the fields of `CreateAccountReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCreateAccountReply : {}
fieldNumbersCreateAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CreateAccountReply


{-| Default for CreateAccountReply. Should only be used for 'required' decoders as an initial value.

-}
defaultCreateAccountReply : CreateAccountReply
defaultCreateAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CreateAccountReply


{-| Declares how to decode a `CreateAccountReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCreateAccountReply : Protobuf.Decode.Decoder CreateAccountReply
decodeCreateAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CreateAccountReply


{-| Declares how to encode a `CreateAccountReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCreateAccountReply : CreateAccountReply -> Protobuf.Encode.Encoder
encodeCreateAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CreateAccountReply


{-| `CreateAccountReply` message

-}
type alias CreateAccountReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CreateAccountReply


{-| The field numbers for the fields of `CreateAccountRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCreateAccountRequest : { password : Int }
fieldNumbersCreateAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CreateAccountRequest


{-| Default for CreateAccountRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultCreateAccountRequest : CreateAccountRequest
defaultCreateAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CreateAccountRequest


{-| Declares how to decode a `CreateAccountRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCreateAccountRequest : Protobuf.Decode.Decoder CreateAccountRequest
decodeCreateAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CreateAccountRequest


{-| Declares how to encode a `CreateAccountRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCreateAccountRequest : CreateAccountRequest -> Protobuf.Encode.Encoder
encodeCreateAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CreateAccountRequest


{-| `CreateAccountRequest` message

-}
type alias CreateAccountRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CreateAccountRequest


{-| The field numbers for the fields of `IsAccountOpenReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersIsAccountOpenReply : { isAccountOpen : Int }
fieldNumbersIsAccountOpenReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__IsAccountOpenReply


{-| Default for IsAccountOpenReply. Should only be used for 'required' decoders as an initial value.

-}
defaultIsAccountOpenReply : IsAccountOpenReply
defaultIsAccountOpenReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__IsAccountOpenReply


{-| Declares how to decode a `IsAccountOpenReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeIsAccountOpenReply : Protobuf.Decode.Decoder IsAccountOpenReply
decodeIsAccountOpenReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__IsAccountOpenReply


{-| Declares how to encode a `IsAccountOpenReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeIsAccountOpenReply : IsAccountOpenReply -> Protobuf.Encode.Encoder
encodeIsAccountOpenReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__IsAccountOpenReply


{-| `IsAccountOpenReply` message

-}
type alias IsAccountOpenReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__IsAccountOpenReply


{-| The field numbers for the fields of `IsAccountOpenRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersIsAccountOpenRequest : {}
fieldNumbersIsAccountOpenRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__IsAccountOpenRequest


{-| Default for IsAccountOpenRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultIsAccountOpenRequest : IsAccountOpenRequest
defaultIsAccountOpenRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__IsAccountOpenRequest


{-| Declares how to decode a `IsAccountOpenRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeIsAccountOpenRequest : Protobuf.Decode.Decoder IsAccountOpenRequest
decodeIsAccountOpenRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__IsAccountOpenRequest


{-| Declares how to encode a `IsAccountOpenRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeIsAccountOpenRequest : IsAccountOpenRequest -> Protobuf.Encode.Encoder
encodeIsAccountOpenRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__IsAccountOpenRequest


{-| `IsAccountOpenRequest` message

-}
type alias IsAccountOpenRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__IsAccountOpenRequest


{-| The field numbers for the fields of `AccountExistsReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAccountExistsReply : { accountExists : Int }
fieldNumbersAccountExistsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__AccountExistsReply


{-| Default for AccountExistsReply. Should only be used for 'required' decoders as an initial value.

-}
defaultAccountExistsReply : AccountExistsReply
defaultAccountExistsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__AccountExistsReply


{-| Declares how to decode a `AccountExistsReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAccountExistsReply : Protobuf.Decode.Decoder AccountExistsReply
decodeAccountExistsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__AccountExistsReply


{-| Declares how to encode a `AccountExistsReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAccountExistsReply : AccountExistsReply -> Protobuf.Encode.Encoder
encodeAccountExistsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__AccountExistsReply


{-| `AccountExistsReply` message

-}
type alias AccountExistsReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__AccountExistsReply


{-| The field numbers for the fields of `AccountExistsRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAccountExistsRequest : {}
fieldNumbersAccountExistsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__AccountExistsRequest


{-| Default for AccountExistsRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultAccountExistsRequest : AccountExistsRequest
defaultAccountExistsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__AccountExistsRequest


{-| Declares how to decode a `AccountExistsRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAccountExistsRequest : Protobuf.Decode.Decoder AccountExistsRequest
decodeAccountExistsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__AccountExistsRequest


{-| Declares how to encode a `AccountExistsRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAccountExistsRequest : AccountExistsRequest -> Protobuf.Encode.Encoder
encodeAccountExistsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__AccountExistsRequest


{-| `AccountExistsRequest` message

-}
type alias AccountExistsRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__AccountExistsRequest


{-| The field numbers for the fields of `GetVersionReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetVersionReply : { version : Int }
fieldNumbersGetVersionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetVersionReply


{-| Default for GetVersionReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetVersionReply : GetVersionReply
defaultGetVersionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetVersionReply


{-| Declares how to decode a `GetVersionReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetVersionReply : Protobuf.Decode.Decoder GetVersionReply
decodeGetVersionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetVersionReply


{-| Declares how to encode a `GetVersionReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetVersionReply : GetVersionReply -> Protobuf.Encode.Encoder
encodeGetVersionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetVersionReply


{-| `GetVersionReply` message

-}
type alias GetVersionReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetVersionReply


{-| The field numbers for the fields of `GetVersionRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetVersionRequest : {}
fieldNumbersGetVersionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetVersionRequest


{-| Default for GetVersionRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetVersionRequest : GetVersionRequest
defaultGetVersionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetVersionRequest


{-| Declares how to decode a `GetVersionRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetVersionRequest : Protobuf.Decode.Decoder GetVersionRequest
decodeGetVersionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetVersionRequest


{-| Declares how to encode a `GetVersionRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetVersionRequest : GetVersionRequest -> Protobuf.Encode.Encoder
encodeGetVersionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetVersionRequest


{-| `GetVersionRequest` message

-}
type alias GetVersionRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetVersionRequest


{-| The field numbers for the fields of `GetMethodHelpReply`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetMethodHelpReply : { methodHelp : Int }
fieldNumbersGetMethodHelpReply =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetMethodHelpReply


{-| Default for GetMethodHelpReply. Should only be used for 'required' decoders as an initial value.

-}
defaultGetMethodHelpReply : GetMethodHelpReply
defaultGetMethodHelpReply =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetMethodHelpReply


{-| Declares how to decode a `GetMethodHelpReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetMethodHelpReply : Protobuf.Decode.Decoder GetMethodHelpReply
decodeGetMethodHelpReply =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetMethodHelpReply


{-| Declares how to encode a `GetMethodHelpReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetMethodHelpReply : GetMethodHelpReply -> Protobuf.Encode.Encoder
encodeGetMethodHelpReply =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetMethodHelpReply


{-| `GetMethodHelpReply` message

-}
type alias GetMethodHelpReply =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetMethodHelpReply


{-| The field numbers for the fields of `GetMethodHelpRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetMethodHelpRequest : { methodName : Int }
fieldNumbersGetMethodHelpRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetMethodHelpRequest


{-| Default for GetMethodHelpRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetMethodHelpRequest : GetMethodHelpRequest
defaultGetMethodHelpRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetMethodHelpRequest


{-| Declares how to decode a `GetMethodHelpRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetMethodHelpRequest : Protobuf.Decode.Decoder GetMethodHelpRequest
decodeGetMethodHelpRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetMethodHelpRequest


{-| Declares how to encode a `GetMethodHelpRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetMethodHelpRequest : GetMethodHelpRequest -> Protobuf.Encode.Encoder
encodeGetMethodHelpRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetMethodHelpRequest


{-| `GetMethodHelpRequest` message

-}
type alias GetMethodHelpRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetMethodHelpRequest


{-| The field numbers for the fields of `PaymentAccountFormField`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPaymentAccountFormField :
    { id : Int
    , component : Int
    , type_ : Int
    , label : Int
    , value : Int
    , minLength : Int
    , maxLength : Int
    , supportedCurrencies : Int
    , supportedCountries : Int
    , supportedSepaEuroCountries : Int
    , supportedSepaNonEuroCountries : Int
    , requiredForCountries : Int
    }
fieldNumbersPaymentAccountFormField =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PaymentAccountFormField


{-| Default for PaymentAccountFormField. Should only be used for 'required' decoders as an initial value.

-}
defaultPaymentAccountFormField : PaymentAccountFormField
defaultPaymentAccountFormField =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PaymentAccountFormField


{-| Declares how to decode a `PaymentAccountFormField` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePaymentAccountFormField : Protobuf.Decode.Decoder PaymentAccountFormField
decodePaymentAccountFormField =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PaymentAccountFormField


{-| Declares how to encode a `PaymentAccountFormField` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePaymentAccountFormField : PaymentAccountFormField -> Protobuf.Encode.Encoder
encodePaymentAccountFormField =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PaymentAccountFormField


{-| `PaymentAccountFormField` message

-}
type alias PaymentAccountFormField =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PaymentAccountFormField


{-| The field numbers for the fields of `PaymentAccountForm`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPaymentAccountForm : { id : Int, fields : Int }
fieldNumbersPaymentAccountForm =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PaymentAccountForm


{-| Default for PaymentAccountForm. Should only be used for 'required' decoders as an initial value.

-}
defaultPaymentAccountForm : PaymentAccountForm
defaultPaymentAccountForm =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PaymentAccountForm


{-| Declares how to decode a `PaymentAccountForm` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePaymentAccountForm : Protobuf.Decode.Decoder PaymentAccountForm
decodePaymentAccountForm =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PaymentAccountForm


{-| Declares how to encode a `PaymentAccountForm` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePaymentAccountForm : PaymentAccountForm -> Protobuf.Encode.Encoder
encodePaymentAccountForm =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PaymentAccountForm


{-| `PaymentAccountForm` message

-}
type alias PaymentAccountForm =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PaymentAccountForm


{-| The field numbers for the fields of `MockPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMockPayload : { messageVersion : Int, message : Int }
fieldNumbersMockPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MockPayload


{-| Default for MockPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultMockPayload : MockPayload
defaultMockPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MockPayload


{-| Declares how to decode a `MockPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMockPayload : Protobuf.Decode.Decoder MockPayload
decodeMockPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MockPayload


{-| Declares how to encode a `MockPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMockPayload : MockPayload -> Protobuf.Encode.Encoder
encodeMockPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MockPayload


{-| `MockPayload` message

-}
type alias MockPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MockPayload


{-| The field numbers for the fields of `MockMailboxPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMockMailboxPayload : { message : Int, senderNodeAddress : Int, uid : Int }
fieldNumbersMockMailboxPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MockMailboxPayload


{-| Default for MockMailboxPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultMockMailboxPayload : MockMailboxPayload
defaultMockMailboxPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MockMailboxPayload


{-| Declares how to decode a `MockMailboxPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMockMailboxPayload : Protobuf.Decode.Decoder MockMailboxPayload
decodeMockMailboxPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MockMailboxPayload


{-| Declares how to encode a `MockMailboxPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMockMailboxPayload : MockMailboxPayload -> Protobuf.Encode.Encoder
encodeMockMailboxPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MockMailboxPayload


{-| `MockMailboxPayload` message

-}
type alias MockMailboxPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MockMailboxPayload


{-| The field numbers for the fields of `MarketAlertFilter`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMarketAlertFilter : { paymentAccount : Int, triggerValue : Int, isBuyOffer : Int, alertIds : Int }
fieldNumbersMarketAlertFilter =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MarketAlertFilter


{-| Default for MarketAlertFilter. Should only be used for 'required' decoders as an initial value.

-}
defaultMarketAlertFilter : MarketAlertFilter
defaultMarketAlertFilter =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MarketAlertFilter


{-| Declares how to decode a `MarketAlertFilter` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMarketAlertFilter : Protobuf.Decode.Decoder MarketAlertFilter
decodeMarketAlertFilter =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MarketAlertFilter


{-| Declares how to encode a `MarketAlertFilter` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMarketAlertFilter : MarketAlertFilter -> Protobuf.Encode.Encoder
encodeMarketAlertFilter =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MarketAlertFilter


{-| `MarketAlertFilter` message

-}
type alias MarketAlertFilter =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MarketAlertFilter


{-| The field numbers for the fields of `PriceAlertFilter`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPriceAlertFilter : { currencyCode : Int, high : Int, low : Int }
fieldNumbersPriceAlertFilter =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PriceAlertFilter


{-| Default for PriceAlertFilter. Should only be used for 'required' decoders as an initial value.

-}
defaultPriceAlertFilter : PriceAlertFilter
defaultPriceAlertFilter =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PriceAlertFilter


{-| Declares how to decode a `PriceAlertFilter` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePriceAlertFilter : Protobuf.Decode.Decoder PriceAlertFilter
decodePriceAlertFilter =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PriceAlertFilter


{-| Declares how to encode a `PriceAlertFilter` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePriceAlertFilter : PriceAlertFilter -> Protobuf.Encode.Encoder
encodePriceAlertFilter =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PriceAlertFilter


{-| `PriceAlertFilter` message

-}
type alias PriceAlertFilter =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PriceAlertFilter


{-| The field numbers for the fields of `Region`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRegion : { code : Int, name : Int }
fieldNumbersRegion =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__Region


{-| Default for Region. Should only be used for 'required' decoders as an initial value.

-}
defaultRegion : Region
defaultRegion =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__Region


{-| Declares how to decode a `Region` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRegion : Protobuf.Decode.Decoder Region
decodeRegion =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__Region


{-| Declares how to encode a `Region` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRegion : Region -> Protobuf.Encode.Encoder
encodeRegion =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__Region


{-| `Region` message

-}
type alias Region =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__Region


{-| The field numbers for the fields of `Country`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCountry : { code : Int, name : Int, region : Int }
fieldNumbersCountry =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__Country


{-| Default for Country. Should only be used for 'required' decoders as an initial value.

-}
defaultCountry : Country
defaultCountry =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__Country


{-| Declares how to decode a `Country` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCountry : Protobuf.Decode.Decoder Country
decodeCountry =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__Country


{-| Declares how to encode a `Country` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCountry : Country -> Protobuf.Encode.Encoder
encodeCountry =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__Country


{-| `Country` message

-}
type alias Country =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__Country


{-| The field numbers for the fields of `TraditionalCurrency`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersTraditionalCurrency : {}
fieldNumbersTraditionalCurrency =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__TraditionalCurrency


{-| Default for TraditionalCurrency. Should only be used for 'required' decoders as an initial value.

-}
defaultTraditionalCurrency : TraditionalCurrency
defaultTraditionalCurrency =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__TraditionalCurrency


{-| Declares how to decode a `TraditionalCurrency` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeTraditionalCurrency : Protobuf.Decode.Decoder TraditionalCurrency
decodeTraditionalCurrency =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__TraditionalCurrency


{-| Declares how to encode a `TraditionalCurrency` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeTraditionalCurrency : TraditionalCurrency -> Protobuf.Encode.Encoder
encodeTraditionalCurrency =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__TraditionalCurrency


{-| `TraditionalCurrency` message

-}
type alias TraditionalCurrency =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__TraditionalCurrency


{-| The field numbers for the fields of `CryptoCurrency`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCryptoCurrency : { isAsset : Int }
fieldNumbersCryptoCurrency =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CryptoCurrency


{-| Default for CryptoCurrency. Should only be used for 'required' decoders as an initial value.

-}
defaultCryptoCurrency : CryptoCurrency
defaultCryptoCurrency =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CryptoCurrency


{-| Declares how to decode a `CryptoCurrency` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCryptoCurrency : Protobuf.Decode.Decoder CryptoCurrency
decodeCryptoCurrency =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CryptoCurrency


{-| Declares how to encode a `CryptoCurrency` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCryptoCurrency : CryptoCurrency -> Protobuf.Encode.Encoder
encodeCryptoCurrency =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CryptoCurrency


{-| `CryptoCurrency` message

-}
type alias CryptoCurrency =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CryptoCurrency


{-| The field numbers for the fields of `TradeCurrency`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersTradeCurrency :
    { code : Int
    , name : Int
    , message :
        Proto.Io.Haveno.Protobuffer.Internals_.FieldNumbersProto__Io__Haveno__Protobuffer__TradeCurrency__Message__Message
    }
fieldNumbersTradeCurrency =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__TradeCurrency


{-| Default for TradeCurrency. Should only be used for 'required' decoders as an initial value.

-}
defaultTradeCurrency : TradeCurrency
defaultTradeCurrency =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__TradeCurrency


{-| Declares how to decode a `TradeCurrency` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeTradeCurrency : Protobuf.Decode.Decoder TradeCurrency
decodeTradeCurrency =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__TradeCurrency


{-| Declares how to encode a `TradeCurrency` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeTradeCurrency : TradeCurrency -> Protobuf.Encode.Encoder
encodeTradeCurrency =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__TradeCurrency


{-| `TradeCurrency` message

-}
type alias TradeCurrency =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__TradeCurrency


{-| The field numbers for the fields of `Currency`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCurrency : { currencyCode : Int }
fieldNumbersCurrency =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__Currency


{-| Default for Currency. Should only be used for 'required' decoders as an initial value.

-}
defaultCurrency : Currency
defaultCurrency =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__Currency


{-| Declares how to decode a `Currency` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCurrency : Protobuf.Decode.Decoder Currency
decodeCurrency =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__Currency


{-| Declares how to encode a `Currency` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCurrency : Currency -> Protobuf.Encode.Encoder
encodeCurrency =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__Currency


{-| `Currency` message

-}
type alias Currency =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__Currency


{-| The field numbers for the fields of `PaymentMethod`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPaymentMethod : { id : Int, maxTradePeriod : Int, maxTradeLimit : Int, supportedAssetCodes : Int }
fieldNumbersPaymentMethod =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PaymentMethod


{-| Default for PaymentMethod. Should only be used for 'required' decoders as an initial value.

-}
defaultPaymentMethod : PaymentMethod
defaultPaymentMethod =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PaymentMethod


{-| Declares how to decode a `PaymentMethod` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePaymentMethod : Protobuf.Decode.Decoder PaymentMethod
decodePaymentMethod =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PaymentMethod


{-| Declares how to encode a `PaymentMethod` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePaymentMethod : PaymentMethod -> Protobuf.Encode.Encoder
encodePaymentMethod =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PaymentMethod


{-| `PaymentMethod` message

-}
type alias PaymentMethod =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PaymentMethod


{-| The field numbers for the fields of `PaymentAccount`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPaymentAccount :
    { id : Int
    , creationDate : Int
    , paymentMethod : Int
    , accountName : Int
    , tradeCurrencies : Int
    , selectedTradeCurrency : Int
    , paymentAccountPayload : Int
    }
fieldNumbersPaymentAccount =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PaymentAccount


{-| Default for PaymentAccount. Should only be used for 'required' decoders as an initial value.

-}
defaultPaymentAccount : PaymentAccount
defaultPaymentAccount =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PaymentAccount


{-| Declares how to decode a `PaymentAccount` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePaymentAccount : Protobuf.Decode.Decoder PaymentAccount
decodePaymentAccount =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PaymentAccount


{-| Declares how to encode a `PaymentAccount` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePaymentAccount : PaymentAccount -> Protobuf.Encode.Encoder
encodePaymentAccount =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PaymentAccount


{-| `PaymentAccount` message

-}
type alias PaymentAccount =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PaymentAccount


{-| The field numbers for the fields of `BlockChainExplorer`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersBlockChainExplorer : { name : Int, txUrl : Int }
fieldNumbersBlockChainExplorer =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__BlockChainExplorer


{-| Default for BlockChainExplorer. Should only be used for 'required' decoders as an initial value.

-}
defaultBlockChainExplorer : BlockChainExplorer
defaultBlockChainExplorer =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__BlockChainExplorer


{-| Declares how to decode a `BlockChainExplorer` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeBlockChainExplorer : Protobuf.Decode.Decoder BlockChainExplorer
decodeBlockChainExplorer =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__BlockChainExplorer


{-| Declares how to encode a `BlockChainExplorer` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeBlockChainExplorer : BlockChainExplorer -> Protobuf.Encode.Encoder
encodeBlockChainExplorer =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__BlockChainExplorer


{-| `BlockChainExplorer` message

-}
type alias BlockChainExplorer =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__BlockChainExplorer


{-| The field numbers for the fields of `UserPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersUserPayload :
    { accountId : Int
    , paymentAccounts : Int
    , currentPaymentAccount : Int
    , acceptedLanguageLocaleCodes : Int
    , developersAlert : Int
    , displayedAlert : Int
    , developersFilter : Int
    , acceptedArbitrators : Int
    , acceptedMediators : Int
    , registeredArbitrator : Int
    , registeredMediator : Int
    , priceAlertFilter : Int
    , marketAlertFilters : Int
    , acceptedRefundAgents : Int
    , registeredRefundAgent : Int
    , cookie : Int
    , walletCreationDate : Int
    }
fieldNumbersUserPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__UserPayload


{-| Default for UserPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultUserPayload : UserPayload
defaultUserPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__UserPayload


{-| Declares how to decode a `UserPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeUserPayload : Protobuf.Decode.Decoder UserPayload
decodeUserPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__UserPayload


{-| Declares how to encode a `UserPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeUserPayload : UserPayload -> Protobuf.Encode.Encoder
encodeUserPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__UserPayload


{-| /////////////////////////////////////////////////////////////////////////////////////////
 UserPayload
/////////////////////////////////////////////////////////////////////////////////////////


-}
type alias UserPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__UserPayload


{-| The field numbers for the fields of `XmrNodeSettings`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersXmrNodeSettings : { blockchainPath : Int, bootstrapUrl : Int, startupFlags : Int }
fieldNumbersXmrNodeSettings =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__XmrNodeSettings


{-| Default for XmrNodeSettings. Should only be used for 'required' decoders as an initial value.

-}
defaultXmrNodeSettings : XmrNodeSettings
defaultXmrNodeSettings =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__XmrNodeSettings


{-| Declares how to decode a `XmrNodeSettings` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeXmrNodeSettings : Protobuf.Decode.Decoder XmrNodeSettings
decodeXmrNodeSettings =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__XmrNodeSettings


{-| Declares how to encode a `XmrNodeSettings` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeXmrNodeSettings : XmrNodeSettings -> Protobuf.Encode.Encoder
encodeXmrNodeSettings =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__XmrNodeSettings


{-| `XmrNodeSettings` message

-}
type alias XmrNodeSettings =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__XmrNodeSettings


{-| The field numbers for the fields of `AutoConfirmSettings`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAutoConfirmSettings :
    { enabled : Int, requiredConfirmations : Int, tradeLimit : Int, serviceAddresses : Int, currencyCode : Int }
fieldNumbersAutoConfirmSettings =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__AutoConfirmSettings


{-| Default for AutoConfirmSettings. Should only be used for 'required' decoders as an initial value.

-}
defaultAutoConfirmSettings : AutoConfirmSettings
defaultAutoConfirmSettings =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__AutoConfirmSettings


{-| Declares how to decode a `AutoConfirmSettings` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAutoConfirmSettings : Protobuf.Decode.Decoder AutoConfirmSettings
decodeAutoConfirmSettings =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__AutoConfirmSettings


{-| Declares how to encode a `AutoConfirmSettings` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAutoConfirmSettings : AutoConfirmSettings -> Protobuf.Encode.Encoder
encodeAutoConfirmSettings =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__AutoConfirmSettings


{-| `AutoConfirmSettings` message

-}
type alias AutoConfirmSettings =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__AutoConfirmSettings


{-| The field numbers for the fields of `PreferencesPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPreferencesPayload :
    { userLanguage : Int
    , userCountry : Int
    , traditionalCurrencies : Int
    , cryptoCurrencies : Int
    , blockChainExplorerMainNet : Int
    , blockChainExplorerTestNet : Int
    , backupDirectory : Int
    , autoSelectArbitrators : Int
    , dontShowAgainMap : Int
    , tacAccepted : Int
    , useTorForXmrOrdinal : Int
    , showOwnOffersInOfferBook : Int
    , preferredTradeCurrency : Int
    , withdrawalTxFeeInVbytes : Int
    , useCustomWithdrawalTxFee : Int
    , maxPriceDistanceInPercent : Int
    , offerBookChartScreenCurrencyCode : Int
    , tradeChartsScreenCurrencyCode : Int
    , buyScreenCurrencyCode : Int
    , sellScreenCurrencyCode : Int
    , tradeStatisticsTickUnitIndex : Int
    , resyncSpvRequested : Int
    , sortMarketCurrenciesNumerically : Int
    , usePercentageBasedPrice : Int
    , peerTagMap : Int
    , moneroNodes : Int
    , ignoreTradersList : Int
    , directoryChooserPath : Int
    , useAnimations : Int
    , selectedPaymentAccountForCreateOffer : Int
    , bridgeAddresses : Int
    , bridgeOptionOrdinal : Int
    , torTransportOrdinal : Int
    , customBridges : Int
    , moneroNodesOptionOrdinal : Int
    , referralId : Int
    , phoneKeyAndToken : Int
    , useSoundForMobileNotifications : Int
    , useTradeNotifications : Int
    , useMarketNotifications : Int
    , usePriceNotifications : Int
    , useStandbyMode : Int
    , rpcUser : Int
    , rpcPw : Int
    , takeOfferSelectedPaymentAccountId : Int
    , buyerSecurityDepositAsPercent : Int
    , ignoreDustThreshold : Int
    , buyerSecurityDepositAsPercentForCrypto : Int
    , blockNotifyPort : Int
    , cssTheme : Int
    , tacAcceptedV120 : Int
    , autoConfirmSettings : Int
    , bsqAverageTrimThreshold : Int
    , hideNonAccountPaymentMethods : Int
    , showOffersMatchingMyAccounts : Int
    , denyApiTaker : Int
    , notifyOnPreRelease : Int
    , xmrNodeSettings : Int
    , clearDataAfterDays : Int
    , buyScreenCryptoCurrencyCode : Int
    , sellScreenCryptoCurrencyCode : Int
    , splitOfferOutput : Int
    }
fieldNumbersPreferencesPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PreferencesPayload


{-| Default for PreferencesPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultPreferencesPayload : PreferencesPayload
defaultPreferencesPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PreferencesPayload


{-| Declares how to decode a `PreferencesPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePreferencesPayload : Protobuf.Decode.Decoder PreferencesPayload
decodePreferencesPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PreferencesPayload


{-| Declares how to encode a `PreferencesPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePreferencesPayload : PreferencesPayload -> Protobuf.Encode.Encoder
encodePreferencesPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PreferencesPayload


{-| /////////////////////////////////////////////////////////////////////////////////////////
 Preferences
/////////////////////////////////////////////////////////////////////////////////////////


-}
type alias PreferencesPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PreferencesPayload


{-| The field numbers for the fields of `RefundDisputeList`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRefundDisputeList : { dispute : Int }
fieldNumbersRefundDisputeList =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__RefundDisputeList


{-| Default for RefundDisputeList. Should only be used for 'required' decoders as an initial value.

-}
defaultRefundDisputeList : RefundDisputeList
defaultRefundDisputeList =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__RefundDisputeList


{-| Declares how to decode a `RefundDisputeList` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRefundDisputeList : Protobuf.Decode.Decoder RefundDisputeList
decodeRefundDisputeList =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__RefundDisputeList


{-| Declares how to encode a `RefundDisputeList` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRefundDisputeList : RefundDisputeList -> Protobuf.Encode.Encoder
encodeRefundDisputeList =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__RefundDisputeList


{-| `RefundDisputeList` message

-}
type alias RefundDisputeList =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__RefundDisputeList


{-| The field numbers for the fields of `MediationDisputeList`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMediationDisputeList : { dispute : Int }
fieldNumbersMediationDisputeList =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MediationDisputeList


{-| Default for MediationDisputeList. Should only be used for 'required' decoders as an initial value.

-}
defaultMediationDisputeList : MediationDisputeList
defaultMediationDisputeList =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MediationDisputeList


{-| Declares how to decode a `MediationDisputeList` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMediationDisputeList : Protobuf.Decode.Decoder MediationDisputeList
decodeMediationDisputeList =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MediationDisputeList


{-| Declares how to encode a `MediationDisputeList` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMediationDisputeList : MediationDisputeList -> Protobuf.Encode.Encoder
encodeMediationDisputeList =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MediationDisputeList


{-| `MediationDisputeList` message

-}
type alias MediationDisputeList =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MediationDisputeList


{-| The field numbers for the fields of `ArbitrationDisputeList`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersArbitrationDisputeList : { dispute : Int }
fieldNumbersArbitrationDisputeList =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ArbitrationDisputeList


{-| Default for ArbitrationDisputeList. Should only be used for 'required' decoders as an initial value.

-}
defaultArbitrationDisputeList : ArbitrationDisputeList
defaultArbitrationDisputeList =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ArbitrationDisputeList


{-| Declares how to decode a `ArbitrationDisputeList` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeArbitrationDisputeList : Protobuf.Decode.Decoder ArbitrationDisputeList
decodeArbitrationDisputeList =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ArbitrationDisputeList


{-| Declares how to encode a `ArbitrationDisputeList` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeArbitrationDisputeList : ArbitrationDisputeList -> Protobuf.Encode.Encoder
encodeArbitrationDisputeList =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ArbitrationDisputeList


{-| /////////////////////////////////////////////////////////////////////////////////////////
 Dispute
/////////////////////////////////////////////////////////////////////////////////////////


-}
type alias ArbitrationDisputeList =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ArbitrationDisputeList


{-| The field numbers for the fields of `EncryptedConnectionList`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersEncryptedConnectionList :
    { salt : Int, items : Int, currentConnectionUrl : Int, refreshPeriod : Int, autoSwitch : Int }
fieldNumbersEncryptedConnectionList =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__EncryptedConnectionList


{-| Default for EncryptedConnectionList. Should only be used for 'required' decoders as an initial value.

-}
defaultEncryptedConnectionList : EncryptedConnectionList
defaultEncryptedConnectionList =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__EncryptedConnectionList


{-| Declares how to decode a `EncryptedConnectionList` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeEncryptedConnectionList : Protobuf.Decode.Decoder EncryptedConnectionList
decodeEncryptedConnectionList =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__EncryptedConnectionList


{-| Declares how to encode a `EncryptedConnectionList` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeEncryptedConnectionList : EncryptedConnectionList -> Protobuf.Encode.Encoder
encodeEncryptedConnectionList =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__EncryptedConnectionList


{-| ## Fields

### refreshPeriod

 negative: no automated refresh is activated, zero: automated refresh with default period, positive: automated refresh with configured period (value)


-}
type alias EncryptedConnectionList =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__EncryptedConnectionList


{-| The field numbers for the fields of `EncryptedConnection`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersEncryptedConnection :
    { url : Int, username : Int, encryptedPassword : Int, encryptionSalt : Int, priority : Int }
fieldNumbersEncryptedConnection =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__EncryptedConnection


{-| Default for EncryptedConnection. Should only be used for 'required' decoders as an initial value.

-}
defaultEncryptedConnection : EncryptedConnection
defaultEncryptedConnection =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__EncryptedConnection


{-| Declares how to decode a `EncryptedConnection` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeEncryptedConnection : Protobuf.Decode.Decoder EncryptedConnection
decodeEncryptedConnection =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__EncryptedConnection


{-| Declares how to encode a `EncryptedConnection` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeEncryptedConnection : EncryptedConnection -> Protobuf.Encode.Encoder
encodeEncryptedConnection =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__EncryptedConnection


{-| /////////////////////////////////////////////////////////////////////////////////////////
 Connections
/////////////////////////////////////////////////////////////////////////////////////////


-}
type alias EncryptedConnection =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__EncryptedConnection


{-| The field numbers for the fields of `TradePeer`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersTradePeer :
    { nodeAddress : Int
    , pubKeyRing : Int
    , accountId : Int
    , paymentAccountId : Int
    , paymentMethodId : Int
    , paymentAccountPayloadHash : Int
    , encryptedPaymentAccountPayload : Int
    , paymentAccountKey : Int
    , paymentAccountPayload : Int
    , payoutAddressString : Int
    , contractAsJson : Int
    , contractSignature : Int
    , accountAgeWitnessNonce : Int
    , accountAgeWitnessSignature : Int
    , accountAgeWitness : Int
    , currentDate : Int
    , mediatedPayoutTxSignature : Int
    , paymentSentMessage : Int
    , paymentReceivedMessage : Int
    , disputeClosedMessage : Int
    , reserveTxHash : Int
    , reserveTxHex : Int
    , reserveTxKey : Int
    , reserveTxKeyImages : Int
    , preparedMultisigHex : Int
    , madeMultisigHex : Int
    , exchangedMultisigHex : Int
    , updatedMultisigHex : Int
    , depositsConfirmedMessageAcked : Int
    , depositTxHash : Int
    , depositTxHex : Int
    , depositTxKey : Int
    , depositTxFee : Int
    , securityDeposit : Int
    , unsignedPayoutTxHex : Int
    , payoutTxFee : Int
    , payoutAmount : Int
    }
fieldNumbersTradePeer =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__TradePeer


{-| Default for TradePeer. Should only be used for 'required' decoders as an initial value.

-}
defaultTradePeer : TradePeer
defaultTradePeer =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__TradePeer


{-| Declares how to decode a `TradePeer` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeTradePeer : Protobuf.Decode.Decoder TradePeer
decodeTradePeer =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__TradePeer


{-| Declares how to encode a `TradePeer` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeTradePeer : TradePeer -> Protobuf.Encode.Encoder
encodeTradePeer =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__TradePeer


{-| `TradePeer` message

-}
type alias TradePeer =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__TradePeer


{-| The field numbers for the fields of `ProcessModel`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersProcessModel :
    { offerId : Int
    , accountId : Int
    , pubKeyRing : Int
    , payoutTxSignature : Int
    , useSavingsWallet : Int
    , fundsNeededForTrade : Int
    , paymentSentMessageState : Int
    , paymentSentMessageStateArbitrator : Int
    , makerSignature : Int
    , maker : Int
    , taker : Int
    , arbitrator : Int
    , tempTradePeerNodeAddress : Int
    , multisigAddress : Int
    , mediatedPayoutTxSignature : Int
    , buyerPayoutAmountFromMediation : Int
    , sellerPayoutAmountFromMediation : Int
    , tradeProtocolErrorHeight : Int
    , tradeFeeAddress : Int
    }
fieldNumbersProcessModel =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ProcessModel


{-| Default for ProcessModel. Should only be used for 'required' decoders as an initial value.

-}
defaultProcessModel : ProcessModel
defaultProcessModel =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ProcessModel


{-| Declares how to decode a `ProcessModel` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeProcessModel : Protobuf.Decode.Decoder ProcessModel
decodeProcessModel =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ProcessModel


{-| Declares how to encode a `ProcessModel` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeProcessModel : ProcessModel -> Protobuf.Encode.Encoder
encodeProcessModel =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ProcessModel


{-| ## Fields

### mediatedPayoutTxSignature

 placeholder if mediation used in future


-}
type alias ProcessModel =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ProcessModel


{-| The field numbers for the fields of `ArbitratorTrade`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersArbitratorTrade : { trade : Int }
fieldNumbersArbitratorTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ArbitratorTrade


{-| Default for ArbitratorTrade. Should only be used for 'required' decoders as an initial value.

-}
defaultArbitratorTrade : ArbitratorTrade
defaultArbitratorTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ArbitratorTrade


{-| Declares how to decode a `ArbitratorTrade` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeArbitratorTrade : Protobuf.Decode.Decoder ArbitratorTrade
decodeArbitratorTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ArbitratorTrade


{-| Declares how to encode a `ArbitratorTrade` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeArbitratorTrade : ArbitratorTrade -> Protobuf.Encode.Encoder
encodeArbitratorTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ArbitratorTrade


{-| `ArbitratorTrade` message

-}
type alias ArbitratorTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ArbitratorTrade


{-| The field numbers for the fields of `SellerAsTakerTrade`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSellerAsTakerTrade : { trade : Int }
fieldNumbersSellerAsTakerTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SellerAsTakerTrade


{-| Default for SellerAsTakerTrade. Should only be used for 'required' decoders as an initial value.

-}
defaultSellerAsTakerTrade : SellerAsTakerTrade
defaultSellerAsTakerTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SellerAsTakerTrade


{-| Declares how to decode a `SellerAsTakerTrade` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSellerAsTakerTrade : Protobuf.Decode.Decoder SellerAsTakerTrade
decodeSellerAsTakerTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SellerAsTakerTrade


{-| Declares how to encode a `SellerAsTakerTrade` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSellerAsTakerTrade : SellerAsTakerTrade -> Protobuf.Encode.Encoder
encodeSellerAsTakerTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SellerAsTakerTrade


{-| `SellerAsTakerTrade` message

-}
type alias SellerAsTakerTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SellerAsTakerTrade


{-| The field numbers for the fields of `SellerAsMakerTrade`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSellerAsMakerTrade : { trade : Int }
fieldNumbersSellerAsMakerTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SellerAsMakerTrade


{-| Default for SellerAsMakerTrade. Should only be used for 'required' decoders as an initial value.

-}
defaultSellerAsMakerTrade : SellerAsMakerTrade
defaultSellerAsMakerTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SellerAsMakerTrade


{-| Declares how to decode a `SellerAsMakerTrade` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSellerAsMakerTrade : Protobuf.Decode.Decoder SellerAsMakerTrade
decodeSellerAsMakerTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SellerAsMakerTrade


{-| Declares how to encode a `SellerAsMakerTrade` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSellerAsMakerTrade : SellerAsMakerTrade -> Protobuf.Encode.Encoder
encodeSellerAsMakerTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SellerAsMakerTrade


{-| `SellerAsMakerTrade` message

-}
type alias SellerAsMakerTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SellerAsMakerTrade


{-| The field numbers for the fields of `BuyerAsTakerTrade`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersBuyerAsTakerTrade : { trade : Int }
fieldNumbersBuyerAsTakerTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__BuyerAsTakerTrade


{-| Default for BuyerAsTakerTrade. Should only be used for 'required' decoders as an initial value.

-}
defaultBuyerAsTakerTrade : BuyerAsTakerTrade
defaultBuyerAsTakerTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__BuyerAsTakerTrade


{-| Declares how to decode a `BuyerAsTakerTrade` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeBuyerAsTakerTrade : Protobuf.Decode.Decoder BuyerAsTakerTrade
decodeBuyerAsTakerTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__BuyerAsTakerTrade


{-| Declares how to encode a `BuyerAsTakerTrade` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeBuyerAsTakerTrade : BuyerAsTakerTrade -> Protobuf.Encode.Encoder
encodeBuyerAsTakerTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__BuyerAsTakerTrade


{-| `BuyerAsTakerTrade` message

-}
type alias BuyerAsTakerTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__BuyerAsTakerTrade


{-| The field numbers for the fields of `BuyerAsMakerTrade`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersBuyerAsMakerTrade : { trade : Int }
fieldNumbersBuyerAsMakerTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__BuyerAsMakerTrade


{-| Default for BuyerAsMakerTrade. Should only be used for 'required' decoders as an initial value.

-}
defaultBuyerAsMakerTrade : BuyerAsMakerTrade
defaultBuyerAsMakerTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__BuyerAsMakerTrade


{-| Declares how to decode a `BuyerAsMakerTrade` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeBuyerAsMakerTrade : Protobuf.Decode.Decoder BuyerAsMakerTrade
decodeBuyerAsMakerTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__BuyerAsMakerTrade


{-| Declares how to encode a `BuyerAsMakerTrade` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeBuyerAsMakerTrade : BuyerAsMakerTrade -> Protobuf.Encode.Encoder
encodeBuyerAsMakerTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__BuyerAsMakerTrade


{-| `BuyerAsMakerTrade` message

-}
type alias BuyerAsMakerTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__BuyerAsMakerTrade


{-| The field numbers for the fields of `Trade`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersTrade :
    { offer : Int
    , processModel : Int
    , payoutTxId : Int
    , payoutTxHex : Int
    , payoutTxKey : Int
    , amount : Int
    , takeOfferDate : Int
    , price : Int
    , state : Int
    , payoutState : Int
    , disputeState : Int
    , periodState : Int
    , contract : Int
    , contractAsJson : Int
    , contractHash : Int
    , arbitratorNodeAddress : Int
    , mediatorNodeAddress : Int
    , errorMessage : Int
    , counterCurrencyTxId : Int
    , chatMessage : Int
    , mediationResultState : Int
    , lockTime : Int
    , startTime : Int
    , refundAgentNodeAddress : Int
    , refundResultState : Int
    , counterCurrencyExtraData : Int
    , uid : Int
    , isCompleted : Int
    }
fieldNumbersTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__Trade


{-| Default for Trade. Should only be used for 'required' decoders as an initial value.

-}
defaultTrade : Trade
defaultTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__Trade


{-| Declares how to decode a `Trade` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeTrade : Protobuf.Decode.Decoder Trade
decodeTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__Trade


{-| Declares how to encode a `Trade` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeTrade : Trade -> Protobuf.Encode.Encoder
encodeTrade =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__Trade


{-| `Trade` message

-}
type alias Trade =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__Trade


{-| The field numbers for the fields of `Tradable`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersTradable :
    { message :
        Proto.Io.Haveno.Protobuffer.Internals_.FieldNumbersProto__Io__Haveno__Protobuffer__Tradable__Message__Message
    }
fieldNumbersTradable =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__Tradable


{-| Default for Tradable. Should only be used for 'required' decoders as an initial value.

-}
defaultTradable : Tradable
defaultTradable =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__Tradable


{-| Declares how to decode a `Tradable` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeTradable : Protobuf.Decode.Decoder Tradable
decodeTradable =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__Tradable


{-| Declares how to encode a `Tradable` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeTradable : Tradable -> Protobuf.Encode.Encoder
encodeTradable =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__Tradable


{-| `Tradable` message

-}
type alias Tradable =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__Tradable


{-| The field numbers for the fields of `OpenOffer`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersOpenOffer :
    { offer : Int
    , state : Int
    , triggerPrice : Int
    , reserveExactAmount : Int
    , splitOutputTxHash : Int
    , splitOutputTxFee : Int
    , scheduledTxHashes : Int
    , scheduledAmount : Int
    , reserveTxHash : Int
    , reserveTxHex : Int
    , reserveTxKey : Int
    }
fieldNumbersOpenOffer =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__OpenOffer


{-| Default for OpenOffer. Should only be used for 'required' decoders as an initial value.

-}
defaultOpenOffer : OpenOffer
defaultOpenOffer =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__OpenOffer


{-| Declares how to decode a `OpenOffer` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeOpenOffer : Protobuf.Decode.Decoder OpenOffer
decodeOpenOffer =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__OpenOffer


{-| Declares how to encode a `OpenOffer` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeOpenOffer : OpenOffer -> Protobuf.Encode.Encoder
encodeOpenOffer =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__OpenOffer


{-| ## Fields

### scheduledAmount

 BigInteger


-}
type alias OpenOffer =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__OpenOffer


{-| The field numbers for the fields of `SignedOffer`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSignedOffer :
    { timeStamp : Int
    , traderId : Int
    , offerId : Int
    , tradeAmount : Int
    , penaltyAmount : Int
    , reserveTxHash : Int
    , reserveTxHex : Int
    , reserveTxKeyImages : Int
    , reserveTxMinerFee : Int
    , arbitratorSignature : Int
    }
fieldNumbersSignedOffer =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SignedOffer


{-| Default for SignedOffer. Should only be used for 'required' decoders as an initial value.

-}
defaultSignedOffer : SignedOffer
defaultSignedOffer =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SignedOffer


{-| Declares how to decode a `SignedOffer` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSignedOffer : Protobuf.Decode.Decoder SignedOffer
decodeSignedOffer =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SignedOffer


{-| Declares how to encode a `SignedOffer` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSignedOffer : SignedOffer -> Protobuf.Encode.Encoder
encodeSignedOffer =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SignedOffer


{-| `SignedOffer` message

-}
type alias SignedOffer =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SignedOffer


{-| The field numbers for the fields of `SignedOfferList`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSignedOfferList : { signedOffer : Int }
fieldNumbersSignedOfferList =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SignedOfferList


{-| Default for SignedOfferList. Should only be used for 'required' decoders as an initial value.

-}
defaultSignedOfferList : SignedOfferList
defaultSignedOfferList =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SignedOfferList


{-| Declares how to decode a `SignedOfferList` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSignedOfferList : Protobuf.Decode.Decoder SignedOfferList
decodeSignedOfferList =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SignedOfferList


{-| Declares how to encode a `SignedOfferList` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSignedOfferList : SignedOfferList -> Protobuf.Encode.Encoder
encodeSignedOfferList =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SignedOfferList


{-| `SignedOfferList` message

-}
type alias SignedOfferList =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SignedOfferList


{-| The field numbers for the fields of `Offer`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersOffer : { offerPayload : Int }
fieldNumbersOffer =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__Offer


{-| Default for Offer. Should only be used for 'required' decoders as an initial value.

-}
defaultOffer : Offer
defaultOffer =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__Offer


{-| Declares how to decode a `Offer` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeOffer : Protobuf.Decode.Decoder Offer
decodeOffer =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__Offer


{-| Declares how to encode a `Offer` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeOffer : Offer -> Protobuf.Encode.Encoder
encodeOffer =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__Offer


{-| `Offer` message

-}
type alias Offer =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__Offer


{-| The field numbers for the fields of `TradableList`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersTradableList : { tradable : Int }
fieldNumbersTradableList =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__TradableList


{-| Default for TradableList. Should only be used for 'required' decoders as an initial value.

-}
defaultTradableList : TradableList
defaultTradableList =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__TradableList


{-| Declares how to decode a `TradableList` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeTradableList : Protobuf.Decode.Decoder TradableList
decodeTradableList =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__TradableList


{-| Declares how to encode a `TradableList` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeTradableList : TradableList -> Protobuf.Encode.Encoder
encodeTradableList =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__TradableList


{-| /////////////////////////////////////////////////////////////////////////////////////////
 Offer/Trade
/////////////////////////////////////////////////////////////////////////////////////////


-}
type alias TradableList =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__TradableList


{-| The field numbers for the fields of `PaymentAccountList`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPaymentAccountList : { paymentAccount : Int }
fieldNumbersPaymentAccountList =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PaymentAccountList


{-| Default for PaymentAccountList. Should only be used for 'required' decoders as an initial value.

-}
defaultPaymentAccountList : PaymentAccountList
defaultPaymentAccountList =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PaymentAccountList


{-| Declares how to decode a `PaymentAccountList` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePaymentAccountList : Protobuf.Decode.Decoder PaymentAccountList
decodePaymentAccountList =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PaymentAccountList


{-| Declares how to encode a `PaymentAccountList` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePaymentAccountList : PaymentAccountList -> Protobuf.Encode.Encoder
encodePaymentAccountList =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PaymentAccountList


{-| `PaymentAccountList` message

-}
type alias PaymentAccountList =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PaymentAccountList


{-| The field numbers for the fields of `NavigationPath`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersNavigationPath : { path : Int }
fieldNumbersNavigationPath =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__NavigationPath


{-| Default for NavigationPath. Should only be used for 'required' decoders as an initial value.

-}
defaultNavigationPath : NavigationPath
defaultNavigationPath =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__NavigationPath


{-| Declares how to decode a `NavigationPath` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeNavigationPath : Protobuf.Decode.Decoder NavigationPath
decodeNavigationPath =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__NavigationPath


{-| Declares how to encode a `NavigationPath` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeNavigationPath : NavigationPath -> Protobuf.Encode.Encoder
encodeNavigationPath =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__NavigationPath


{-| `NavigationPath` message

-}
type alias NavigationPath =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__NavigationPath


{-| The field numbers for the fields of `XmrAddressEntry`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersXmrAddressEntry :
    { subaddressIndex : Int, addressString : Int, offerId : Int, context : Int, coinLockedInMultiSig : Int }
fieldNumbersXmrAddressEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__XmrAddressEntry


{-| Default for XmrAddressEntry. Should only be used for 'required' decoders as an initial value.

-}
defaultXmrAddressEntry : XmrAddressEntry
defaultXmrAddressEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__XmrAddressEntry


{-| Declares how to decode a `XmrAddressEntry` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeXmrAddressEntry : Protobuf.Decode.Decoder XmrAddressEntry
decodeXmrAddressEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__XmrAddressEntry


{-| Declares how to encode a `XmrAddressEntry` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeXmrAddressEntry : XmrAddressEntry -> Protobuf.Encode.Encoder
encodeXmrAddressEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__XmrAddressEntry


{-| `XmrAddressEntry` message

-}
type alias XmrAddressEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__XmrAddressEntry


{-| The field numbers for the fields of `XmrAddressEntryList`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersXmrAddressEntryList : { xmrAddressEntry : Int }
fieldNumbersXmrAddressEntryList =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__XmrAddressEntryList


{-| Default for XmrAddressEntryList. Should only be used for 'required' decoders as an initial value.

-}
defaultXmrAddressEntryList : XmrAddressEntryList
defaultXmrAddressEntryList =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__XmrAddressEntryList


{-| Declares how to decode a `XmrAddressEntryList` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeXmrAddressEntryList : Protobuf.Decode.Decoder XmrAddressEntryList
decodeXmrAddressEntryList =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__XmrAddressEntryList


{-| Declares how to encode a `XmrAddressEntryList` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeXmrAddressEntryList : XmrAddressEntryList -> Protobuf.Encode.Encoder
encodeXmrAddressEntryList =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__XmrAddressEntryList


{-| `XmrAddressEntryList` message

-}
type alias XmrAddressEntryList =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__XmrAddressEntryList


{-| The field numbers for the fields of `AddressEntry`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAddressEntry :
    { offerId : Int, context : Int, pubKey : Int, pubKeyHash : Int, coinLockedInMultiSig : Int, segwit : Int }
fieldNumbersAddressEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__AddressEntry


{-| Default for AddressEntry. Should only be used for 'required' decoders as an initial value.

-}
defaultAddressEntry : AddressEntry
defaultAddressEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__AddressEntry


{-| Declares how to decode a `AddressEntry` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAddressEntry : Protobuf.Decode.Decoder AddressEntry
decodeAddressEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__AddressEntry


{-| Declares how to encode a `AddressEntry` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAddressEntry : AddressEntry -> Protobuf.Encode.Encoder
encodeAddressEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__AddressEntry


{-| `AddressEntry` message

-}
type alias AddressEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__AddressEntry


{-| The field numbers for the fields of `AddressEntryList`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAddressEntryList : { addressEntry : Int }
fieldNumbersAddressEntryList =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__AddressEntryList


{-| Default for AddressEntryList. Should only be used for 'required' decoders as an initial value.

-}
defaultAddressEntryList : AddressEntryList
defaultAddressEntryList =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__AddressEntryList


{-| Declares how to decode a `AddressEntryList` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAddressEntryList : Protobuf.Decode.Decoder AddressEntryList
decodeAddressEntryList =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__AddressEntryList


{-| Declares how to encode a `AddressEntryList` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAddressEntryList : AddressEntryList -> Protobuf.Encode.Encoder
encodeAddressEntryList =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__AddressEntryList


{-| `AddressEntryList` message

-}
type alias AddressEntryList =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__AddressEntryList


{-| The field numbers for the fields of `PeerList`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPeerList : { peer : Int }
fieldNumbersPeerList =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PeerList


{-| Default for PeerList. Should only be used for 'required' decoders as an initial value.

-}
defaultPeerList : PeerList
defaultPeerList =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PeerList


{-| Declares how to decode a `PeerList` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePeerList : Protobuf.Decode.Decoder PeerList
decodePeerList =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PeerList


{-| Declares how to encode a `PeerList` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePeerList : PeerList -> Protobuf.Encode.Encoder
encodePeerList =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PeerList


{-| `PeerList` message

-}
type alias PeerList =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PeerList


{-| The field numbers for the fields of `TradeStatistics3Store`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersTradeStatistics3Store : { items : Int }
fieldNumbersTradeStatistics3Store =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__TradeStatistics3Store


{-| Default for TradeStatistics3Store. Should only be used for 'required' decoders as an initial value.

-}
defaultTradeStatistics3Store : TradeStatistics3Store
defaultTradeStatistics3Store =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__TradeStatistics3Store


{-| Declares how to decode a `TradeStatistics3Store` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeTradeStatistics3Store : Protobuf.Decode.Decoder TradeStatistics3Store
decodeTradeStatistics3Store =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__TradeStatistics3Store


{-| Declares how to encode a `TradeStatistics3Store` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeTradeStatistics3Store : TradeStatistics3Store -> Protobuf.Encode.Encoder
encodeTradeStatistics3Store =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__TradeStatistics3Store


{-| `TradeStatistics3Store` message

-}
type alias TradeStatistics3Store =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__TradeStatistics3Store


{-| The field numbers for the fields of `SignedWitnessStore`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSignedWitnessStore : { items : Int }
fieldNumbersSignedWitnessStore =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SignedWitnessStore


{-| Default for SignedWitnessStore. Should only be used for 'required' decoders as an initial value.

-}
defaultSignedWitnessStore : SignedWitnessStore
defaultSignedWitnessStore =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SignedWitnessStore


{-| Declares how to decode a `SignedWitnessStore` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSignedWitnessStore : Protobuf.Decode.Decoder SignedWitnessStore
decodeSignedWitnessStore =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SignedWitnessStore


{-| Declares how to encode a `SignedWitnessStore` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSignedWitnessStore : SignedWitnessStore -> Protobuf.Encode.Encoder
encodeSignedWitnessStore =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SignedWitnessStore


{-| `SignedWitnessStore` message

-}
type alias SignedWitnessStore =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SignedWitnessStore


{-| The field numbers for the fields of `AccountAgeWitnessStore`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAccountAgeWitnessStore : { items : Int }
fieldNumbersAccountAgeWitnessStore =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__AccountAgeWitnessStore


{-| Default for AccountAgeWitnessStore. Should only be used for 'required' decoders as an initial value.

-}
defaultAccountAgeWitnessStore : AccountAgeWitnessStore
defaultAccountAgeWitnessStore =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__AccountAgeWitnessStore


{-| Declares how to decode a `AccountAgeWitnessStore` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAccountAgeWitnessStore : Protobuf.Decode.Decoder AccountAgeWitnessStore
decodeAccountAgeWitnessStore =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__AccountAgeWitnessStore


{-| Declares how to encode a `AccountAgeWitnessStore` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAccountAgeWitnessStore : AccountAgeWitnessStore -> Protobuf.Encode.Encoder
encodeAccountAgeWitnessStore =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__AccountAgeWitnessStore


{-|  We use a list not a hash map to save disc space. The hash can be calculated from the payload anyway


-}
type alias AccountAgeWitnessStore =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__AccountAgeWitnessStore


{-| The field numbers for the fields of `MapValue`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMapValue : { sequenceNr : Int, timeStamp : Int }
fieldNumbersMapValue =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MapValue


{-| Default for MapValue. Should only be used for 'required' decoders as an initial value.

-}
defaultMapValue : MapValue
defaultMapValue =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MapValue


{-| Declares how to decode a `MapValue` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMapValue : Protobuf.Decode.Decoder MapValue
decodeMapValue =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MapValue


{-| Declares how to encode a `MapValue` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMapValue : MapValue -> Protobuf.Encode.Encoder
encodeMapValue =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MapValue


{-| `MapValue` message

-}
type alias MapValue =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MapValue


{-| The field numbers for the fields of `ByteArray`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersByteArray : { bytes : Int }
fieldNumbersByteArray =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ByteArray


{-| Default for ByteArray. Should only be used for 'required' decoders as an initial value.

-}
defaultByteArray : ByteArray
defaultByteArray =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ByteArray


{-| Declares how to decode a `ByteArray` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeByteArray : Protobuf.Decode.Decoder ByteArray
decodeByteArray =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ByteArray


{-| Declares how to encode a `ByteArray` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeByteArray : ByteArray -> Protobuf.Encode.Encoder
encodeByteArray =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ByteArray


{-| `ByteArray` message

-}
type alias ByteArray =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ByteArray


{-| The field numbers for the fields of `SequenceNumberEntry`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSequenceNumberEntry : { bytes : Int, mapValue : Int }
fieldNumbersSequenceNumberEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SequenceNumberEntry


{-| Default for SequenceNumberEntry. Should only be used for 'required' decoders as an initial value.

-}
defaultSequenceNumberEntry : SequenceNumberEntry
defaultSequenceNumberEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SequenceNumberEntry


{-| Declares how to decode a `SequenceNumberEntry` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSequenceNumberEntry : Protobuf.Decode.Decoder SequenceNumberEntry
decodeSequenceNumberEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SequenceNumberEntry


{-| Declares how to encode a `SequenceNumberEntry` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSequenceNumberEntry : SequenceNumberEntry -> Protobuf.Encode.Encoder
encodeSequenceNumberEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SequenceNumberEntry


{-| `SequenceNumberEntry` message

-}
type alias SequenceNumberEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SequenceNumberEntry


{-| The field numbers for the fields of `SequenceNumberMap`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSequenceNumberMap : { sequenceNumberEntries : Int }
fieldNumbersSequenceNumberMap =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SequenceNumberMap


{-| Default for SequenceNumberMap. Should only be used for 'required' decoders as an initial value.

-}
defaultSequenceNumberMap : SequenceNumberMap
defaultSequenceNumberMap =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SequenceNumberMap


{-| Declares how to decode a `SequenceNumberMap` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSequenceNumberMap : Protobuf.Decode.Decoder SequenceNumberMap
decodeSequenceNumberMap =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SequenceNumberMap


{-| Declares how to encode a `SequenceNumberMap` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSequenceNumberMap : SequenceNumberMap -> Protobuf.Encode.Encoder
encodeSequenceNumberMap =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SequenceNumberMap


{-| `SequenceNumberMap` message

-}
type alias SequenceNumberMap =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SequenceNumberMap


{-| The field numbers for the fields of `PersistableEnvelope`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPersistableEnvelope :
    { message :
        Proto.Io.Haveno.Protobuffer.Internals_.FieldNumbersProto__Io__Haveno__Protobuffer__PersistableEnvelope__Message__Message
    }
fieldNumbersPersistableEnvelope =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PersistableEnvelope


{-| Default for PersistableEnvelope. Should only be used for 'required' decoders as an initial value.

-}
defaultPersistableEnvelope : PersistableEnvelope
defaultPersistableEnvelope =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PersistableEnvelope


{-| Declares how to decode a `PersistableEnvelope` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePersistableEnvelope : Protobuf.Decode.Decoder PersistableEnvelope
decodePersistableEnvelope =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PersistableEnvelope


{-| Declares how to encode a `PersistableEnvelope` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePersistableEnvelope : PersistableEnvelope -> Protobuf.Encode.Encoder
encodePersistableEnvelope =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PersistableEnvelope


{-| `PersistableEnvelope` message

-}
type alias PersistableEnvelope =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PersistableEnvelope


{-| The field numbers for the fields of `SwiftAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSwiftAccountPayload :
    { beneficiaryName : Int
    , beneficiaryAccountNr : Int
    , beneficiaryAddress : Int
    , beneficiaryCity : Int
    , beneficiaryPhone : Int
    , specialInstructions : Int
    , bankSwiftCode : Int
    , bankCountryCode : Int
    , bankName : Int
    , bankBranch : Int
    , bankAddress : Int
    , intermediarySwiftCode : Int
    , intermediaryCountryCode : Int
    , intermediaryName : Int
    , intermediaryBranch : Int
    , intermediaryAddress : Int
    }
fieldNumbersSwiftAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SwiftAccountPayload


{-| Default for SwiftAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultSwiftAccountPayload : SwiftAccountPayload
defaultSwiftAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SwiftAccountPayload


{-| Declares how to decode a `SwiftAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSwiftAccountPayload : Protobuf.Decode.Decoder SwiftAccountPayload
decodeSwiftAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SwiftAccountPayload


{-| Declares how to encode a `SwiftAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSwiftAccountPayload : SwiftAccountPayload -> Protobuf.Encode.Encoder
encodeSwiftAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SwiftAccountPayload


{-| `SwiftAccountPayload` message

-}
type alias SwiftAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SwiftAccountPayload


{-| The field numbers for the fields of `VerseAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersVerseAccountPayload : { holderName : Int }
fieldNumbersVerseAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__VerseAccountPayload


{-| Default for VerseAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultVerseAccountPayload : VerseAccountPayload
defaultVerseAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__VerseAccountPayload


{-| Declares how to decode a `VerseAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeVerseAccountPayload : Protobuf.Decode.Decoder VerseAccountPayload
decodeVerseAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__VerseAccountPayload


{-| Declares how to encode a `VerseAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeVerseAccountPayload : VerseAccountPayload -> Protobuf.Encode.Encoder
encodeVerseAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__VerseAccountPayload


{-| `VerseAccountPayload` message

-}
type alias VerseAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__VerseAccountPayload


{-| The field numbers for the fields of `TikkieAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersTikkieAccountPayload : { iban : Int }
fieldNumbersTikkieAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__TikkieAccountPayload


{-| Default for TikkieAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultTikkieAccountPayload : TikkieAccountPayload
defaultTikkieAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__TikkieAccountPayload


{-| Declares how to decode a `TikkieAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeTikkieAccountPayload : Protobuf.Decode.Decoder TikkieAccountPayload
decodeTikkieAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__TikkieAccountPayload


{-| Declares how to encode a `TikkieAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeTikkieAccountPayload : TikkieAccountPayload -> Protobuf.Encode.Encoder
encodeTikkieAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__TikkieAccountPayload


{-| `TikkieAccountPayload` message

-}
type alias TikkieAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__TikkieAccountPayload


{-| The field numbers for the fields of `StrikeAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersStrikeAccountPayload : { holderName : Int }
fieldNumbersStrikeAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__StrikeAccountPayload


{-| Default for StrikeAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultStrikeAccountPayload : StrikeAccountPayload
defaultStrikeAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__StrikeAccountPayload


{-| Declares how to decode a `StrikeAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeStrikeAccountPayload : Protobuf.Decode.Decoder StrikeAccountPayload
decodeStrikeAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__StrikeAccountPayload


{-| Declares how to encode a `StrikeAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeStrikeAccountPayload : StrikeAccountPayload -> Protobuf.Encode.Encoder
encodeStrikeAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__StrikeAccountPayload


{-| `StrikeAccountPayload` message

-}
type alias StrikeAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__StrikeAccountPayload


{-| The field numbers for the fields of `SatispayAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSatispayAccountPayload : { mobileNr : Int, holderName : Int }
fieldNumbersSatispayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SatispayAccountPayload


{-| Default for SatispayAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultSatispayAccountPayload : SatispayAccountPayload
defaultSatispayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SatispayAccountPayload


{-| Declares how to decode a `SatispayAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSatispayAccountPayload : Protobuf.Decode.Decoder SatispayAccountPayload
decodeSatispayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SatispayAccountPayload


{-| Declares how to encode a `SatispayAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSatispayAccountPayload : SatispayAccountPayload -> Protobuf.Encode.Encoder
encodeSatispayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SatispayAccountPayload


{-| `SatispayAccountPayload` message

-}
type alias SatispayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SatispayAccountPayload


{-| The field numbers for the fields of `MoneseAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMoneseAccountPayload : { mobileNr : Int, holderName : Int }
fieldNumbersMoneseAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MoneseAccountPayload


{-| Default for MoneseAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultMoneseAccountPayload : MoneseAccountPayload
defaultMoneseAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MoneseAccountPayload


{-| Declares how to decode a `MoneseAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMoneseAccountPayload : Protobuf.Decode.Decoder MoneseAccountPayload
decodeMoneseAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MoneseAccountPayload


{-| Declares how to encode a `MoneseAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMoneseAccountPayload : MoneseAccountPayload -> Protobuf.Encode.Encoder
encodeMoneseAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MoneseAccountPayload


{-| `MoneseAccountPayload` message

-}
type alias MoneseAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MoneseAccountPayload


{-| The field numbers for the fields of `PixAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPixAccountPayload : { pixKey : Int }
fieldNumbersPixAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PixAccountPayload


{-| Default for PixAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultPixAccountPayload : PixAccountPayload
defaultPixAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PixAccountPayload


{-| Declares how to decode a `PixAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePixAccountPayload : Protobuf.Decode.Decoder PixAccountPayload
decodePixAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PixAccountPayload


{-| Declares how to encode a `PixAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePixAccountPayload : PixAccountPayload -> Protobuf.Encode.Encoder
encodePixAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PixAccountPayload


{-| `PixAccountPayload` message

-}
type alias PixAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PixAccountPayload


{-| The field numbers for the fields of `BizumAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersBizumAccountPayload : { mobileNr : Int }
fieldNumbersBizumAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__BizumAccountPayload


{-| Default for BizumAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultBizumAccountPayload : BizumAccountPayload
defaultBizumAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__BizumAccountPayload


{-| Declares how to decode a `BizumAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeBizumAccountPayload : Protobuf.Decode.Decoder BizumAccountPayload
decodeBizumAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__BizumAccountPayload


{-| Declares how to encode a `BizumAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeBizumAccountPayload : BizumAccountPayload -> Protobuf.Encode.Encoder
encodeBizumAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__BizumAccountPayload


{-| `BizumAccountPayload` message

-}
type alias BizumAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__BizumAccountPayload


{-| The field numbers for the fields of `NequiAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersNequiAccountPayload : { mobileNr : Int }
fieldNumbersNequiAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__NequiAccountPayload


{-| Default for NequiAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultNequiAccountPayload : NequiAccountPayload
defaultNequiAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__NequiAccountPayload


{-| Declares how to decode a `NequiAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeNequiAccountPayload : Protobuf.Decode.Decoder NequiAccountPayload
decodeNequiAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__NequiAccountPayload


{-| Declares how to encode a `NequiAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeNequiAccountPayload : NequiAccountPayload -> Protobuf.Encode.Encoder
encodeNequiAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__NequiAccountPayload


{-| `NequiAccountPayload` message

-}
type alias NequiAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__NequiAccountPayload


{-| The field numbers for the fields of `CelPayAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCelPayAccountPayload : { email : Int }
fieldNumbersCelPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CelPayAccountPayload


{-| Default for CelPayAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultCelPayAccountPayload : CelPayAccountPayload
defaultCelPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CelPayAccountPayload


{-| Declares how to decode a `CelPayAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCelPayAccountPayload : Protobuf.Decode.Decoder CelPayAccountPayload
decodeCelPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CelPayAccountPayload


{-| Declares how to encode a `CelPayAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCelPayAccountPayload : CelPayAccountPayload -> Protobuf.Encode.Encoder
encodeCelPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CelPayAccountPayload


{-| `CelPayAccountPayload` message

-}
type alias CelPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CelPayAccountPayload


{-| The field numbers for the fields of `CapitualAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCapitualAccountPayload : { accountNr : Int }
fieldNumbersCapitualAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CapitualAccountPayload


{-| Default for CapitualAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultCapitualAccountPayload : CapitualAccountPayload
defaultCapitualAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CapitualAccountPayload


{-| Declares how to decode a `CapitualAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCapitualAccountPayload : Protobuf.Decode.Decoder CapitualAccountPayload
decodeCapitualAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CapitualAccountPayload


{-| Declares how to encode a `CapitualAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCapitualAccountPayload : CapitualAccountPayload -> Protobuf.Encode.Encoder
encodeCapitualAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CapitualAccountPayload


{-| `CapitualAccountPayload` message

-}
type alias CapitualAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CapitualAccountPayload


{-| The field numbers for the fields of `PaxumAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPaxumAccountPayload : { email : Int }
fieldNumbersPaxumAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PaxumAccountPayload


{-| Default for PaxumAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultPaxumAccountPayload : PaxumAccountPayload
defaultPaxumAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PaxumAccountPayload


{-| Declares how to decode a `PaxumAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePaxumAccountPayload : Protobuf.Decode.Decoder PaxumAccountPayload
decodePaxumAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PaxumAccountPayload


{-| Declares how to encode a `PaxumAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePaxumAccountPayload : PaxumAccountPayload -> Protobuf.Encode.Encoder
encodePaxumAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PaxumAccountPayload


{-| `PaxumAccountPayload` message

-}
type alias PaxumAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PaxumAccountPayload


{-| The field numbers for the fields of `PayseraAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPayseraAccountPayload : { email : Int }
fieldNumbersPayseraAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PayseraAccountPayload


{-| Default for PayseraAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultPayseraAccountPayload : PayseraAccountPayload
defaultPayseraAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PayseraAccountPayload


{-| Declares how to decode a `PayseraAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePayseraAccountPayload : Protobuf.Decode.Decoder PayseraAccountPayload
decodePayseraAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PayseraAccountPayload


{-| Declares how to encode a `PayseraAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePayseraAccountPayload : PayseraAccountPayload -> Protobuf.Encode.Encoder
encodePayseraAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PayseraAccountPayload


{-| `PayseraAccountPayload` message

-}
type alias PayseraAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PayseraAccountPayload


{-| The field numbers for the fields of `TransferwiseUsdAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersTransferwiseUsdAccountPayload : { email : Int, holderName : Int, beneficiaryAddress : Int }
fieldNumbersTransferwiseUsdAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__TransferwiseUsdAccountPayload


{-| Default for TransferwiseUsdAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultTransferwiseUsdAccountPayload : TransferwiseUsdAccountPayload
defaultTransferwiseUsdAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__TransferwiseUsdAccountPayload


{-| Declares how to decode a `TransferwiseUsdAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeTransferwiseUsdAccountPayload : Protobuf.Decode.Decoder TransferwiseUsdAccountPayload
decodeTransferwiseUsdAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__TransferwiseUsdAccountPayload


{-| Declares how to encode a `TransferwiseUsdAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeTransferwiseUsdAccountPayload : TransferwiseUsdAccountPayload -> Protobuf.Encode.Encoder
encodeTransferwiseUsdAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__TransferwiseUsdAccountPayload


{-| `TransferwiseUsdAccountPayload` message

-}
type alias TransferwiseUsdAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__TransferwiseUsdAccountPayload


{-| The field numbers for the fields of `TransferwiseAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersTransferwiseAccountPayload : { email : Int }
fieldNumbersTransferwiseAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__TransferwiseAccountPayload


{-| Default for TransferwiseAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultTransferwiseAccountPayload : TransferwiseAccountPayload
defaultTransferwiseAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__TransferwiseAccountPayload


{-| Declares how to decode a `TransferwiseAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeTransferwiseAccountPayload : Protobuf.Decode.Decoder TransferwiseAccountPayload
decodeTransferwiseAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__TransferwiseAccountPayload


{-| Declares how to encode a `TransferwiseAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeTransferwiseAccountPayload : TransferwiseAccountPayload -> Protobuf.Encode.Encoder
encodeTransferwiseAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__TransferwiseAccountPayload


{-| `TransferwiseAccountPayload` message

-}
type alias TransferwiseAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__TransferwiseAccountPayload


{-| The field numbers for the fields of `AdvancedCashAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAdvancedCashAccountPayload : { accountNr : Int }
fieldNumbersAdvancedCashAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__AdvancedCashAccountPayload


{-| Default for AdvancedCashAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultAdvancedCashAccountPayload : AdvancedCashAccountPayload
defaultAdvancedCashAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__AdvancedCashAccountPayload


{-| Declares how to decode a `AdvancedCashAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAdvancedCashAccountPayload : Protobuf.Decode.Decoder AdvancedCashAccountPayload
decodeAdvancedCashAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__AdvancedCashAccountPayload


{-| Declares how to encode a `AdvancedCashAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAdvancedCashAccountPayload : AdvancedCashAccountPayload -> Protobuf.Encode.Encoder
encodeAdvancedCashAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__AdvancedCashAccountPayload


{-| `AdvancedCashAccountPayload` message

-}
type alias AdvancedCashAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__AdvancedCashAccountPayload


{-| The field numbers for the fields of `PromptPayAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPromptPayAccountPayload : { promptPayId : Int }
fieldNumbersPromptPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PromptPayAccountPayload


{-| Default for PromptPayAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultPromptPayAccountPayload : PromptPayAccountPayload
defaultPromptPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PromptPayAccountPayload


{-| Declares how to decode a `PromptPayAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePromptPayAccountPayload : Protobuf.Decode.Decoder PromptPayAccountPayload
decodePromptPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PromptPayAccountPayload


{-| Declares how to encode a `PromptPayAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePromptPayAccountPayload : PromptPayAccountPayload -> Protobuf.Encode.Encoder
encodePromptPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PromptPayAccountPayload


{-| `PromptPayAccountPayload` message

-}
type alias PromptPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PromptPayAccountPayload


{-| The field numbers for the fields of `CashAtAtmAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCashAtAtmAccountPayload : { extraInfo : Int }
fieldNumbersCashAtAtmAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CashAtAtmAccountPayload


{-| Default for CashAtAtmAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultCashAtAtmAccountPayload : CashAtAtmAccountPayload
defaultCashAtAtmAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CashAtAtmAccountPayload


{-| Declares how to decode a `CashAtAtmAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCashAtAtmAccountPayload : Protobuf.Decode.Decoder CashAtAtmAccountPayload
decodeCashAtAtmAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CashAtAtmAccountPayload


{-| Declares how to encode a `CashAtAtmAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCashAtAtmAccountPayload : CashAtAtmAccountPayload -> Protobuf.Encode.Encoder
encodeCashAtAtmAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CashAtAtmAccountPayload


{-| `CashAtAtmAccountPayload` message

-}
type alias CashAtAtmAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CashAtAtmAccountPayload


{-| The field numbers for the fields of `PayByMailAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPayByMailAccountPayload : { postalAddress : Int, contact : Int, extraInfo : Int }
fieldNumbersPayByMailAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PayByMailAccountPayload


{-| Default for PayByMailAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultPayByMailAccountPayload : PayByMailAccountPayload
defaultPayByMailAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PayByMailAccountPayload


{-| Declares how to decode a `PayByMailAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePayByMailAccountPayload : Protobuf.Decode.Decoder PayByMailAccountPayload
decodePayByMailAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PayByMailAccountPayload


{-| Declares how to encode a `PayByMailAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePayByMailAccountPayload : PayByMailAccountPayload -> Protobuf.Encode.Encoder
encodePayByMailAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PayByMailAccountPayload


{-| `PayByMailAccountPayload` message

-}
type alias PayByMailAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PayByMailAccountPayload


{-| The field numbers for the fields of `PaytmAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPaytmAccountPayload : { emailOrMobileNr : Int }
fieldNumbersPaytmAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PaytmAccountPayload


{-| Default for PaytmAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultPaytmAccountPayload : PaytmAccountPayload
defaultPaytmAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PaytmAccountPayload


{-| Declares how to decode a `PaytmAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePaytmAccountPayload : Protobuf.Decode.Decoder PaytmAccountPayload
decodePaytmAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PaytmAccountPayload


{-| Declares how to encode a `PaytmAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePaytmAccountPayload : PaytmAccountPayload -> Protobuf.Encode.Encoder
encodePaytmAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PaytmAccountPayload


{-| `PaytmAccountPayload` message

-}
type alias PaytmAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PaytmAccountPayload


{-| The field numbers for the fields of `UpiAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersUpiAccountPayload : { virtualPaymentAddress : Int }
fieldNumbersUpiAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__UpiAccountPayload


{-| Default for UpiAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultUpiAccountPayload : UpiAccountPayload
defaultUpiAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__UpiAccountPayload


{-| Declares how to decode a `UpiAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeUpiAccountPayload : Protobuf.Decode.Decoder UpiAccountPayload
decodeUpiAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__UpiAccountPayload


{-| Declares how to encode a `UpiAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeUpiAccountPayload : UpiAccountPayload -> Protobuf.Encode.Encoder
encodeUpiAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__UpiAccountPayload


{-| `UpiAccountPayload` message

-}
type alias UpiAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__UpiAccountPayload


{-| The field numbers for the fields of `ImpsAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersImpsAccountPayload : {}
fieldNumbersImpsAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ImpsAccountPayload


{-| Default for ImpsAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultImpsAccountPayload : ImpsAccountPayload
defaultImpsAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ImpsAccountPayload


{-| Declares how to decode a `ImpsAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeImpsAccountPayload : Protobuf.Decode.Decoder ImpsAccountPayload
decodeImpsAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ImpsAccountPayload


{-| Declares how to encode a `ImpsAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeImpsAccountPayload : ImpsAccountPayload -> Protobuf.Encode.Encoder
encodeImpsAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ImpsAccountPayload


{-| `ImpsAccountPayload` message

-}
type alias ImpsAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ImpsAccountPayload


{-| The field numbers for the fields of `RtgsAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRtgsAccountPayload : {}
fieldNumbersRtgsAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__RtgsAccountPayload


{-| Default for RtgsAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultRtgsAccountPayload : RtgsAccountPayload
defaultRtgsAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__RtgsAccountPayload


{-| Declares how to decode a `RtgsAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRtgsAccountPayload : Protobuf.Decode.Decoder RtgsAccountPayload
decodeRtgsAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__RtgsAccountPayload


{-| Declares how to encode a `RtgsAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRtgsAccountPayload : RtgsAccountPayload -> Protobuf.Encode.Encoder
encodeRtgsAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__RtgsAccountPayload


{-| `RtgsAccountPayload` message

-}
type alias RtgsAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__RtgsAccountPayload


{-| The field numbers for the fields of `NeftAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersNeftAccountPayload : {}
fieldNumbersNeftAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__NeftAccountPayload


{-| Default for NeftAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultNeftAccountPayload : NeftAccountPayload
defaultNeftAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__NeftAccountPayload


{-| Declares how to decode a `NeftAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeNeftAccountPayload : Protobuf.Decode.Decoder NeftAccountPayload
decodeNeftAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__NeftAccountPayload


{-| Declares how to encode a `NeftAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeNeftAccountPayload : NeftAccountPayload -> Protobuf.Encode.Encoder
encodeNeftAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__NeftAccountPayload


{-| `NeftAccountPayload` message

-}
type alias NeftAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__NeftAccountPayload


{-| The field numbers for the fields of `IfscBasedAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersIfscBasedAccountPayload :
    { holderName : Int
    , accountNr : Int
    , ifsc : Int
    , message :
        Proto.Io.Haveno.Protobuffer.Internals_.FieldNumbersProto__Io__Haveno__Protobuffer__IfscBasedAccountPayload__Message__Message
    }
fieldNumbersIfscBasedAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__IfscBasedAccountPayload


{-| Default for IfscBasedAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultIfscBasedAccountPayload : IfscBasedAccountPayload
defaultIfscBasedAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__IfscBasedAccountPayload


{-| Declares how to decode a `IfscBasedAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeIfscBasedAccountPayload : Protobuf.Decode.Decoder IfscBasedAccountPayload
decodeIfscBasedAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__IfscBasedAccountPayload


{-| Declares how to encode a `IfscBasedAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeIfscBasedAccountPayload : IfscBasedAccountPayload -> Protobuf.Encode.Encoder
encodeIfscBasedAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__IfscBasedAccountPayload


{-| `IfscBasedAccountPayload` message

-}
type alias IfscBasedAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__IfscBasedAccountPayload


{-| The field numbers for the fields of `F2FAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersF2FAccountPayload : { contact : Int, city : Int, extraInfo : Int }
fieldNumbersF2FAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__F2FAccountPayload


{-| Default for F2FAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultF2FAccountPayload : F2FAccountPayload
defaultF2FAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__F2FAccountPayload


{-| Declares how to decode a `F2FAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeF2FAccountPayload : Protobuf.Decode.Decoder F2FAccountPayload
decodeF2FAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__F2FAccountPayload


{-| Declares how to encode a `F2FAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeF2FAccountPayload : F2FAccountPayload -> Protobuf.Encode.Encoder
encodeF2FAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__F2FAccountPayload


{-| `F2FAccountPayload` message

-}
type alias F2FAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__F2FAccountPayload


{-| The field numbers for the fields of `USPostalMoneyOrderAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersUSPostalMoneyOrderAccountPayload : { postalAddress : Int, holderName : Int }
fieldNumbersUSPostalMoneyOrderAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__USPostalMoneyOrderAccountPayload


{-| Default for USPostalMoneyOrderAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultUSPostalMoneyOrderAccountPayload : USPostalMoneyOrderAccountPayload
defaultUSPostalMoneyOrderAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__USPostalMoneyOrderAccountPayload


{-| Declares how to decode a `USPostalMoneyOrderAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeUSPostalMoneyOrderAccountPayload : Protobuf.Decode.Decoder USPostalMoneyOrderAccountPayload
decodeUSPostalMoneyOrderAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__USPostalMoneyOrderAccountPayload


{-| Declares how to encode a `USPostalMoneyOrderAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeUSPostalMoneyOrderAccountPayload : USPostalMoneyOrderAccountPayload -> Protobuf.Encode.Encoder
encodeUSPostalMoneyOrderAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__USPostalMoneyOrderAccountPayload


{-| `USPostalMoneyOrderAccountPayload` message

-}
type alias USPostalMoneyOrderAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__USPostalMoneyOrderAccountPayload


{-| The field numbers for the fields of `SwishAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSwishAccountPayload : { mobileNr : Int, holderName : Int }
fieldNumbersSwishAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SwishAccountPayload


{-| Default for SwishAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultSwishAccountPayload : SwishAccountPayload
defaultSwishAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SwishAccountPayload


{-| Declares how to decode a `SwishAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSwishAccountPayload : Protobuf.Decode.Decoder SwishAccountPayload
decodeSwishAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SwishAccountPayload


{-| Declares how to encode a `SwishAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSwishAccountPayload : SwishAccountPayload -> Protobuf.Encode.Encoder
encodeSwishAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SwishAccountPayload


{-| `SwishAccountPayload` message

-}
type alias SwishAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SwishAccountPayload


{-| The field numbers for the fields of `PerfectMoneyAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPerfectMoneyAccountPayload : { accountNr : Int }
fieldNumbersPerfectMoneyAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PerfectMoneyAccountPayload


{-| Default for PerfectMoneyAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultPerfectMoneyAccountPayload : PerfectMoneyAccountPayload
defaultPerfectMoneyAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PerfectMoneyAccountPayload


{-| Declares how to decode a `PerfectMoneyAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePerfectMoneyAccountPayload : Protobuf.Decode.Decoder PerfectMoneyAccountPayload
decodePerfectMoneyAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PerfectMoneyAccountPayload


{-| Declares how to encode a `PerfectMoneyAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePerfectMoneyAccountPayload : PerfectMoneyAccountPayload -> Protobuf.Encode.Encoder
encodePerfectMoneyAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PerfectMoneyAccountPayload


{-| `PerfectMoneyAccountPayload` message

-}
type alias PerfectMoneyAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PerfectMoneyAccountPayload


{-| The field numbers for the fields of `RevolutAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRevolutAccountPayload : { username : Int }
fieldNumbersRevolutAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__RevolutAccountPayload


{-| Default for RevolutAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultRevolutAccountPayload : RevolutAccountPayload
defaultRevolutAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__RevolutAccountPayload


{-| Declares how to decode a `RevolutAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRevolutAccountPayload : Protobuf.Decode.Decoder RevolutAccountPayload
decodeRevolutAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__RevolutAccountPayload


{-| Declares how to encode a `RevolutAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRevolutAccountPayload : RevolutAccountPayload -> Protobuf.Encode.Encoder
encodeRevolutAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__RevolutAccountPayload


{-| `RevolutAccountPayload` message

-}
type alias RevolutAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__RevolutAccountPayload


{-| The field numbers for the fields of `PopmoneyAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPopmoneyAccountPayload : { accountId : Int, holderName : Int }
fieldNumbersPopmoneyAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PopmoneyAccountPayload


{-| Default for PopmoneyAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultPopmoneyAccountPayload : PopmoneyAccountPayload
defaultPopmoneyAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PopmoneyAccountPayload


{-| Declares how to decode a `PopmoneyAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePopmoneyAccountPayload : Protobuf.Decode.Decoder PopmoneyAccountPayload
decodePopmoneyAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PopmoneyAccountPayload


{-| Declares how to encode a `PopmoneyAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePopmoneyAccountPayload : PopmoneyAccountPayload -> Protobuf.Encode.Encoder
encodePopmoneyAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PopmoneyAccountPayload


{-| `PopmoneyAccountPayload` message

-}
type alias PopmoneyAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PopmoneyAccountPayload


{-| The field numbers for the fields of `PayPalAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPayPalAccountPayload : { emailOrMobileNrOrUsername : Int }
fieldNumbersPayPalAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PayPalAccountPayload


{-| Default for PayPalAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultPayPalAccountPayload : PayPalAccountPayload
defaultPayPalAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PayPalAccountPayload


{-| Declares how to decode a `PayPalAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePayPalAccountPayload : Protobuf.Decode.Decoder PayPalAccountPayload
decodePayPalAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PayPalAccountPayload


{-| Declares how to encode a `PayPalAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePayPalAccountPayload : PayPalAccountPayload -> Protobuf.Encode.Encoder
encodePayPalAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PayPalAccountPayload


{-| `PayPalAccountPayload` message

-}
type alias PayPalAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PayPalAccountPayload


{-| The field numbers for the fields of `VenmoAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersVenmoAccountPayload : { emailOrMobileNrOrUsername : Int }
fieldNumbersVenmoAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__VenmoAccountPayload


{-| Default for VenmoAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultVenmoAccountPayload : VenmoAccountPayload
defaultVenmoAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__VenmoAccountPayload


{-| Declares how to decode a `VenmoAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeVenmoAccountPayload : Protobuf.Decode.Decoder VenmoAccountPayload
decodeVenmoAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__VenmoAccountPayload


{-| Declares how to encode a `VenmoAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeVenmoAccountPayload : VenmoAccountPayload -> Protobuf.Encode.Encoder
encodeVenmoAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__VenmoAccountPayload


{-| `VenmoAccountPayload` message

-}
type alias VenmoAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__VenmoAccountPayload


{-| The field numbers for the fields of `MoneyBeamAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMoneyBeamAccountPayload : { accountId : Int }
fieldNumbersMoneyBeamAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MoneyBeamAccountPayload


{-| Default for MoneyBeamAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultMoneyBeamAccountPayload : MoneyBeamAccountPayload
defaultMoneyBeamAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MoneyBeamAccountPayload


{-| Declares how to decode a `MoneyBeamAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMoneyBeamAccountPayload : Protobuf.Decode.Decoder MoneyBeamAccountPayload
decodeMoneyBeamAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MoneyBeamAccountPayload


{-| Declares how to encode a `MoneyBeamAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMoneyBeamAccountPayload : MoneyBeamAccountPayload -> Protobuf.Encode.Encoder
encodeMoneyBeamAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MoneyBeamAccountPayload


{-| `MoneyBeamAccountPayload` message

-}
type alias MoneyBeamAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MoneyBeamAccountPayload


{-| The field numbers for the fields of `CashAppAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCashAppAccountPayload : { emailOrMobileNrOrCashtag : Int }
fieldNumbersCashAppAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CashAppAccountPayload


{-| Default for CashAppAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultCashAppAccountPayload : CashAppAccountPayload
defaultCashAppAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CashAppAccountPayload


{-| Declares how to decode a `CashAppAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCashAppAccountPayload : Protobuf.Decode.Decoder CashAppAccountPayload
decodeCashAppAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CashAppAccountPayload


{-| Declares how to encode a `CashAppAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCashAppAccountPayload : CashAppAccountPayload -> Protobuf.Encode.Encoder
encodeCashAppAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CashAppAccountPayload


{-| `CashAppAccountPayload` message

-}
type alias CashAppAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CashAppAccountPayload


{-| The field numbers for the fields of `UpholdAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersUpholdAccountPayload : { accountId : Int, accountOwner : Int }
fieldNumbersUpholdAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__UpholdAccountPayload


{-| Default for UpholdAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultUpholdAccountPayload : UpholdAccountPayload
defaultUpholdAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__UpholdAccountPayload


{-| Declares how to decode a `UpholdAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeUpholdAccountPayload : Protobuf.Decode.Decoder UpholdAccountPayload
decodeUpholdAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__UpholdAccountPayload


{-| Declares how to encode a `UpholdAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeUpholdAccountPayload : UpholdAccountPayload -> Protobuf.Encode.Encoder
encodeUpholdAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__UpholdAccountPayload


{-| `UpholdAccountPayload` message

-}
type alias UpholdAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__UpholdAccountPayload


{-| The field numbers for the fields of `OKPayAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersOKPayAccountPayload : { accountNr : Int }
fieldNumbersOKPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__OKPayAccountPayload


{-| Default for OKPayAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultOKPayAccountPayload : OKPayAccountPayload
defaultOKPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__OKPayAccountPayload


{-| Declares how to decode a `OKPayAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeOKPayAccountPayload : Protobuf.Decode.Decoder OKPayAccountPayload
decodeOKPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__OKPayAccountPayload


{-| Declares how to encode a `OKPayAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeOKPayAccountPayload : OKPayAccountPayload -> Protobuf.Encode.Encoder
encodeOKPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__OKPayAccountPayload


{-|  Deprecated, not used anymore


-}
type alias OKPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__OKPayAccountPayload


{-| The field numbers for the fields of `InteracETransferAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersInteracETransferAccountPayload : { email : Int, holderName : Int, question : Int, answer : Int }
fieldNumbersInteracETransferAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__InteracETransferAccountPayload


{-| Default for InteracETransferAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultInteracETransferAccountPayload : InteracETransferAccountPayload
defaultInteracETransferAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__InteracETransferAccountPayload


{-| Declares how to decode a `InteracETransferAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeInteracETransferAccountPayload : Protobuf.Decode.Decoder InteracETransferAccountPayload
decodeInteracETransferAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__InteracETransferAccountPayload


{-| Declares how to encode a `InteracETransferAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeInteracETransferAccountPayload : InteracETransferAccountPayload -> Protobuf.Encode.Encoder
encodeInteracETransferAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__InteracETransferAccountPayload


{-| `InteracETransferAccountPayload` message

-}
type alias InteracETransferAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__InteracETransferAccountPayload


{-| The field numbers for the fields of `FasterPaymentsAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersFasterPaymentsAccountPayload : { holderName : Int, sortCode : Int, accountNr : Int }
fieldNumbersFasterPaymentsAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__FasterPaymentsAccountPayload


{-| Default for FasterPaymentsAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultFasterPaymentsAccountPayload : FasterPaymentsAccountPayload
defaultFasterPaymentsAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__FasterPaymentsAccountPayload


{-| Declares how to decode a `FasterPaymentsAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeFasterPaymentsAccountPayload : Protobuf.Decode.Decoder FasterPaymentsAccountPayload
decodeFasterPaymentsAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__FasterPaymentsAccountPayload


{-| Declares how to encode a `FasterPaymentsAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeFasterPaymentsAccountPayload : FasterPaymentsAccountPayload -> Protobuf.Encode.Encoder
encodeFasterPaymentsAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__FasterPaymentsAccountPayload


{-| `FasterPaymentsAccountPayload` message

-}
type alias FasterPaymentsAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__FasterPaymentsAccountPayload


{-| The field numbers for the fields of `InstantCryptoCurrencyAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersInstantCryptoCurrencyAccountPayload : { address : Int }
fieldNumbersInstantCryptoCurrencyAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__InstantCryptoCurrencyAccountPayload


{-| Default for InstantCryptoCurrencyAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultInstantCryptoCurrencyAccountPayload : InstantCryptoCurrencyAccountPayload
defaultInstantCryptoCurrencyAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__InstantCryptoCurrencyAccountPayload


{-| Declares how to decode a `InstantCryptoCurrencyAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeInstantCryptoCurrencyAccountPayload : Protobuf.Decode.Decoder InstantCryptoCurrencyAccountPayload
decodeInstantCryptoCurrencyAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__InstantCryptoCurrencyAccountPayload


{-| Declares how to encode a `InstantCryptoCurrencyAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeInstantCryptoCurrencyAccountPayload : InstantCryptoCurrencyAccountPayload -> Protobuf.Encode.Encoder
encodeInstantCryptoCurrencyAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__InstantCryptoCurrencyAccountPayload


{-| `InstantCryptoCurrencyAccountPayload` message

-}
type alias InstantCryptoCurrencyAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__InstantCryptoCurrencyAccountPayload


{-| The field numbers for the fields of `CryptoCurrencyAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCryptoCurrencyAccountPayload : { address : Int }
fieldNumbersCryptoCurrencyAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CryptoCurrencyAccountPayload


{-| Default for CryptoCurrencyAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultCryptoCurrencyAccountPayload : CryptoCurrencyAccountPayload
defaultCryptoCurrencyAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CryptoCurrencyAccountPayload


{-| Declares how to decode a `CryptoCurrencyAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCryptoCurrencyAccountPayload : Protobuf.Decode.Decoder CryptoCurrencyAccountPayload
decodeCryptoCurrencyAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CryptoCurrencyAccountPayload


{-| Declares how to encode a `CryptoCurrencyAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCryptoCurrencyAccountPayload : CryptoCurrencyAccountPayload -> Protobuf.Encode.Encoder
encodeCryptoCurrencyAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CryptoCurrencyAccountPayload


{-| `CryptoCurrencyAccountPayload` message

-}
type alias CryptoCurrencyAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CryptoCurrencyAccountPayload


{-| The field numbers for the fields of `SepaInstantAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSepaInstantAccountPayload : { holderName : Int, iban : Int, bic : Int }
fieldNumbersSepaInstantAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SepaInstantAccountPayload


{-| Default for SepaInstantAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultSepaInstantAccountPayload : SepaInstantAccountPayload
defaultSepaInstantAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SepaInstantAccountPayload


{-| Declares how to decode a `SepaInstantAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSepaInstantAccountPayload : Protobuf.Decode.Decoder SepaInstantAccountPayload
decodeSepaInstantAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SepaInstantAccountPayload


{-| Declares how to encode a `SepaInstantAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSepaInstantAccountPayload : SepaInstantAccountPayload -> Protobuf.Encode.Encoder
encodeSepaInstantAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SepaInstantAccountPayload


{-| `SepaInstantAccountPayload` message

-}
type alias SepaInstantAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SepaInstantAccountPayload


{-| The field numbers for the fields of `SepaAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSepaAccountPayload : { holderName : Int, iban : Int, bic : Int, email : Int }
fieldNumbersSepaAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SepaAccountPayload


{-| Default for SepaAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultSepaAccountPayload : SepaAccountPayload
defaultSepaAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SepaAccountPayload


{-| Declares how to decode a `SepaAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSepaAccountPayload : Protobuf.Decode.Decoder SepaAccountPayload
decodeSepaAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SepaAccountPayload


{-| Declares how to encode a `SepaAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSepaAccountPayload : SepaAccountPayload -> Protobuf.Encode.Encoder
encodeSepaAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SepaAccountPayload


{-| `SepaAccountPayload` message

-}
type alias SepaAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SepaAccountPayload


{-| The field numbers for the fields of `AmazonGiftCardAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAmazonGiftCardAccountPayload : { emailOrMobileNr : Int, countryCode : Int }
fieldNumbersAmazonGiftCardAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__AmazonGiftCardAccountPayload


{-| Default for AmazonGiftCardAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultAmazonGiftCardAccountPayload : AmazonGiftCardAccountPayload
defaultAmazonGiftCardAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__AmazonGiftCardAccountPayload


{-| Declares how to decode a `AmazonGiftCardAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAmazonGiftCardAccountPayload : Protobuf.Decode.Decoder AmazonGiftCardAccountPayload
decodeAmazonGiftCardAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__AmazonGiftCardAccountPayload


{-| Declares how to encode a `AmazonGiftCardAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAmazonGiftCardAccountPayload : AmazonGiftCardAccountPayload -> Protobuf.Encode.Encoder
encodeAmazonGiftCardAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__AmazonGiftCardAccountPayload


{-| `AmazonGiftCardAccountPayload` message

-}
type alias AmazonGiftCardAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__AmazonGiftCardAccountPayload


{-| The field numbers for the fields of `WesternUnionAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersWesternUnionAccountPayload : { holderName : Int, city : Int, state : Int, email : Int }
fieldNumbersWesternUnionAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__WesternUnionAccountPayload


{-| Default for WesternUnionAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultWesternUnionAccountPayload : WesternUnionAccountPayload
defaultWesternUnionAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__WesternUnionAccountPayload


{-| Declares how to decode a `WesternUnionAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeWesternUnionAccountPayload : Protobuf.Decode.Decoder WesternUnionAccountPayload
decodeWesternUnionAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__WesternUnionAccountPayload


{-| Declares how to encode a `WesternUnionAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeWesternUnionAccountPayload : WesternUnionAccountPayload -> Protobuf.Encode.Encoder
encodeWesternUnionAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__WesternUnionAccountPayload


{-| `WesternUnionAccountPayload` message

-}
type alias WesternUnionAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__WesternUnionAccountPayload


{-| The field numbers for the fields of `HalCashAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersHalCashAccountPayload : { mobileNr : Int }
fieldNumbersHalCashAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__HalCashAccountPayload


{-| Default for HalCashAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultHalCashAccountPayload : HalCashAccountPayload
defaultHalCashAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__HalCashAccountPayload


{-| Declares how to decode a `HalCashAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeHalCashAccountPayload : Protobuf.Decode.Decoder HalCashAccountPayload
decodeHalCashAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__HalCashAccountPayload


{-| Declares how to encode a `HalCashAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeHalCashAccountPayload : HalCashAccountPayload -> Protobuf.Encode.Encoder
encodeHalCashAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__HalCashAccountPayload


{-| `HalCashAccountPayload` message

-}
type alias HalCashAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__HalCashAccountPayload


{-| The field numbers for the fields of `MoneyGramAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMoneyGramAccountPayload : { holderName : Int, countryCode : Int, state : Int, email : Int }
fieldNumbersMoneyGramAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MoneyGramAccountPayload


{-| Default for MoneyGramAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultMoneyGramAccountPayload : MoneyGramAccountPayload
defaultMoneyGramAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MoneyGramAccountPayload


{-| Declares how to decode a `MoneyGramAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMoneyGramAccountPayload : Protobuf.Decode.Decoder MoneyGramAccountPayload
decodeMoneyGramAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MoneyGramAccountPayload


{-| Declares how to encode a `MoneyGramAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMoneyGramAccountPayload : MoneyGramAccountPayload -> Protobuf.Encode.Encoder
encodeMoneyGramAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MoneyGramAccountPayload


{-| `MoneyGramAccountPayload` message

-}
type alias MoneyGramAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MoneyGramAccountPayload


{-| The field numbers for the fields of `CashDepositAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCashDepositAccountPayload :
    { holderName : Int
    , holderEmail : Int
    , bankName : Int
    , bankId : Int
    , branchId : Int
    , accountNr : Int
    , accountType : Int
    , requirements : Int
    , holderTaxId : Int
    , nationalAccountId : Int
    }
fieldNumbersCashDepositAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CashDepositAccountPayload


{-| Default for CashDepositAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultCashDepositAccountPayload : CashDepositAccountPayload
defaultCashDepositAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CashDepositAccountPayload


{-| Declares how to decode a `CashDepositAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCashDepositAccountPayload : Protobuf.Decode.Decoder CashDepositAccountPayload
decodeCashDepositAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CashDepositAccountPayload


{-| Declares how to encode a `CashDepositAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCashDepositAccountPayload : CashDepositAccountPayload -> Protobuf.Encode.Encoder
encodeCashDepositAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CashDepositAccountPayload


{-| `CashDepositAccountPayload` message

-}
type alias CashDepositAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CashDepositAccountPayload


{-| The field numbers for the fields of `SpecificBanksAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSpecificBanksAccountPayload : { acceptedBanks : Int }
fieldNumbersSpecificBanksAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SpecificBanksAccountPayload


{-| Default for SpecificBanksAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultSpecificBanksAccountPayload : SpecificBanksAccountPayload
defaultSpecificBanksAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SpecificBanksAccountPayload


{-| Declares how to decode a `SpecificBanksAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSpecificBanksAccountPayload : Protobuf.Decode.Decoder SpecificBanksAccountPayload
decodeSpecificBanksAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SpecificBanksAccountPayload


{-| Declares how to encode a `SpecificBanksAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSpecificBanksAccountPayload : SpecificBanksAccountPayload -> Protobuf.Encode.Encoder
encodeSpecificBanksAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SpecificBanksAccountPayload


{-| `SpecificBanksAccountPayload` message

-}
type alias SpecificBanksAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SpecificBanksAccountPayload


{-| The field numbers for the fields of `AustraliaPayidPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAustraliaPayidPayload : { bankAccountName : Int, payid : Int, extraInfo : Int }
fieldNumbersAustraliaPayidPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__AustraliaPayidPayload


{-| Default for AustraliaPayidPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultAustraliaPayidPayload : AustraliaPayidPayload
defaultAustraliaPayidPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__AustraliaPayidPayload


{-| Declares how to decode a `AustraliaPayidPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAustraliaPayidPayload : Protobuf.Decode.Decoder AustraliaPayidPayload
decodeAustraliaPayidPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__AustraliaPayidPayload


{-| Declares how to encode a `AustraliaPayidPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAustraliaPayidPayload : AustraliaPayidPayload -> Protobuf.Encode.Encoder
encodeAustraliaPayidPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__AustraliaPayidPayload


{-| `AustraliaPayidPayload` message

-}
type alias AustraliaPayidPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__AustraliaPayidPayload


{-| The field numbers for the fields of `JapanBankAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersJapanBankAccountPayload :
    { bankName : Int
    , bankCode : Int
    , bankBranchName : Int
    , bankBranchCode : Int
    , bankAccountType : Int
    , bankAccountName : Int
    , bankAccountNumber : Int
    }
fieldNumbersJapanBankAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__JapanBankAccountPayload


{-| Default for JapanBankAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultJapanBankAccountPayload : JapanBankAccountPayload
defaultJapanBankAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__JapanBankAccountPayload


{-| Declares how to decode a `JapanBankAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeJapanBankAccountPayload : Protobuf.Decode.Decoder JapanBankAccountPayload
decodeJapanBankAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__JapanBankAccountPayload


{-| Declares how to encode a `JapanBankAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeJapanBankAccountPayload : JapanBankAccountPayload -> Protobuf.Encode.Encoder
encodeJapanBankAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__JapanBankAccountPayload


{-| `JapanBankAccountPayload` message

-}
type alias JapanBankAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__JapanBankAccountPayload


{-| The field numbers for the fields of `SameBankAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSameBankAccountPayload : {}
fieldNumbersSameBankAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SameBankAccountPayload


{-| Default for SameBankAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultSameBankAccountPayload : SameBankAccountPayload
defaultSameBankAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SameBankAccountPayload


{-| Declares how to decode a `SameBankAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSameBankAccountPayload : Protobuf.Decode.Decoder SameBankAccountPayload
decodeSameBankAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SameBankAccountPayload


{-| Declares how to encode a `SameBankAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSameBankAccountPayload : SameBankAccountPayload -> Protobuf.Encode.Encoder
encodeSameBankAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SameBankAccountPayload


{-| `SameBankAccountPayload` message

-}
type alias SameBankAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SameBankAccountPayload


{-| The field numbers for the fields of `NationalBankAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersNationalBankAccountPayload : {}
fieldNumbersNationalBankAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__NationalBankAccountPayload


{-| Default for NationalBankAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultNationalBankAccountPayload : NationalBankAccountPayload
defaultNationalBankAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__NationalBankAccountPayload


{-| Declares how to decode a `NationalBankAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeNationalBankAccountPayload : Protobuf.Decode.Decoder NationalBankAccountPayload
decodeNationalBankAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__NationalBankAccountPayload


{-| Declares how to encode a `NationalBankAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeNationalBankAccountPayload : NationalBankAccountPayload -> Protobuf.Encode.Encoder
encodeNationalBankAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__NationalBankAccountPayload


{-| `NationalBankAccountPayload` message

-}
type alias NationalBankAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__NationalBankAccountPayload


{-| The field numbers for the fields of `DomesticWireTransferAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersDomesticWireTransferAccountPayload : { holderAddress : Int }
fieldNumbersDomesticWireTransferAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__DomesticWireTransferAccountPayload


{-| Default for DomesticWireTransferAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultDomesticWireTransferAccountPayload : DomesticWireTransferAccountPayload
defaultDomesticWireTransferAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__DomesticWireTransferAccountPayload


{-| Declares how to decode a `DomesticWireTransferAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeDomesticWireTransferAccountPayload : Protobuf.Decode.Decoder DomesticWireTransferAccountPayload
decodeDomesticWireTransferAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__DomesticWireTransferAccountPayload


{-| Declares how to encode a `DomesticWireTransferAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeDomesticWireTransferAccountPayload : DomesticWireTransferAccountPayload -> Protobuf.Encode.Encoder
encodeDomesticWireTransferAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__DomesticWireTransferAccountPayload


{-| `DomesticWireTransferAccountPayload` message

-}
type alias DomesticWireTransferAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__DomesticWireTransferAccountPayload


{-| The field numbers for the fields of `AchTransferAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAchTransferAccountPayload : { holderAddress : Int }
fieldNumbersAchTransferAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__AchTransferAccountPayload


{-| Default for AchTransferAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultAchTransferAccountPayload : AchTransferAccountPayload
defaultAchTransferAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__AchTransferAccountPayload


{-| Declares how to decode a `AchTransferAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAchTransferAccountPayload : Protobuf.Decode.Decoder AchTransferAccountPayload
decodeAchTransferAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__AchTransferAccountPayload


{-| Declares how to encode a `AchTransferAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAchTransferAccountPayload : AchTransferAccountPayload -> Protobuf.Encode.Encoder
encodeAchTransferAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__AchTransferAccountPayload


{-| `AchTransferAccountPayload` message

-}
type alias AchTransferAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__AchTransferAccountPayload


{-| The field numbers for the fields of `BankAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersBankAccountPayload :
    { holderName : Int
    , bankName : Int
    , bankId : Int
    , branchId : Int
    , accountNr : Int
    , accountType : Int
    , holderTaxId : Int
    , email : Int
    , message :
        Proto.Io.Haveno.Protobuffer.Internals_.FieldNumbersProto__Io__Haveno__Protobuffer__BankAccountPayload__Message__Message
    , nationalAccountId : Int
    }
fieldNumbersBankAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__BankAccountPayload


{-| Default for BankAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultBankAccountPayload : BankAccountPayload
defaultBankAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__BankAccountPayload


{-| Declares how to decode a `BankAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeBankAccountPayload : Protobuf.Decode.Decoder BankAccountPayload
decodeBankAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__BankAccountPayload


{-| Declares how to encode a `BankAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeBankAccountPayload : BankAccountPayload -> Protobuf.Encode.Encoder
encodeBankAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__BankAccountPayload


{-| `BankAccountPayload` message

-}
type alias BankAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__BankAccountPayload


{-| The field numbers for the fields of `CountryBasedPaymentAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCountryBasedPaymentAccountPayload :
    { countryCode : Int
    , acceptedCountryCodes : Int
    , message :
        Proto.Io.Haveno.Protobuffer.Internals_.FieldNumbersProto__Io__Haveno__Protobuffer__CountryBasedPaymentAccountPayload__Message__Message
    }
fieldNumbersCountryBasedPaymentAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CountryBasedPaymentAccountPayload


{-| Default for CountryBasedPaymentAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultCountryBasedPaymentAccountPayload : CountryBasedPaymentAccountPayload
defaultCountryBasedPaymentAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CountryBasedPaymentAccountPayload


{-| Declares how to decode a `CountryBasedPaymentAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCountryBasedPaymentAccountPayload : Protobuf.Decode.Decoder CountryBasedPaymentAccountPayload
decodeCountryBasedPaymentAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CountryBasedPaymentAccountPayload


{-| Declares how to encode a `CountryBasedPaymentAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCountryBasedPaymentAccountPayload : CountryBasedPaymentAccountPayload -> Protobuf.Encode.Encoder
encodeCountryBasedPaymentAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CountryBasedPaymentAccountPayload


{-| `CountryBasedPaymentAccountPayload` message

-}
type alias CountryBasedPaymentAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CountryBasedPaymentAccountPayload


{-| The field numbers for the fields of `ZelleAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersZelleAccountPayload : { holderName : Int, emailOrMobileNr : Int }
fieldNumbersZelleAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ZelleAccountPayload


{-| Default for ZelleAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultZelleAccountPayload : ZelleAccountPayload
defaultZelleAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ZelleAccountPayload


{-| Declares how to decode a `ZelleAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeZelleAccountPayload : Protobuf.Decode.Decoder ZelleAccountPayload
decodeZelleAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ZelleAccountPayload


{-| Declares how to encode a `ZelleAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeZelleAccountPayload : ZelleAccountPayload -> Protobuf.Encode.Encoder
encodeZelleAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ZelleAccountPayload


{-| `ZelleAccountPayload` message

-}
type alias ZelleAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ZelleAccountPayload


{-| The field numbers for the fields of `ChaseQuickPayAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersChaseQuickPayAccountPayload : { email : Int, holderName : Int }
fieldNumbersChaseQuickPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ChaseQuickPayAccountPayload


{-| Default for ChaseQuickPayAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultChaseQuickPayAccountPayload : ChaseQuickPayAccountPayload
defaultChaseQuickPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ChaseQuickPayAccountPayload


{-| Declares how to decode a `ChaseQuickPayAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeChaseQuickPayAccountPayload : Protobuf.Decode.Decoder ChaseQuickPayAccountPayload
decodeChaseQuickPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ChaseQuickPayAccountPayload


{-| Declares how to encode a `ChaseQuickPayAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeChaseQuickPayAccountPayload : ChaseQuickPayAccountPayload -> Protobuf.Encode.Encoder
encodeChaseQuickPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ChaseQuickPayAccountPayload


{-| `ChaseQuickPayAccountPayload` message

-}
type alias ChaseQuickPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ChaseQuickPayAccountPayload


{-| The field numbers for the fields of `WeChatPayAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersWeChatPayAccountPayload : { accountNr : Int }
fieldNumbersWeChatPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__WeChatPayAccountPayload


{-| Default for WeChatPayAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultWeChatPayAccountPayload : WeChatPayAccountPayload
defaultWeChatPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__WeChatPayAccountPayload


{-| Declares how to decode a `WeChatPayAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeWeChatPayAccountPayload : Protobuf.Decode.Decoder WeChatPayAccountPayload
decodeWeChatPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__WeChatPayAccountPayload


{-| Declares how to encode a `WeChatPayAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeWeChatPayAccountPayload : WeChatPayAccountPayload -> Protobuf.Encode.Encoder
encodeWeChatPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__WeChatPayAccountPayload


{-| `WeChatPayAccountPayload` message

-}
type alias WeChatPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__WeChatPayAccountPayload


{-| The field numbers for the fields of `AliPayAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAliPayAccountPayload : { accountNr : Int }
fieldNumbersAliPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__AliPayAccountPayload


{-| Default for AliPayAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultAliPayAccountPayload : AliPayAccountPayload
defaultAliPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__AliPayAccountPayload


{-| Declares how to decode a `AliPayAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAliPayAccountPayload : Protobuf.Decode.Decoder AliPayAccountPayload
decodeAliPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__AliPayAccountPayload


{-| Declares how to encode a `AliPayAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAliPayAccountPayload : AliPayAccountPayload -> Protobuf.Encode.Encoder
encodeAliPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__AliPayAccountPayload


{-| `AliPayAccountPayload` message

-}
type alias AliPayAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__AliPayAccountPayload


{-| The field numbers for the fields of `PaymentAccountPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPaymentAccountPayload :
    { id : Int
    , paymentMethodId : Int
    , maxTradePeriod : Int
    , excludeFromJsonData : Int
    , message :
        Proto.Io.Haveno.Protobuffer.Internals_.FieldNumbersProto__Io__Haveno__Protobuffer__PaymentAccountPayload__Message__Message
    }
fieldNumbersPaymentAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PaymentAccountPayload


{-| Default for PaymentAccountPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultPaymentAccountPayload : PaymentAccountPayload
defaultPaymentAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PaymentAccountPayload


{-| Declares how to decode a `PaymentAccountPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePaymentAccountPayload : Protobuf.Decode.Decoder PaymentAccountPayload
decodePaymentAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PaymentAccountPayload


{-| Declares how to encode a `PaymentAccountPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePaymentAccountPayload : PaymentAccountPayload -> Protobuf.Encode.Encoder
encodePaymentAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PaymentAccountPayload


{-| /////////////////////////////////////////////////////////////////////////////////////////
 PaymentAccount payload
/////////////////////////////////////////////////////////////////////////////////////////


## Fields

### maxTradePeriod

 not used


-}
type alias PaymentAccountPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PaymentAccountPayload


{-| The field numbers for the fields of `RawTransactionInput`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRawTransactionInput : { index : Int, parentTransaction : Int, value : Int }
fieldNumbersRawTransactionInput =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__RawTransactionInput


{-| Default for RawTransactionInput. Should only be used for 'required' decoders as an initial value.

-}
defaultRawTransactionInput : RawTransactionInput
defaultRawTransactionInput =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__RawTransactionInput


{-| Declares how to decode a `RawTransactionInput` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRawTransactionInput : Protobuf.Decode.Decoder RawTransactionInput
decodeRawTransactionInput =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__RawTransactionInput


{-| Declares how to encode a `RawTransactionInput` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRawTransactionInput : RawTransactionInput -> Protobuf.Encode.Encoder
encodeRawTransactionInput =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__RawTransactionInput


{-| `RawTransactionInput` message

-}
type alias RawTransactionInput =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__RawTransactionInput


{-| The field numbers for the fields of `Contract`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersContract :
    { offerPayload : Int
    , tradeAmount : Int
    , tradePrice : Int
    , arbitratorNodeAddress : Int
    , isBuyerMakerAndSellerTaker : Int
    , makerAccountId : Int
    , takerAccountId : Int
    , makerPaymentMethodId : Int
    , takerPaymentMethodId : Int
    , makerPaymentAccountPayloadHash : Int
    , takerPaymentAccountPayloadHash : Int
    , makerPubKeyRing : Int
    , takerPubKeyRing : Int
    , buyerNodeAddress : Int
    , sellerNodeAddress : Int
    , makerPayoutAddressString : Int
    , takerPayoutAddressString : Int
    , makerDepositTxHash : Int
    , takerDepositTxHash : Int
    }
fieldNumbersContract =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__Contract


{-| Default for Contract. Should only be used for 'required' decoders as an initial value.

-}
defaultContract : Contract
defaultContract =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__Contract


{-| Declares how to decode a `Contract` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeContract : Protobuf.Decode.Decoder Contract
decodeContract =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__Contract


{-| Declares how to encode a `Contract` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeContract : Contract -> Protobuf.Encode.Encoder
encodeContract =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__Contract


{-| /////////////////////////////////////////////////////////////////////////////////////////
 Trade payload
/////////////////////////////////////////////////////////////////////////////////////////


-}
type alias Contract =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__Contract


{-| The field numbers for the fields of `DisputeResult`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersDisputeResult :
    { tradeId : Int
    , traderId : Int
    , winner : Int
    , reasonOrdinal : Int
    , tamperProofEvidence : Int
    , idVerification : Int
    , screenCast : Int
    , summaryNotes : Int
    , chatMessage : Int
    , arbitratorSignature : Int
    , buyerPayoutAmountBeforeCost : Int
    , sellerPayoutAmountBeforeCost : Int
    , subtractFeeFrom : Int
    , arbitratorPubKey : Int
    , closeDate : Int
    , isLoserPublisher : Int
    }
fieldNumbersDisputeResult =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__DisputeResult


{-| Default for DisputeResult. Should only be used for 'required' decoders as an initial value.

-}
defaultDisputeResult : DisputeResult
defaultDisputeResult =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__DisputeResult


{-| Declares how to decode a `DisputeResult` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeDisputeResult : Protobuf.Decode.Decoder DisputeResult
decodeDisputeResult =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__DisputeResult


{-| Declares how to encode a `DisputeResult` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeDisputeResult : DisputeResult -> Protobuf.Encode.Encoder
encodeDisputeResult =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__DisputeResult


{-| `DisputeResult` message

-}
type alias DisputeResult =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__DisputeResult


{-| The field numbers for the fields of `Attachment`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAttachment : { fileName : Int, bytes : Int }
fieldNumbersAttachment =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__Attachment


{-| Default for Attachment. Should only be used for 'required' decoders as an initial value.

-}
defaultAttachment : Attachment
defaultAttachment =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__Attachment


{-| Declares how to decode a `Attachment` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAttachment : Protobuf.Decode.Decoder Attachment
decodeAttachment =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__Attachment


{-| Declares how to encode a `Attachment` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAttachment : Attachment -> Protobuf.Encode.Encoder
encodeAttachment =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__Attachment


{-| `Attachment` message

-}
type alias Attachment =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__Attachment


{-| The field numbers for the fields of `Dispute`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersDispute :
    { tradeId : Int
    , id : Int
    , traderId : Int
    , isOpener : Int
    , disputeOpenerIsBuyer : Int
    , disputeOpenerIsMaker : Int
    , openingDate : Int
    , traderPubKeyRing : Int
    , tradeDate : Int
    , contract : Int
    , contractHash : Int
    , payoutTxSerialized : Int
    , payoutTxId : Int
    , contractAsJson : Int
    , makerContractSignature : Int
    , takerContractSignature : Int
    , makerPaymentAccountPayload : Int
    , takerPaymentAccountPayload : Int
    , agentPubKeyRing : Int
    , isSupportTicket : Int
    , chatMessage : Int
    , isClosed : Int
    , disputeResult : Int
    , disputePayoutTxId : Int
    , supportType : Int
    , mediatorsDisputeResult : Int
    , delayedPayoutTxId : Int
    , donationAddressOfDelayedPayoutTx : Int
    , state : Int
    , tradePeriodEnd : Int
    , extraData : Int
    }
fieldNumbersDispute =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__Dispute


{-| Default for Dispute. Should only be used for 'required' decoders as an initial value.

-}
defaultDispute : Dispute
defaultDispute =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__Dispute


{-| Declares how to decode a `Dispute` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeDispute : Protobuf.Decode.Decoder Dispute
decodeDispute =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__Dispute


{-| Declares how to encode a `Dispute` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeDispute : Dispute -> Protobuf.Encode.Encoder
encodeDispute =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__Dispute


{-| /////////////////////////////////////////////////////////////////////////////////////////
 Dispute payload
/////////////////////////////////////////////////////////////////////////////////////////


-}
type alias Dispute =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__Dispute


{-| The field numbers for the fields of `SignedWitness`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSignedWitness :
    { verificationMethod : Int
    , accountAgeWitnessHash : Int
    , signature : Int
    , signerPubKey : Int
    , witnessOwnerPubKey : Int
    , date : Int
    , tradeAmount : Int
    }
fieldNumbersSignedWitness =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SignedWitness


{-| Default for SignedWitness. Should only be used for 'required' decoders as an initial value.

-}
defaultSignedWitness : SignedWitness
defaultSignedWitness =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SignedWitness


{-| Declares how to decode a `SignedWitness` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSignedWitness : Protobuf.Decode.Decoder SignedWitness
decodeSignedWitness =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SignedWitness


{-| Declares how to encode a `SignedWitness` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSignedWitness : SignedWitness -> Protobuf.Encode.Encoder
encodeSignedWitness =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SignedWitness


{-| `SignedWitness` message

-}
type alias SignedWitness =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SignedWitness


{-| The field numbers for the fields of `AccountAgeWitness`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAccountAgeWitness : { hash : Int, date : Int }
fieldNumbersAccountAgeWitness =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__AccountAgeWitness


{-| Default for AccountAgeWitness. Should only be used for 'required' decoders as an initial value.

-}
defaultAccountAgeWitness : AccountAgeWitness
defaultAccountAgeWitness =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__AccountAgeWitness


{-| Declares how to decode a `AccountAgeWitness` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAccountAgeWitness : Protobuf.Decode.Decoder AccountAgeWitness
decodeAccountAgeWitness =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__AccountAgeWitness


{-| Declares how to encode a `AccountAgeWitness` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAccountAgeWitness : AccountAgeWitness -> Protobuf.Encode.Encoder
encodeAccountAgeWitness =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__AccountAgeWitness


{-| `AccountAgeWitness` message

-}
type alias AccountAgeWitness =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__AccountAgeWitness


{-| The field numbers for the fields of `OfferPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersOfferPayload :
    { id : Int
    , date : Int
    , ownerNodeAddress : Int
    , pubKeyRing : Int
    , direction : Int
    , price : Int
    , marketPriceMarginPct : Int
    , useMarketBasedPrice : Int
    , amount : Int
    , minAmount : Int
    , makerFeePct : Int
    , takerFeePct : Int
    , penaltyFeePct : Int
    , buyerSecurityDepositPct : Int
    , sellerSecurityDepositPct : Int
    , baseCurrencyCode : Int
    , counterCurrencyCode : Int
    , paymentMethodId : Int
    , makerPaymentAccountId : Int
    , countryCode : Int
    , acceptedCountryCodes : Int
    , bankId : Int
    , acceptedBankIds : Int
    , versionNr : Int
    , blockHeightAtOfferCreation : Int
    , maxTradeLimit : Int
    , maxTradePeriod : Int
    , useAutoClose : Int
    , useReOpenAfterAutoClose : Int
    , lowerClosePrice : Int
    , upperClosePrice : Int
    , isPrivateOffer : Int
    , hashOfChallenge : Int
    , extraData : Int
    , protocolVersion : Int
    , arbitratorSigner : Int
    , arbitratorSignature : Int
    , reserveTxKeyImages : Int
    }
fieldNumbersOfferPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__OfferPayload


{-| Default for OfferPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultOfferPayload : OfferPayload
defaultOfferPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__OfferPayload


{-| Declares how to decode a `OfferPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeOfferPayload : Protobuf.Decode.Decoder OfferPayload
decodeOfferPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__OfferPayload


{-| Declares how to encode a `OfferPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeOfferPayload : OfferPayload -> Protobuf.Encode.Encoder
encodeOfferPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__OfferPayload


{-| `OfferPayload` message

-}
type alias OfferPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__OfferPayload


{-| The field numbers for the fields of `MailboxStoragePayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMailboxStoragePayload :
    { prefixedSealedAndSignedMessage : Int
    , senderPubKeyForAddOperationBytes : Int
    , ownerPubKeyBytes : Int
    , extraData : Int
    }
fieldNumbersMailboxStoragePayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MailboxStoragePayload


{-| Default for MailboxStoragePayload. Should only be used for 'required' decoders as an initial value.

-}
defaultMailboxStoragePayload : MailboxStoragePayload
defaultMailboxStoragePayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MailboxStoragePayload


{-| Declares how to decode a `MailboxStoragePayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMailboxStoragePayload : Protobuf.Decode.Decoder MailboxStoragePayload
decodeMailboxStoragePayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MailboxStoragePayload


{-| Declares how to encode a `MailboxStoragePayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMailboxStoragePayload : MailboxStoragePayload -> Protobuf.Encode.Encoder
encodeMailboxStoragePayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MailboxStoragePayload


{-| `MailboxStoragePayload` message

-}
type alias MailboxStoragePayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MailboxStoragePayload


{-| The field numbers for the fields of `TradeStatistics3`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersTradeStatistics3 :
    { currency : Int
    , price : Int
    , amount : Int
    , paymentMethod : Int
    , date : Int
    , arbitrator : Int
    , hash : Int
    , makerDepositTxId : Int
    , takerDepositTxId : Int
    , extraData : Int
    }
fieldNumbersTradeStatistics3 =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__TradeStatistics3


{-| Default for TradeStatistics3. Should only be used for 'required' decoders as an initial value.

-}
defaultTradeStatistics3 : TradeStatistics3
defaultTradeStatistics3 =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__TradeStatistics3


{-| Declares how to decode a `TradeStatistics3` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeTradeStatistics3 : Protobuf.Decode.Decoder TradeStatistics3
decodeTradeStatistics3 =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__TradeStatistics3


{-| Declares how to encode a `TradeStatistics3` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeTradeStatistics3 : TradeStatistics3 -> Protobuf.Encode.Encoder
encodeTradeStatistics3 =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__TradeStatistics3


{-| `TradeStatistics3` message

-}
type alias TradeStatistics3 =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__TradeStatistics3


{-| The field numbers for the fields of `Filter`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersFilter :
    { nodeAddressesBannedFromTrading : Int
    , bannedOfferIds : Int
    , bannedPaymentAccounts : Int
    , signatureAsBase64 : Int
    , ownerPubKeyBytes : Int
    , extraData : Int
    , bannedCurrencies : Int
    , bannedPaymentMethods : Int
    , arbitrators : Int
    , seedNodes : Int
    , priceRelayNodes : Int
    , preventPublicXmrNetwork : Int
    , xmrNodes : Int
    , disableTradeBelowVersion : Int
    , mediators : Int
    , refundAgents : Int
    , bannedSignerPubKeys : Int
    , xmrFeeReceiverAddresses : Int
    , creationDate : Int
    , signerPubKeyAsHex : Int
    , bannedPrivilegedDevPubKeys : Int
    , disableAutoConf : Int
    , bannedAutoConfExplorers : Int
    , nodeAddressesBannedFromNetwork : Int
    , disableApi : Int
    , disableMempoolValidation : Int
    }
fieldNumbersFilter =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__Filter


{-| Default for Filter. Should only be used for 'required' decoders as an initial value.

-}
defaultFilter : Filter
defaultFilter =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__Filter


{-| Declares how to decode a `Filter` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeFilter : Protobuf.Decode.Decoder Filter
decodeFilter =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__Filter


{-| Declares how to encode a `Filter` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeFilter : Filter -> Protobuf.Encode.Encoder
encodeFilter =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__Filter


{-| `Filter` message

-}
type alias Filter =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__Filter


{-| The field numbers for the fields of `RefundAgent`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRefundAgent :
    { nodeAddress : Int
    , languageCodes : Int
    , registrationDate : Int
    , registrationSignature : Int
    , registrationPubKey : Int
    , pubKeyRing : Int
    , emailAddress : Int
    , info : Int
    , extraData : Int
    }
fieldNumbersRefundAgent =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__RefundAgent


{-| Default for RefundAgent. Should only be used for 'required' decoders as an initial value.

-}
defaultRefundAgent : RefundAgent
defaultRefundAgent =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__RefundAgent


{-| Declares how to decode a `RefundAgent` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRefundAgent : Protobuf.Decode.Decoder RefundAgent
decodeRefundAgent =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__RefundAgent


{-| Declares how to encode a `RefundAgent` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRefundAgent : RefundAgent -> Protobuf.Encode.Encoder
encodeRefundAgent =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__RefundAgent


{-| `RefundAgent` message

-}
type alias RefundAgent =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__RefundAgent


{-| The field numbers for the fields of `Mediator`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMediator :
    { nodeAddress : Int
    , languageCodes : Int
    , registrationDate : Int
    , registrationSignature : Int
    , registrationPubKey : Int
    , pubKeyRing : Int
    , emailAddress : Int
    , info : Int
    , extraData : Int
    }
fieldNumbersMediator =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__Mediator


{-| Default for Mediator. Should only be used for 'required' decoders as an initial value.

-}
defaultMediator : Mediator
defaultMediator =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__Mediator


{-| Declares how to decode a `Mediator` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMediator : Protobuf.Decode.Decoder Mediator
decodeMediator =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__Mediator


{-| Declares how to encode a `Mediator` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMediator : Mediator -> Protobuf.Encode.Encoder
encodeMediator =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__Mediator


{-| `Mediator` message

-}
type alias Mediator =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__Mediator


{-| The field numbers for the fields of `Arbitrator`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersArbitrator :
    { nodeAddress : Int
    , languageCodes : Int
    , registrationDate : Int
    , registrationSignature : Int
    , registrationPubKey : Int
    , pubKeyRing : Int
    , emailAddress : Int
    , info : Int
    , extraData : Int
    }
fieldNumbersArbitrator =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__Arbitrator


{-| Default for Arbitrator. Should only be used for 'required' decoders as an initial value.

-}
defaultArbitrator : Arbitrator
defaultArbitrator =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__Arbitrator


{-| Declares how to decode a `Arbitrator` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeArbitrator : Protobuf.Decode.Decoder Arbitrator
decodeArbitrator =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__Arbitrator


{-| Declares how to encode a `Arbitrator` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeArbitrator : Arbitrator -> Protobuf.Encode.Encoder
encodeArbitrator =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__Arbitrator


{-| `Arbitrator` message

-}
type alias Arbitrator =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__Arbitrator


{-| The field numbers for the fields of `Alert`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAlert :
    { message : Int
    , version : Int
    , isUpdateInfo : Int
    , signatureAsBase64 : Int
    , ownerPubKeyBytes : Int
    , extraData : Int
    , isPreReleaseInfo : Int
    }
fieldNumbersAlert =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__Alert


{-| Default for Alert. Should only be used for 'required' decoders as an initial value.

-}
defaultAlert : Alert
defaultAlert =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__Alert


{-| Declares how to decode a `Alert` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAlert : Protobuf.Decode.Decoder Alert
decodeAlert =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__Alert


{-| Declares how to encode a `Alert` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAlert : Alert -> Protobuf.Encode.Encoder
encodeAlert =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__Alert


{-| /////////////////////////////////////////////////////////////////////////////////////////
 Storage payload
/////////////////////////////////////////////////////////////////////////////////////////


-}
type alias Alert =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__Alert


{-| The field numbers for the fields of `PaymentAccountFilter`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPaymentAccountFilter : { paymentMethodId : Int, getMethodName : Int, value : Int }
fieldNumbersPaymentAccountFilter =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PaymentAccountFilter


{-| Default for PaymentAccountFilter. Should only be used for 'required' decoders as an initial value.

-}
defaultPaymentAccountFilter : PaymentAccountFilter
defaultPaymentAccountFilter =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PaymentAccountFilter


{-| Declares how to decode a `PaymentAccountFilter` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePaymentAccountFilter : Protobuf.Decode.Decoder PaymentAccountFilter
decodePaymentAccountFilter =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PaymentAccountFilter


{-| Declares how to encode a `PaymentAccountFilter` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePaymentAccountFilter : PaymentAccountFilter -> Protobuf.Encode.Encoder
encodePaymentAccountFilter =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PaymentAccountFilter


{-| `PaymentAccountFilter` message

-}
type alias PaymentAccountFilter =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PaymentAccountFilter


{-| The field numbers for the fields of `PrivateNotificationPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPrivateNotificationPayload : { message : Int, signatureAsBase64 : Int, sigPublicKeyBytes : Int }
fieldNumbersPrivateNotificationPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PrivateNotificationPayload


{-| Default for PrivateNotificationPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultPrivateNotificationPayload : PrivateNotificationPayload
defaultPrivateNotificationPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PrivateNotificationPayload


{-| Declares how to decode a `PrivateNotificationPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePrivateNotificationPayload : Protobuf.Decode.Decoder PrivateNotificationPayload
decodePrivateNotificationPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PrivateNotificationPayload


{-| Declares how to encode a `PrivateNotificationPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePrivateNotificationPayload : PrivateNotificationPayload -> Protobuf.Encode.Encoder
encodePrivateNotificationPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PrivateNotificationPayload


{-|  misc


-}
type alias PrivateNotificationPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PrivateNotificationPayload


{-| The field numbers for the fields of `DecryptedMessageWithPubKey`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersDecryptedMessageWithPubKey : { networkEnvelope : Int, signaturePubKeyBytes : Int }
fieldNumbersDecryptedMessageWithPubKey =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__DecryptedMessageWithPubKey


{-| Default for DecryptedMessageWithPubKey. Should only be used for 'required' decoders as an initial value.

-}
defaultDecryptedMessageWithPubKey : DecryptedMessageWithPubKey
defaultDecryptedMessageWithPubKey =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__DecryptedMessageWithPubKey


{-| Declares how to decode a `DecryptedMessageWithPubKey` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeDecryptedMessageWithPubKey : Protobuf.Decode.Decoder DecryptedMessageWithPubKey
decodeDecryptedMessageWithPubKey =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__DecryptedMessageWithPubKey


{-| Declares how to encode a `DecryptedMessageWithPubKey` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeDecryptedMessageWithPubKey : DecryptedMessageWithPubKey -> Protobuf.Encode.Encoder
encodeDecryptedMessageWithPubKey =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__DecryptedMessageWithPubKey


{-| `DecryptedMessageWithPubKey` message

-}
type alias DecryptedMessageWithPubKey =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__DecryptedMessageWithPubKey


{-| The field numbers for the fields of `MailboxItem`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMailboxItem : { protectedMailboxStorageEntry : Int, decryptedMessageWithPubKey : Int }
fieldNumbersMailboxItem =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MailboxItem


{-| Default for MailboxItem. Should only be used for 'required' decoders as an initial value.

-}
defaultMailboxItem : MailboxItem
defaultMailboxItem =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MailboxItem


{-| Declares how to decode a `MailboxItem` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMailboxItem : Protobuf.Decode.Decoder MailboxItem
decodeMailboxItem =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MailboxItem


{-| Declares how to encode a `MailboxItem` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMailboxItem : MailboxItem -> Protobuf.Encode.Encoder
encodeMailboxItem =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MailboxItem


{-| `MailboxItem` message

-}
type alias MailboxItem =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MailboxItem


{-| The field numbers for the fields of `IgnoredMailboxMap`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersIgnoredMailboxMap : { data : Int }
fieldNumbersIgnoredMailboxMap =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__IgnoredMailboxMap


{-| Default for IgnoredMailboxMap. Should only be used for 'required' decoders as an initial value.

-}
defaultIgnoredMailboxMap : IgnoredMailboxMap
defaultIgnoredMailboxMap =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__IgnoredMailboxMap


{-| Declares how to decode a `IgnoredMailboxMap` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeIgnoredMailboxMap : Protobuf.Decode.Decoder IgnoredMailboxMap
decodeIgnoredMailboxMap =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__IgnoredMailboxMap


{-| Declares how to encode a `IgnoredMailboxMap` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeIgnoredMailboxMap : IgnoredMailboxMap -> Protobuf.Encode.Encoder
encodeIgnoredMailboxMap =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__IgnoredMailboxMap


{-| `IgnoredMailboxMap` message

-}
type alias IgnoredMailboxMap =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__IgnoredMailboxMap


{-| The field numbers for the fields of `RemovedPayloadsMap`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRemovedPayloadsMap : { dateByHashes : Int }
fieldNumbersRemovedPayloadsMap =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__RemovedPayloadsMap


{-| Default for RemovedPayloadsMap. Should only be used for 'required' decoders as an initial value.

-}
defaultRemovedPayloadsMap : RemovedPayloadsMap
defaultRemovedPayloadsMap =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__RemovedPayloadsMap


{-| Declares how to decode a `RemovedPayloadsMap` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRemovedPayloadsMap : Protobuf.Decode.Decoder RemovedPayloadsMap
decodeRemovedPayloadsMap =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__RemovedPayloadsMap


{-| Declares how to encode a `RemovedPayloadsMap` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRemovedPayloadsMap : RemovedPayloadsMap -> Protobuf.Encode.Encoder
encodeRemovedPayloadsMap =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__RemovedPayloadsMap


{-| `RemovedPayloadsMap` message

-}
type alias RemovedPayloadsMap =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__RemovedPayloadsMap


{-| The field numbers for the fields of `MailboxMessageList`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMailboxMessageList : { mailboxItem : Int }
fieldNumbersMailboxMessageList =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MailboxMessageList


{-| Default for MailboxMessageList. Should only be used for 'required' decoders as an initial value.

-}
defaultMailboxMessageList : MailboxMessageList
defaultMailboxMessageList =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MailboxMessageList


{-| Declares how to decode a `MailboxMessageList` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMailboxMessageList : Protobuf.Decode.Decoder MailboxMessageList
decodeMailboxMessageList =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MailboxMessageList


{-| Declares how to encode a `MailboxMessageList` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMailboxMessageList : MailboxMessageList -> Protobuf.Encode.Encoder
encodeMailboxMessageList =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MailboxMessageList


{-| `MailboxMessageList` message

-}
type alias MailboxMessageList =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MailboxMessageList


{-| The field numbers for the fields of `DataAndSeqNrPair`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersDataAndSeqNrPair : { payload : Int, sequenceNumber : Int }
fieldNumbersDataAndSeqNrPair =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__DataAndSeqNrPair


{-| Default for DataAndSeqNrPair. Should only be used for 'required' decoders as an initial value.

-}
defaultDataAndSeqNrPair : DataAndSeqNrPair
defaultDataAndSeqNrPair =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__DataAndSeqNrPair


{-| Declares how to decode a `DataAndSeqNrPair` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeDataAndSeqNrPair : Protobuf.Decode.Decoder DataAndSeqNrPair
decodeDataAndSeqNrPair =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__DataAndSeqNrPair


{-| Declares how to encode a `DataAndSeqNrPair` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeDataAndSeqNrPair : DataAndSeqNrPair -> Protobuf.Encode.Encoder
encodeDataAndSeqNrPair =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__DataAndSeqNrPair


{-| `DataAndSeqNrPair` message

-}
type alias DataAndSeqNrPair =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__DataAndSeqNrPair


{-| The field numbers for the fields of `ProtectedMailboxStorageEntry`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersProtectedMailboxStorageEntry : { entry : Int, receiversPubKeyBytes : Int }
fieldNumbersProtectedMailboxStorageEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ProtectedMailboxStorageEntry


{-| Default for ProtectedMailboxStorageEntry. Should only be used for 'required' decoders as an initial value.

-}
defaultProtectedMailboxStorageEntry : ProtectedMailboxStorageEntry
defaultProtectedMailboxStorageEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ProtectedMailboxStorageEntry


{-| Declares how to decode a `ProtectedMailboxStorageEntry` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeProtectedMailboxStorageEntry : Protobuf.Decode.Decoder ProtectedMailboxStorageEntry
decodeProtectedMailboxStorageEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ProtectedMailboxStorageEntry


{-| Declares how to encode a `ProtectedMailboxStorageEntry` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeProtectedMailboxStorageEntry : ProtectedMailboxStorageEntry -> Protobuf.Encode.Encoder
encodeProtectedMailboxStorageEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ProtectedMailboxStorageEntry


{-| `ProtectedMailboxStorageEntry` message

-}
type alias ProtectedMailboxStorageEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ProtectedMailboxStorageEntry


{-| The field numbers for the fields of `StorageEntryWrapper`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersStorageEntryWrapper :
    { message :
        Proto.Io.Haveno.Protobuffer.Internals_.FieldNumbersProto__Io__Haveno__Protobuffer__StorageEntryWrapper__Message__Message
    }
fieldNumbersStorageEntryWrapper =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__StorageEntryWrapper


{-| Default for StorageEntryWrapper. Should only be used for 'required' decoders as an initial value.

-}
defaultStorageEntryWrapper : StorageEntryWrapper
defaultStorageEntryWrapper =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__StorageEntryWrapper


{-| Declares how to decode a `StorageEntryWrapper` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeStorageEntryWrapper : Protobuf.Decode.Decoder StorageEntryWrapper
decodeStorageEntryWrapper =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__StorageEntryWrapper


{-| Declares how to encode a `StorageEntryWrapper` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeStorageEntryWrapper : StorageEntryWrapper -> Protobuf.Encode.Encoder
encodeStorageEntryWrapper =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__StorageEntryWrapper


{-|  mailbox


-}
type alias StorageEntryWrapper =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__StorageEntryWrapper


{-| The field numbers for the fields of `ProtectedStorageEntry`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersProtectedStorageEntry :
    { storagePayload : Int, ownerPubKeyBytes : Int, sequenceNumber : Int, signature : Int, creationTimeStamp : Int }
fieldNumbersProtectedStorageEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ProtectedStorageEntry


{-| Default for ProtectedStorageEntry. Should only be used for 'required' decoders as an initial value.

-}
defaultProtectedStorageEntry : ProtectedStorageEntry
defaultProtectedStorageEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ProtectedStorageEntry


{-| Declares how to decode a `ProtectedStorageEntry` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeProtectedStorageEntry : Protobuf.Decode.Decoder ProtectedStorageEntry
decodeProtectedStorageEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ProtectedStorageEntry


{-| Declares how to encode a `ProtectedStorageEntry` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeProtectedStorageEntry : ProtectedStorageEntry -> Protobuf.Encode.Encoder
encodeProtectedStorageEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ProtectedStorageEntry


{-| `ProtectedStorageEntry` message

-}
type alias ProtectedStorageEntry =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ProtectedStorageEntry


{-| The field numbers for the fields of `PersistableNetworkPayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPersistableNetworkPayload :
    { message :
        Proto.Io.Haveno.Protobuffer.Internals_.FieldNumbersProto__Io__Haveno__Protobuffer__PersistableNetworkPayload__Message__Message
    }
fieldNumbersPersistableNetworkPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PersistableNetworkPayload


{-| Default for PersistableNetworkPayload. Should only be used for 'required' decoders as an initial value.

-}
defaultPersistableNetworkPayload : PersistableNetworkPayload
defaultPersistableNetworkPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PersistableNetworkPayload


{-| Declares how to decode a `PersistableNetworkPayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePersistableNetworkPayload : Protobuf.Decode.Decoder PersistableNetworkPayload
decodePersistableNetworkPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PersistableNetworkPayload


{-| Declares how to encode a `PersistableNetworkPayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePersistableNetworkPayload : PersistableNetworkPayload -> Protobuf.Encode.Encoder
encodePersistableNetworkPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PersistableNetworkPayload


{-| `PersistableNetworkPayload` message

-}
type alias PersistableNetworkPayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PersistableNetworkPayload


{-| The field numbers for the fields of `StoragePayload`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersStoragePayload :
    { message :
        Proto.Io.Haveno.Protobuffer.Internals_.FieldNumbersProto__Io__Haveno__Protobuffer__StoragePayload__Message__Message
    }
fieldNumbersStoragePayload =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__StoragePayload


{-| Default for StoragePayload. Should only be used for 'required' decoders as an initial value.

-}
defaultStoragePayload : StoragePayload
defaultStoragePayload =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__StoragePayload


{-| Declares how to decode a `StoragePayload` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeStoragePayload : Protobuf.Decode.Decoder StoragePayload
decodeStoragePayload =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__StoragePayload


{-| Declares how to encode a `StoragePayload` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeStoragePayload : StoragePayload -> Protobuf.Encode.Encoder
encodeStoragePayload =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__StoragePayload


{-|  storage


-}
type alias StoragePayload =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__StoragePayload


{-| The field numbers for the fields of `SealedAndSigned`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSealedAndSigned :
    { encryptedSecretKey : Int, encryptedPayloadWithHmac : Int, signature : Int, sigPublicKeyBytes : Int }
fieldNumbersSealedAndSigned =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SealedAndSigned


{-| Default for SealedAndSigned. Should only be used for 'required' decoders as an initial value.

-}
defaultSealedAndSigned : SealedAndSigned
defaultSealedAndSigned =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SealedAndSigned


{-| Declares how to decode a `SealedAndSigned` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSealedAndSigned : Protobuf.Decode.Decoder SealedAndSigned
decodeSealedAndSigned =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SealedAndSigned


{-| Declares how to encode a `SealedAndSigned` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSealedAndSigned : SealedAndSigned -> Protobuf.Encode.Encoder
encodeSealedAndSigned =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SealedAndSigned


{-| `SealedAndSigned` message

-}
type alias SealedAndSigned =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SealedAndSigned


{-| The field numbers for the fields of `PubKeyRing`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPubKeyRing : { signaturePubKeyBytes : Int, encryptionPubKeyBytes : Int }
fieldNumbersPubKeyRing =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PubKeyRing


{-| Default for PubKeyRing. Should only be used for 'required' decoders as an initial value.

-}
defaultPubKeyRing : PubKeyRing
defaultPubKeyRing =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PubKeyRing


{-| Declares how to decode a `PubKeyRing` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePubKeyRing : Protobuf.Decode.Decoder PubKeyRing
decodePubKeyRing =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PubKeyRing


{-| Declares how to encode a `PubKeyRing` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePubKeyRing : PubKeyRing -> Protobuf.Encode.Encoder
encodePubKeyRing =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PubKeyRing


{-| `PubKeyRing` message

-}
type alias PubKeyRing =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PubKeyRing


{-| The field numbers for the fields of `Peer`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPeer : { nodeAddress : Int, date : Int, supportedCapabilities : Int }
fieldNumbersPeer =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__Peer


{-| Default for Peer. Should only be used for 'required' decoders as an initial value.

-}
defaultPeer : Peer
defaultPeer =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__Peer


{-| Declares how to decode a `Peer` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePeer : Protobuf.Decode.Decoder Peer
decodePeer =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__Peer


{-| Declares how to encode a `Peer` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePeer : Peer -> Protobuf.Encode.Encoder
encodePeer =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__Peer


{-| `Peer` message

-}
type alias Peer =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__Peer


{-| The field numbers for the fields of `NodeAddress`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersNodeAddress : { hostName : Int, port_ : Int }
fieldNumbersNodeAddress =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__NodeAddress


{-| Default for NodeAddress. Should only be used for 'required' decoders as an initial value.

-}
defaultNodeAddress : NodeAddress
defaultNodeAddress =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__NodeAddress


{-| Declares how to decode a `NodeAddress` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeNodeAddress : Protobuf.Decode.Decoder NodeAddress
decodeNodeAddress =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__NodeAddress


{-| Declares how to encode a `NodeAddress` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeNodeAddress : NodeAddress -> Protobuf.Encode.Encoder
encodeNodeAddress =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__NodeAddress


{-| /////////////////////////////////////////////////////////////////////////////////////////
 Payload
/////////////////////////////////////////////////////////////////////////////////////////


 core


-}
type alias NodeAddress =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__NodeAddress


{-| The field numbers for the fields of `PrivateNotificationMessage`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPrivateNotificationMessage : { uid : Int, senderNodeAddress : Int, privateNotificationPayload : Int }
fieldNumbersPrivateNotificationMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PrivateNotificationMessage


{-| Default for PrivateNotificationMessage. Should only be used for 'required' decoders as an initial value.

-}
defaultPrivateNotificationMessage : PrivateNotificationMessage
defaultPrivateNotificationMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PrivateNotificationMessage


{-| Declares how to decode a `PrivateNotificationMessage` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePrivateNotificationMessage : Protobuf.Decode.Decoder PrivateNotificationMessage
decodePrivateNotificationMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PrivateNotificationMessage


{-| Declares how to encode a `PrivateNotificationMessage` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePrivateNotificationMessage : PrivateNotificationMessage -> Protobuf.Encode.Encoder
encodePrivateNotificationMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PrivateNotificationMessage


{-| `PrivateNotificationMessage` message

-}
type alias PrivateNotificationMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PrivateNotificationMessage


{-| The field numbers for the fields of `DisputeClosedMessage`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersDisputeClosedMessage :
    { uid : Int
    , disputeResult : Int
    , senderNodeAddress : Int
    , type_ : Int
    , updatedMultisigHex : Int
    , unsignedPayoutTxHex : Int
    , deferPublishPayout : Int
    }
fieldNumbersDisputeClosedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__DisputeClosedMessage


{-| Default for DisputeClosedMessage. Should only be used for 'required' decoders as an initial value.

-}
defaultDisputeClosedMessage : DisputeClosedMessage
defaultDisputeClosedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__DisputeClosedMessage


{-| Declares how to decode a `DisputeClosedMessage` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeDisputeClosedMessage : Protobuf.Decode.Decoder DisputeClosedMessage
decodeDisputeClosedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__DisputeClosedMessage


{-| Declares how to encode a `DisputeClosedMessage` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeDisputeClosedMessage : DisputeClosedMessage -> Protobuf.Encode.Encoder
encodeDisputeClosedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__DisputeClosedMessage


{-| `DisputeClosedMessage` message

-}
type alias DisputeClosedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__DisputeClosedMessage


{-| The field numbers for the fields of `DisputeOpenedMessage`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersDisputeOpenedMessage :
    { dispute : Int
    , senderNodeAddress : Int
    , uid : Int
    , type_ : Int
    , updatedMultisigHex : Int
    , paymentSentMessage : Int
    }
fieldNumbersDisputeOpenedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__DisputeOpenedMessage


{-| Default for DisputeOpenedMessage. Should only be used for 'required' decoders as an initial value.

-}
defaultDisputeOpenedMessage : DisputeOpenedMessage
defaultDisputeOpenedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__DisputeOpenedMessage


{-| Declares how to decode a `DisputeOpenedMessage` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeDisputeOpenedMessage : Protobuf.Decode.Decoder DisputeOpenedMessage
decodeDisputeOpenedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__DisputeOpenedMessage


{-| Declares how to encode a `DisputeOpenedMessage` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeDisputeOpenedMessage : DisputeOpenedMessage -> Protobuf.Encode.Encoder
encodeDisputeOpenedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__DisputeOpenedMessage


{-| `DisputeOpenedMessage` message

-}
type alias DisputeOpenedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__DisputeOpenedMessage


{-| The field numbers for the fields of `ChatMessage`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersChatMessage :
    { date : Int
    , tradeId : Int
    , traderId : Int
    , senderIsTrader : Int
    , message : Int
    , attachments : Int
    , arrived : Int
    , storedInMailbox : Int
    , isSystemMessage : Int
    , senderNodeAddress : Int
    , uid : Int
    , sendMessageError : Int
    , acknowledged : Int
    , ackError : Int
    , type_ : Int
    , wasDisplayed : Int
    }
fieldNumbersChatMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__ChatMessage


{-| Default for ChatMessage. Should only be used for 'required' decoders as an initial value.

-}
defaultChatMessage : ChatMessage
defaultChatMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__ChatMessage


{-| Declares how to decode a `ChatMessage` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeChatMessage : Protobuf.Decode.Decoder ChatMessage
decodeChatMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__ChatMessage


{-| Declares how to encode a `ChatMessage` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeChatMessage : ChatMessage -> Protobuf.Encode.Encoder
encodeChatMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__ChatMessage


{-| `ChatMessage` message

-}
type alias ChatMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__ChatMessage


{-| The field numbers for the fields of `MediatedPayoutTxSignatureMessage`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMediatedPayoutTxSignatureMessage : { uid : Int, tradeId : Int, txSignature : Int, senderNodeAddress : Int }
fieldNumbersMediatedPayoutTxSignatureMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MediatedPayoutTxSignatureMessage


{-| Default for MediatedPayoutTxSignatureMessage. Should only be used for 'required' decoders as an initial value.

-}
defaultMediatedPayoutTxSignatureMessage : MediatedPayoutTxSignatureMessage
defaultMediatedPayoutTxSignatureMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MediatedPayoutTxSignatureMessage


{-| Declares how to decode a `MediatedPayoutTxSignatureMessage` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMediatedPayoutTxSignatureMessage : Protobuf.Decode.Decoder MediatedPayoutTxSignatureMessage
decodeMediatedPayoutTxSignatureMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MediatedPayoutTxSignatureMessage


{-| Declares how to encode a `MediatedPayoutTxSignatureMessage` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMediatedPayoutTxSignatureMessage : MediatedPayoutTxSignatureMessage -> Protobuf.Encode.Encoder
encodeMediatedPayoutTxSignatureMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MediatedPayoutTxSignatureMessage


{-| `MediatedPayoutTxSignatureMessage` message

-}
type alias MediatedPayoutTxSignatureMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MediatedPayoutTxSignatureMessage


{-| The field numbers for the fields of `MediatedPayoutTxPublishedMessage`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersMediatedPayoutTxPublishedMessage : { tradeId : Int, payoutTx : Int, senderNodeAddress : Int, uid : Int }
fieldNumbersMediatedPayoutTxPublishedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__MediatedPayoutTxPublishedMessage


{-| Default for MediatedPayoutTxPublishedMessage. Should only be used for 'required' decoders as an initial value.

-}
defaultMediatedPayoutTxPublishedMessage : MediatedPayoutTxPublishedMessage
defaultMediatedPayoutTxPublishedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__MediatedPayoutTxPublishedMessage


{-| Declares how to decode a `MediatedPayoutTxPublishedMessage` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeMediatedPayoutTxPublishedMessage : Protobuf.Decode.Decoder MediatedPayoutTxPublishedMessage
decodeMediatedPayoutTxPublishedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__MediatedPayoutTxPublishedMessage


{-| Declares how to encode a `MediatedPayoutTxPublishedMessage` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeMediatedPayoutTxPublishedMessage : MediatedPayoutTxPublishedMessage -> Protobuf.Encode.Encoder
encodeMediatedPayoutTxPublishedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__MediatedPayoutTxPublishedMessage


{-| `MediatedPayoutTxPublishedMessage` message

-}
type alias MediatedPayoutTxPublishedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__MediatedPayoutTxPublishedMessage


{-| The field numbers for the fields of `PaymentReceivedMessage`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPaymentReceivedMessage :
    { tradeId : Int
    , senderNodeAddress : Int
    , uid : Int
    , unsignedPayoutTxHex : Int
    , signedPayoutTxHex : Int
    , updatedMultisigHex : Int
    , deferPublishPayout : Int
    , buyerAccountAgeWitness : Int
    , buyerSignedWitness : Int
    , paymentSentMessage : Int
    , sellerSignature : Int
    }
fieldNumbersPaymentReceivedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PaymentReceivedMessage


{-| Default for PaymentReceivedMessage. Should only be used for 'required' decoders as an initial value.

-}
defaultPaymentReceivedMessage : PaymentReceivedMessage
defaultPaymentReceivedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PaymentReceivedMessage


{-| Declares how to decode a `PaymentReceivedMessage` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePaymentReceivedMessage : Protobuf.Decode.Decoder PaymentReceivedMessage
decodePaymentReceivedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PaymentReceivedMessage


{-| Declares how to encode a `PaymentReceivedMessage` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePaymentReceivedMessage : PaymentReceivedMessage -> Protobuf.Encode.Encoder
encodePaymentReceivedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PaymentReceivedMessage


{-| `PaymentReceivedMessage` message

-}
type alias PaymentReceivedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PaymentReceivedMessage


{-| The field numbers for the fields of `PaymentSentMessage`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPaymentSentMessage :
    { tradeId : Int
    , senderNodeAddress : Int
    , counterCurrencyTxId : Int
    , uid : Int
    , counterCurrencyExtraData : Int
    , payoutTxHex : Int
    , updatedMultisigHex : Int
    , paymentAccountKey : Int
    , sellerAccountAgeWitness : Int
    , buyerSignature : Int
    }
fieldNumbersPaymentSentMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PaymentSentMessage


{-| Default for PaymentSentMessage. Should only be used for 'required' decoders as an initial value.

-}
defaultPaymentSentMessage : PaymentSentMessage
defaultPaymentSentMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PaymentSentMessage


{-| Declares how to decode a `PaymentSentMessage` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePaymentSentMessage : Protobuf.Decode.Decoder PaymentSentMessage
decodePaymentSentMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PaymentSentMessage


{-| Declares how to encode a `PaymentSentMessage` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePaymentSentMessage : PaymentSentMessage -> Protobuf.Encode.Encoder
encodePaymentSentMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PaymentSentMessage


{-| `PaymentSentMessage` message

-}
type alias PaymentSentMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PaymentSentMessage


{-| The field numbers for the fields of `DepositsConfirmedMessage`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersDepositsConfirmedMessage :
    { tradeId : Int
    , senderNodeAddress : Int
    , pubKeyRing : Int
    , uid : Int
    , sellerPaymentAccountKey : Int
    , updatedMultisigHex : Int
    }
fieldNumbersDepositsConfirmedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__DepositsConfirmedMessage


{-| Default for DepositsConfirmedMessage. Should only be used for 'required' decoders as an initial value.

-}
defaultDepositsConfirmedMessage : DepositsConfirmedMessage
defaultDepositsConfirmedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__DepositsConfirmedMessage


{-| Declares how to decode a `DepositsConfirmedMessage` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeDepositsConfirmedMessage : Protobuf.Decode.Decoder DepositsConfirmedMessage
decodeDepositsConfirmedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__DepositsConfirmedMessage


{-| Declares how to encode a `DepositsConfirmedMessage` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeDepositsConfirmedMessage : DepositsConfirmedMessage -> Protobuf.Encode.Encoder
encodeDepositsConfirmedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__DepositsConfirmedMessage


{-| `DepositsConfirmedMessage` message

-}
type alias DepositsConfirmedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__DepositsConfirmedMessage


{-| The field numbers for the fields of `DepositResponse`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersDepositResponse :
    { tradeId : Int
    , uid : Int
    , currentDate : Int
    , errorMessage : Int
    , buyerSecurityDeposit : Int
    , sellerSecurityDeposit : Int
    }
fieldNumbersDepositResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__DepositResponse


{-| Default for DepositResponse. Should only be used for 'required' decoders as an initial value.

-}
defaultDepositResponse : DepositResponse
defaultDepositResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__DepositResponse


{-| Declares how to decode a `DepositResponse` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeDepositResponse : Protobuf.Decode.Decoder DepositResponse
decodeDepositResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__DepositResponse


{-| Declares how to encode a `DepositResponse` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeDepositResponse : DepositResponse -> Protobuf.Encode.Encoder
encodeDepositResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__DepositResponse


{-| `DepositResponse` message

-}
type alias DepositResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__DepositResponse


{-| The field numbers for the fields of `DepositRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersDepositRequest :
    { tradeId : Int
    , uid : Int
    , currentDate : Int
    , contractSignature : Int
    , depositTxHex : Int
    , depositTxKey : Int
    , paymentAccountKey : Int
    }
fieldNumbersDepositRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__DepositRequest


{-| Default for DepositRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultDepositRequest : DepositRequest
defaultDepositRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__DepositRequest


{-| Declares how to decode a `DepositRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeDepositRequest : Protobuf.Decode.Decoder DepositRequest
decodeDepositRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__DepositRequest


{-| Declares how to encode a `DepositRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeDepositRequest : DepositRequest -> Protobuf.Encode.Encoder
encodeDepositRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__DepositRequest


{-| `DepositRequest` message

-}
type alias DepositRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__DepositRequest


{-| The field numbers for the fields of `SignContractResponse`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSignContractResponse :
    { tradeId : Int
    , uid : Int
    , currentDate : Int
    , contractAsJson : Int
    , contractSignature : Int
    , encryptedPaymentAccountPayload : Int
    }
fieldNumbersSignContractResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SignContractResponse


{-| Default for SignContractResponse. Should only be used for 'required' decoders as an initial value.

-}
defaultSignContractResponse : SignContractResponse
defaultSignContractResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SignContractResponse


{-| Declares how to decode a `SignContractResponse` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSignContractResponse : Protobuf.Decode.Decoder SignContractResponse
decodeSignContractResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SignContractResponse


{-| Declares how to encode a `SignContractResponse` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSignContractResponse : SignContractResponse -> Protobuf.Encode.Encoder
encodeSignContractResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SignContractResponse


{-| `SignContractResponse` message

-}
type alias SignContractResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SignContractResponse


{-| The field numbers for the fields of `SignContractRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSignContractRequest :
    { tradeId : Int
    , uid : Int
    , currentDate : Int
    , accountId : Int
    , paymentAccountPayloadHash : Int
    , payoutAddress : Int
    , depositTxHash : Int
    , accountAgeWitnessSignatureOfDepositHash : Int
    }
fieldNumbersSignContractRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SignContractRequest


{-| Default for SignContractRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultSignContractRequest : SignContractRequest
defaultSignContractRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SignContractRequest


{-| Declares how to decode a `SignContractRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSignContractRequest : Protobuf.Decode.Decoder SignContractRequest
decodeSignContractRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SignContractRequest


{-| Declares how to encode a `SignContractRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSignContractRequest : SignContractRequest -> Protobuf.Encode.Encoder
encodeSignContractRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SignContractRequest


{-| `SignContractRequest` message

-}
type alias SignContractRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SignContractRequest


{-| The field numbers for the fields of `InitMultisigRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersInitMultisigRequest :
    { tradeId : Int
    , uid : Int
    , currentDate : Int
    , preparedMultisigHex : Int
    , madeMultisigHex : Int
    , exchangedMultisigHex : Int
    , tradeFeeAddress : Int
    }
fieldNumbersInitMultisigRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__InitMultisigRequest


{-| Default for InitMultisigRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultInitMultisigRequest : InitMultisigRequest
defaultInitMultisigRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__InitMultisigRequest


{-| Declares how to decode a `InitMultisigRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeInitMultisigRequest : Protobuf.Decode.Decoder InitMultisigRequest
decodeInitMultisigRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__InitMultisigRequest


{-| Declares how to encode a `InitMultisigRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeInitMultisigRequest : InitMultisigRequest -> Protobuf.Encode.Encoder
encodeInitMultisigRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__InitMultisigRequest


{-| `InitMultisigRequest` message

-}
type alias InitMultisigRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__InitMultisigRequest


{-| The field numbers for the fields of `InitTradeRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersInitTradeRequest :
    { tradeProtocolVersion : Int
    , offerId : Int
    , tradeAmount : Int
    , tradePrice : Int
    , paymentMethodId : Int
    , makerAccountId : Int
    , takerAccountId : Int
    , makerPaymentAccountId : Int
    , takerPaymentAccountId : Int
    , takerPubKeyRing : Int
    , uid : Int
    , accountAgeWitnessSignatureOfOfferId : Int
    , currentDate : Int
    , makerNodeAddress : Int
    , takerNodeAddress : Int
    , arbitratorNodeAddress : Int
    , reserveTxHash : Int
    , reserveTxHex : Int
    , reserveTxKey : Int
    , payoutAddress : Int
    }
fieldNumbersInitTradeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__InitTradeRequest


{-| Default for InitTradeRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultInitTradeRequest : InitTradeRequest
defaultInitTradeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__InitTradeRequest


{-| Declares how to decode a `InitTradeRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeInitTradeRequest : Protobuf.Decode.Decoder InitTradeRequest
decodeInitTradeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__InitTradeRequest


{-| Declares how to encode a `InitTradeRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeInitTradeRequest : InitTradeRequest -> Protobuf.Encode.Encoder
encodeInitTradeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__InitTradeRequest


{-| `InitTradeRequest` message

-}
type alias InitTradeRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__InitTradeRequest


{-| The field numbers for the fields of `PrefixedSealedAndSignedMessage`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPrefixedSealedAndSignedMessage :
    { nodeAddress : Int, sealedAndSigned : Int, addressPrefixHash : Int, uid : Int }
fieldNumbersPrefixedSealedAndSignedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PrefixedSealedAndSignedMessage


{-| Default for PrefixedSealedAndSignedMessage. Should only be used for 'required' decoders as an initial value.

-}
defaultPrefixedSealedAndSignedMessage : PrefixedSealedAndSignedMessage
defaultPrefixedSealedAndSignedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PrefixedSealedAndSignedMessage


{-| Declares how to decode a `PrefixedSealedAndSignedMessage` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePrefixedSealedAndSignedMessage : Protobuf.Decode.Decoder PrefixedSealedAndSignedMessage
decodePrefixedSealedAndSignedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PrefixedSealedAndSignedMessage


{-| Declares how to encode a `PrefixedSealedAndSignedMessage` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePrefixedSealedAndSignedMessage : PrefixedSealedAndSignedMessage -> Protobuf.Encode.Encoder
encodePrefixedSealedAndSignedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PrefixedSealedAndSignedMessage


{-| `PrefixedSealedAndSignedMessage` message

-}
type alias PrefixedSealedAndSignedMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PrefixedSealedAndSignedMessage


{-| The field numbers for the fields of `AckMessage`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAckMessage :
    { uid : Int
    , senderNodeAddress : Int
    , sourceType : Int
    , sourceMsgClassName : Int
    , sourceUid : Int
    , sourceId : Int
    , success : Int
    , errorMessage : Int
    }
fieldNumbersAckMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__AckMessage


{-| Default for AckMessage. Should only be used for 'required' decoders as an initial value.

-}
defaultAckMessage : AckMessage
defaultAckMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__AckMessage


{-| Declares how to decode a `AckMessage` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAckMessage : Protobuf.Decode.Decoder AckMessage
decodeAckMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__AckMessage


{-| Declares how to encode a `AckMessage` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAckMessage : AckMessage -> Protobuf.Encode.Encoder
encodeAckMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__AckMessage


{-| ## Fields

### sourceType

 enum name. e.g.  TradeMessage, DisputeMessage,...


### sourceUid

 uid of source (TradeMessage)


### sourceId

 id of source (tradeId, disputeId)


### success

 true if source message was processed successfully


### errorMessage

 optional error message if source message processing failed


-}
type alias AckMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__AckMessage


{-| The field numbers for the fields of `CloseConnectionMessage`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCloseConnectionMessage : { reason : Int }
fieldNumbersCloseConnectionMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__CloseConnectionMessage


{-| Default for CloseConnectionMessage. Should only be used for 'required' decoders as an initial value.

-}
defaultCloseConnectionMessage : CloseConnectionMessage
defaultCloseConnectionMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__CloseConnectionMessage


{-| Declares how to decode a `CloseConnectionMessage` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCloseConnectionMessage : Protobuf.Decode.Decoder CloseConnectionMessage
decodeCloseConnectionMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__CloseConnectionMessage


{-| Declares how to encode a `CloseConnectionMessage` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCloseConnectionMessage : CloseConnectionMessage -> Protobuf.Encode.Encoder
encodeCloseConnectionMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__CloseConnectionMessage


{-| `CloseConnectionMessage` message

-}
type alias CloseConnectionMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__CloseConnectionMessage


{-| The field numbers for the fields of `AddPersistableNetworkPayloadMessage`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAddPersistableNetworkPayloadMessage : { payload : Int }
fieldNumbersAddPersistableNetworkPayloadMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__AddPersistableNetworkPayloadMessage


{-| Default for AddPersistableNetworkPayloadMessage. Should only be used for 'required' decoders as an initial value.

-}
defaultAddPersistableNetworkPayloadMessage : AddPersistableNetworkPayloadMessage
defaultAddPersistableNetworkPayloadMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__AddPersistableNetworkPayloadMessage


{-| Declares how to decode a `AddPersistableNetworkPayloadMessage` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAddPersistableNetworkPayloadMessage : Protobuf.Decode.Decoder AddPersistableNetworkPayloadMessage
decodeAddPersistableNetworkPayloadMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__AddPersistableNetworkPayloadMessage


{-| Declares how to encode a `AddPersistableNetworkPayloadMessage` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAddPersistableNetworkPayloadMessage : AddPersistableNetworkPayloadMessage -> Protobuf.Encode.Encoder
encodeAddPersistableNetworkPayloadMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__AddPersistableNetworkPayloadMessage


{-| `AddPersistableNetworkPayloadMessage` message

-}
type alias AddPersistableNetworkPayloadMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__AddPersistableNetworkPayloadMessage


{-| The field numbers for the fields of `RemoveMailboxDataMessage`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRemoveMailboxDataMessage : { protectedStorageEntry : Int }
fieldNumbersRemoveMailboxDataMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__RemoveMailboxDataMessage


{-| Default for RemoveMailboxDataMessage. Should only be used for 'required' decoders as an initial value.

-}
defaultRemoveMailboxDataMessage : RemoveMailboxDataMessage
defaultRemoveMailboxDataMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__RemoveMailboxDataMessage


{-| Declares how to decode a `RemoveMailboxDataMessage` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRemoveMailboxDataMessage : Protobuf.Decode.Decoder RemoveMailboxDataMessage
decodeRemoveMailboxDataMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__RemoveMailboxDataMessage


{-| Declares how to encode a `RemoveMailboxDataMessage` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRemoveMailboxDataMessage : RemoveMailboxDataMessage -> Protobuf.Encode.Encoder
encodeRemoveMailboxDataMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__RemoveMailboxDataMessage


{-| `RemoveMailboxDataMessage` message

-}
type alias RemoveMailboxDataMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__RemoveMailboxDataMessage


{-| The field numbers for the fields of `RemoveDataMessage`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRemoveDataMessage : { protectedStorageEntry : Int }
fieldNumbersRemoveDataMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__RemoveDataMessage


{-| Default for RemoveDataMessage. Should only be used for 'required' decoders as an initial value.

-}
defaultRemoveDataMessage : RemoveDataMessage
defaultRemoveDataMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__RemoveDataMessage


{-| Declares how to decode a `RemoveDataMessage` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRemoveDataMessage : Protobuf.Decode.Decoder RemoveDataMessage
decodeRemoveDataMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__RemoveDataMessage


{-| Declares how to encode a `RemoveDataMessage` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRemoveDataMessage : RemoveDataMessage -> Protobuf.Encode.Encoder
encodeRemoveDataMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__RemoveDataMessage


{-| `RemoveDataMessage` message

-}
type alias RemoveDataMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__RemoveDataMessage


{-| The field numbers for the fields of `AddDataMessage`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAddDataMessage : { entry : Int }
fieldNumbersAddDataMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__AddDataMessage


{-| Default for AddDataMessage. Should only be used for 'required' decoders as an initial value.

-}
defaultAddDataMessage : AddDataMessage
defaultAddDataMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__AddDataMessage


{-| Declares how to decode a `AddDataMessage` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAddDataMessage : Protobuf.Decode.Decoder AddDataMessage
decodeAddDataMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__AddDataMessage


{-| Declares how to encode a `AddDataMessage` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAddDataMessage : AddDataMessage -> Protobuf.Encode.Encoder
encodeAddDataMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__AddDataMessage


{-| `AddDataMessage` message

-}
type alias AddDataMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__AddDataMessage


{-| The field numbers for the fields of `RefreshOfferMessage`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersRefreshOfferMessage :
    { hashOfDataAndSeqNr : Int, signature : Int, hashOfPayload : Int, sequenceNumber : Int }
fieldNumbersRefreshOfferMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__RefreshOfferMessage


{-| Default for RefreshOfferMessage. Should only be used for 'required' decoders as an initial value.

-}
defaultRefreshOfferMessage : RefreshOfferMessage
defaultRefreshOfferMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__RefreshOfferMessage


{-| Declares how to decode a `RefreshOfferMessage` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeRefreshOfferMessage : Protobuf.Decode.Decoder RefreshOfferMessage
decodeRefreshOfferMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__RefreshOfferMessage


{-| Declares how to encode a `RefreshOfferMessage` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeRefreshOfferMessage : RefreshOfferMessage -> Protobuf.Encode.Encoder
encodeRefreshOfferMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__RefreshOfferMessage


{-| `RefreshOfferMessage` message

-}
type alias RefreshOfferMessage =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__RefreshOfferMessage


{-| The field numbers for the fields of `OfferAvailabilityResponse`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersOfferAvailabilityResponse :
    { offerId : Int, availabilityResult : Int, supportedCapabilities : Int, uid : Int, makerSignature : Int }
fieldNumbersOfferAvailabilityResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__OfferAvailabilityResponse


{-| Default for OfferAvailabilityResponse. Should only be used for 'required' decoders as an initial value.

-}
defaultOfferAvailabilityResponse : OfferAvailabilityResponse
defaultOfferAvailabilityResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__OfferAvailabilityResponse


{-| Declares how to decode a `OfferAvailabilityResponse` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeOfferAvailabilityResponse : Protobuf.Decode.Decoder OfferAvailabilityResponse
decodeOfferAvailabilityResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__OfferAvailabilityResponse


{-| Declares how to encode a `OfferAvailabilityResponse` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeOfferAvailabilityResponse : OfferAvailabilityResponse -> Protobuf.Encode.Encoder
encodeOfferAvailabilityResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__OfferAvailabilityResponse


{-| `OfferAvailabilityResponse` message

-}
type alias OfferAvailabilityResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__OfferAvailabilityResponse


{-| The field numbers for the fields of `OfferAvailabilityRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersOfferAvailabilityRequest :
    { offerId : Int
    , pubKeyRing : Int
    , takersTradePrice : Int
    , supportedCapabilities : Int
    , uid : Int
    , isTakerApiUser : Int
    , tradeRequest : Int
    }
fieldNumbersOfferAvailabilityRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__OfferAvailabilityRequest


{-| Default for OfferAvailabilityRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultOfferAvailabilityRequest : OfferAvailabilityRequest
defaultOfferAvailabilityRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__OfferAvailabilityRequest


{-| Declares how to decode a `OfferAvailabilityRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeOfferAvailabilityRequest : Protobuf.Decode.Decoder OfferAvailabilityRequest
decodeOfferAvailabilityRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__OfferAvailabilityRequest


{-| Declares how to encode a `OfferAvailabilityRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeOfferAvailabilityRequest : OfferAvailabilityRequest -> Protobuf.Encode.Encoder
encodeOfferAvailabilityRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__OfferAvailabilityRequest


{-| `OfferAvailabilityRequest` message

-}
type alias OfferAvailabilityRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__OfferAvailabilityRequest


{-| The field numbers for the fields of `SignOfferResponse`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSignOfferResponse : { offerId : Int, uid : Int, signedOfferPayload : Int }
fieldNumbersSignOfferResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SignOfferResponse


{-| Default for SignOfferResponse. Should only be used for 'required' decoders as an initial value.

-}
defaultSignOfferResponse : SignOfferResponse
defaultSignOfferResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SignOfferResponse


{-| Declares how to decode a `SignOfferResponse` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSignOfferResponse : Protobuf.Decode.Decoder SignOfferResponse
decodeSignOfferResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SignOfferResponse


{-| Declares how to encode a `SignOfferResponse` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSignOfferResponse : SignOfferResponse -> Protobuf.Encode.Encoder
encodeSignOfferResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SignOfferResponse


{-| `SignOfferResponse` message

-}
type alias SignOfferResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SignOfferResponse


{-| The field numbers for the fields of `SignOfferRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSignOfferRequest :
    { offerId : Int
    , senderNodeAddress : Int
    , pubKeyRing : Int
    , senderAccountId : Int
    , offerPayload : Int
    , uid : Int
    , currentDate : Int
    , reserveTxHash : Int
    , reserveTxHex : Int
    , reserveTxKey : Int
    , reserveTxKeyImages : Int
    , payoutAddress : Int
    }
fieldNumbersSignOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__SignOfferRequest


{-| Default for SignOfferRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultSignOfferRequest : SignOfferRequest
defaultSignOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__SignOfferRequest


{-| Declares how to decode a `SignOfferRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSignOfferRequest : Protobuf.Decode.Decoder SignOfferRequest
decodeSignOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__SignOfferRequest


{-| Declares how to encode a `SignOfferRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSignOfferRequest : SignOfferRequest -> Protobuf.Encode.Encoder
encodeSignOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__SignOfferRequest


{-| `SignOfferRequest` message

-}
type alias SignOfferRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__SignOfferRequest


{-| The field numbers for the fields of `GetInventoryResponse`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetInventoryResponse : { inventory : Int }
fieldNumbersGetInventoryResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetInventoryResponse


{-| Default for GetInventoryResponse. Should only be used for 'required' decoders as an initial value.

-}
defaultGetInventoryResponse : GetInventoryResponse
defaultGetInventoryResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetInventoryResponse


{-| Declares how to decode a `GetInventoryResponse` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetInventoryResponse : Protobuf.Decode.Decoder GetInventoryResponse
decodeGetInventoryResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetInventoryResponse


{-| Declares how to encode a `GetInventoryResponse` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetInventoryResponse : GetInventoryResponse -> Protobuf.Encode.Encoder
encodeGetInventoryResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetInventoryResponse


{-| `GetInventoryResponse` message

-}
type alias GetInventoryResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetInventoryResponse


{-| The field numbers for the fields of `GetInventoryRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetInventoryRequest : { version : Int }
fieldNumbersGetInventoryRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetInventoryRequest


{-| Default for GetInventoryRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetInventoryRequest : GetInventoryRequest
defaultGetInventoryRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetInventoryRequest


{-| Declares how to decode a `GetInventoryRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetInventoryRequest : Protobuf.Decode.Decoder GetInventoryRequest
decodeGetInventoryRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetInventoryRequest


{-| Declares how to encode a `GetInventoryRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetInventoryRequest : GetInventoryRequest -> Protobuf.Encode.Encoder
encodeGetInventoryRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetInventoryRequest


{-| `GetInventoryRequest` message

-}
type alias GetInventoryRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetInventoryRequest


{-| The field numbers for the fields of `Pong`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPong : { requestNonce : Int }
fieldNumbersPong =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__Pong


{-| Default for Pong. Should only be used for 'required' decoders as an initial value.

-}
defaultPong : Pong
defaultPong =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__Pong


{-| Declares how to decode a `Pong` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePong : Protobuf.Decode.Decoder Pong
decodePong =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__Pong


{-| Declares how to encode a `Pong` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePong : Pong -> Protobuf.Encode.Encoder
encodePong =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__Pong


{-| `Pong` message

-}
type alias Pong =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__Pong


{-| The field numbers for the fields of `Ping`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPing : { nonce : Int, lastRoundTripTime : Int }
fieldNumbersPing =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__Ping


{-| Default for Ping. Should only be used for 'required' decoders as an initial value.

-}
defaultPing : Ping
defaultPing =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__Ping


{-| Declares how to decode a `Ping` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePing : Protobuf.Decode.Decoder Ping
decodePing =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__Ping


{-| Declares how to encode a `Ping` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePing : Ping -> Protobuf.Encode.Encoder
encodePing =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__Ping


{-| `Ping` message

-}
type alias Ping =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__Ping


{-| The field numbers for the fields of `GetPeersResponse`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetPeersResponse : { requestNonce : Int, reportedPeers : Int, supportedCapabilities : Int }
fieldNumbersGetPeersResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetPeersResponse


{-| Default for GetPeersResponse. Should only be used for 'required' decoders as an initial value.

-}
defaultGetPeersResponse : GetPeersResponse
defaultGetPeersResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetPeersResponse


{-| Declares how to decode a `GetPeersResponse` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetPeersResponse : Protobuf.Decode.Decoder GetPeersResponse
decodeGetPeersResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetPeersResponse


{-| Declares how to encode a `GetPeersResponse` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetPeersResponse : GetPeersResponse -> Protobuf.Encode.Encoder
encodeGetPeersResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetPeersResponse


{-| `GetPeersResponse` message

-}
type alias GetPeersResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetPeersResponse


{-| The field numbers for the fields of `GetPeersRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetPeersRequest : { senderNodeAddress : Int, nonce : Int, supportedCapabilities : Int, reportedPeers : Int }
fieldNumbersGetPeersRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetPeersRequest


{-| Default for GetPeersRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetPeersRequest : GetPeersRequest
defaultGetPeersRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetPeersRequest


{-| Declares how to decode a `GetPeersRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetPeersRequest : Protobuf.Decode.Decoder GetPeersRequest
decodeGetPeersRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetPeersRequest


{-| Declares how to encode a `GetPeersRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetPeersRequest : GetPeersRequest -> Protobuf.Encode.Encoder
encodeGetPeersRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetPeersRequest


{-| `GetPeersRequest` message

-}
type alias GetPeersRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetPeersRequest


{-| The field numbers for the fields of `FileTransferPart`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersFileTransferPart :
    { senderNodeAddress : Int, uid : Int, tradeId : Int, traderId : Int, seqNumOrFileLength : Int, messageData : Int }
fieldNumbersFileTransferPart =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__FileTransferPart


{-| Default for FileTransferPart. Should only be used for 'required' decoders as an initial value.

-}
defaultFileTransferPart : FileTransferPart
defaultFileTransferPart =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__FileTransferPart


{-| Declares how to decode a `FileTransferPart` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeFileTransferPart : Protobuf.Decode.Decoder FileTransferPart
decodeFileTransferPart =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__FileTransferPart


{-| Declares how to encode a `FileTransferPart` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeFileTransferPart : FileTransferPart -> Protobuf.Encode.Encoder
encodeFileTransferPart =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__FileTransferPart


{-| `FileTransferPart` message

-}
type alias FileTransferPart =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__FileTransferPart


{-| The field numbers for the fields of `GetUpdatedDataRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetUpdatedDataRequest : { senderNodeAddress : Int, nonce : Int, excludedKeys : Int, version : Int }
fieldNumbersGetUpdatedDataRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetUpdatedDataRequest


{-| Default for GetUpdatedDataRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultGetUpdatedDataRequest : GetUpdatedDataRequest
defaultGetUpdatedDataRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetUpdatedDataRequest


{-| Declares how to decode a `GetUpdatedDataRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetUpdatedDataRequest : Protobuf.Decode.Decoder GetUpdatedDataRequest
decodeGetUpdatedDataRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetUpdatedDataRequest


{-| Declares how to encode a `GetUpdatedDataRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetUpdatedDataRequest : GetUpdatedDataRequest -> Protobuf.Encode.Encoder
encodeGetUpdatedDataRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetUpdatedDataRequest


{-| `GetUpdatedDataRequest` message

-}
type alias GetUpdatedDataRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetUpdatedDataRequest


{-| The field numbers for the fields of `GetDataResponse`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersGetDataResponse :
    { requestNonce : Int
    , isGetUpdatedDataResponse : Int
    , dataSet : Int
    , supportedCapabilities : Int
    , persistableNetworkPayloadItems : Int
    , wasTruncated : Int
    }
fieldNumbersGetDataResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__GetDataResponse


{-| Default for GetDataResponse. Should only be used for 'required' decoders as an initial value.

-}
defaultGetDataResponse : GetDataResponse
defaultGetDataResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__GetDataResponse


{-| Declares how to decode a `GetDataResponse` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeGetDataResponse : Protobuf.Decode.Decoder GetDataResponse
decodeGetDataResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__GetDataResponse


{-| Declares how to encode a `GetDataResponse` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeGetDataResponse : GetDataResponse -> Protobuf.Encode.Encoder
encodeGetDataResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__GetDataResponse


{-| `GetDataResponse` message

-}
type alias GetDataResponse =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetDataResponse


{-| The field numbers for the fields of `PreliminaryGetDataRequest`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPreliminaryGetDataRequest : { nonce : Int, excludedKeys : Int, supportedCapabilities : Int, version : Int }
fieldNumbersPreliminaryGetDataRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__PreliminaryGetDataRequest


{-| Default for PreliminaryGetDataRequest. Should only be used for 'required' decoders as an initial value.

-}
defaultPreliminaryGetDataRequest : PreliminaryGetDataRequest
defaultPreliminaryGetDataRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__PreliminaryGetDataRequest


{-| Declares how to decode a `PreliminaryGetDataRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePreliminaryGetDataRequest : Protobuf.Decode.Decoder PreliminaryGetDataRequest
decodePreliminaryGetDataRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__PreliminaryGetDataRequest


{-| Declares how to encode a `PreliminaryGetDataRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePreliminaryGetDataRequest : PreliminaryGetDataRequest -> Protobuf.Encode.Encoder
encodePreliminaryGetDataRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__PreliminaryGetDataRequest


{-|  get data


## Fields

### nonce

 This was set to 21 instead of 1 in some old commit so we cannot change it.


-}
type alias PreliminaryGetDataRequest =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__PreliminaryGetDataRequest


{-| Unwrap a `BundleOfEnvelopes` from its wrapper `BundleOfEnvelopes_.`

-}
unwrapBundleOfEnvelopes : BundleOfEnvelopes_ -> BundleOfEnvelopes
unwrapBundleOfEnvelopes =
    Proto.Io.Haveno.Protobuffer.Internals_.unwrapProto__Io__Haveno__Protobuffer__BundleOfEnvelopes


{-| Wrap a `BundleOfEnvelopes` into its wrapper `BundleOfEnvelopes_.`

-}
wrapBundleOfEnvelopes : BundleOfEnvelopes -> BundleOfEnvelopes_
wrapBundleOfEnvelopes =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__BundleOfEnvelopes_


{-| Type wrapper for alias type `BundleOfEnvelopes` to avoid unlimited recursion.

For a more in-depth explanation why we need this, read this: https://github.com/elm/compiler/blob/master/hints/recursive-alias.md.

-}
type alias BundleOfEnvelopes_ =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__BundleOfEnvelopes_


{-| The field numbers for the fields of `BundleOfEnvelopes`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersBundleOfEnvelopes : { envelopes : Int }
fieldNumbersBundleOfEnvelopes =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__BundleOfEnvelopes


{-| Default for BundleOfEnvelopes. Should only be used for 'required' decoders as an initial value.

-}
defaultBundleOfEnvelopes : BundleOfEnvelopes
defaultBundleOfEnvelopes =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__BundleOfEnvelopes


{-| Declares how to decode a `BundleOfEnvelopes` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeBundleOfEnvelopes : Protobuf.Decode.Decoder BundleOfEnvelopes
decodeBundleOfEnvelopes =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__BundleOfEnvelopes


{-| Declares how to encode a `BundleOfEnvelopes` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeBundleOfEnvelopes : BundleOfEnvelopes -> Protobuf.Encode.Encoder
encodeBundleOfEnvelopes =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__BundleOfEnvelopes


{-| /////////////////////////////////////////////////////////////////////////////////////////
 Implementations of NetworkEnvelope
/////////////////////////////////////////////////////////////////////////////////////////


-}
type alias BundleOfEnvelopes =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__BundleOfEnvelopes


{-| Unwrap a `NetworkEnvelope` from its wrapper `NetworkEnvelope_.`

-}
unwrapNetworkEnvelope : NetworkEnvelope_ -> NetworkEnvelope
unwrapNetworkEnvelope =
    Proto.Io.Haveno.Protobuffer.Internals_.unwrapProto__Io__Haveno__Protobuffer__NetworkEnvelope


{-| Wrap a `NetworkEnvelope` into its wrapper `NetworkEnvelope_.`

-}
wrapNetworkEnvelope : NetworkEnvelope -> NetworkEnvelope_
wrapNetworkEnvelope =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__NetworkEnvelope_


{-| Type wrapper for alias type `NetworkEnvelope` to avoid unlimited recursion.

For a more in-depth explanation why we need this, read this: https://github.com/elm/compiler/blob/master/hints/recursive-alias.md.

-}
type alias NetworkEnvelope_ =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__NetworkEnvelope_


{-| The field numbers for the fields of `NetworkEnvelope`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersNetworkEnvelope :
    { messageVersion : Int
    , message :
        Proto.Io.Haveno.Protobuffer.Internals_.FieldNumbersProto__Io__Haveno__Protobuffer__NetworkEnvelope__Message__Message
    }
fieldNumbersNetworkEnvelope =
    Proto.Io.Haveno.Protobuffer.Internals_.fieldNumbersProto__Io__Haveno__Protobuffer__NetworkEnvelope


{-| Default for NetworkEnvelope. Should only be used for 'required' decoders as an initial value.

-}
defaultNetworkEnvelope : NetworkEnvelope
defaultNetworkEnvelope =
    Proto.Io.Haveno.Protobuffer.Internals_.defaultProto__Io__Haveno__Protobuffer__NetworkEnvelope


{-| Declares how to decode a `NetworkEnvelope` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeNetworkEnvelope : Protobuf.Decode.Decoder NetworkEnvelope
decodeNetworkEnvelope =
    Proto.Io.Haveno.Protobuffer.Internals_.decodeProto__Io__Haveno__Protobuffer__NetworkEnvelope


{-| Declares how to encode a `NetworkEnvelope` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeNetworkEnvelope : NetworkEnvelope -> Protobuf.Encode.Encoder
encodeNetworkEnvelope =
    Proto.Io.Haveno.Protobuffer.Internals_.encodeProto__Io__Haveno__Protobuffer__NetworkEnvelope


{-|  Those are messages sent over wire


-}
type alias NetworkEnvelope =
    Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__NetworkEnvelope
