{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Io.Haveno.Protobuffer.SupportType exposing (SupportType(..), decodeSupportType, defaultSupportType, encodeSupportType, fieldNumbersSupportType)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 4.0.3
- `protoc` 3.12.4
- the following specification files: `pb.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version latest or higher.

@docs SupportType, decodeSupportType, defaultSupportType, encodeSupportType, fieldNumbersSupportType

-}

import Protobuf.Decode
import Protobuf.Encode


{-| The field numbers for the fields of `SupportType`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSupportType : SupportType -> Int
fieldNumbersSupportType n_ =
    case n_ of
        ARBITRATION ->
            0

        MEDIATION ->
            1

        TRADE ->
            2

        REFUND ->
            3

        SupportTypeUnrecognized_ m_ ->
            m_


{-| Default for SupportType. Should only be used for 'required' decoders as an initial value.

-}
defaultSupportType : SupportType
defaultSupportType =
    ARBITRATION


{-| Declares how to encode a `SupportType` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSupportType : SupportType -> Protobuf.Encode.Encoder
encodeSupportType value =
    Protobuf.Encode.int32 <|
        case value of
            ARBITRATION ->
                0

            MEDIATION ->
                1

            TRADE ->
                2

            REFUND ->
                3

            SupportTypeUnrecognized_ i ->
                i


{-| Declares how to decode a `SupportType` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSupportType : Protobuf.Decode.Decoder SupportType
decodeSupportType =
    Protobuf.Decode.int32
        |> Protobuf.Decode.map
            (\i ->
                case i of
                    0 ->
                        ARBITRATION

                    1 ->
                        MEDIATION

                    2 ->
                        TRADE

                    3 ->
                        REFUND

                    _ ->
                        SupportTypeUnrecognized_ i
            )


{-| `SupportType` enumeration

-}
type SupportType
    = ARBITRATION
    | MEDIATION
    | TRADE
    | REFUND
    | SupportTypeUnrecognized_ Int
