{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Io.Haveno.Protobuffer.DisputeResult.SubtractFeeFrom exposing (SubtractFeeFrom(..), decodeSubtractFeeFrom, defaultSubtractFeeFrom, encodeSubtractFeeFrom, fieldNumbersSubtractFeeFrom)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 4.0.3
- `protoc` 3.12.4
- the following specification files: `pb.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version latest or higher.

@docs SubtractFeeFrom, decodeSubtractFeeFrom, defaultSubtractFeeFrom, encodeSubtractFeeFrom, fieldNumbersSubtractFeeFrom

-}

import Protobuf.Decode
import Protobuf.Encode


{-| The field numbers for the fields of `SubtractFeeFrom`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSubtractFeeFrom : SubtractFeeFrom -> Int
fieldNumbersSubtractFeeFrom n_ =
    case n_ of
        BUYERONLY ->
            0

        SELLERONLY ->
            1

        BUYERANDSELLER ->
            2

        SubtractFeeFromUnrecognized_ m_ ->
            m_


{-| Default for SubtractFeeFrom. Should only be used for 'required' decoders as an initial value.

-}
defaultSubtractFeeFrom : SubtractFeeFrom
defaultSubtractFeeFrom =
    BUYERONLY


{-| Declares how to encode a `SubtractFeeFrom` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSubtractFeeFrom : SubtractFeeFrom -> Protobuf.Encode.Encoder
encodeSubtractFeeFrom value =
    Protobuf.Encode.int32 <|
        case value of
            BUYERONLY ->
                0

            SELLERONLY ->
                1

            BUYERANDSELLER ->
                2

            SubtractFeeFromUnrecognized_ i ->
                i


{-| Declares how to decode a `SubtractFeeFrom` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSubtractFeeFrom : Protobuf.Decode.Decoder SubtractFeeFrom
decodeSubtractFeeFrom =
    Protobuf.Decode.int32
        |> Protobuf.Decode.map
            (\i ->
                case i of
                    0 ->
                        BUYERONLY

                    1 ->
                        SELLERONLY

                    2 ->
                        BUYERANDSELLER

                    _ ->
                        SubtractFeeFromUnrecognized_ i
            )


{-| `SubtractFeeFrom` enumeration

-}
type SubtractFeeFrom
    = BUYERONLY
    | SELLERONLY
    | BUYERANDSELLER
    | SubtractFeeFromUnrecognized_ Int
