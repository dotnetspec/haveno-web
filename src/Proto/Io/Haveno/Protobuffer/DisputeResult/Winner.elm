{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Io.Haveno.Protobuffer.DisputeResult.Winner exposing (Winner(..), decodeWinner, defaultWinner, encodeWinner, fieldNumbersWinner)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 4.0.3
- `protoc` 3.12.4
- the following specification files: `pb.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version latest or higher.

@docs Winner, decodeWinner, defaultWinner, encodeWinner, fieldNumbersWinner

-}

import Protobuf.Decode
import Protobuf.Encode


{-| The field numbers for the fields of `Winner`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersWinner : Winner -> Int
fieldNumbersWinner n_ =
    case n_ of
        PBERRORWINNER ->
            0

        BUYER ->
            1

        SELLER ->
            2

        WinnerUnrecognized_ m_ ->
            m_


{-| Default for Winner. Should only be used for 'required' decoders as an initial value.

-}
defaultWinner : Winner
defaultWinner =
    PBERRORWINNER


{-| Declares how to encode a `Winner` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeWinner : Winner -> Protobuf.Encode.Encoder
encodeWinner value =
    Protobuf.Encode.int32 <|
        case value of
            PBERRORWINNER ->
                0

            BUYER ->
                1

            SELLER ->
                2

            WinnerUnrecognized_ i ->
                i


{-| Declares how to decode a `Winner` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeWinner : Protobuf.Decode.Decoder Winner
decodeWinner =
    Protobuf.Decode.int32
        |> Protobuf.Decode.map
            (\i ->
                case i of
                    0 ->
                        PBERRORWINNER

                    1 ->
                        BUYER

                    2 ->
                        SELLER

                    _ ->
                        WinnerUnrecognized_ i
            )


{-| `Winner` enumeration

-}
type Winner
    = PBERRORWINNER
    | BUYER
    | SELLER
    | WinnerUnrecognized_ Int
