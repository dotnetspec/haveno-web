{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Io.Haveno.Protobuffer.GetTradesRequest.Category exposing (Category(..), decodeCategory, defaultCategory, encodeCategory, fieldNumbersCategory)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 4.0.3
- `protoc` 3.12.4
- the following specification files: `grpc.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version latest or higher.

@docs Category, decodeCategory, defaultCategory, encodeCategory, fieldNumbersCategory

-}

import Protobuf.Decode
import Protobuf.Encode


{-| The field numbers for the fields of `Category`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersCategory : Category -> Int
fieldNumbersCategory n_ =
    case n_ of
        OPEN ->
            0

        CLOSED ->
            1

        FAILED ->
            2

        CategoryUnrecognized_ m_ ->
            m_


{-| Default for Category. Should only be used for 'required' decoders as an initial value.

-}
defaultCategory : Category
defaultCategory =
    OPEN


{-| Declares how to encode a `Category` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeCategory : Category -> Protobuf.Encode.Encoder
encodeCategory value =
    Protobuf.Encode.int32 <|
        case value of
            OPEN ->
                0

            CLOSED ->
                1

            FAILED ->
                2

            CategoryUnrecognized_ i ->
                i


{-| Declares how to decode a `Category` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeCategory : Protobuf.Decode.Decoder Category
decodeCategory =
    Protobuf.Decode.int32
        |> Protobuf.Decode.map
            (\i ->
                case i of
                    0 ->
                        OPEN

                    1 ->
                        CLOSED

                    2 ->
                        FAILED

                    _ ->
                        CategoryUnrecognized_ i
            )


{-| `Category` enumeration

-}
type Category
    = OPEN
    | CLOSED
    | FAILED
    | CategoryUnrecognized_ Int
