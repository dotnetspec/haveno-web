{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Io.Haveno.Protobuffer.NotificationMessage.NotificationType exposing (NotificationType(..), decodeNotificationType, defaultNotificationType, encodeNotificationType, fieldNumbersNotificationType)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 4.0.3
- `protoc` 3.12.4
- the following specification files: `grpc.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version latest or higher.

@docs NotificationType, decodeNotificationType, defaultNotificationType, encodeNotificationType, fieldNumbersNotificationType

-}

import Protobuf.Decode
import Protobuf.Encode


{-| The field numbers for the fields of `NotificationType`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersNotificationType : NotificationType -> Int
fieldNumbersNotificationType n_ =
    case n_ of
        ERROR ->
            0

        APPINITIALIZED ->
            1

        KEEPALIVE ->
            2

        TRADEUPDATE ->
            3

        CHATMESSAGE ->
            4

        NotificationTypeUnrecognized_ m_ ->
            m_


{-| Default for NotificationType. Should only be used for 'required' decoders as an initial value.

-}
defaultNotificationType : NotificationType
defaultNotificationType =
    ERROR


{-| Declares how to encode a `NotificationType` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeNotificationType : NotificationType -> Protobuf.Encode.Encoder
encodeNotificationType value =
    Protobuf.Encode.int32 <|
        case value of
            ERROR ->
                0

            APPINITIALIZED ->
                1

            KEEPALIVE ->
                2

            TRADEUPDATE ->
                3

            CHATMESSAGE ->
                4

            NotificationTypeUnrecognized_ i ->
                i


{-| Declares how to decode a `NotificationType` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeNotificationType : Protobuf.Decode.Decoder NotificationType
decodeNotificationType =
    Protobuf.Decode.int32
        |> Protobuf.Decode.map
            (\i ->
                case i of
                    0 ->
                        ERROR

                    1 ->
                        APPINITIALIZED

                    2 ->
                        KEEPALIVE

                    3 ->
                        TRADEUPDATE

                    4 ->
                        CHATMESSAGE

                    _ ->
                        NotificationTypeUnrecognized_ i
            )


{-| `NotificationType` enumeration

-}
type NotificationType
    = ERROR
    | APPINITIALIZED
    | KEEPALIVE
    | TRADEUPDATE
    | CHATMESSAGE
    | NotificationTypeUnrecognized_ Int
