{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Io.Haveno.Protobuffer.TradeProtocolVersion exposing (TradeProtocolVersion(..), decodeTradeProtocolVersion, defaultTradeProtocolVersion, encodeTradeProtocolVersion, fieldNumbersTradeProtocolVersion)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 4.0.3
- `protoc` 3.12.4
- the following specification files: `pb.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version latest or higher.

@docs TradeProtocolVersion, decodeTradeProtocolVersion, defaultTradeProtocolVersion, encodeTradeProtocolVersion

@docs fieldNumbersTradeProtocolVersion

-}

import Protobuf.Decode
import Protobuf.Encode


{-| The field numbers for the fields of `TradeProtocolVersion`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersTradeProtocolVersion : TradeProtocolVersion -> Int
fieldNumbersTradeProtocolVersion n_ =
    case n_ of
        MULTISIG23 ->
            0

        TradeProtocolVersionUnrecognized_ m_ ->
            m_


{-| Default for TradeProtocolVersion. Should only be used for 'required' decoders as an initial value.

-}
defaultTradeProtocolVersion : TradeProtocolVersion
defaultTradeProtocolVersion =
    MULTISIG23


{-| Declares how to encode a `TradeProtocolVersion` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeTradeProtocolVersion : TradeProtocolVersion -> Protobuf.Encode.Encoder
encodeTradeProtocolVersion value =
    Protobuf.Encode.int32 <|
        case value of
            MULTISIG23 ->
                0

            TradeProtocolVersionUnrecognized_ i ->
                i


{-| Declares how to decode a `TradeProtocolVersion` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeTradeProtocolVersion : Protobuf.Decode.Decoder TradeProtocolVersion
decodeTradeProtocolVersion =
    Protobuf.Decode.int32
        |> Protobuf.Decode.map
            (\i ->
                case i of
                    0 ->
                        MULTISIG23

                    _ ->
                        TradeProtocolVersionUnrecognized_ i
            )


{-| `TradeProtocolVersion` enumeration

-}
type TradeProtocolVersion
    = MULTISIG23
    | TradeProtocolVersionUnrecognized_ Int
