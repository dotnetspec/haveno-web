{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Io.Haveno.Protobuffer.SignedWitness.VerificationMethod exposing (VerificationMethod(..), decodeVerificationMethod, defaultVerificationMethod, encodeVerificationMethod, fieldNumbersVerificationMethod)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 4.0.3
- `protoc` 3.12.4
- the following specification files: `pb.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version latest or higher.

@docs VerificationMethod, decodeVerificationMethod, defaultVerificationMethod, encodeVerificationMethod

@docs fieldNumbersVerificationMethod

-}

import Protobuf.Decode
import Protobuf.Encode


{-| The field numbers for the fields of `VerificationMethod`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersVerificationMethod : VerificationMethod -> Int
fieldNumbersVerificationMethod n_ =
    case n_ of
        PBERROR ->
            0

        ARBITRATOR ->
            1

        TRADE ->
            2

        VerificationMethodUnrecognized_ m_ ->
            m_


{-| Default for VerificationMethod. Should only be used for 'required' decoders as an initial value.

-}
defaultVerificationMethod : VerificationMethod
defaultVerificationMethod =
    PBERROR


{-| Declares how to encode a `VerificationMethod` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeVerificationMethod : VerificationMethod -> Protobuf.Encode.Encoder
encodeVerificationMethod value =
    Protobuf.Encode.int32 <|
        case value of
            PBERROR ->
                0

            ARBITRATOR ->
                1

            TRADE ->
                2

            VerificationMethodUnrecognized_ i ->
                i


{-| Declares how to decode a `VerificationMethod` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeVerificationMethod : Protobuf.Decode.Decoder VerificationMethod
decodeVerificationMethod =
    Protobuf.Decode.int32
        |> Protobuf.Decode.map
            (\i ->
                case i of
                    0 ->
                        PBERROR

                    1 ->
                        ARBITRATOR

                    2 ->
                        TRADE

                    _ ->
                        VerificationMethodUnrecognized_ i
            )


{-| `VerificationMethod` enumeration

-}
type VerificationMethod
    = PBERROR
    | ARBITRATOR
    | TRADE
    | VerificationMethodUnrecognized_ Int
