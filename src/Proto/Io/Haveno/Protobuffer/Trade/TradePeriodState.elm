{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Io.Haveno.Protobuffer.Trade.TradePeriodState exposing (TradePeriodState(..), decodeTradePeriodState, defaultTradePeriodState, encodeTradePeriodState, fieldNumbersTradePeriodState)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 4.0.3
- `protoc` 3.12.4
- the following specification files: `pb.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version latest or higher.

@docs TradePeriodState, decodeTradePeriodState, defaultTradePeriodState, encodeTradePeriodState, fieldNumbersTradePeriodState

-}

import Protobuf.Decode
import Protobuf.Encode


{-| The field numbers for the fields of `TradePeriodState`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersTradePeriodState : TradePeriodState -> Int
fieldNumbersTradePeriodState n_ =
    case n_ of
        PBERRORTRADEPERIODSTATE ->
            0

        FIRSTHALF ->
            1

        SECONDHALF ->
            2

        TRADEPERIODOVER ->
            3

        TradePeriodStateUnrecognized_ m_ ->
            m_


{-| Default for TradePeriodState. Should only be used for 'required' decoders as an initial value.

-}
defaultTradePeriodState : TradePeriodState
defaultTradePeriodState =
    PBERRORTRADEPERIODSTATE


{-| Declares how to encode a `TradePeriodState` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeTradePeriodState : TradePeriodState -> Protobuf.Encode.Encoder
encodeTradePeriodState value =
    Protobuf.Encode.int32 <|
        case value of
            PBERRORTRADEPERIODSTATE ->
                0

            FIRSTHALF ->
                1

            SECONDHALF ->
                2

            TRADEPERIODOVER ->
                3

            TradePeriodStateUnrecognized_ i ->
                i


{-| Declares how to decode a `TradePeriodState` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeTradePeriodState : Protobuf.Decode.Decoder TradePeriodState
decodeTradePeriodState =
    Protobuf.Decode.int32
        |> Protobuf.Decode.map
            (\i ->
                case i of
                    0 ->
                        PBERRORTRADEPERIODSTATE

                    1 ->
                        FIRSTHALF

                    2 ->
                        SECONDHALF

                    3 ->
                        TRADEPERIODOVER

                    _ ->
                        TradePeriodStateUnrecognized_ i
            )


{-| `TradePeriodState` enumeration

-}
type TradePeriodState
    = PBERRORTRADEPERIODSTATE
    | FIRSTHALF
    | SECONDHALF
    | TRADEPERIODOVER
    | TradePeriodStateUnrecognized_ Int
