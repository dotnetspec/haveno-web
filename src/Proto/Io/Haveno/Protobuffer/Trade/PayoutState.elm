{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Io.Haveno.Protobuffer.Trade.PayoutState exposing (PayoutState(..), decodePayoutState, defaultPayoutState, encodePayoutState, fieldNumbersPayoutState)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 4.0.3
- `protoc` 3.12.4
- the following specification files: `pb.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version latest or higher.

@docs PayoutState, decodePayoutState, defaultPayoutState, encodePayoutState, fieldNumbersPayoutState

-}

import Protobuf.Decode
import Protobuf.Encode


{-| The field numbers for the fields of `PayoutState`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersPayoutState : PayoutState -> Int
fieldNumbersPayoutState n_ =
    case n_ of
        PAYOUTUNPUBLISHED ->
            0

        PAYOUTPUBLISHED ->
            1

        PAYOUTCONFIRMED ->
            2

        PAYOUTUNLOCKED ->
            3

        PayoutStateUnrecognized_ m_ ->
            m_


{-| Default for PayoutState. Should only be used for 'required' decoders as an initial value.

-}
defaultPayoutState : PayoutState
defaultPayoutState =
    PAYOUTUNPUBLISHED


{-| Declares how to encode a `PayoutState` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodePayoutState : PayoutState -> Protobuf.Encode.Encoder
encodePayoutState value =
    Protobuf.Encode.int32 <|
        case value of
            PAYOUTUNPUBLISHED ->
                0

            PAYOUTPUBLISHED ->
                1

            PAYOUTCONFIRMED ->
                2

            PAYOUTUNLOCKED ->
                3

            PayoutStateUnrecognized_ i ->
                i


{-| Declares how to decode a `PayoutState` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodePayoutState : Protobuf.Decode.Decoder PayoutState
decodePayoutState =
    Protobuf.Decode.int32
        |> Protobuf.Decode.map
            (\i ->
                case i of
                    0 ->
                        PAYOUTUNPUBLISHED

                    1 ->
                        PAYOUTPUBLISHED

                    2 ->
                        PAYOUTCONFIRMED

                    3 ->
                        PAYOUTUNLOCKED

                    _ ->
                        PayoutStateUnrecognized_ i
            )


{-| `PayoutState` enumeration

-}
type PayoutState
    = PAYOUTUNPUBLISHED
    | PAYOUTPUBLISHED
    | PAYOUTCONFIRMED
    | PAYOUTUNLOCKED
    | PayoutStateUnrecognized_ Int
