{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Io.Haveno.Protobuffer.AvailabilityResult exposing (AvailabilityResult(..), decodeAvailabilityResult, defaultAvailabilityResult, encodeAvailabilityResult, fieldNumbersAvailabilityResult)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 4.0.3
- `protoc` 3.12.4
- the following specification files: `pb.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version latest or higher.

@docs AvailabilityResult, decodeAvailabilityResult, defaultAvailabilityResult, encodeAvailabilityResult

@docs fieldNumbersAvailabilityResult

-}

import Protobuf.Decode
import Protobuf.Encode


{-| The field numbers for the fields of `AvailabilityResult`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersAvailabilityResult : AvailabilityResult -> Int
fieldNumbersAvailabilityResult n_ =
    case n_ of
        PBERROR ->
            0

        UNKNOWNFAILURE ->
            1

        AVAILABLE ->
            2

        OFFERTAKEN ->
            3

        PRICEOUTOFTOLERANCE ->
            4

        MARKETPRICENOTAVAILABLE ->
            5

        NOARBITRATORS ->
            6

        NOMEDIATORS ->
            7

        USERIGNORED ->
            8

        MISSINGMANDATORYCAPABILITY ->
            9

        NOREFUNDAGENTS ->
            10

        UNCONFTXLIMITHIT ->
            11

        MAKERDENIEDAPIUSER ->
            12

        PRICECHECKFAILED ->
            13

        MAKERDENIEDTAKER ->
            14

        AvailabilityResultUnrecognized_ m_ ->
            m_


{-| Default for AvailabilityResult. Should only be used for 'required' decoders as an initial value.

-}
defaultAvailabilityResult : AvailabilityResult
defaultAvailabilityResult =
    PBERROR


{-| Declares how to encode a `AvailabilityResult` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeAvailabilityResult : AvailabilityResult -> Protobuf.Encode.Encoder
encodeAvailabilityResult value =
    Protobuf.Encode.int32 <|
        case value of
            PBERROR ->
                0

            UNKNOWNFAILURE ->
                1

            AVAILABLE ->
                2

            OFFERTAKEN ->
                3

            PRICEOUTOFTOLERANCE ->
                4

            MARKETPRICENOTAVAILABLE ->
                5

            NOARBITRATORS ->
                6

            NOMEDIATORS ->
                7

            USERIGNORED ->
                8

            MISSINGMANDATORYCAPABILITY ->
                9

            NOREFUNDAGENTS ->
                10

            UNCONFTXLIMITHIT ->
                11

            MAKERDENIEDAPIUSER ->
                12

            PRICECHECKFAILED ->
                13

            MAKERDENIEDTAKER ->
                14

            AvailabilityResultUnrecognized_ i ->
                i


{-| Declares how to decode a `AvailabilityResult` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeAvailabilityResult : Protobuf.Decode.Decoder AvailabilityResult
decodeAvailabilityResult =
    Protobuf.Decode.int32
        |> Protobuf.Decode.map
            (\i ->
                case i of
                    0 ->
                        PBERROR

                    1 ->
                        UNKNOWNFAILURE

                    2 ->
                        AVAILABLE

                    3 ->
                        OFFERTAKEN

                    4 ->
                        PRICEOUTOFTOLERANCE

                    5 ->
                        MARKETPRICENOTAVAILABLE

                    6 ->
                        NOARBITRATORS

                    7 ->
                        NOMEDIATORS

                    8 ->
                        USERIGNORED

                    9 ->
                        MISSINGMANDATORYCAPABILITY

                    10 ->
                        NOREFUNDAGENTS

                    11 ->
                        UNCONFTXLIMITHIT

                    12 ->
                        MAKERDENIEDAPIUSER

                    13 ->
                        PRICECHECKFAILED

                    14 ->
                        MAKERDENIEDTAKER

                    _ ->
                        AvailabilityResultUnrecognized_ i
            )


{-| `AvailabilityResult` enumeration

-}
type AvailabilityResult
    = PBERROR
    | UNKNOWNFAILURE
    | AVAILABLE
    | OFFERTAKEN
    | PRICEOUTOFTOLERANCE
    | MARKETPRICENOTAVAILABLE
    | NOARBITRATORS
    | NOMEDIATORS
    | USERIGNORED
    | MISSINGMANDATORYCAPABILITY
    | NOREFUNDAGENTS
    | UNCONFTXLIMITHIT
    | MAKERDENIEDAPIUSER
    | PRICECHECKFAILED
    | MAKERDENIEDTAKER
    | AvailabilityResultUnrecognized_ Int
