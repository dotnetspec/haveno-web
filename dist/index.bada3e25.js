// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"gDk1O":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
var HMR_USE_SSE = false;
module.bundle.HMR_BUNDLE_ID = "be68dc86bada3e25";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var HMR_USE_SSE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && ![
        "localhost",
        "127.0.0.1",
        "0.0.0.0"
    ].includes(hostname) ? "wss" : "ws";
    var ws;
    if (HMR_USE_SSE) ws = new EventSource("/__parcel_hmr");
    else try {
        ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    } catch (err) {
        if (err.message) console.error(err.message);
        ws = {};
    }
    // Web extension context
    var extCtx = typeof browser === "undefined" ? typeof chrome === "undefined" ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    if (ws instanceof WebSocket) {
        ws.onerror = function(e) {
            if (e.message) console.error(e.message);
        };
        ws.onclose = function() {
            console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
        };
    }
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"8NmNK":[function(require,module,exports) {
var _mainElm = require("../src/Main.elm");
var _handleElmMessagesJs = require("./handleElmMessages.js");
var _scrollTopLinksMenuJs = require("./scrollTopLinksMenu.js");
document.addEventListener("DOMContentLoaded", ()=>{
    var detectEnvironment = function() {
        var protocol = window.location.protocol;
        var hostname = window.location.hostname;
        var port = window.location.port;
        var defaultPort = protocol === "https:" ? 443 : 80;
        var parsedPort = port ? parseInt(port, 10) : defaultPort;
        return {
            protocol: protocol,
            hostname: hostname,
            port: parsedPort
        };
    };
    var environmentInfo = detectEnvironment();
    console.log("Protocol:", environmentInfo.protocol);
    console.log("Hostname:", environmentInfo.hostname);
    console.log("Port:", environmentInfo.port);
    const protocol = environmentInfo.protocol;
    const hostnm = environmentInfo.hostname;
    const prt = environmentInfo.port;
    var jsonUrl = JSON.stringify(protocol + "//" + hostnm + ":" + prt);
    console.log("jsonUrl:", jsonUrl);
    const eapp = (0, _mainElm.Elm).Main.init({
        node: document.getElementById("elm"),
        flags: jsonUrl
    });
    eapp.ports.sendMessageToJs.subscribe(function(message) {
        console.log("Message sent to js ", message);
        (0, _handleElmMessagesJs.handleMessageFromElm)(message, eapp);
    });
    //burger animation
    const menubtn = document.querySelector(".menu-btn");
    let menuOpen = false;
    menubtn.addEventListener("click", ()=>{
        if (!menuOpen) {
            menubtn.classList.add("open");
            menuOpen = true;
        } else {
            menubtn.classList.remove("open");
            menuOpen = false;
        }
    });
});

},{"../src/Main.elm":"4XkAe","./handleElmMessages.js":"2AsAh","./scrollTopLinksMenu.js":"X1LcC"}],"4XkAe":[function(require,module,exports) {
(function(scope) {
    "use strict";
    function F(arity, fun, wrapper) {
        wrapper.a = arity;
        wrapper.f = fun;
        return wrapper;
    }
    function F2(fun) {
        return F(2, fun, function(a) {
            return function(b) {
                return fun(a, b);
            };
        });
    }
    function F3(fun) {
        return F(3, fun, function(a) {
            return function(b) {
                return function(c) {
                    return fun(a, b, c);
                };
            };
        });
    }
    function F4(fun) {
        return F(4, fun, function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return fun(a, b, c, d);
                    };
                };
            };
        });
    }
    function F5(fun) {
        return F(5, fun, function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return function(e) {
                            return fun(a, b, c, d, e);
                        };
                    };
                };
            };
        });
    }
    function F6(fun) {
        return F(6, fun, function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return function(e) {
                            return function(f) {
                                return fun(a, b, c, d, e, f);
                            };
                        };
                    };
                };
            };
        });
    }
    function F7(fun) {
        return F(7, fun, function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return function(e) {
                            return function(f) {
                                return function(g) {
                                    return fun(a, b, c, d, e, f, g);
                                };
                            };
                        };
                    };
                };
            };
        });
    }
    function F8(fun) {
        return F(8, fun, function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return function(e) {
                            return function(f) {
                                return function(g) {
                                    return function(h) {
                                        return fun(a, b, c, d, e, f, g, h);
                                    };
                                };
                            };
                        };
                    };
                };
            };
        });
    }
    function F9(fun) {
        return F(9, fun, function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return function(e) {
                            return function(f) {
                                return function(g) {
                                    return function(h) {
                                        return function(i) {
                                            return fun(a, b, c, d, e, f, g, h, i);
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        });
    }
    function A2(fun, a, b) {
        return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
    }
    function A3(fun, a, b, c) {
        return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
    }
    function A4(fun, a, b, c, d) {
        return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
    }
    function A5(fun, a, b, c, d, e) {
        return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
    }
    function A6(fun, a, b, c, d, e, f) {
        return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
    }
    function A7(fun, a, b, c, d, e, f, g) {
        return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
    }
    function A8(fun, a, b, c, d, e, f, g, h) {
        return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
    }
    function A9(fun, a, b, c, d, e, f, g, h, i) {
        return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
    }
    console.warn("Compiled in DEBUG mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.");
    // EQUALITY
    function _Utils_eq(x, y) {
        for(var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack); isEqual && (pair = stack.pop()); isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack));
        return isEqual;
    }
    function _Utils_eqHelp(x, y, depth, stack) {
        if (x === y) return true;
        if (typeof x !== "object" || x === null || y === null) {
            typeof x === "function" && _Debug_crash(5);
            return false;
        }
        if (depth > 100) {
            stack.push(_Utils_Tuple2(x, y));
            return true;
        }
        /**/ if (x.$ === "Set_elm_builtin") {
            x = $elm$core$Set$toList(x);
            y = $elm$core$Set$toList(y);
        }
        if (x.$ === "RBNode_elm_builtin" || x.$ === "RBEmpty_elm_builtin") {
            x = $elm$core$Dict$toList(x);
            y = $elm$core$Dict$toList(y);
        }
        //*/
        /**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/ for(var key in x){
            if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack)) return false;
        }
        return true;
    }
    var _Utils_equal = F2(_Utils_eq);
    var _Utils_notEqual = F2(function(a, b) {
        return !_Utils_eq(a, b);
    });
    // COMPARISONS
    // Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
    // the particular integer values assigned to LT, EQ, and GT.
    function _Utils_cmp(x, y, ord) {
        if (typeof x !== "object") return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
        /**/ if (x instanceof String) {
            var a = x.valueOf();
            var b = y.valueOf();
            return a === b ? 0 : a < b ? -1 : 1;
        }
        //*/
        /**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/ /**/ if (x.$[0] === "#") return (ord = _Utils_cmp(x.a, y.a)) ? ord : (ord = _Utils_cmp(x.b, y.b)) ? ord : _Utils_cmp(x.c, y.c);
        // traverse conses until end of a list or a mismatch
        for(; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b); // WHILE_CONSES
        return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
    }
    var _Utils_lt = F2(function(a, b) {
        return _Utils_cmp(a, b) < 0;
    });
    var _Utils_le = F2(function(a, b) {
        return _Utils_cmp(a, b) < 1;
    });
    var _Utils_gt = F2(function(a, b) {
        return _Utils_cmp(a, b) > 0;
    });
    var _Utils_ge = F2(function(a, b) {
        return _Utils_cmp(a, b) >= 0;
    });
    var _Utils_compare = F2(function(x, y) {
        var n = _Utils_cmp(x, y);
        return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
    });
    // COMMON VALUES
    var _Utils_Tuple0_UNUSED = 0;
    var _Utils_Tuple0 = {
        $: "#0"
    };
    function _Utils_Tuple2_UNUSED(a, b) {
        return {
            a: a,
            b: b
        };
    }
    function _Utils_Tuple2(a, b) {
        return {
            $: "#2",
            a: a,
            b: b
        };
    }
    function _Utils_Tuple3_UNUSED(a, b, c) {
        return {
            a: a,
            b: b,
            c: c
        };
    }
    function _Utils_Tuple3(a, b, c) {
        return {
            $: "#3",
            a: a,
            b: b,
            c: c
        };
    }
    function _Utils_chr_UNUSED(c) {
        return c;
    }
    function _Utils_chr(c) {
        return new String(c);
    }
    // RECORDS
    function _Utils_update(oldRecord, updatedFields) {
        var newRecord = {};
        for(var key in oldRecord)newRecord[key] = oldRecord[key];
        for(var key in updatedFields)newRecord[key] = updatedFields[key];
        return newRecord;
    }
    // APPEND
    var _Utils_append = F2(_Utils_ap);
    function _Utils_ap(xs, ys) {
        // append Strings
        if (typeof xs === "string") return xs + ys;
        // append Lists
        if (!xs.b) return ys;
        var root = _List_Cons(xs.a, ys);
        xs = xs.b;
        for(var curr = root; xs.b; xs = xs.b)curr = curr.b = _List_Cons(xs.a, ys);
        return root;
    }
    var _List_Nil_UNUSED = {
        $: 0
    };
    var _List_Nil = {
        $: "[]"
    };
    function _List_Cons_UNUSED(hd, tl) {
        return {
            $: 1,
            a: hd,
            b: tl
        };
    }
    function _List_Cons(hd, tl) {
        return {
            $: "::",
            a: hd,
            b: tl
        };
    }
    var _List_cons = F2(_List_Cons);
    function _List_fromArray(arr) {
        var out = _List_Nil;
        for(var i = arr.length; i--;)out = _List_Cons(arr[i], out);
        return out;
    }
    function _List_toArray(xs) {
        for(var out = []; xs.b; xs = xs.b)out.push(xs.a);
        return out;
    }
    var _List_map2 = F3(function(f, xs, ys) {
        for(var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b)arr.push(A2(f, xs.a, ys.a));
        return _List_fromArray(arr);
    });
    var _List_map3 = F4(function(f, xs, ys, zs) {
        for(var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b)arr.push(A3(f, xs.a, ys.a, zs.a));
        return _List_fromArray(arr);
    });
    var _List_map4 = F5(function(f, ws, xs, ys, zs) {
        for(var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b)arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
        return _List_fromArray(arr);
    });
    var _List_map5 = F6(function(f, vs, ws, xs, ys, zs) {
        for(var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b)arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
        return _List_fromArray(arr);
    });
    var _List_sortBy = F2(function(f, xs) {
        return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
            return _Utils_cmp(f(a), f(b));
        }));
    });
    var _List_sortWith = F2(function(f, xs) {
        return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
            var ord = A2(f, a, b);
            return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
        }));
    });
    var _JsArray_empty = [];
    function _JsArray_singleton(value) {
        return [
            value
        ];
    }
    function _JsArray_length(array) {
        return array.length;
    }
    var _JsArray_initialize = F3(function(size, offset, func) {
        var result = new Array(size);
        for(var i = 0; i < size; i++)result[i] = func(offset + i);
        return result;
    });
    var _JsArray_initializeFromList = F2(function(max, ls) {
        var result = new Array(max);
        for(var i = 0; i < max && ls.b; i++){
            result[i] = ls.a;
            ls = ls.b;
        }
        result.length = i;
        return _Utils_Tuple2(result, ls);
    });
    var _JsArray_unsafeGet = F2(function(index, array) {
        return array[index];
    });
    var _JsArray_unsafeSet = F3(function(index, value, array) {
        var length = array.length;
        var result = new Array(length);
        for(var i = 0; i < length; i++)result[i] = array[i];
        result[index] = value;
        return result;
    });
    var _JsArray_push = F2(function(value, array) {
        var length = array.length;
        var result = new Array(length + 1);
        for(var i = 0; i < length; i++)result[i] = array[i];
        result[length] = value;
        return result;
    });
    var _JsArray_foldl = F3(function(func, acc, array) {
        var length = array.length;
        for(var i = 0; i < length; i++)acc = A2(func, array[i], acc);
        return acc;
    });
    var _JsArray_foldr = F3(function(func, acc, array) {
        for(var i = array.length - 1; i >= 0; i--)acc = A2(func, array[i], acc);
        return acc;
    });
    var _JsArray_map = F2(function(func, array) {
        var length = array.length;
        var result = new Array(length);
        for(var i = 0; i < length; i++)result[i] = func(array[i]);
        return result;
    });
    var _JsArray_indexedMap = F3(function(func, offset, array) {
        var length = array.length;
        var result = new Array(length);
        for(var i = 0; i < length; i++)result[i] = A2(func, offset + i, array[i]);
        return result;
    });
    var _JsArray_slice = F3(function(from, to, array) {
        return array.slice(from, to);
    });
    var _JsArray_appendN = F3(function(n, dest, source) {
        var destLen = dest.length;
        var itemsToCopy = n - destLen;
        if (itemsToCopy > source.length) itemsToCopy = source.length;
        var size = destLen + itemsToCopy;
        var result = new Array(size);
        for(var i = 0; i < destLen; i++)result[i] = dest[i];
        for(var i = 0; i < itemsToCopy; i++)result[i + destLen] = source[i];
        return result;
    });
    // LOG
    var _Debug_log_UNUSED = F2(function(tag, value) {
        return value;
    });
    var _Debug_log = F2(function(tag, value) {
        console.log(tag + ": " + _Debug_toString(value));
        return value;
    });
    // TODOS
    function _Debug_todo(moduleName, region) {
        return function(message) {
            _Debug_crash(8, moduleName, region, message);
        };
    }
    function _Debug_todoCase(moduleName, region, value) {
        return function(message) {
            _Debug_crash(9, moduleName, region, value, message);
        };
    }
    // TO STRING
    function _Debug_toString_UNUSED(value) {
        return "<internals>";
    }
    function _Debug_toString(value) {
        return _Debug_toAnsiString(false, value);
    }
    function _Debug_toAnsiString(ansi, value) {
        if (typeof value === "function") return _Debug_internalColor(ansi, "<function>");
        if (typeof value === "boolean") return _Debug_ctorColor(ansi, value ? "True" : "False");
        if (typeof value === "number") return _Debug_numberColor(ansi, value + "");
        if (value instanceof String) return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
        if (typeof value === "string") return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
        if (typeof value === "object" && "$" in value) {
            var tag = value.$;
            if (typeof tag === "number") return _Debug_internalColor(ansi, "<internals>");
            if (tag[0] === "#") {
                var output = [];
                for(var k in value){
                    if (k === "$") continue;
                    output.push(_Debug_toAnsiString(ansi, value[k]));
                }
                return "(" + output.join(",") + ")";
            }
            if (tag === "Set_elm_builtin") return _Debug_ctorColor(ansi, "Set") + _Debug_fadeColor(ansi, ".fromList") + " " + _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
            if (tag === "RBNode_elm_builtin" || tag === "RBEmpty_elm_builtin") return _Debug_ctorColor(ansi, "Dict") + _Debug_fadeColor(ansi, ".fromList") + " " + _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
            if (tag === "Array_elm_builtin") return _Debug_ctorColor(ansi, "Array") + _Debug_fadeColor(ansi, ".fromList") + " " + _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
            if (tag === "::" || tag === "[]") {
                var output = "[";
                value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b);
                for(; value.b; value = value.b)output += "," + _Debug_toAnsiString(ansi, value.a);
                return output + "]";
            }
            var output = "";
            for(var i in value){
                if (i === "$") continue;
                var str = _Debug_toAnsiString(ansi, value[i]);
                var c0 = str[0];
                var parenless = c0 === "{" || c0 === "(" || c0 === "[" || c0 === "<" || c0 === '"' || str.indexOf(" ") < 0;
                output += " " + (parenless ? str : "(" + str + ")");
            }
            return _Debug_ctorColor(ansi, tag) + output;
        }
        if (typeof DataView === "function" && value instanceof DataView) return _Debug_stringColor(ansi, "<" + value.byteLength + " bytes>");
        if (typeof File !== "undefined" && value instanceof File) return _Debug_internalColor(ansi, "<" + value.name + ">");
        if (typeof value === "object") {
            var output = [];
            for(var key in value){
                var field = key[0] === "_" ? key.slice(1) : key;
                output.push(_Debug_fadeColor(ansi, field) + " = " + _Debug_toAnsiString(ansi, value[key]));
            }
            if (output.length === 0) return "{}";
            return "{ " + output.join(", ") + " }";
        }
        return _Debug_internalColor(ansi, "<internals>");
    }
    function _Debug_addSlashes(str, isChar) {
        var s = str.replace(/\\/g, "\\\\").replace(/\n/g, "\\n").replace(/\t/g, "\\t").replace(/\r/g, "\\r").replace(/\v/g, "\\v").replace(/\0/g, "\\0");
        if (isChar) return s.replace(/\'/g, "\\'");
        else return s.replace(/\"/g, '\\"');
    }
    function _Debug_ctorColor(ansi, string) {
        return ansi ? "\x1b[96m" + string + "\x1b[0m" : string;
    }
    function _Debug_numberColor(ansi, string) {
        return ansi ? "\x1b[95m" + string + "\x1b[0m" : string;
    }
    function _Debug_stringColor(ansi, string) {
        return ansi ? "\x1b[93m" + string + "\x1b[0m" : string;
    }
    function _Debug_charColor(ansi, string) {
        return ansi ? "\x1b[92m" + string + "\x1b[0m" : string;
    }
    function _Debug_fadeColor(ansi, string) {
        return ansi ? "\x1b[37m" + string + "\x1b[0m" : string;
    }
    function _Debug_internalColor(ansi, string) {
        return ansi ? "\x1b[36m" + string + "\x1b[0m" : string;
    }
    function _Debug_toHexDigit(n) {
        return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
    }
    // CRASH
    function _Debug_crash_UNUSED(identifier) {
        throw new Error("https://github.com/elm/core/blob/1.0.0/hints/" + identifier + ".md");
    }
    function _Debug_crash(identifier, fact1, fact2, fact3, fact4) {
        switch(identifier){
            case 0:
                throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');
            case 1:
                throw new Error("Browser.application programs cannot handle URLs like this:\n\n    " + document.location.href + "\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.");
            case 2:
                var jsonErrorString = fact1;
                throw new Error("Problem with the flags given to your Elm program on initialization.\n\n" + jsonErrorString);
            case 3:
                var portName = fact1;
                throw new Error("There can only be one port named `" + portName + "`, but your program has multiple.");
            case 4:
                var portName = fact1;
                var problem = fact2;
                throw new Error("Trying to send an unexpected type of value through port `" + portName + "`:\n" + problem);
            case 5:
                throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');
            case 6:
                var moduleName = fact1;
                throw new Error("Your page is loading multiple Elm scripts with a module named " + moduleName + ". Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!");
            case 8:
                var moduleName = fact1;
                var region = fact2;
                var message = fact3;
                throw new Error("TODO in module `" + moduleName + "` " + _Debug_regionToString(region) + "\n\n" + message);
            case 9:
                var moduleName = fact1;
                var region = fact2;
                var value = fact3;
                var message = fact4;
                throw new Error("TODO in module `" + moduleName + "` from the `case` expression " + _Debug_regionToString(region) + "\n\nIt received the following value:\n\n    " + _Debug_toString(value).replace("\n", "\n    ") + "\n\nBut the branch that handles it says:\n\n    " + message.replace("\n", "\n    "));
            case 10:
                throw new Error("Bug in https://github.com/elm/virtual-dom/issues");
            case 11:
                throw new Error("Cannot perform mod 0. Division by zero error.");
        }
    }
    function _Debug_regionToString(region) {
        if (region.start.line === region.end.line) return "on line " + region.start.line;
        return "on lines " + region.start.line + " through " + region.end.line;
    }
    // MATH
    var _Basics_add = F2(function(a, b) {
        return a + b;
    });
    var _Basics_sub = F2(function(a, b) {
        return a - b;
    });
    var _Basics_mul = F2(function(a, b) {
        return a * b;
    });
    var _Basics_fdiv = F2(function(a, b) {
        return a / b;
    });
    var _Basics_idiv = F2(function(a, b) {
        return a / b | 0;
    });
    var _Basics_pow = F2(Math.pow);
    var _Basics_remainderBy = F2(function(b, a) {
        return a % b;
    });
    // https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
    var _Basics_modBy = F2(function(modulus, x) {
        var answer = x % modulus;
        return modulus === 0 ? _Debug_crash(11) : answer > 0 && modulus < 0 || answer < 0 && modulus > 0 ? answer + modulus : answer;
    });
    // TRIGONOMETRY
    var _Basics_pi = Math.PI;
    var _Basics_e = Math.E;
    var _Basics_cos = Math.cos;
    var _Basics_sin = Math.sin;
    var _Basics_tan = Math.tan;
    var _Basics_acos = Math.acos;
    var _Basics_asin = Math.asin;
    var _Basics_atan = Math.atan;
    var _Basics_atan2 = F2(Math.atan2);
    // MORE MATH
    function _Basics_toFloat(x) {
        return x;
    }
    function _Basics_truncate(n) {
        return n | 0;
    }
    function _Basics_isInfinite(n) {
        return n === Infinity || n === -Infinity;
    }
    var _Basics_ceiling = Math.ceil;
    var _Basics_floor = Math.floor;
    var _Basics_round = Math.round;
    var _Basics_sqrt = Math.sqrt;
    var _Basics_log = Math.log;
    var _Basics_isNaN = isNaN;
    // BOOLEANS
    function _Basics_not(bool) {
        return !bool;
    }
    var _Basics_and = F2(function(a, b) {
        return a && b;
    });
    var _Basics_or = F2(function(a, b) {
        return a || b;
    });
    var _Basics_xor = F2(function(a, b) {
        return a !== b;
    });
    var _String_cons = F2(function(chr, str) {
        return chr + str;
    });
    function _String_uncons(string) {
        var word = string.charCodeAt(0);
        return !isNaN(word) ? $elm$core$Maybe$Just(0xD800 <= word && word <= 0xDBFF ? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2)) : _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))) : $elm$core$Maybe$Nothing;
    }
    var _String_append = F2(function(a, b) {
        return a + b;
    });
    function _String_length(str) {
        return str.length;
    }
    var _String_map = F2(function(func, string) {
        var len = string.length;
        var array = new Array(len);
        var i = 0;
        while(i < len){
            var word = string.charCodeAt(i);
            if (0xD800 <= word && word <= 0xDBFF) {
                array[i] = func(_Utils_chr(string[i] + string[i + 1]));
                i += 2;
                continue;
            }
            array[i] = func(_Utils_chr(string[i]));
            i++;
        }
        return array.join("");
    });
    var _String_filter = F2(function(isGood, str) {
        var arr = [];
        var len = str.length;
        var i = 0;
        while(i < len){
            var char = str[i];
            var word = str.charCodeAt(i);
            i++;
            if (0xD800 <= word && word <= 0xDBFF) {
                char += str[i];
                i++;
            }
            if (isGood(_Utils_chr(char))) arr.push(char);
        }
        return arr.join("");
    });
    function _String_reverse(str) {
        var len = str.length;
        var arr = new Array(len);
        var i = 0;
        while(i < len){
            var word = str.charCodeAt(i);
            if (0xD800 <= word && word <= 0xDBFF) {
                arr[len - i] = str[i + 1];
                i++;
                arr[len - i] = str[i - 1];
                i++;
            } else {
                arr[len - i] = str[i];
                i++;
            }
        }
        return arr.join("");
    }
    var _String_foldl = F3(function(func, state, string) {
        var len = string.length;
        var i = 0;
        while(i < len){
            var char = string[i];
            var word = string.charCodeAt(i);
            i++;
            if (0xD800 <= word && word <= 0xDBFF) {
                char += string[i];
                i++;
            }
            state = A2(func, _Utils_chr(char), state);
        }
        return state;
    });
    var _String_foldr = F3(function(func, state, string) {
        var i = string.length;
        while(i--){
            var char = string[i];
            var word = string.charCodeAt(i);
            if (0xDC00 <= word && word <= 0xDFFF) {
                i--;
                char = string[i] + char;
            }
            state = A2(func, _Utils_chr(char), state);
        }
        return state;
    });
    var _String_split = F2(function(sep, str) {
        return str.split(sep);
    });
    var _String_join = F2(function(sep, strs) {
        return strs.join(sep);
    });
    var _String_slice = F3(function(start, end, str) {
        return str.slice(start, end);
    });
    function _String_trim(str) {
        return str.trim();
    }
    function _String_trimLeft(str) {
        return str.replace(/^\s+/, "");
    }
    function _String_trimRight(str) {
        return str.replace(/\s+$/, "");
    }
    function _String_words(str) {
        return _List_fromArray(str.trim().split(/\s+/g));
    }
    function _String_lines(str) {
        return _List_fromArray(str.split(/\r\n|\r|\n/g));
    }
    function _String_toUpper(str) {
        return str.toUpperCase();
    }
    function _String_toLower(str) {
        return str.toLowerCase();
    }
    var _String_any = F2(function(isGood, string) {
        var i = string.length;
        while(i--){
            var char = string[i];
            var word = string.charCodeAt(i);
            if (0xDC00 <= word && word <= 0xDFFF) {
                i--;
                char = string[i] + char;
            }
            if (isGood(_Utils_chr(char))) return true;
        }
        return false;
    });
    var _String_all = F2(function(isGood, string) {
        var i = string.length;
        while(i--){
            var char = string[i];
            var word = string.charCodeAt(i);
            if (0xDC00 <= word && word <= 0xDFFF) {
                i--;
                char = string[i] + char;
            }
            if (!isGood(_Utils_chr(char))) return false;
        }
        return true;
    });
    var _String_contains = F2(function(sub, str) {
        return str.indexOf(sub) > -1;
    });
    var _String_startsWith = F2(function(sub, str) {
        return str.indexOf(sub) === 0;
    });
    var _String_endsWith = F2(function(sub, str) {
        return str.length >= sub.length && str.lastIndexOf(sub) === str.length - sub.length;
    });
    var _String_indexes = F2(function(sub, str) {
        var subLen = sub.length;
        if (subLen < 1) return _List_Nil;
        var i = 0;
        var is = [];
        while((i = str.indexOf(sub, i)) > -1){
            is.push(i);
            i = i + subLen;
        }
        return _List_fromArray(is);
    });
    // TO STRING
    function _String_fromNumber(number) {
        return number + "";
    }
    // INT CONVERSIONS
    function _String_toInt(str) {
        var total = 0;
        var code0 = str.charCodeAt(0);
        var start = code0 == 0x2B /* + */  || code0 == 0x2D /* - */  ? 1 : 0;
        for(var i = start; i < str.length; ++i){
            var code = str.charCodeAt(i);
            if (code < 0x30 || 0x39 < code) return $elm$core$Maybe$Nothing;
            total = 10 * total + code - 0x30;
        }
        return i == start ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
    }
    // FLOAT CONVERSIONS
    function _String_toFloat(s) {
        // check if it is a hex, octal, or binary number
        if (s.length === 0 || /[\sxbo]/.test(s)) return $elm$core$Maybe$Nothing;
        var n = +s;
        // faster isNaN check
        return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
    }
    function _String_fromList(chars) {
        return _List_toArray(chars).join("");
    }
    function _Char_toCode(char) {
        var code = char.charCodeAt(0);
        if (0xD800 <= code && code <= 0xDBFF) return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000;
        return code;
    }
    function _Char_fromCode(code) {
        return _Utils_chr(code < 0 || 0x10FFFF < code ? "\uFFFD" : code <= 0xFFFF ? String.fromCharCode(code) : (code -= 0x10000, String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)));
    }
    function _Char_toUpper(char) {
        return _Utils_chr(char.toUpperCase());
    }
    function _Char_toLower(char) {
        return _Utils_chr(char.toLowerCase());
    }
    function _Char_toLocaleUpper(char) {
        return _Utils_chr(char.toLocaleUpperCase());
    }
    function _Char_toLocaleLower(char) {
        return _Utils_chr(char.toLocaleLowerCase());
    }
    /**/ function _Json_errorToString(error) {
        return $elm$json$Json$Decode$errorToString(error);
    }
    //*/
    // CORE DECODERS
    function _Json_succeed(msg) {
        return {
            $: 0,
            a: msg
        };
    }
    function _Json_fail(msg) {
        return {
            $: 1,
            a: msg
        };
    }
    function _Json_decodePrim(decoder) {
        return {
            $: 2,
            b: decoder
        };
    }
    var _Json_decodeInt = _Json_decodePrim(function(value) {
        return typeof value !== "number" ? _Json_expecting("an INT", value) : -2147483647 < value && value < 2147483647 && (value | 0) === value ? $elm$core$Result$Ok(value) : isFinite(value) && !(value % 1) ? $elm$core$Result$Ok(value) : _Json_expecting("an INT", value);
    });
    var _Json_decodeBool = _Json_decodePrim(function(value) {
        return typeof value === "boolean" ? $elm$core$Result$Ok(value) : _Json_expecting("a BOOL", value);
    });
    var _Json_decodeFloat = _Json_decodePrim(function(value) {
        return typeof value === "number" ? $elm$core$Result$Ok(value) : _Json_expecting("a FLOAT", value);
    });
    var _Json_decodeValue = _Json_decodePrim(function(value) {
        return $elm$core$Result$Ok(_Json_wrap(value));
    });
    var _Json_decodeString = _Json_decodePrim(function(value) {
        return typeof value === "string" ? $elm$core$Result$Ok(value) : value instanceof String ? $elm$core$Result$Ok(value + "") : _Json_expecting("a STRING", value);
    });
    function _Json_decodeList(decoder) {
        return {
            $: 3,
            b: decoder
        };
    }
    function _Json_decodeArray(decoder) {
        return {
            $: 4,
            b: decoder
        };
    }
    function _Json_decodeNull(value) {
        return {
            $: 5,
            c: value
        };
    }
    var _Json_decodeField = F2(function(field, decoder) {
        return {
            $: 6,
            d: field,
            b: decoder
        };
    });
    var _Json_decodeIndex = F2(function(index, decoder) {
        return {
            $: 7,
            e: index,
            b: decoder
        };
    });
    function _Json_decodeKeyValuePairs(decoder) {
        return {
            $: 8,
            b: decoder
        };
    }
    function _Json_mapMany(f, decoders) {
        return {
            $: 9,
            f: f,
            g: decoders
        };
    }
    var _Json_andThen = F2(function(callback, decoder) {
        return {
            $: 10,
            b: decoder,
            h: callback
        };
    });
    function _Json_oneOf(decoders) {
        return {
            $: 11,
            g: decoders
        };
    }
    // DECODING OBJECTS
    var _Json_map1 = F2(function(f, d1) {
        return _Json_mapMany(f, [
            d1
        ]);
    });
    var _Json_map2 = F3(function(f, d1, d2) {
        return _Json_mapMany(f, [
            d1,
            d2
        ]);
    });
    var _Json_map3 = F4(function(f, d1, d2, d3) {
        return _Json_mapMany(f, [
            d1,
            d2,
            d3
        ]);
    });
    var _Json_map4 = F5(function(f, d1, d2, d3, d4) {
        return _Json_mapMany(f, [
            d1,
            d2,
            d3,
            d4
        ]);
    });
    var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5) {
        return _Json_mapMany(f, [
            d1,
            d2,
            d3,
            d4,
            d5
        ]);
    });
    var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6) {
        return _Json_mapMany(f, [
            d1,
            d2,
            d3,
            d4,
            d5,
            d6
        ]);
    });
    var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7) {
        return _Json_mapMany(f, [
            d1,
            d2,
            d3,
            d4,
            d5,
            d6,
            d7
        ]);
    });
    var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8) {
        return _Json_mapMany(f, [
            d1,
            d2,
            d3,
            d4,
            d5,
            d6,
            d7,
            d8
        ]);
    });
    // DECODE
    var _Json_runOnString = F2(function(decoder, string) {
        try {
            var value = JSON.parse(string);
            return _Json_runHelp(decoder, value);
        } catch (e) {
            return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, "This is not valid JSON! " + e.message, _Json_wrap(string)));
        }
    });
    var _Json_run = F2(function(decoder, value) {
        return _Json_runHelp(decoder, _Json_unwrap(value));
    });
    function _Json_runHelp(decoder, value) {
        switch(decoder.$){
            case 2:
                return decoder.b(value);
            case 5:
                return value === null ? $elm$core$Result$Ok(decoder.c) : _Json_expecting("null", value);
            case 3:
                if (!_Json_isArray(value)) return _Json_expecting("a LIST", value);
                return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);
            case 4:
                if (!_Json_isArray(value)) return _Json_expecting("an ARRAY", value);
                return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);
            case 6:
                var field = decoder.d;
                if (typeof value !== "object" || value === null || !(field in value)) return _Json_expecting("an OBJECT with a field named `" + field + "`", value);
                var result = _Json_runHelp(decoder.b, value[field]);
                return $elm$core$Result$isOk(result) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));
            case 7:
                var index = decoder.e;
                if (!_Json_isArray(value)) return _Json_expecting("an ARRAY", value);
                if (index >= value.length) return _Json_expecting("a LONGER array. Need index " + index + " but only see " + value.length + " entries", value);
                var result = _Json_runHelp(decoder.b, value[index]);
                return $elm$core$Result$isOk(result) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));
            case 8:
                if (typeof value !== "object" || value === null || _Json_isArray(value)) return _Json_expecting("an OBJECT", value);
                var keyValuePairs = _List_Nil;
                // TODO test perf of Object.keys and switch when support is good enough
                for(var key in value)if (value.hasOwnProperty(key)) {
                    var result = _Json_runHelp(decoder.b, value[key]);
                    if (!$elm$core$Result$isOk(result)) return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
                    keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
                }
                return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));
            case 9:
                var answer = decoder.f;
                var decoders = decoder.g;
                for(var i = 0; i < decoders.length; i++){
                    var result = _Json_runHelp(decoders[i], value);
                    if (!$elm$core$Result$isOk(result)) return result;
                    answer = answer(result.a);
                }
                return $elm$core$Result$Ok(answer);
            case 10:
                var result = _Json_runHelp(decoder.b, value);
                return !$elm$core$Result$isOk(result) ? result : _Json_runHelp(decoder.h(result.a), value);
            case 11:
                var errors = _List_Nil;
                for(var temp = decoder.g; temp.b; temp = temp.b){
                    var result = _Json_runHelp(temp.a, value);
                    if ($elm$core$Result$isOk(result)) return result;
                    errors = _List_Cons(result.a, errors);
                }
                return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));
            case 1:
                return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));
            case 0:
                return $elm$core$Result$Ok(decoder.a);
        }
    }
    function _Json_runArrayDecoder(decoder, value, toElmValue) {
        var len = value.length;
        var array = new Array(len);
        for(var i = 0; i < len; i++){
            var result = _Json_runHelp(decoder, value[i]);
            if (!$elm$core$Result$isOk(result)) return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
            array[i] = result.a;
        }
        return $elm$core$Result$Ok(toElmValue(array));
    }
    function _Json_isArray(value) {
        return Array.isArray(value) || typeof FileList !== "undefined" && value instanceof FileList;
    }
    function _Json_toElmArray(array) {
        return A2($elm$core$Array$initialize, array.length, function(i) {
            return array[i];
        });
    }
    function _Json_expecting(type, value) {
        return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, "Expecting " + type, _Json_wrap(value)));
    }
    // EQUALITY
    function _Json_equality(x, y) {
        if (x === y) return true;
        if (x.$ !== y.$) return false;
        switch(x.$){
            case 0:
            case 1:
                return x.a === y.a;
            case 2:
                return x.b === y.b;
            case 5:
                return x.c === y.c;
            case 3:
            case 4:
            case 8:
                return _Json_equality(x.b, y.b);
            case 6:
                return x.d === y.d && _Json_equality(x.b, y.b);
            case 7:
                return x.e === y.e && _Json_equality(x.b, y.b);
            case 9:
                return x.f === y.f && _Json_listEquality(x.g, y.g);
            case 10:
                return x.h === y.h && _Json_equality(x.b, y.b);
            case 11:
                return _Json_listEquality(x.g, y.g);
        }
    }
    function _Json_listEquality(aDecoders, bDecoders) {
        var len = aDecoders.length;
        if (len !== bDecoders.length) return false;
        for(var i = 0; i < len; i++){
            if (!_Json_equality(aDecoders[i], bDecoders[i])) return false;
        }
        return true;
    }
    // ENCODE
    var _Json_encode = F2(function(indentLevel, value) {
        return JSON.stringify(_Json_unwrap(value), null, indentLevel) + "";
    });
    function _Json_wrap(value) {
        return {
            $: 0,
            a: value
        };
    }
    function _Json_unwrap(value) {
        return value.a;
    }
    function _Json_wrap_UNUSED(value) {
        return value;
    }
    function _Json_unwrap_UNUSED(value) {
        return value;
    }
    function _Json_emptyArray() {
        return [];
    }
    function _Json_emptyObject() {
        return {};
    }
    var _Json_addField = F3(function(key, value, object) {
        object[key] = _Json_unwrap(value);
        return object;
    });
    function _Json_addEntry(func) {
        return F2(function(entry, array) {
            array.push(_Json_unwrap(func(entry)));
            return array;
        });
    }
    var _Json_encodeNull = _Json_wrap(null);
    // TASKS
    function _Scheduler_succeed(value) {
        return {
            $: 0,
            a: value
        };
    }
    function _Scheduler_fail(error) {
        return {
            $: 1,
            a: error
        };
    }
    function _Scheduler_binding(callback) {
        return {
            $: 2,
            b: callback,
            c: null
        };
    }
    var _Scheduler_andThen = F2(function(callback, task) {
        return {
            $: 3,
            b: callback,
            d: task
        };
    });
    var _Scheduler_onError = F2(function(callback, task) {
        return {
            $: 4,
            b: callback,
            d: task
        };
    });
    function _Scheduler_receive(callback) {
        return {
            $: 5,
            b: callback
        };
    }
    // PROCESSES
    var _Scheduler_guid = 0;
    function _Scheduler_rawSpawn(task) {
        var proc = {
            $: 0,
            e: _Scheduler_guid++,
            f: task,
            g: null,
            h: []
        };
        _Scheduler_enqueue(proc);
        return proc;
    }
    function _Scheduler_spawn(task) {
        return _Scheduler_binding(function(callback) {
            callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
        });
    }
    function _Scheduler_rawSend(proc, msg) {
        proc.h.push(msg);
        _Scheduler_enqueue(proc);
    }
    var _Scheduler_send = F2(function(proc, msg) {
        return _Scheduler_binding(function(callback) {
            _Scheduler_rawSend(proc, msg);
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    });
    function _Scheduler_kill(proc) {
        return _Scheduler_binding(function(callback) {
            var task = proc.f;
            if (task.$ === 2 && task.c) task.c();
            proc.f = null;
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    }
    /* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/ var _Scheduler_working = false;
    var _Scheduler_queue = [];
    function _Scheduler_enqueue(proc) {
        _Scheduler_queue.push(proc);
        if (_Scheduler_working) return;
        _Scheduler_working = true;
        while(proc = _Scheduler_queue.shift())_Scheduler_step(proc);
        _Scheduler_working = false;
    }
    function _Scheduler_step(proc) {
        while(proc.f){
            var rootTag = proc.f.$;
            if (rootTag === 0 || rootTag === 1) {
                while(proc.g && proc.g.$ !== rootTag)proc.g = proc.g.i;
                if (!proc.g) return;
                proc.f = proc.g.b(proc.f.a);
                proc.g = proc.g.i;
            } else if (rootTag === 2) {
                proc.f.c = proc.f.b(function(newRoot) {
                    proc.f = newRoot;
                    _Scheduler_enqueue(proc);
                });
                return;
            } else if (rootTag === 5) {
                if (proc.h.length === 0) return;
                proc.f = proc.f.b(proc.h.shift());
            } else {
                proc.g = {
                    $: rootTag === 3 ? 0 : 1,
                    b: proc.f.b,
                    i: proc.g
                };
                proc.f = proc.f.d;
            }
        }
    }
    function _Process_sleep(time) {
        return _Scheduler_binding(function(callback) {
            var id = setTimeout(function() {
                callback(_Scheduler_succeed(_Utils_Tuple0));
            }, time);
            return function() {
                clearTimeout(id);
            };
        });
    }
    // PROGRAMS
    var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args) {
        return _Platform_initialize(flagDecoder, args, impl.init, impl.update, impl.subscriptions, function() {
            return function() {};
        });
    });
    // INITIALIZE A PROGRAM
    function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder) {
        var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args["flags"] : undefined));
        $elm$core$Result$isOk(result) || _Debug_crash(2 /**/ , _Json_errorToString(result.a));
        var managers = {};
        var initPair = init(result.a);
        var model = initPair.a;
        var stepper = stepperBuilder(sendToApp, model);
        var ports = _Platform_setupEffects(managers, sendToApp);
        function sendToApp(msg, viewMetadata) {
            var pair = A2(update, msg, model);
            stepper(model = pair.a, viewMetadata);
            _Platform_enqueueEffects(managers, pair.b, subscriptions(model));
        }
        _Platform_enqueueEffects(managers, initPair.b, subscriptions(model));
        return ports ? {
            ports: ports
        } : {};
    }
    // TRACK PRELOADS
    //
    // This is used by code in elm/browser and elm/http
    // to register any HTTP requests that are triggered by init.
    //
    var _Platform_preload;
    function _Platform_registerPreload(url) {
        _Platform_preload.add(url);
    }
    // EFFECT MANAGERS
    var _Platform_effectManagers = {};
    function _Platform_setupEffects(managers, sendToApp) {
        var ports;
        // setup all necessary effect managers
        for(var key in _Platform_effectManagers){
            var manager = _Platform_effectManagers[key];
            if (manager.a) {
                ports = ports || {};
                ports[key] = manager.a(key, sendToApp);
            }
            managers[key] = _Platform_instantiateManager(manager, sendToApp);
        }
        return ports;
    }
    function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap) {
        return {
            b: init,
            c: onEffects,
            d: onSelfMsg,
            e: cmdMap,
            f: subMap
        };
    }
    function _Platform_instantiateManager(info, sendToApp) {
        var router = {
            g: sendToApp,
            h: undefined
        };
        var onEffects = info.c;
        var onSelfMsg = info.d;
        var cmdMap = info.e;
        var subMap = info.f;
        function loop(state) {
            return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg) {
                var value = msg.a;
                if (msg.$ === 0) return A3(onSelfMsg, router, value, state);
                return cmdMap && subMap ? A4(onEffects, router, value.i, value.j, state) : A3(onEffects, router, cmdMap ? value.i : value.j, state);
            }));
        }
        return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
    }
    // ROUTING
    var _Platform_sendToApp = F2(function(router, msg) {
        return _Scheduler_binding(function(callback) {
            router.g(msg);
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    });
    var _Platform_sendToSelf = F2(function(router, msg) {
        return A2(_Scheduler_send, router.h, {
            $: 0,
            a: msg
        });
    });
    // BAGS
    function _Platform_leaf(home) {
        return function(value) {
            return {
                $: 1,
                k: home,
                l: value
            };
        };
    }
    function _Platform_batch(list) {
        return {
            $: 2,
            m: list
        };
    }
    var _Platform_map = F2(function(tagger, bag) {
        return {
            $: 3,
            n: tagger,
            o: bag
        };
    });
    // PIPE BAGS INTO EFFECT MANAGERS
    //
    // Effects must be queued!
    //
    // Say your init contains a synchronous command, like Time.now or Time.here
    //
    //   - This will produce a batch of effects (FX_1)
    //   - The synchronous task triggers the subsequent `update` call
    //   - This will produce a batch of effects (FX_2)
    //
    // If we just start dispatching FX_2, subscriptions from FX_2 can be processed
    // before subscriptions from FX_1. No good! Earlier versions of this code had
    // this problem, leading to these reports:
    //
    //   https://github.com/elm/core/issues/980
    //   https://github.com/elm/core/pull/981
    //   https://github.com/elm/compiler/issues/1776
    //
    // The queue is necessary to avoid ordering issues for synchronous commands.
    // Why use true/false here? Why not just check the length of the queue?
    // The goal is to detect "are we currently dispatching effects?" If we
    // are, we need to bail and let the ongoing while loop handle things.
    //
    // Now say the queue has 1 element. When we dequeue the final element,
    // the queue will be empty, but we are still actively dispatching effects.
    // So you could get queue jumping in a really tricky category of cases.
    //
    var _Platform_effectsQueue = [];
    var _Platform_effectsActive = false;
    function _Platform_enqueueEffects(managers, cmdBag, subBag) {
        _Platform_effectsQueue.push({
            p: managers,
            q: cmdBag,
            r: subBag
        });
        if (_Platform_effectsActive) return;
        _Platform_effectsActive = true;
        for(var fx; fx = _Platform_effectsQueue.shift();)_Platform_dispatchEffects(fx.p, fx.q, fx.r);
        _Platform_effectsActive = false;
    }
    function _Platform_dispatchEffects(managers, cmdBag, subBag) {
        var effectsDict = {};
        _Platform_gatherEffects(true, cmdBag, effectsDict, null);
        _Platform_gatherEffects(false, subBag, effectsDict, null);
        for(var home in managers)_Scheduler_rawSend(managers[home], {
            $: "fx",
            a: effectsDict[home] || {
                i: _List_Nil,
                j: _List_Nil
            }
        });
    }
    function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers) {
        switch(bag.$){
            case 1:
                var home = bag.k;
                var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
                effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
                return;
            case 2:
                for(var list = bag.m; list.b; list = list.b)_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
                return;
            case 3:
                _Platform_gatherEffects(isCmd, bag.o, effectsDict, {
                    s: bag.n,
                    t: taggers
                });
                return;
        }
    }
    function _Platform_toEffect(isCmd, home, taggers, value) {
        function applyTaggers(x) {
            for(var temp = taggers; temp; temp = temp.t)x = temp.s(x);
            return x;
        }
        var map = isCmd ? _Platform_effectManagers[home].e : _Platform_effectManagers[home].f;
        return A2(map, applyTaggers, value);
    }
    function _Platform_insert(isCmd, newEffect, effects) {
        effects = effects || {
            i: _List_Nil,
            j: _List_Nil
        };
        isCmd ? effects.i = _List_Cons(newEffect, effects.i) : effects.j = _List_Cons(newEffect, effects.j);
        return effects;
    }
    // PORTS
    function _Platform_checkPortName(name) {
        if (_Platform_effectManagers[name]) _Debug_crash(3, name);
    }
    // OUTGOING PORTS
    function _Platform_outgoingPort(name, converter) {
        _Platform_checkPortName(name);
        _Platform_effectManagers[name] = {
            e: _Platform_outgoingPortMap,
            u: converter,
            a: _Platform_setupOutgoingPort
        };
        return _Platform_leaf(name);
    }
    var _Platform_outgoingPortMap = F2(function(tagger, value) {
        return value;
    });
    function _Platform_setupOutgoingPort(name) {
        var subs = [];
        var converter = _Platform_effectManagers[name].u;
        // CREATE MANAGER
        var init = _Process_sleep(0);
        _Platform_effectManagers[name].b = init;
        _Platform_effectManagers[name].c = F3(function(router, cmdList, state) {
            for(; cmdList.b; cmdList = cmdList.b){
                // grab a separate reference to subs in case unsubscribe is called
                var currentSubs = subs;
                var value = _Json_unwrap(converter(cmdList.a));
                for(var i = 0; i < currentSubs.length; i++)currentSubs[i](value);
            }
            return init;
        });
        // PUBLIC API
        function subscribe(callback) {
            subs.push(callback);
        }
        function unsubscribe(callback) {
            // copy subs into a new array in case unsubscribe is called within a
            // subscribed callback
            subs = subs.slice();
            var index = subs.indexOf(callback);
            if (index >= 0) subs.splice(index, 1);
        }
        return {
            subscribe: subscribe,
            unsubscribe: unsubscribe
        };
    }
    // INCOMING PORTS
    function _Platform_incomingPort(name, converter) {
        _Platform_checkPortName(name);
        _Platform_effectManagers[name] = {
            f: _Platform_incomingPortMap,
            u: converter,
            a: _Platform_setupIncomingPort
        };
        return _Platform_leaf(name);
    }
    var _Platform_incomingPortMap = F2(function(tagger, finalTagger) {
        return function(value) {
            return tagger(finalTagger(value));
        };
    });
    function _Platform_setupIncomingPort(name, sendToApp) {
        var subs = _List_Nil;
        var converter = _Platform_effectManagers[name].u;
        // CREATE MANAGER
        var init = _Scheduler_succeed(null);
        _Platform_effectManagers[name].b = init;
        _Platform_effectManagers[name].c = F3(function(router, subList, state) {
            subs = subList;
            return init;
        });
        // PUBLIC API
        function send(incomingValue) {
            var result = A2(_Json_run, converter, _Json_wrap(incomingValue));
            $elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);
            var value = result.a;
            for(var temp = subs; temp.b; temp = temp.b)sendToApp(temp.a(value));
        }
        return {
            send: send
        };
    }
    // EXPORT ELM MODULES
    //
    // Have DEBUG and PROD versions so that we can (1) give nicer errors in
    // debug mode and (2) not pay for the bits needed for that in prod mode.
    //
    function _Platform_export_UNUSED(exports) {
        scope["Elm"] ? _Platform_mergeExportsProd(scope["Elm"], exports) : scope["Elm"] = exports;
    }
    function _Platform_mergeExportsProd(obj, exports) {
        for(var name in exports)name in obj ? name == "init" ? _Debug_crash(6) : _Platform_mergeExportsProd(obj[name], exports[name]) : obj[name] = exports[name];
    }
    function _Platform_export(exports) {
        scope["Elm"] ? _Platform_mergeExportsDebug("Elm", scope["Elm"], exports) : scope["Elm"] = exports;
    }
    function _Platform_mergeExportsDebug(moduleName, obj, exports) {
        for(var name in exports)name in obj ? name == "init" ? _Debug_crash(6, moduleName) : _Platform_mergeExportsDebug(moduleName + "." + name, obj[name], exports[name]) : obj[name] = exports[name];
    }
    // HELPERS
    var _VirtualDom_divertHrefToApp;
    var _VirtualDom_doc = typeof document !== "undefined" ? document : {};
    function _VirtualDom_appendChild(parent, child) {
        parent.appendChild(child);
    }
    var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args) {
        // NOTE: this function needs _Platform_export available to work
        /**_UNUSED/
	var node = args['node'];
	//*/ /**/ var node = args && args["node"] ? args["node"] : _Debug_crash(0);
        //*/
        node.parentNode.replaceChild(_VirtualDom_render(virtualNode, function() {}), node);
        return {};
    });
    // TEXT
    function _VirtualDom_text(string) {
        return {
            $: 0,
            a: string
        };
    }
    // NODE
    var _VirtualDom_nodeNS = F2(function(namespace, tag) {
        return F2(function(factList, kidList) {
            for(var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b){
                var kid = kidList.a;
                descendantsCount += kid.b || 0;
                kids.push(kid);
            }
            descendantsCount += kids.length;
            return {
                $: 1,
                c: tag,
                d: _VirtualDom_organizeFacts(factList),
                e: kids,
                f: namespace,
                b: descendantsCount
            };
        });
    });
    var _VirtualDom_node = _VirtualDom_nodeNS(undefined);
    // KEYED NODE
    var _VirtualDom_keyedNodeNS = F2(function(namespace, tag) {
        return F2(function(factList, kidList) {
            for(var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b){
                var kid = kidList.a;
                descendantsCount += kid.b.b || 0;
                kids.push(kid);
            }
            descendantsCount += kids.length;
            return {
                $: 2,
                c: tag,
                d: _VirtualDom_organizeFacts(factList),
                e: kids,
                f: namespace,
                b: descendantsCount
            };
        });
    });
    var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);
    // CUSTOM
    function _VirtualDom_custom(factList, model, render, diff) {
        return {
            $: 3,
            d: _VirtualDom_organizeFacts(factList),
            g: model,
            h: render,
            i: diff
        };
    }
    // MAP
    var _VirtualDom_map = F2(function(tagger, node) {
        return {
            $: 4,
            j: tagger,
            k: node,
            b: 1 + (node.b || 0)
        };
    });
    // LAZY
    function _VirtualDom_thunk(refs, thunk) {
        return {
            $: 5,
            l: refs,
            m: thunk,
            k: undefined
        };
    }
    var _VirtualDom_lazy = F2(function(func, a) {
        return _VirtualDom_thunk([
            func,
            a
        ], function() {
            return func(a);
        });
    });
    var _VirtualDom_lazy2 = F3(function(func, a, b) {
        return _VirtualDom_thunk([
            func,
            a,
            b
        ], function() {
            return A2(func, a, b);
        });
    });
    var _VirtualDom_lazy3 = F4(function(func, a, b, c) {
        return _VirtualDom_thunk([
            func,
            a,
            b,
            c
        ], function() {
            return A3(func, a, b, c);
        });
    });
    var _VirtualDom_lazy4 = F5(function(func, a, b, c, d) {
        return _VirtualDom_thunk([
            func,
            a,
            b,
            c,
            d
        ], function() {
            return A4(func, a, b, c, d);
        });
    });
    var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e) {
        return _VirtualDom_thunk([
            func,
            a,
            b,
            c,
            d,
            e
        ], function() {
            return A5(func, a, b, c, d, e);
        });
    });
    var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f) {
        return _VirtualDom_thunk([
            func,
            a,
            b,
            c,
            d,
            e,
            f
        ], function() {
            return A6(func, a, b, c, d, e, f);
        });
    });
    var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g) {
        return _VirtualDom_thunk([
            func,
            a,
            b,
            c,
            d,
            e,
            f,
            g
        ], function() {
            return A7(func, a, b, c, d, e, f, g);
        });
    });
    var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h) {
        return _VirtualDom_thunk([
            func,
            a,
            b,
            c,
            d,
            e,
            f,
            g,
            h
        ], function() {
            return A8(func, a, b, c, d, e, f, g, h);
        });
    });
    // FACTS
    var _VirtualDom_on = F2(function(key, handler) {
        return {
            $: "a0",
            n: key,
            o: handler
        };
    });
    var _VirtualDom_style = F2(function(key, value) {
        return {
            $: "a1",
            n: key,
            o: value
        };
    });
    var _VirtualDom_property = F2(function(key, value) {
        return {
            $: "a2",
            n: key,
            o: value
        };
    });
    var _VirtualDom_attribute = F2(function(key, value) {
        return {
            $: "a3",
            n: key,
            o: value
        };
    });
    var _VirtualDom_attributeNS = F3(function(namespace, key, value) {
        return {
            $: "a4",
            n: key,
            o: {
                f: namespace,
                o: value
            }
        };
    });
    // XSS ATTACK VECTOR CHECKS
    //
    // For some reason, tabs can appear in href protocols and it still works.
    // So '\tjava\tSCRIPT:alert("!!!")' and 'javascript:alert("!!!")' are the same
    // in practice. That is why _VirtualDom_RE_js and _VirtualDom_RE_js_html look
    // so freaky.
    //
    // Pulling the regular expressions out to the top level gives a slight speed
    // boost in small benchmarks (4-10%) but hoisting values to reduce allocation
    // can be unpredictable in large programs where JIT may have a harder time with
    // functions are not fully self-contained. The benefit is more that the js and
    // js_html ones are so weird that I prefer to see them near each other.
    var _VirtualDom_RE_script = /^script$/i;
    var _VirtualDom_RE_on_formAction = /^(on|formAction$)/i;
    var _VirtualDom_RE_js = /^\s*j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:/i;
    var _VirtualDom_RE_js_html = /^\s*(j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:|d\s*a\s*t\s*a\s*:\s*t\s*e\s*x\s*t\s*\/\s*h\s*t\s*m\s*l\s*(,|;))/i;
    function _VirtualDom_noScript(tag) {
        return _VirtualDom_RE_script.test(tag) ? "p" : tag;
    }
    function _VirtualDom_noOnOrFormAction(key) {
        return _VirtualDom_RE_on_formAction.test(key) ? "data-" + key : key;
    }
    function _VirtualDom_noInnerHtmlOrFormAction(key) {
        return key == "innerHTML" || key == "formAction" ? "data-" + key : key;
    }
    function _VirtualDom_noJavaScriptUri(value) {
        return _VirtualDom_RE_js.test(value) ? /**_UNUSED/''//*/ /**/ 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")' //*/
         : value;
    }
    function _VirtualDom_noJavaScriptOrHtmlUri(value) {
        return _VirtualDom_RE_js_html.test(value) ? /**_UNUSED/''//*/ /**/ 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")' //*/
         : value;
    }
    function _VirtualDom_noJavaScriptOrHtmlJson(value) {
        return typeof _Json_unwrap(value) === "string" && _VirtualDom_RE_js_html.test(_Json_unwrap(value)) ? _Json_wrap(/**_UNUSED/''//*/ /**/ 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")' //*/
        ) : value;
    }
    // MAP FACTS
    var _VirtualDom_mapAttribute = F2(function(func, attr) {
        return attr.$ === "a0" ? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o)) : attr;
    });
    function _VirtualDom_mapHandler(func, handler) {
        var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);
        // 0 = Normal
        // 1 = MayStopPropagation
        // 2 = MayPreventDefault
        // 3 = Custom
        return {
            $: handler.$,
            a: !tag ? A2($elm$json$Json$Decode$map, func, handler.a) : A3($elm$json$Json$Decode$map2, tag < 3 ? _VirtualDom_mapEventTuple : _VirtualDom_mapEventRecord, $elm$json$Json$Decode$succeed(func), handler.a)
        };
    }
    var _VirtualDom_mapEventTuple = F2(function(func, tuple) {
        return _Utils_Tuple2(func(tuple.a), tuple.b);
    });
    var _VirtualDom_mapEventRecord = F2(function(func, record) {
        return {
            message: func(record.message),
            stopPropagation: record.stopPropagation,
            preventDefault: record.preventDefault
        };
    });
    // ORGANIZE FACTS
    function _VirtualDom_organizeFacts(factList) {
        for(var facts = {}; factList.b; factList = factList.b){
            var entry = factList.a;
            var tag = entry.$;
            var key = entry.n;
            var value = entry.o;
            if (tag === "a2") {
                key === "className" ? _VirtualDom_addClass(facts, key, _Json_unwrap(value)) : facts[key] = _Json_unwrap(value);
                continue;
            }
            var subFacts = facts[tag] || (facts[tag] = {});
            tag === "a3" && key === "class" ? _VirtualDom_addClass(subFacts, key, value) : subFacts[key] = value;
        }
        return facts;
    }
    function _VirtualDom_addClass(object, key, newClass) {
        var classes = object[key];
        object[key] = classes ? classes + " " + newClass : newClass;
    }
    // RENDER
    function _VirtualDom_render(vNode, eventNode) {
        var tag = vNode.$;
        if (tag === 5) return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
        if (tag === 0) return _VirtualDom_doc.createTextNode(vNode.a);
        if (tag === 4) {
            var subNode = vNode.k;
            var tagger = vNode.j;
            while(subNode.$ === 4){
                typeof tagger !== "object" ? tagger = [
                    tagger,
                    subNode.j
                ] : tagger.push(subNode.j);
                subNode = subNode.k;
            }
            var subEventRoot = {
                j: tagger,
                p: eventNode
            };
            var domNode = _VirtualDom_render(subNode, subEventRoot);
            domNode.elm_event_node_ref = subEventRoot;
            return domNode;
        }
        if (tag === 3) {
            var domNode = vNode.h(vNode.g);
            _VirtualDom_applyFacts(domNode, eventNode, vNode.d);
            return domNode;
        }
        // at this point `tag` must be 1 or 2
        var domNode = vNode.f ? _VirtualDom_doc.createElementNS(vNode.f, vNode.c) : _VirtualDom_doc.createElement(vNode.c);
        if (_VirtualDom_divertHrefToApp && vNode.c == "a") domNode.addEventListener("click", _VirtualDom_divertHrefToApp(domNode));
        _VirtualDom_applyFacts(domNode, eventNode, vNode.d);
        for(var kids = vNode.e, i = 0; i < kids.length; i++)_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
        return domNode;
    }
    // APPLY FACTS
    function _VirtualDom_applyFacts(domNode, eventNode, facts) {
        for(var key in facts){
            var value = facts[key];
            key === "a1" ? _VirtualDom_applyStyles(domNode, value) : key === "a0" ? _VirtualDom_applyEvents(domNode, eventNode, value) : key === "a3" ? _VirtualDom_applyAttrs(domNode, value) : key === "a4" ? _VirtualDom_applyAttrsNS(domNode, value) : (key !== "value" && key !== "checked" || domNode[key] !== value) && (domNode[key] = value);
        }
    }
    // APPLY STYLES
    function _VirtualDom_applyStyles(domNode, styles) {
        var domNodeStyle = domNode.style;
        for(var key in styles)domNodeStyle[key] = styles[key];
    }
    // APPLY ATTRS
    function _VirtualDom_applyAttrs(domNode, attrs) {
        for(var key in attrs){
            var value = attrs[key];
            typeof value !== "undefined" ? domNode.setAttribute(key, value) : domNode.removeAttribute(key);
        }
    }
    // APPLY NAMESPACED ATTRS
    function _VirtualDom_applyAttrsNS(domNode, nsAttrs) {
        for(var key in nsAttrs){
            var pair = nsAttrs[key];
            var namespace = pair.f;
            var value = pair.o;
            typeof value !== "undefined" ? domNode.setAttributeNS(namespace, key, value) : domNode.removeAttributeNS(namespace, key);
        }
    }
    // APPLY EVENTS
    function _VirtualDom_applyEvents(domNode, eventNode, events) {
        var allCallbacks = domNode.elmFs || (domNode.elmFs = {});
        for(var key in events){
            var newHandler = events[key];
            var oldCallback = allCallbacks[key];
            if (!newHandler) {
                domNode.removeEventListener(key, oldCallback);
                allCallbacks[key] = undefined;
                continue;
            }
            if (oldCallback) {
                var oldHandler = oldCallback.q;
                if (oldHandler.$ === newHandler.$) {
                    oldCallback.q = newHandler;
                    continue;
                }
                domNode.removeEventListener(key, oldCallback);
            }
            oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
            domNode.addEventListener(key, oldCallback, _VirtualDom_passiveSupported && {
                passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2
            });
            allCallbacks[key] = oldCallback;
        }
    }
    // PASSIVE EVENTS
    var _VirtualDom_passiveSupported;
    try {
        window.addEventListener("t", null, Object.defineProperty({}, "passive", {
            get: function() {
                _VirtualDom_passiveSupported = true;
            }
        }));
    } catch (e) {}
    // EVENT HANDLERS
    function _VirtualDom_makeCallback(eventNode, initialHandler) {
        function callback(event) {
            var handler = callback.q;
            var result = _Json_runHelp(handler.a, event);
            if (!$elm$core$Result$isOk(result)) return;
            var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);
            // 0 = Normal
            // 1 = MayStopPropagation
            // 2 = MayPreventDefault
            // 3 = Custom
            var value = result.a;
            var message = !tag ? value : tag < 3 ? value.a : value.message;
            var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
            var currentEventNode = (stopPropagation && event.stopPropagation(), (tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(), eventNode);
            var tagger;
            var i;
            while(tagger = currentEventNode.j){
                if (typeof tagger == "function") message = tagger(message);
                else for(var i = tagger.length; i--;)message = tagger[i](message);
                currentEventNode = currentEventNode.p;
            }
            currentEventNode(message, stopPropagation); // stopPropagation implies isSync
        }
        callback.q = initialHandler;
        return callback;
    }
    function _VirtualDom_equalEvents(x, y) {
        return x.$ == y.$ && _Json_equality(x.a, y.a);
    }
    // DIFF
    // TODO: Should we do patches like in iOS?
    //
    // type Patch
    //   = At Int Patch
    //   | Batch (List Patch)
    //   | Change ...
    //
    // How could it not be better?
    //
    function _VirtualDom_diff(x, y) {
        var patches = [];
        _VirtualDom_diffHelp(x, y, patches, 0);
        return patches;
    }
    function _VirtualDom_pushPatch(patches, type, index, data) {
        var patch = {
            $: type,
            r: index,
            s: data,
            t: undefined,
            u: undefined
        };
        patches.push(patch);
        return patch;
    }
    function _VirtualDom_diffHelp(x, y, patches, index) {
        if (x === y) return;
        var xType = x.$;
        var yType = y.$;
        // Bail if you run into different types of nodes. Implies that the
        // structure has changed significantly and it's not worth a diff.
        if (xType !== yType) {
            if (xType === 1 && yType === 2) {
                y = _VirtualDom_dekey(y);
                yType = 1;
            } else {
                _VirtualDom_pushPatch(patches, 0, index, y);
                return;
            }
        }
        // Now we know that both nodes are the same $.
        switch(yType){
            case 5:
                var xRefs = x.l;
                var yRefs = y.l;
                var i = xRefs.length;
                var same = i === yRefs.length;
                while(same && i--)same = xRefs[i] === yRefs[i];
                if (same) {
                    y.k = x.k;
                    return;
                }
                y.k = y.m();
                var subPatches = [];
                _VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
                subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
                return;
            case 4:
                // gather nested taggers
                var xTaggers = x.j;
                var yTaggers = y.j;
                var nesting = false;
                var xSubNode = x.k;
                while(xSubNode.$ === 4){
                    nesting = true;
                    typeof xTaggers !== "object" ? xTaggers = [
                        xTaggers,
                        xSubNode.j
                    ] : xTaggers.push(xSubNode.j);
                    xSubNode = xSubNode.k;
                }
                var ySubNode = y.k;
                while(ySubNode.$ === 4){
                    nesting = true;
                    typeof yTaggers !== "object" ? yTaggers = [
                        yTaggers,
                        ySubNode.j
                    ] : yTaggers.push(ySubNode.j);
                    ySubNode = ySubNode.k;
                }
                // Just bail if different numbers of taggers. This implies the
                // structure of the virtual DOM has changed.
                if (nesting && xTaggers.length !== yTaggers.length) {
                    _VirtualDom_pushPatch(patches, 0, index, y);
                    return;
                }
                // check if taggers are "the same"
                if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers) _VirtualDom_pushPatch(patches, 2, index, yTaggers);
                // diff everything below the taggers
                _VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
                return;
            case 0:
                if (x.a !== y.a) _VirtualDom_pushPatch(patches, 3, index, y.a);
                return;
            case 1:
                _VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
                return;
            case 2:
                _VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
                return;
            case 3:
                if (x.h !== y.h) {
                    _VirtualDom_pushPatch(patches, 0, index, y);
                    return;
                }
                var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
                factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);
                var patch = y.i(x.g, y.g);
                patch && _VirtualDom_pushPatch(patches, 5, index, patch);
                return;
        }
    }
    // assumes the incoming arrays are the same length
    function _VirtualDom_pairwiseRefEqual(as, bs) {
        for(var i = 0; i < as.length; i++){
            if (as[i] !== bs[i]) return false;
        }
        return true;
    }
    function _VirtualDom_diffNodes(x, y, patches, index, diffKids) {
        // Bail if obvious indicators have changed. Implies more serious
        // structural changes such that it's not worth it to diff.
        if (x.c !== y.c || x.f !== y.f) {
            _VirtualDom_pushPatch(patches, 0, index, y);
            return;
        }
        var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
        factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);
        diffKids(x, y, patches, index);
    }
    // DIFF FACTS
    // TODO Instead of creating a new diff object, it's possible to just test if
    // there *is* a diff. During the actual patch, do the diff again and make the
    // modifications directly. This way, there's no new allocations. Worth it?
    function _VirtualDom_diffFacts(x, y, category) {
        var diff;
        // look for changes and removals
        for(var xKey in x){
            if (xKey === "a1" || xKey === "a0" || xKey === "a3" || xKey === "a4") {
                var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
                if (subDiff) {
                    diff = diff || {};
                    diff[xKey] = subDiff;
                }
                continue;
            }
            // remove if not in the new facts
            if (!(xKey in y)) {
                diff = diff || {};
                diff[xKey] = !category ? typeof x[xKey] === "string" ? "" : null : category === "a1" ? "" : category === "a0" || category === "a3" ? undefined : {
                    f: x[xKey].f,
                    o: undefined
                };
                continue;
            }
            var xValue = x[xKey];
            var yValue = y[xKey];
            // reference equal, so don't worry about it
            if (xValue === yValue && xKey !== "value" && xKey !== "checked" || category === "a0" && _VirtualDom_equalEvents(xValue, yValue)) continue;
            diff = diff || {};
            diff[xKey] = yValue;
        }
        // add new stuff
        for(var yKey in y)if (!(yKey in x)) {
            diff = diff || {};
            diff[yKey] = y[yKey];
        }
        return diff;
    }
    // DIFF KIDS
    function _VirtualDom_diffKids(xParent, yParent, patches, index) {
        var xKids = xParent.e;
        var yKids = yParent.e;
        var xLen = xKids.length;
        var yLen = yKids.length;
        // FIGURE OUT IF THERE ARE INSERTS OR REMOVALS
        if (xLen > yLen) _VirtualDom_pushPatch(patches, 6, index, {
            v: yLen,
            i: xLen - yLen
        });
        else if (xLen < yLen) _VirtualDom_pushPatch(patches, 7, index, {
            v: xLen,
            e: yKids
        });
        // PAIRWISE DIFF EVERYTHING ELSE
        for(var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++){
            var xKid = xKids[i];
            _VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
            index += xKid.b || 0;
        }
    }
    // KEYED DIFF
    function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex) {
        var localPatches = [];
        var changes = {}; // Dict String Entry
        var inserts = []; // Array { index : Int, entry : Entry }
        // type Entry = { tag : String, vnode : VNode, index : Int, data : _ }
        var xKids = xParent.e;
        var yKids = yParent.e;
        var xLen = xKids.length;
        var yLen = yKids.length;
        var xIndex = 0;
        var yIndex = 0;
        var index = rootIndex;
        while(xIndex < xLen && yIndex < yLen){
            var x = xKids[xIndex];
            var y = yKids[yIndex];
            var xKey = x.a;
            var yKey = y.a;
            var xNode = x.b;
            var yNode = y.b;
            var newMatch = undefined;
            var oldMatch = undefined;
            // check if keys match
            if (xKey === yKey) {
                index++;
                _VirtualDom_diffHelp(xNode, yNode, localPatches, index);
                index += xNode.b || 0;
                xIndex++;
                yIndex++;
                continue;
            }
            // look ahead 1 to detect insertions and removals.
            var xNext = xKids[xIndex + 1];
            var yNext = yKids[yIndex + 1];
            if (xNext) {
                var xNextKey = xNext.a;
                var xNextNode = xNext.b;
                oldMatch = yKey === xNextKey;
            }
            if (yNext) {
                var yNextKey = yNext.a;
                var yNextNode = yNext.b;
                newMatch = xKey === yNextKey;
            }
            // swap x and y
            if (newMatch && oldMatch) {
                index++;
                _VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
                _VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
                index += xNode.b || 0;
                index++;
                _VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
                index += xNextNode.b || 0;
                xIndex += 2;
                yIndex += 2;
                continue;
            }
            // insert y
            if (newMatch) {
                index++;
                _VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
                _VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
                index += xNode.b || 0;
                xIndex += 1;
                yIndex += 2;
                continue;
            }
            // remove x
            if (oldMatch) {
                index++;
                _VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
                index += xNode.b || 0;
                index++;
                _VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
                index += xNextNode.b || 0;
                xIndex += 2;
                yIndex += 1;
                continue;
            }
            // remove x, insert y
            if (xNext && xNextKey === yNextKey) {
                index++;
                _VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
                _VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
                index += xNode.b || 0;
                index++;
                _VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
                index += xNextNode.b || 0;
                xIndex += 2;
                yIndex += 2;
                continue;
            }
            break;
        }
        // eat up any remaining nodes with removeNode and insertNode
        while(xIndex < xLen){
            index++;
            var x = xKids[xIndex];
            var xNode = x.b;
            _VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
            index += xNode.b || 0;
            xIndex++;
        }
        while(yIndex < yLen){
            var endInserts = endInserts || [];
            var y = yKids[yIndex];
            _VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
            yIndex++;
        }
        if (localPatches.length > 0 || inserts.length > 0 || endInserts) _VirtualDom_pushPatch(patches, 8, rootIndex, {
            w: localPatches,
            x: inserts,
            y: endInserts
        });
    }
    // CHANGES FROM KEYED DIFF
    var _VirtualDom_POSTFIX = "_elmW6BL";
    function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts) {
        var entry = changes[key];
        // never seen this key before
        if (!entry) {
            entry = {
                c: 0,
                z: vnode,
                r: yIndex,
                s: undefined
            };
            inserts.push({
                r: yIndex,
                A: entry
            });
            changes[key] = entry;
            return;
        }
        // this key was removed earlier, a match!
        if (entry.c === 1) {
            inserts.push({
                r: yIndex,
                A: entry
            });
            entry.c = 2;
            var subPatches = [];
            _VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
            entry.r = yIndex;
            entry.s.s = {
                w: subPatches,
                A: entry
            };
            return;
        }
        // this key has already been inserted or moved, a duplicate!
        _VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
    }
    function _VirtualDom_removeNode(changes, localPatches, key, vnode, index) {
        var entry = changes[key];
        // never seen this key before
        if (!entry) {
            var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);
            changes[key] = {
                c: 1,
                z: vnode,
                r: index,
                s: patch
            };
            return;
        }
        // this key was inserted earlier, a match!
        if (entry.c === 0) {
            entry.c = 2;
            var subPatches = [];
            _VirtualDom_diffHelp(vnode, entry.z, subPatches, index);
            _VirtualDom_pushPatch(localPatches, 9, index, {
                w: subPatches,
                A: entry
            });
            return;
        }
        // this key has already been removed or moved, a duplicate!
        _VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
    }
    // ADD DOM NODES
    //
    // Each DOM node has an "index" assigned in order of traversal. It is important
    // to minimize our crawl over the actual DOM, so these indexes (along with the
    // descendantsCount of virtual nodes) let us skip touching entire subtrees of
    // the DOM if we know there are no patches there.
    function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode) {
        _VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
    }
    // assumes `patches` is non-empty and indexes increase monotonically.
    function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode) {
        var patch = patches[i];
        var index = patch.r;
        while(index === low){
            var patchType = patch.$;
            if (patchType === 1) _VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
            else if (patchType === 8) {
                patch.t = domNode;
                patch.u = eventNode;
                var subPatches = patch.s.w;
                if (subPatches.length > 0) _VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
            } else if (patchType === 9) {
                patch.t = domNode;
                patch.u = eventNode;
                var data = patch.s;
                if (data) {
                    data.A.s = domNode;
                    var subPatches = data.w;
                    if (subPatches.length > 0) _VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
                }
            } else {
                patch.t = domNode;
                patch.u = eventNode;
            }
            i++;
            if (!(patch = patches[i]) || (index = patch.r) > high) return i;
        }
        var tag = vNode.$;
        if (tag === 4) {
            var subNode = vNode.k;
            while(subNode.$ === 4)subNode = subNode.k;
            return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
        }
        // tag must be 1 or 2 at this point
        var vKids = vNode.e;
        var childNodes = domNode.childNodes;
        for(var j = 0; j < vKids.length; j++){
            low++;
            var vKid = tag === 1 ? vKids[j] : vKids[j].b;
            var nextLow = low + (vKid.b || 0);
            if (low <= index && index <= nextLow) {
                i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
                if (!(patch = patches[i]) || (index = patch.r) > high) return i;
            }
            low = nextLow;
        }
        return i;
    }
    // APPLY PATCHES
    function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode) {
        if (patches.length === 0) return rootDomNode;
        _VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
        return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
    }
    function _VirtualDom_applyPatchesHelp(rootDomNode, patches) {
        for(var i = 0; i < patches.length; i++){
            var patch = patches[i];
            var localDomNode = patch.t;
            var newNode = _VirtualDom_applyPatch(localDomNode, patch);
            if (localDomNode === rootDomNode) rootDomNode = newNode;
        }
        return rootDomNode;
    }
    function _VirtualDom_applyPatch(domNode, patch) {
        switch(patch.$){
            case 0:
                return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);
            case 4:
                _VirtualDom_applyFacts(domNode, patch.u, patch.s);
                return domNode;
            case 3:
                domNode.replaceData(0, domNode.length, patch.s);
                return domNode;
            case 1:
                return _VirtualDom_applyPatchesHelp(domNode, patch.s);
            case 2:
                if (domNode.elm_event_node_ref) domNode.elm_event_node_ref.j = patch.s;
                else domNode.elm_event_node_ref = {
                    j: patch.s,
                    p: patch.u
                };
                return domNode;
            case 6:
                var data = patch.s;
                for(var i = 0; i < data.i; i++)domNode.removeChild(domNode.childNodes[data.v]);
                return domNode;
            case 7:
                var data = patch.s;
                var kids = data.e;
                var i = data.v;
                var theEnd = domNode.childNodes[i];
                for(; i < kids.length; i++)domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
                return domNode;
            case 9:
                var data = patch.s;
                if (!data) {
                    domNode.parentNode.removeChild(domNode);
                    return domNode;
                }
                var entry = data.A;
                if (typeof entry.r !== "undefined") domNode.parentNode.removeChild(domNode);
                entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
                return domNode;
            case 8:
                return _VirtualDom_applyPatchReorder(domNode, patch);
            case 5:
                return patch.s(domNode);
            default:
                _Debug_crash(10); // 'Ran into an unknown patch!'
        }
    }
    function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode) {
        var parentNode = domNode.parentNode;
        var newNode = _VirtualDom_render(vNode, eventNode);
        if (!newNode.elm_event_node_ref) newNode.elm_event_node_ref = domNode.elm_event_node_ref;
        if (parentNode && newNode !== domNode) parentNode.replaceChild(newNode, domNode);
        return newNode;
    }
    function _VirtualDom_applyPatchReorder(domNode, patch) {
        var data = patch.s;
        // remove end inserts
        var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);
        // removals
        domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);
        // inserts
        var inserts = data.x;
        for(var i = 0; i < inserts.length; i++){
            var insert = inserts[i];
            var entry = insert.A;
            var node = entry.c === 2 ? entry.s : _VirtualDom_render(entry.z, patch.u);
            domNode.insertBefore(node, domNode.childNodes[insert.r]);
        }
        // add end inserts
        if (frag) _VirtualDom_appendChild(domNode, frag);
        return domNode;
    }
    function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch) {
        if (!endInserts) return;
        var frag = _VirtualDom_doc.createDocumentFragment();
        for(var i = 0; i < endInserts.length; i++){
            var insert = endInserts[i];
            var entry = insert.A;
            _VirtualDom_appendChild(frag, entry.c === 2 ? entry.s : _VirtualDom_render(entry.z, patch.u));
        }
        return frag;
    }
    function _VirtualDom_virtualize(node) {
        // TEXT NODES
        if (node.nodeType === 3) return _VirtualDom_text(node.textContent);
        // WEIRD NODES
        if (node.nodeType !== 1) return _VirtualDom_text("");
        // ELEMENT NODES
        var attrList = _List_Nil;
        var attrs = node.attributes;
        for(var i = attrs.length; i--;){
            var attr = attrs[i];
            var name = attr.name;
            var value = attr.value;
            attrList = _List_Cons(A2(_VirtualDom_attribute, name, value), attrList);
        }
        var tag = node.tagName.toLowerCase();
        var kidList = _List_Nil;
        var kids = node.childNodes;
        for(var i = kids.length; i--;)kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
        return A3(_VirtualDom_node, tag, attrList, kidList);
    }
    function _VirtualDom_dekey(keyedNode) {
        var keyedKids = keyedNode.e;
        var len = keyedKids.length;
        var kids = new Array(len);
        for(var i = 0; i < len; i++)kids[i] = keyedKids[i].b;
        return {
            $: 1,
            c: keyedNode.c,
            d: keyedNode.d,
            e: kids,
            f: keyedNode.f,
            b: keyedNode.b
        };
    }
    var _Bitwise_and = F2(function(a, b) {
        return a & b;
    });
    var _Bitwise_or = F2(function(a, b) {
        return a | b;
    });
    var _Bitwise_xor = F2(function(a, b) {
        return a ^ b;
    });
    function _Bitwise_complement(a) {
        return ~a;
    }
    var _Bitwise_shiftLeftBy = F2(function(offset, a) {
        return a << offset;
    });
    var _Bitwise_shiftRightBy = F2(function(offset, a) {
        return a >> offset;
    });
    var _Bitwise_shiftRightZfBy = F2(function(offset, a) {
        return a >>> offset;
    });
    // HELPERS
    function _Debugger_unsafeCoerce(value) {
        return value;
    }
    // PROGRAMS
    var _Debugger_element = F4(function(impl, flagDecoder, debugMetadata, args) {
        return _Platform_initialize(flagDecoder, args, A3($elm$browser$Debugger$Main$wrapInit, _Json_wrap(debugMetadata), _Debugger_popout(), impl.init), $elm$browser$Debugger$Main$wrapUpdate(impl.update), $elm$browser$Debugger$Main$wrapSubs(impl.subscriptions), function(sendToApp, initialModel) {
            var view = impl.view;
            var title = _VirtualDom_doc.title;
            var domNode = args && args["node"] ? args["node"] : _Debug_crash(0);
            var currNode = _VirtualDom_virtualize(domNode);
            var currBlocker = $elm$browser$Debugger$Main$toBlockerType(initialModel);
            var currPopout;
            var cornerNode = _VirtualDom_doc.createElement("div");
            domNode.parentNode.insertBefore(cornerNode, domNode.nextSibling);
            var cornerCurr = _VirtualDom_virtualize(cornerNode);
            initialModel.popout.a = sendToApp;
            return _Browser_makeAnimator(initialModel, function(model) {
                var nextNode = A2(_VirtualDom_map, $elm$browser$Debugger$Main$UserMsg, view($elm$browser$Debugger$Main$getUserModel(model)));
                var patches = _VirtualDom_diff(currNode, nextNode);
                domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
                currNode = nextNode;
                // update blocker
                var nextBlocker = $elm$browser$Debugger$Main$toBlockerType(model);
                _Debugger_updateBlocker(currBlocker, nextBlocker);
                currBlocker = nextBlocker;
                // view corner
                var cornerNext = $elm$browser$Debugger$Main$cornerView(model);
                var cornerPatches = _VirtualDom_diff(cornerCurr, cornerNext);
                cornerNode = _VirtualDom_applyPatches(cornerNode, cornerCurr, cornerPatches, sendToApp);
                cornerCurr = cornerNext;
                if (!model.popout.b) {
                    currPopout = undefined;
                    return;
                }
                // view popout
                _VirtualDom_doc = model.popout.b; // SWITCH TO POPOUT DOC
                currPopout || (currPopout = _VirtualDom_virtualize(model.popout.b));
                var nextPopout = $elm$browser$Debugger$Main$popoutView(model);
                var popoutPatches = _VirtualDom_diff(currPopout, nextPopout);
                _VirtualDom_applyPatches(model.popout.b.body, currPopout, popoutPatches, sendToApp);
                currPopout = nextPopout;
                _VirtualDom_doc = document; // SWITCH BACK TO NORMAL DOC
            });
        });
    });
    var _Debugger_document = F4(function(impl, flagDecoder, debugMetadata, args) {
        return _Platform_initialize(flagDecoder, args, A3($elm$browser$Debugger$Main$wrapInit, _Json_wrap(debugMetadata), _Debugger_popout(), impl.init), $elm$browser$Debugger$Main$wrapUpdate(impl.update), $elm$browser$Debugger$Main$wrapSubs(impl.subscriptions), function(sendToApp, initialModel) {
            var divertHrefToApp = impl.setup && impl.setup(function(x) {
                return sendToApp($elm$browser$Debugger$Main$UserMsg(x));
            });
            var view = impl.view;
            var title = _VirtualDom_doc.title;
            var bodyNode = _VirtualDom_doc.body;
            var currNode = _VirtualDom_virtualize(bodyNode);
            var currBlocker = $elm$browser$Debugger$Main$toBlockerType(initialModel);
            var currPopout;
            initialModel.popout.a = sendToApp;
            return _Browser_makeAnimator(initialModel, function(model) {
                _VirtualDom_divertHrefToApp = divertHrefToApp;
                var doc = view($elm$browser$Debugger$Main$getUserModel(model));
                var nextNode = _VirtualDom_node("body")(_List_Nil)(_Utils_ap(A2($elm$core$List$map, _VirtualDom_map($elm$browser$Debugger$Main$UserMsg), doc.body), _List_Cons($elm$browser$Debugger$Main$cornerView(model), _List_Nil)));
                var patches = _VirtualDom_diff(currNode, nextNode);
                bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
                currNode = nextNode;
                _VirtualDom_divertHrefToApp = 0;
                title !== doc.title && (_VirtualDom_doc.title = title = doc.title);
                // update blocker
                var nextBlocker = $elm$browser$Debugger$Main$toBlockerType(model);
                _Debugger_updateBlocker(currBlocker, nextBlocker);
                currBlocker = nextBlocker;
                // view popout
                if (!model.popout.b) {
                    currPopout = undefined;
                    return;
                }
                _VirtualDom_doc = model.popout.b; // SWITCH TO POPOUT DOC
                currPopout || (currPopout = _VirtualDom_virtualize(model.popout.b));
                var nextPopout = $elm$browser$Debugger$Main$popoutView(model);
                var popoutPatches = _VirtualDom_diff(currPopout, nextPopout);
                _VirtualDom_applyPatches(model.popout.b.body, currPopout, popoutPatches, sendToApp);
                currPopout = nextPopout;
                _VirtualDom_doc = document; // SWITCH BACK TO NORMAL DOC
            });
        });
    });
    function _Debugger_popout() {
        return {
            b: undefined,
            a: undefined
        };
    }
    function _Debugger_isOpen(popout) {
        return !!popout.b;
    }
    function _Debugger_open(popout) {
        return _Scheduler_binding(function(callback) {
            _Debugger_openWindow(popout);
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    }
    function _Debugger_openWindow(popout) {
        var w = $elm$browser$Debugger$Main$initialWindowWidth, h = $elm$browser$Debugger$Main$initialWindowHeight, x = screen.width - w, y = screen.height - h;
        var debuggerWindow = window.open("", "", "width=" + w + ",height=" + h + ",left=" + x + ",top=" + y);
        var doc = debuggerWindow.document;
        doc.title = "Elm Debugger";
        // handle arrow keys
        doc.addEventListener("keydown", function(event) {
            event.metaKey && event.which === 82 && window.location.reload();
            event.key === "ArrowUp" && (popout.a($elm$browser$Debugger$Main$Up), event.preventDefault());
            event.key === "ArrowDown" && (popout.a($elm$browser$Debugger$Main$Down), event.preventDefault());
        });
        // handle window close
        window.addEventListener("unload", close);
        debuggerWindow.addEventListener("unload", function() {
            popout.b = undefined;
            popout.a($elm$browser$Debugger$Main$NoOp);
            window.removeEventListener("unload", close);
        });
        function close() {
            popout.b = undefined;
            popout.a($elm$browser$Debugger$Main$NoOp);
            debuggerWindow.close();
        }
        // register new window
        popout.b = doc;
    }
    // SCROLL
    function _Debugger_scroll(popout) {
        return _Scheduler_binding(function(callback) {
            if (popout.b) {
                var msgs = popout.b.getElementById("elm-debugger-sidebar");
                if (msgs && msgs.scrollTop !== 0) msgs.scrollTop = 0;
            }
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    }
    var _Debugger_scrollTo = F2(function(id, popout) {
        return _Scheduler_binding(function(callback) {
            if (popout.b) {
                var msg = popout.b.getElementById(id);
                if (msg) msg.scrollIntoView(false);
            }
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    });
    // UPLOAD
    function _Debugger_upload(popout) {
        return _Scheduler_binding(function(callback) {
            var doc = popout.b || document;
            var element = doc.createElement("input");
            element.setAttribute("type", "file");
            element.setAttribute("accept", "text/json");
            element.style.display = "none";
            element.addEventListener("change", function(event) {
                var fileReader = new FileReader();
                fileReader.onload = function(e) {
                    callback(_Scheduler_succeed(e.target.result));
                };
                fileReader.readAsText(event.target.files[0]);
                doc.body.removeChild(element);
            });
            doc.body.appendChild(element);
            element.click();
        });
    }
    // DOWNLOAD
    var _Debugger_download = F2(function(historyLength, json) {
        return _Scheduler_binding(function(callback) {
            var fileName = "history-" + historyLength + ".txt";
            var jsonString = JSON.stringify(json);
            var mime = "text/plain;charset=utf-8";
            var done = _Scheduler_succeed(_Utils_Tuple0);
            // for IE10+
            if (navigator.msSaveBlob) {
                navigator.msSaveBlob(new Blob([
                    jsonString
                ], {
                    type: mime
                }), fileName);
                return callback(done);
            }
            // for HTML5
            var element = document.createElement("a");
            element.setAttribute("href", "data:" + mime + "," + encodeURIComponent(jsonString));
            element.setAttribute("download", fileName);
            element.style.display = "none";
            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);
            callback(done);
        });
    });
    // POPOUT CONTENT
    function _Debugger_messageToString(value) {
        if (typeof value === "boolean") return value ? "True" : "False";
        if (typeof value === "number") return value + "";
        if (typeof value === "string") return '"' + _Debugger_addSlashes(value, false) + '"';
        if (value instanceof String) return "'" + _Debugger_addSlashes(value, true) + "'";
        if (typeof value !== "object" || value === null || !("$" in value)) return "\u2026";
        if (typeof value.$ === "number") return "\u2026";
        var code = value.$.charCodeAt(0);
        if (code === 0x23 /* # */  || /* a */ 0x61 <= code && code <= 0x7A /* z */ ) return "\u2026";
        if ([
            "Array_elm_builtin",
            "Set_elm_builtin",
            "RBNode_elm_builtin",
            "RBEmpty_elm_builtin"
        ].indexOf(value.$) >= 0) return "\u2026";
        var keys = Object.keys(value);
        switch(keys.length){
            case 1:
                return value.$;
            case 2:
                return value.$ + " " + _Debugger_messageToString(value.a);
            default:
                return value.$ + " \u2026 " + _Debugger_messageToString(value[keys[keys.length - 1]]);
        }
    }
    function _Debugger_init(value) {
        if (typeof value === "boolean") return A3($elm$browser$Debugger$Expando$Constructor, $elm$core$Maybe$Just(value ? "True" : "False"), true, _List_Nil);
        if (typeof value === "number") return $elm$browser$Debugger$Expando$Primitive(value + "");
        if (typeof value === "string") return $elm$browser$Debugger$Expando$S('"' + _Debugger_addSlashes(value, false) + '"');
        if (value instanceof String) return $elm$browser$Debugger$Expando$S("'" + _Debugger_addSlashes(value, true) + "'");
        if (typeof value === "object" && "$" in value) {
            var tag = value.$;
            if (tag === "::" || tag === "[]") return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$ListSeq, true, A2($elm$core$List$map, _Debugger_init, value));
            if (tag === "Set_elm_builtin") return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$SetSeq, true, A3($elm$core$Set$foldr, _Debugger_initCons, _List_Nil, value));
            if (tag === "RBNode_elm_builtin" || tag == "RBEmpty_elm_builtin") return A2($elm$browser$Debugger$Expando$Dictionary, true, A3($elm$core$Dict$foldr, _Debugger_initKeyValueCons, _List_Nil, value));
            if (tag === "Array_elm_builtin") return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$ArraySeq, true, A3($elm$core$Array$foldr, _Debugger_initCons, _List_Nil, value));
            if (typeof tag === "number") return $elm$browser$Debugger$Expando$Primitive("<internals>");
            var char = tag.charCodeAt(0);
            if (char === 35 || 65 <= char && char <= 90) {
                var list = _List_Nil;
                for(var i in value){
                    if (i === "$") continue;
                    list = _List_Cons(_Debugger_init(value[i]), list);
                }
                return A3($elm$browser$Debugger$Expando$Constructor, char === 35 ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(tag), true, $elm$core$List$reverse(list));
            }
            return $elm$browser$Debugger$Expando$Primitive("<internals>");
        }
        if (typeof value === "object") {
            var dict = $elm$core$Dict$empty;
            for(var i in value)dict = A3($elm$core$Dict$insert, i, _Debugger_init(value[i]), dict);
            return A2($elm$browser$Debugger$Expando$Record, true, dict);
        }
        return $elm$browser$Debugger$Expando$Primitive("<internals>");
    }
    var _Debugger_initCons = F2(function initConsHelp(value, list) {
        return _List_Cons(_Debugger_init(value), list);
    });
    var _Debugger_initKeyValueCons = F3(function(key, value, list) {
        return _List_Cons(_Utils_Tuple2(_Debugger_init(key), _Debugger_init(value)), list);
    });
    function _Debugger_addSlashes(str, isChar) {
        var s = str.replace(/\\/g, "\\\\").replace(/\n/g, "\\n").replace(/\t/g, "\\t").replace(/\r/g, "\\r").replace(/\v/g, "\\v").replace(/\0/g, "\\0");
        if (isChar) return s.replace(/\'/g, "\\'");
        else return s.replace(/\"/g, '\\"');
    }
    // BLOCK EVENTS
    function _Debugger_updateBlocker(oldBlocker, newBlocker) {
        if (oldBlocker === newBlocker) return;
        var oldEvents = _Debugger_blockerToEvents(oldBlocker);
        var newEvents = _Debugger_blockerToEvents(newBlocker);
        // remove old blockers
        for(var i = 0; i < oldEvents.length; i++)document.removeEventListener(oldEvents[i], _Debugger_blocker, true);
        // add new blockers
        for(var i = 0; i < newEvents.length; i++)document.addEventListener(newEvents[i], _Debugger_blocker, true);
    }
    function _Debugger_blocker(event) {
        if (event.type === "keydown" && event.metaKey && event.which === 82) return;
        var isScroll = event.type === "scroll" || event.type === "wheel";
        for(var node = event.target; node; node = node.parentNode){
            if (isScroll ? node.id === "elm-debugger-details" : node.id === "elm-debugger-overlay") return;
        }
        event.stopPropagation();
        event.preventDefault();
    }
    function _Debugger_blockerToEvents(blocker) {
        return blocker === $elm$browser$Debugger$Overlay$BlockNone ? [] : blocker === $elm$browser$Debugger$Overlay$BlockMost ? _Debugger_mostEvents : _Debugger_allEvents;
    }
    var _Debugger_mostEvents = [
        "click",
        "dblclick",
        "mousemove",
        "mouseup",
        "mousedown",
        "mouseenter",
        "mouseleave",
        "touchstart",
        "touchend",
        "touchcancel",
        "touchmove",
        "pointerdown",
        "pointerup",
        "pointerover",
        "pointerout",
        "pointerenter",
        "pointerleave",
        "pointermove",
        "pointercancel",
        "dragstart",
        "drag",
        "dragend",
        "dragenter",
        "dragover",
        "dragleave",
        "drop",
        "keyup",
        "keydown",
        "keypress",
        "input",
        "change",
        "focus",
        "blur"
    ];
    var _Debugger_allEvents = _Debugger_mostEvents.concat("wheel", "scroll");
    // ELEMENT
    var _Debugger_element;
    var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args) {
        return _Platform_initialize(flagDecoder, args, impl.init, impl.update, impl.subscriptions, function(sendToApp, initialModel) {
            var view = impl.view;
            /**_UNUSED/
			var domNode = args['node'];
			//*/ /**/ var domNode = args && args["node"] ? args["node"] : _Debug_crash(0);
            //*/
            var currNode = _VirtualDom_virtualize(domNode);
            return _Browser_makeAnimator(initialModel, function(model) {
                var nextNode = view(model);
                var patches = _VirtualDom_diff(currNode, nextNode);
                domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
                currNode = nextNode;
            });
        });
    });
    // DOCUMENT
    var _Debugger_document;
    var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args) {
        return _Platform_initialize(flagDecoder, args, impl.init, impl.update, impl.subscriptions, function(sendToApp, initialModel) {
            var divertHrefToApp = impl.setup && impl.setup(sendToApp);
            var view = impl.view;
            var title = _VirtualDom_doc.title;
            var bodyNode = _VirtualDom_doc.body;
            var currNode = _VirtualDom_virtualize(bodyNode);
            return _Browser_makeAnimator(initialModel, function(model) {
                _VirtualDom_divertHrefToApp = divertHrefToApp;
                var doc = view(model);
                var nextNode = _VirtualDom_node("body")(_List_Nil)(doc.body);
                var patches = _VirtualDom_diff(currNode, nextNode);
                bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
                currNode = nextNode;
                _VirtualDom_divertHrefToApp = 0;
                title !== doc.title && (_VirtualDom_doc.title = title = doc.title);
            });
        });
    });
    // ANIMATION
    var _Browser_cancelAnimationFrame = typeof cancelAnimationFrame !== "undefined" ? cancelAnimationFrame : function(id) {
        clearTimeout(id);
    };
    var _Browser_requestAnimationFrame = typeof requestAnimationFrame !== "undefined" ? requestAnimationFrame : function(callback) {
        return setTimeout(callback, 1000 / 60);
    };
    function _Browser_makeAnimator(model, draw) {
        draw(model);
        var state = 0;
        function updateIfNeeded() {
            state = state === 1 ? 0 : (_Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1);
        }
        return function(nextModel, isSync) {
            model = nextModel;
            isSync ? (draw(model), state === 2 && (state = 1)) : (state === 0 && _Browser_requestAnimationFrame(updateIfNeeded), state = 2);
        };
    }
    // APPLICATION
    function _Browser_application(impl) {
        var onUrlChange = impl.onUrlChange;
        var onUrlRequest = impl.onUrlRequest;
        var key = function() {
            key.a(onUrlChange(_Browser_getUrl()));
        };
        key["elm-hot-nav-key"] = true;
        return _Browser_document({
            setup: function(sendToApp) {
                key.a = sendToApp;
                _Browser_window.addEventListener("popstate", key);
                _Browser_window.navigator.userAgent.indexOf("Trident") < 0 || _Browser_window.addEventListener("hashchange", key);
                return F2(function(domNode, event) {
                    if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute("download")) {
                        event.preventDefault();
                        var href = domNode.href;
                        var curr = _Browser_getUrl();
                        var next = $elm$url$Url$fromString(href).a;
                        sendToApp(onUrlRequest(next && curr.protocol === next.protocol && curr.host === next.host && curr.port_.a === next.port_.a ? $elm$browser$Browser$Internal(next) : $elm$browser$Browser$External(href)));
                    }
                });
            },
            init: function(flags) {
                return A3(impl.init, flags, _Browser_getUrl(), key);
            },
            view: impl.view,
            update: impl.update,
            subscriptions: impl.subscriptions
        });
    }
    function _Browser_getUrl() {
        return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
    }
    var _Browser_go = F2(function(key, n) {
        return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
            n && history.go(n);
            key();
        }));
    });
    var _Browser_pushUrl = F2(function(key, url) {
        return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
            history.pushState({}, "", url);
            key();
        }));
    });
    var _Browser_replaceUrl = F2(function(key, url) {
        return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
            history.replaceState({}, "", url);
            key();
        }));
    });
    // GLOBAL EVENTS
    var _Browser_fakeNode = {
        addEventListener: function() {},
        removeEventListener: function() {}
    };
    var _Browser_doc = typeof document !== "undefined" ? document : _Browser_fakeNode;
    var _Browser_window = typeof window !== "undefined" ? window : _Browser_fakeNode;
    var _Browser_on = F3(function(node, eventName, sendToSelf) {
        return _Scheduler_spawn(_Scheduler_binding(function(callback) {
            function handler(event) {
                _Scheduler_rawSpawn(sendToSelf(event));
            }
            node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && {
                passive: true
            });
            return function() {
                node.removeEventListener(eventName, handler);
            };
        }));
    });
    var _Browser_decodeEvent = F2(function(decoder, event) {
        var result = _Json_runHelp(decoder, event);
        return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
    });
    // PAGE VISIBILITY
    function _Browser_visibilityInfo() {
        return typeof _VirtualDom_doc.hidden !== "undefined" ? {
            hidden: "hidden",
            change: "visibilitychange"
        } : typeof _VirtualDom_doc.mozHidden !== "undefined" ? {
            hidden: "mozHidden",
            change: "mozvisibilitychange"
        } : typeof _VirtualDom_doc.msHidden !== "undefined" ? {
            hidden: "msHidden",
            change: "msvisibilitychange"
        } : typeof _VirtualDom_doc.webkitHidden !== "undefined" ? {
            hidden: "webkitHidden",
            change: "webkitvisibilitychange"
        } : {
            hidden: "hidden",
            change: "visibilitychange"
        };
    }
    // ANIMATION FRAMES
    function _Browser_rAF() {
        return _Scheduler_binding(function(callback) {
            var id = _Browser_requestAnimationFrame(function() {
                callback(_Scheduler_succeed(Date.now()));
            });
            return function() {
                _Browser_cancelAnimationFrame(id);
            };
        });
    }
    function _Browser_now() {
        return _Scheduler_binding(function(callback) {
            callback(_Scheduler_succeed(Date.now()));
        });
    }
    // DOM STUFF
    function _Browser_withNode(id, doStuff) {
        return _Scheduler_binding(function(callback) {
            _Browser_requestAnimationFrame(function() {
                var node = document.getElementById(id);
                callback(node ? _Scheduler_succeed(doStuff(node)) : _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id)));
            });
        });
    }
    function _Browser_withWindow(doStuff) {
        return _Scheduler_binding(function(callback) {
            _Browser_requestAnimationFrame(function() {
                callback(_Scheduler_succeed(doStuff()));
            });
        });
    }
    // FOCUS and BLUR
    var _Browser_call = F2(function(functionName, id) {
        return _Browser_withNode(id, function(node) {
            node[functionName]();
            return _Utils_Tuple0;
        });
    });
    // WINDOW VIEWPORT
    function _Browser_getViewport() {
        return {
            scene: _Browser_getScene(),
            viewport: {
                x: _Browser_window.pageXOffset,
                y: _Browser_window.pageYOffset,
                width: _Browser_doc.documentElement.clientWidth,
                height: _Browser_doc.documentElement.clientHeight
            }
        };
    }
    function _Browser_getScene() {
        var body = _Browser_doc.body;
        var elem = _Browser_doc.documentElement;
        return {
            width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
            height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
        };
    }
    var _Browser_setViewport = F2(function(x, y) {
        return _Browser_withWindow(function() {
            _Browser_window.scroll(x, y);
            return _Utils_Tuple0;
        });
    });
    // ELEMENT VIEWPORT
    function _Browser_getViewportOf(id) {
        return _Browser_withNode(id, function(node) {
            return {
                scene: {
                    width: node.scrollWidth,
                    height: node.scrollHeight
                },
                viewport: {
                    x: node.scrollLeft,
                    y: node.scrollTop,
                    width: node.clientWidth,
                    height: node.clientHeight
                }
            };
        });
    }
    var _Browser_setViewportOf = F3(function(id, x, y) {
        return _Browser_withNode(id, function(node) {
            node.scrollLeft = x;
            node.scrollTop = y;
            return _Utils_Tuple0;
        });
    });
    // ELEMENT
    function _Browser_getElement(id) {
        return _Browser_withNode(id, function(node) {
            var rect = node.getBoundingClientRect();
            var x = _Browser_window.pageXOffset;
            var y = _Browser_window.pageYOffset;
            return {
                scene: _Browser_getScene(),
                viewport: {
                    x: x,
                    y: y,
                    width: _Browser_doc.documentElement.clientWidth,
                    height: _Browser_doc.documentElement.clientHeight
                },
                element: {
                    x: x + rect.left,
                    y: y + rect.top,
                    width: rect.width,
                    height: rect.height
                }
            };
        });
    }
    // LOAD and RELOAD
    function _Browser_reload(skipCache) {
        return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback) {
            _VirtualDom_doc.location.reload(skipCache);
        }));
    }
    function _Browser_load(url) {
        return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback) {
            try {
                _Browser_window.location = url;
            } catch (err) {
                // Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
                // Other browsers reload the page, so let's be consistent about that.
                _VirtualDom_doc.location.reload(false);
            }
        }));
    }
    // CREATE
    var _Regex_never = /.^/;
    var _Regex_fromStringWith = F2(function(options, string) {
        var flags = "g";
        if (options.multiline) flags += "m";
        if (options.caseInsensitive) flags += "i";
        try {
            return $elm$core$Maybe$Just(new RegExp(string, flags));
        } catch (error) {
            return $elm$core$Maybe$Nothing;
        }
    });
    // USE
    var _Regex_contains = F2(function(re, string) {
        return string.match(re) !== null;
    });
    var _Regex_findAtMost = F3(function(n, re, str) {
        var out = [];
        var number = 0;
        var string = str;
        var lastIndex = re.lastIndex;
        var prevLastIndex = -1;
        var result;
        while(number++ < n && (result = re.exec(string))){
            if (prevLastIndex == re.lastIndex) break;
            var i = result.length - 1;
            var subs = new Array(i);
            while(i > 0){
                var submatch = result[i];
                subs[--i] = submatch ? $elm$core$Maybe$Just(submatch) : $elm$core$Maybe$Nothing;
            }
            out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
            prevLastIndex = re.lastIndex;
        }
        re.lastIndex = lastIndex;
        return _List_fromArray(out);
    });
    var _Regex_replaceAtMost = F4(function(n, re, replacer, string) {
        var count = 0;
        function jsReplacer(match) {
            if (count++ >= n) return match;
            var i = arguments.length - 3;
            var submatches = new Array(i);
            while(i > 0){
                var submatch = arguments[i];
                submatches[--i] = submatch ? $elm$core$Maybe$Just(submatch) : $elm$core$Maybe$Nothing;
            }
            return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
        }
        return string.replace(re, jsReplacer);
    });
    var _Regex_splitAtMost = F3(function(n, re, str) {
        var string = str;
        var out = [];
        var start = re.lastIndex;
        var restoreLastIndex = re.lastIndex;
        while(n--){
            var result = re.exec(string);
            if (!result) break;
            out.push(string.slice(start, result.index));
            start = re.lastIndex;
        }
        out.push(string.slice(start));
        re.lastIndex = restoreLastIndex;
        return _List_fromArray(out);
    });
    var _Regex_infinity = Infinity;
    function _Url_percentEncode(string) {
        return encodeURIComponent(string);
    }
    function _Url_percentDecode(string) {
        try {
            return $elm$core$Maybe$Just(decodeURIComponent(string));
        } catch (e) {
            return $elm$core$Maybe$Nothing;
        }
    }
    function _Time_now(millisToPosix) {
        return _Scheduler_binding(function(callback) {
            callback(_Scheduler_succeed(millisToPosix(Date.now())));
        });
    }
    var _Time_setInterval = F2(function(interval, task) {
        return _Scheduler_binding(function(callback) {
            var id = setInterval(function() {
                _Scheduler_rawSpawn(task);
            }, interval);
            return function() {
                clearInterval(id);
            };
        });
    });
    function _Time_here() {
        return _Scheduler_binding(function(callback) {
            callback(_Scheduler_succeed(A2($elm$time$Time$customZone, -new Date().getTimezoneOffset(), _List_Nil)));
        });
    }
    function _Time_getZoneName() {
        return _Scheduler_binding(function(callback) {
            try {
                var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
            } catch (e) {
                var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
            }
            callback(_Scheduler_succeed(name));
        });
    }
    // BYTES
    function _Bytes_width(bytes) {
        return bytes.byteLength;
    }
    var _Bytes_getHostEndianness = F2(function(le, be) {
        return _Scheduler_binding(function(callback) {
            callback(_Scheduler_succeed(new Uint8Array(new Uint32Array([
                1
            ]))[0] === 1 ? le : be));
        });
    });
    // ENCODERS
    function _Bytes_encode(encoder) {
        var mutableBytes = new DataView(new ArrayBuffer($elm$bytes$Bytes$Encode$getWidth(encoder)));
        $elm$bytes$Bytes$Encode$write(encoder)(mutableBytes)(0);
        return mutableBytes;
    }
    // SIGNED INTEGERS
    var _Bytes_write_i8 = F3(function(mb, i, n) {
        mb.setInt8(i, n);
        return i + 1;
    });
    var _Bytes_write_i16 = F4(function(mb, i, n, isLE) {
        mb.setInt16(i, n, isLE);
        return i + 2;
    });
    var _Bytes_write_i32 = F4(function(mb, i, n, isLE) {
        mb.setInt32(i, n, isLE);
        return i + 4;
    });
    // UNSIGNED INTEGERS
    var _Bytes_write_u8 = F3(function(mb, i, n) {
        mb.setUint8(i, n);
        return i + 1;
    });
    var _Bytes_write_u16 = F4(function(mb, i, n, isLE) {
        mb.setUint16(i, n, isLE);
        return i + 2;
    });
    var _Bytes_write_u32 = F4(function(mb, i, n, isLE) {
        mb.setUint32(i, n, isLE);
        return i + 4;
    });
    // FLOATS
    var _Bytes_write_f32 = F4(function(mb, i, n, isLE) {
        mb.setFloat32(i, n, isLE);
        return i + 4;
    });
    var _Bytes_write_f64 = F4(function(mb, i, n, isLE) {
        mb.setFloat64(i, n, isLE);
        return i + 8;
    });
    // BYTES
    var _Bytes_write_bytes = F3(function(mb, offset, bytes) {
        for(var i = 0, len = bytes.byteLength, limit = len - 4; i <= limit; i += 4)mb.setUint32(offset + i, bytes.getUint32(i));
        for(; i < len; i++)mb.setUint8(offset + i, bytes.getUint8(i));
        return offset + len;
    });
    // STRINGS
    function _Bytes_getStringWidth(string) {
        for(var width = 0, i = 0; i < string.length; i++){
            var code = string.charCodeAt(i);
            width += code < 0x80 ? 1 : code < 0x800 ? 2 : code < 0xD800 || 0xDBFF < code ? 3 : (i++, 4);
        }
        return width;
    }
    var _Bytes_write_string = F3(function(mb, offset, string) {
        for(var i = 0; i < string.length; i++){
            var code = string.charCodeAt(i);
            offset += code < 0x80 ? (mb.setUint8(offset, code), 1) : code < 0x800 ? (mb.setUint16(offset, 0xC080 /* 0b1100000010000000 */  | (code >>> 6 & 0x1F /* 0b00011111 */ ) << 8 | code & 0x3F /* 0b00111111 */ ), 2) : code < 0xD800 || 0xDBFF < code ? (mb.setUint16(offset, 0xE080 /* 0b1110000010000000 */  | (code >>> 12 & 0xF /* 0b00001111 */ ) << 8 | code >>> 6 & 0x3F /* 0b00111111 */ ), mb.setUint8(offset + 2, 0x80 /* 0b10000000 */  | code & 0x3F /* 0b00111111 */ ), 3) : (code = (code - 0xD800) * 0x400 + string.charCodeAt(++i) - 0xDC00 + 0x10000, mb.setUint32(offset, 0xF0808080 /* 0b11110000100000001000000010000000 */  | (code >>> 18 & 0x7 /* 0b00000111 */ ) << 24 | (code >>> 12 & 0x3F /* 0b00111111 */ ) << 16 | (code >>> 6 & 0x3F /* 0b00111111 */ ) << 8 | code & 0x3F /* 0b00111111 */ ), 4);
        }
        return offset;
    });
    // DECODER
    var _Bytes_decode = F2(function(decoder, bytes) {
        try {
            return $elm$core$Maybe$Just(A2(decoder, bytes, 0).b);
        } catch (e) {
            return $elm$core$Maybe$Nothing;
        }
    });
    var _Bytes_read_i8 = F2(function(bytes, offset) {
        return _Utils_Tuple2(offset + 1, bytes.getInt8(offset));
    });
    var _Bytes_read_i16 = F3(function(isLE, bytes, offset) {
        return _Utils_Tuple2(offset + 2, bytes.getInt16(offset, isLE));
    });
    var _Bytes_read_i32 = F3(function(isLE, bytes, offset) {
        return _Utils_Tuple2(offset + 4, bytes.getInt32(offset, isLE));
    });
    var _Bytes_read_u8 = F2(function(bytes, offset) {
        return _Utils_Tuple2(offset + 1, bytes.getUint8(offset));
    });
    var _Bytes_read_u16 = F3(function(isLE, bytes, offset) {
        return _Utils_Tuple2(offset + 2, bytes.getUint16(offset, isLE));
    });
    var _Bytes_read_u32 = F3(function(isLE, bytes, offset) {
        return _Utils_Tuple2(offset + 4, bytes.getUint32(offset, isLE));
    });
    var _Bytes_read_f32 = F3(function(isLE, bytes, offset) {
        return _Utils_Tuple2(offset + 4, bytes.getFloat32(offset, isLE));
    });
    var _Bytes_read_f64 = F3(function(isLE, bytes, offset) {
        return _Utils_Tuple2(offset + 8, bytes.getFloat64(offset, isLE));
    });
    var _Bytes_read_bytes = F3(function(len, bytes, offset) {
        return _Utils_Tuple2(offset + len, new DataView(bytes.buffer, bytes.byteOffset + offset, len));
    });
    var _Bytes_read_string = F3(function(len, bytes, offset) {
        var string = "";
        var end = offset + len;
        for(; offset < end;){
            var byte = bytes.getUint8(offset++);
            string += byte < 128 ? String.fromCharCode(byte) : (byte & 0xE0 /* 0b11100000 */ ) === 0xC0 /* 0b11000000 */  ? String.fromCharCode((byte & 0x1F /* 0b00011111 */ ) << 6 | bytes.getUint8(offset++) & 0x3F /* 0b00111111 */ ) : (byte & 0xF0 /* 0b11110000 */ ) === 0xE0 /* 0b11100000 */  ? String.fromCharCode((byte & 0xF /* 0b00001111 */ ) << 12 | (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */ ) << 6 | bytes.getUint8(offset++) & 0x3F /* 0b00111111 */ ) : (byte = ((byte & 0x7 /* 0b00000111 */ ) << 18 | (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */ ) << 12 | (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */ ) << 6 | bytes.getUint8(offset++) & 0x3F /* 0b00111111 */ ) - 0x10000, String.fromCharCode(Math.floor(byte / 0x400) + 0xD800, byte % 0x400 + 0xDC00));
        }
        return _Utils_Tuple2(offset, string);
    });
    var _Bytes_decodeFailure = F2(function() {
        throw 0;
    });
    // SEND REQUEST
    var _Http_toTask = F3(function(router, toTask, request) {
        return _Scheduler_binding(function(callback) {
            function done(response) {
                callback(toTask(request.expect.a(response)));
            }
            var xhr = new XMLHttpRequest();
            xhr.addEventListener("error", function() {
                done($elm$http$Http$NetworkError_);
            });
            xhr.addEventListener("timeout", function() {
                done($elm$http$Http$Timeout_);
            });
            xhr.addEventListener("load", function() {
                done(_Http_toResponse(request.expect.b, xhr));
            });
            $elm$core$Maybe$isJust(request.tracker) && _Http_track(router, xhr, request.tracker.a);
            try {
                xhr.open(request.method, request.url, true);
            } catch (e) {
                return done($elm$http$Http$BadUrl_(request.url));
            }
            _Http_configureRequest(xhr, request);
            request.body.a && xhr.setRequestHeader("Content-Type", request.body.a);
            xhr.send(request.body.b);
            return function() {
                xhr.c = true;
                xhr.abort();
            };
        });
    });
    // CONFIGURE
    function _Http_configureRequest(xhr, request) {
        for(var headers = request.headers; headers.b; headers = headers.b)xhr.setRequestHeader(headers.a.a, headers.a.b);
        xhr.timeout = request.timeout.a || 0;
        xhr.responseType = request.expect.d;
        xhr.withCredentials = request.allowCookiesFromOtherDomains;
    }
    // RESPONSES
    function _Http_toResponse(toBody, xhr) {
        return A2(200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_, _Http_toMetadata(xhr), toBody(xhr.response));
    }
    // METADATA
    function _Http_toMetadata(xhr) {
        return {
            url: xhr.responseURL,
            statusCode: xhr.status,
            statusText: xhr.statusText,
            headers: _Http_parseHeaders(xhr.getAllResponseHeaders())
        };
    }
    // HEADERS
    function _Http_parseHeaders(rawHeaders) {
        if (!rawHeaders) return $elm$core$Dict$empty;
        var headers = $elm$core$Dict$empty;
        var headerPairs = rawHeaders.split("\r\n");
        for(var i = headerPairs.length; i--;){
            var headerPair = headerPairs[i];
            var index = headerPair.indexOf(": ");
            if (index > 0) {
                var key = headerPair.substring(0, index);
                var value = headerPair.substring(index + 2);
                headers = A3($elm$core$Dict$update, key, function(oldValue) {
                    return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue) ? value + ", " + oldValue.a : value);
                }, headers);
            }
        }
        return headers;
    }
    // EXPECT
    var _Http_expect = F3(function(type, toBody, toValue) {
        return {
            $: 0,
            d: type,
            b: toBody,
            a: toValue
        };
    });
    var _Http_mapExpect = F2(function(func, expect) {
        return {
            $: 0,
            d: expect.d,
            b: expect.b,
            a: function(x) {
                return func(expect.a(x));
            }
        };
    });
    function _Http_toDataView(arrayBuffer) {
        return new DataView(arrayBuffer);
    }
    // BODY and PARTS
    var _Http_emptyBody = {
        $: 0
    };
    var _Http_pair = F2(function(a, b) {
        return {
            $: 0,
            a: a,
            b: b
        };
    });
    function _Http_toFormData(parts) {
        for(var formData = new FormData(); parts.b; parts = parts.b){
            var part = parts.a;
            formData.append(part.a, part.b);
        }
        return formData;
    }
    var _Http_bytesToBlob = F2(function(mime, bytes) {
        return new Blob([
            bytes
        ], {
            type: mime
        });
    });
    // PROGRESS
    function _Http_track(router, xhr, tracker) {
        // TODO check out lengthComputable on loadstart event
        xhr.upload.addEventListener("progress", function(event) {
            if (xhr.c) return;
            _Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
                sent: event.loaded,
                size: event.total
            }))));
        });
        xhr.addEventListener("progress", function(event) {
            if (xhr.c) return;
            _Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
                received: event.loaded,
                size: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
            }))));
        });
    }
    // STRINGS
    var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString) {
        var smallLength = smallString.length;
        var isGood = offset + smallLength <= bigString.length;
        for(var i = 0; isGood && i < smallLength;){
            var code = bigString.charCodeAt(offset);
            isGood = smallString[i++] === bigString[offset++] && (code === 0x000A /* \n */  ? (row++, col = 1) : (col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1));
        }
        return _Utils_Tuple3(isGood ? offset : -1, row, col);
    });
    // CHARS
    var _Parser_isSubChar = F3(function(predicate, offset, string) {
        return string.length <= offset ? -1 : (string.charCodeAt(offset) & 0xF800) === 0xD800 ? predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1 : predicate(_Utils_chr(string[offset])) ? string[offset] === "\n" ? -2 : offset + 1 : -1;
    });
    var _Parser_isAsciiCode = F3(function(code, offset, string) {
        return string.charCodeAt(offset) === code;
    });
    // NUMBERS
    var _Parser_chompBase10 = F2(function(offset, string) {
        for(; offset < string.length; offset++){
            var code = string.charCodeAt(offset);
            if (code < 0x30 || 0x39 < code) return offset;
        }
        return offset;
    });
    var _Parser_consumeBase = F3(function(base, offset, string) {
        for(var total = 0; offset < string.length; offset++){
            var digit = string.charCodeAt(offset) - 0x30;
            if (digit < 0 || base <= digit) break;
            total = base * total + digit;
        }
        return _Utils_Tuple2(offset, total);
    });
    var _Parser_consumeBase16 = F2(function(offset, string) {
        for(var total = 0; offset < string.length; offset++){
            var code = string.charCodeAt(offset);
            if (0x30 <= code && code <= 0x39) total = 16 * total + code - 0x30;
            else if (0x41 <= code && code <= 0x46) total = 16 * total + code - 55;
            else if (0x61 <= code && code <= 0x66) total = 16 * total + code - 87;
            else break;
        }
        return _Utils_Tuple2(offset, total);
    });
    // FIND STRING
    var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString) {
        var newOffset = bigString.indexOf(smallString, offset);
        var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;
        while(offset < target){
            var code = bigString.charCodeAt(offset++);
            code === 0x000A /* \n */  ? (col = 1, row++) : (col++, (code & 0xF800) === 0xD800 && offset++);
        }
        return _Utils_Tuple3(newOffset, row, col);
    });
    var $author$project$Main$ChangedUrl = function(a) {
        return {
            $: "ChangedUrl",
            a: a
        };
    };
    var $author$project$Main$ClickedLink = function(a) {
        return {
            $: "ClickedLink",
            a: a
        };
    };
    var $elm$core$Basics$EQ = {
        $: "EQ"
    };
    var $elm$core$Basics$GT = {
        $: "GT"
    };
    var $elm$core$Basics$LT = {
        $: "LT"
    };
    var $elm$core$List$cons = _List_cons;
    var $elm$core$Dict$foldr = F3(function(func, acc, t) {
        foldr: while(true){
            if (t.$ === "RBEmpty_elm_builtin") return acc;
            else {
                var key = t.b;
                var value = t.c;
                var left = t.d;
                var right = t.e;
                var $temp$func = func, $temp$acc = A3(func, key, value, A3($elm$core$Dict$foldr, func, acc, right)), $temp$t = left;
                func = $temp$func;
                acc = $temp$acc;
                t = $temp$t;
                continue foldr;
            }
        }
    });
    var $elm$core$Dict$toList = function(dict) {
        return A3($elm$core$Dict$foldr, F3(function(key, value, list) {
            return A2($elm$core$List$cons, _Utils_Tuple2(key, value), list);
        }), _List_Nil, dict);
    };
    var $elm$core$Dict$keys = function(dict) {
        return A3($elm$core$Dict$foldr, F3(function(key, value, keyList) {
            return A2($elm$core$List$cons, key, keyList);
        }), _List_Nil, dict);
    };
    var $elm$core$Set$toList = function(_v0) {
        var dict = _v0.a;
        return $elm$core$Dict$keys(dict);
    };
    var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
    var $elm$core$Array$foldr = F3(function(func, baseCase, _v0) {
        var tree = _v0.c;
        var tail = _v0.d;
        var helper = F2(function(node, acc) {
            if (node.$ === "SubTree") {
                var subTree = node.a;
                return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
            } else {
                var values = node.a;
                return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
            }
        });
        return A3($elm$core$Elm$JsArray$foldr, helper, A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail), tree);
    });
    var $elm$core$Array$toList = function(array) {
        return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
    };
    var $elm$core$Result$Err = function(a) {
        return {
            $: "Err",
            a: a
        };
    };
    var $elm$json$Json$Decode$Failure = F2(function(a, b) {
        return {
            $: "Failure",
            a: a,
            b: b
        };
    });
    var $elm$json$Json$Decode$Field = F2(function(a, b) {
        return {
            $: "Field",
            a: a,
            b: b
        };
    });
    var $elm$json$Json$Decode$Index = F2(function(a, b) {
        return {
            $: "Index",
            a: a,
            b: b
        };
    });
    var $elm$core$Result$Ok = function(a) {
        return {
            $: "Ok",
            a: a
        };
    };
    var $elm$json$Json$Decode$OneOf = function(a) {
        return {
            $: "OneOf",
            a: a
        };
    };
    var $elm$core$Basics$False = {
        $: "False"
    };
    var $elm$core$Basics$add = _Basics_add;
    var $elm$core$Maybe$Just = function(a) {
        return {
            $: "Just",
            a: a
        };
    };
    var $elm$core$Maybe$Nothing = {
        $: "Nothing"
    };
    var $elm$core$String$all = _String_all;
    var $elm$core$Basics$and = _Basics_and;
    var $elm$core$Basics$append = _Utils_append;
    var $elm$json$Json$Encode$encode = _Json_encode;
    var $elm$core$String$fromInt = _String_fromNumber;
    var $elm$core$String$join = F2(function(sep, chunks) {
        return A2(_String_join, sep, _List_toArray(chunks));
    });
    var $elm$core$String$split = F2(function(sep, string) {
        return _List_fromArray(A2(_String_split, sep, string));
    });
    var $elm$json$Json$Decode$indent = function(str) {
        return A2($elm$core$String$join, "\n    ", A2($elm$core$String$split, "\n", str));
    };
    var $elm$core$List$foldl = F3(function(func, acc, list) {
        foldl: while(true){
            if (!list.b) return acc;
            else {
                var x = list.a;
                var xs = list.b;
                var $temp$func = func, $temp$acc = A2(func, x, acc), $temp$list = xs;
                func = $temp$func;
                acc = $temp$acc;
                list = $temp$list;
                continue foldl;
            }
        }
    });
    var $elm$core$List$length = function(xs) {
        return A3($elm$core$List$foldl, F2(function(_v0, i) {
            return i + 1;
        }), 0, xs);
    };
    var $elm$core$List$map2 = _List_map2;
    var $elm$core$Basics$le = _Utils_le;
    var $elm$core$Basics$sub = _Basics_sub;
    var $elm$core$List$rangeHelp = F3(function(lo, hi, list) {
        rangeHelp: while(true){
            if (_Utils_cmp(lo, hi) < 1) {
                var $temp$lo = lo, $temp$hi = hi - 1, $temp$list = A2($elm$core$List$cons, hi, list);
                lo = $temp$lo;
                hi = $temp$hi;
                list = $temp$list;
                continue rangeHelp;
            } else return list;
        }
    });
    var $elm$core$List$range = F2(function(lo, hi) {
        return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
    });
    var $elm$core$List$indexedMap = F2(function(f, xs) {
        return A3($elm$core$List$map2, f, A2($elm$core$List$range, 0, $elm$core$List$length(xs) - 1), xs);
    });
    var $elm$core$Char$toCode = _Char_toCode;
    var $elm$core$Char$isLower = function(_char) {
        var code = $elm$core$Char$toCode(_char);
        return 97 <= code && code <= 122;
    };
    var $elm$core$Char$isUpper = function(_char) {
        var code = $elm$core$Char$toCode(_char);
        return code <= 90 && 65 <= code;
    };
    var $elm$core$Basics$or = _Basics_or;
    var $elm$core$Char$isAlpha = function(_char) {
        return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
    };
    var $elm$core$Char$isDigit = function(_char) {
        var code = $elm$core$Char$toCode(_char);
        return code <= 57 && 48 <= code;
    };
    var $elm$core$Char$isAlphaNum = function(_char) {
        return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char);
    };
    var $elm$core$List$reverse = function(list) {
        return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
    };
    var $elm$core$String$uncons = _String_uncons;
    var $elm$json$Json$Decode$errorOneOf = F2(function(i, error) {
        return "\n\n(" + ($elm$core$String$fromInt(i + 1) + (") " + $elm$json$Json$Decode$indent($elm$json$Json$Decode$errorToString(error))));
    });
    var $elm$json$Json$Decode$errorToString = function(error) {
        return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
    };
    var $elm$json$Json$Decode$errorToStringHelp = F2(function(error, context) {
        errorToStringHelp: while(true)switch(error.$){
            case "Field":
                var f = error.a;
                var err = error.b;
                var isSimple = function() {
                    var _v1 = $elm$core$String$uncons(f);
                    if (_v1.$ === "Nothing") return false;
                    else {
                        var _v2 = _v1.a;
                        var _char = _v2.a;
                        var rest = _v2.b;
                        return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
                    }
                }();
                var fieldName = isSimple ? "." + f : "['" + (f + "']");
                var $temp$error = err, $temp$context = A2($elm$core$List$cons, fieldName, context);
                error = $temp$error;
                context = $temp$context;
                continue errorToStringHelp;
            case "Index":
                var i = error.a;
                var err = error.b;
                var indexName = "[" + ($elm$core$String$fromInt(i) + "]");
                var $temp$error = err, $temp$context = A2($elm$core$List$cons, indexName, context);
                error = $temp$error;
                context = $temp$context;
                continue errorToStringHelp;
            case "OneOf":
                var errors = error.a;
                if (!errors.b) return "Ran into a Json.Decode.oneOf with no possibilities" + function() {
                    if (!context.b) return "!";
                    else return " at json" + A2($elm$core$String$join, "", $elm$core$List$reverse(context));
                }();
                else if (!errors.b.b) {
                    var err = errors.a;
                    var $temp$error = err, $temp$context = context;
                    error = $temp$error;
                    context = $temp$context;
                    continue errorToStringHelp;
                } else {
                    var starter = function() {
                        if (!context.b) return "Json.Decode.oneOf";
                        else return "The Json.Decode.oneOf at json" + A2($elm$core$String$join, "", $elm$core$List$reverse(context));
                    }();
                    var introduction = starter + (" failed in the following " + ($elm$core$String$fromInt($elm$core$List$length(errors)) + " ways:"));
                    return A2($elm$core$String$join, "\n\n", A2($elm$core$List$cons, introduction, A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
                }
            default:
                var msg = error.a;
                var json = error.b;
                var introduction = function() {
                    if (!context.b) return "Problem with the given value:\n\n";
                    else return "Problem with the value at json" + (A2($elm$core$String$join, "", $elm$core$List$reverse(context)) + ":\n\n    ");
                }();
                return introduction + ($elm$json$Json$Decode$indent(A2($elm$json$Json$Encode$encode, 4, json)) + ("\n\n" + msg));
        }
    });
    var $elm$core$Array$branchFactor = 32;
    var $elm$core$Array$Array_elm_builtin = F4(function(a, b, c, d) {
        return {
            $: "Array_elm_builtin",
            a: a,
            b: b,
            c: c,
            d: d
        };
    });
    var $elm$core$Elm$JsArray$empty = _JsArray_empty;
    var $elm$core$Basics$ceiling = _Basics_ceiling;
    var $elm$core$Basics$fdiv = _Basics_fdiv;
    var $elm$core$Basics$logBase = F2(function(base, number) {
        return _Basics_log(number) / _Basics_log(base);
    });
    var $elm$core$Basics$toFloat = _Basics_toFloat;
    var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
    var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
    var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
    var $elm$core$Array$Leaf = function(a) {
        return {
            $: "Leaf",
            a: a
        };
    };
    var $elm$core$Basics$apL = F2(function(f, x) {
        return f(x);
    });
    var $elm$core$Basics$apR = F2(function(x, f) {
        return f(x);
    });
    var $elm$core$Basics$eq = _Utils_equal;
    var $elm$core$Basics$floor = _Basics_floor;
    var $elm$core$Elm$JsArray$length = _JsArray_length;
    var $elm$core$Basics$gt = _Utils_gt;
    var $elm$core$Basics$max = F2(function(x, y) {
        return _Utils_cmp(x, y) > 0 ? x : y;
    });
    var $elm$core$Basics$mul = _Basics_mul;
    var $elm$core$Array$SubTree = function(a) {
        return {
            $: "SubTree",
            a: a
        };
    };
    var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
    var $elm$core$Array$compressNodes = F2(function(nodes, acc) {
        compressNodes: while(true){
            var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
            var node = _v0.a;
            var remainingNodes = _v0.b;
            var newAcc = A2($elm$core$List$cons, $elm$core$Array$SubTree(node), acc);
            if (!remainingNodes.b) return $elm$core$List$reverse(newAcc);
            else {
                var $temp$nodes = remainingNodes, $temp$acc = newAcc;
                nodes = $temp$nodes;
                acc = $temp$acc;
                continue compressNodes;
            }
        }
    });
    var $elm$core$Tuple$first = function(_v0) {
        var x = _v0.a;
        return x;
    };
    var $elm$core$Array$treeFromBuilder = F2(function(nodeList, nodeListSize) {
        treeFromBuilder: while(true){
            var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
            if (newNodeSize === 1) return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
            else {
                var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil), $temp$nodeListSize = newNodeSize;
                nodeList = $temp$nodeList;
                nodeListSize = $temp$nodeListSize;
                continue treeFromBuilder;
            }
        }
    });
    var $elm$core$Array$builderToArray = F2(function(reverseNodeList, builder) {
        if (!builder.nodeListSize) return A4($elm$core$Array$Array_elm_builtin, $elm$core$Elm$JsArray$length(builder.tail), $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, builder.tail);
        else {
            var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
            var depth = $elm$core$Basics$floor(A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
            var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
            var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
            return A4($elm$core$Array$Array_elm_builtin, $elm$core$Elm$JsArray$length(builder.tail) + treeLen, A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep), tree, builder.tail);
        }
    });
    var $elm$core$Basics$idiv = _Basics_idiv;
    var $elm$core$Basics$lt = _Utils_lt;
    var $elm$core$Array$initializeHelp = F5(function(fn, fromIndex, len, nodeList, tail) {
        initializeHelp: while(true){
            if (fromIndex < 0) return A2($elm$core$Array$builderToArray, false, {
                nodeList: nodeList,
                nodeListSize: len / $elm$core$Array$branchFactor | 0,
                tail: tail
            });
            else {
                var leaf = $elm$core$Array$Leaf(A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
                var $temp$fn = fn, $temp$fromIndex = fromIndex - $elm$core$Array$branchFactor, $temp$len = len, $temp$nodeList = A2($elm$core$List$cons, leaf, nodeList), $temp$tail = tail;
                fn = $temp$fn;
                fromIndex = $temp$fromIndex;
                len = $temp$len;
                nodeList = $temp$nodeList;
                tail = $temp$tail;
                continue initializeHelp;
            }
        }
    });
    var $elm$core$Basics$remainderBy = _Basics_remainderBy;
    var $elm$core$Array$initialize = F2(function(len, fn) {
        if (len <= 0) return $elm$core$Array$empty;
        else {
            var tailLen = len % $elm$core$Array$branchFactor;
            var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
            var initialFromIndex = len - tailLen - $elm$core$Array$branchFactor;
            return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
        }
    });
    var $elm$core$Basics$True = {
        $: "True"
    };
    var $elm$core$Result$isOk = function(result) {
        if (result.$ === "Ok") return true;
        else return false;
    };
    var $elm$json$Json$Decode$map = _Json_map1;
    var $elm$json$Json$Decode$map2 = _Json_map2;
    var $elm$json$Json$Decode$succeed = _Json_succeed;
    var $elm$virtual_dom$VirtualDom$toHandlerInt = function(handler) {
        switch(handler.$){
            case "Normal":
                return 0;
            case "MayStopPropagation":
                return 1;
            case "MayPreventDefault":
                return 2;
            default:
                return 3;
        }
    };
    var $elm$browser$Debugger$Expando$ArraySeq = {
        $: "ArraySeq"
    };
    var $elm$browser$Debugger$Overlay$BlockMost = {
        $: "BlockMost"
    };
    var $elm$browser$Debugger$Overlay$BlockNone = {
        $: "BlockNone"
    };
    var $elm$browser$Debugger$Expando$Constructor = F3(function(a, b, c) {
        return {
            $: "Constructor",
            a: a,
            b: b,
            c: c
        };
    });
    var $elm$browser$Debugger$Expando$Dictionary = F2(function(a, b) {
        return {
            $: "Dictionary",
            a: a,
            b: b
        };
    });
    var $elm$browser$Debugger$Main$Down = {
        $: "Down"
    };
    var $elm$browser$Debugger$Expando$ListSeq = {
        $: "ListSeq"
    };
    var $elm$browser$Debugger$Main$NoOp = {
        $: "NoOp"
    };
    var $elm$browser$Debugger$Expando$Primitive = function(a) {
        return {
            $: "Primitive",
            a: a
        };
    };
    var $elm$browser$Debugger$Expando$Record = F2(function(a, b) {
        return {
            $: "Record",
            a: a,
            b: b
        };
    });
    var $elm$browser$Debugger$Expando$S = function(a) {
        return {
            $: "S",
            a: a
        };
    };
    var $elm$browser$Debugger$Expando$Sequence = F3(function(a, b, c) {
        return {
            $: "Sequence",
            a: a,
            b: b,
            c: c
        };
    });
    var $elm$browser$Debugger$Expando$SetSeq = {
        $: "SetSeq"
    };
    var $elm$browser$Debugger$Main$Up = {
        $: "Up"
    };
    var $elm$browser$Debugger$Main$UserMsg = function(a) {
        return {
            $: "UserMsg",
            a: a
        };
    };
    var $elm$browser$Debugger$Main$Export = {
        $: "Export"
    };
    var $elm$browser$Debugger$Main$Import = {
        $: "Import"
    };
    var $elm$browser$Debugger$Main$Open = {
        $: "Open"
    };
    var $elm$browser$Debugger$Main$OverlayMsg = function(a) {
        return {
            $: "OverlayMsg",
            a: a
        };
    };
    var $elm$browser$Debugger$Main$Resume = {
        $: "Resume"
    };
    var $elm$browser$Debugger$Main$isPaused = function(state) {
        if (state.$ === "Running") return false;
        else return true;
    };
    var $elm$browser$Debugger$History$size = function(history1) {
        return history1.numMessages;
    };
    var $elm$browser$Debugger$Overlay$Accept = function(a) {
        return {
            $: "Accept",
            a: a
        };
    };
    var $elm$browser$Debugger$Overlay$Choose = F2(function(a, b) {
        return {
            $: "Choose",
            a: a,
            b: b
        };
    });
    var $elm$html$Html$div = _VirtualDom_node("div");
    var $elm$json$Json$Encode$string = _Json_wrap;
    var $elm$html$Html$Attributes$stringProperty = F2(function(key, string) {
        return A2(_VirtualDom_property, key, $elm$json$Json$Encode$string(string));
    });
    var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty("id");
    var $elm$virtual_dom$VirtualDom$Normal = function(a) {
        return {
            $: "Normal",
            a: a
        };
    };
    var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
    var $elm$html$Html$Events$on = F2(function(event, decoder) {
        return A2($elm$virtual_dom$VirtualDom$on, event, $elm$virtual_dom$VirtualDom$Normal(decoder));
    });
    var $elm$html$Html$Events$onClick = function(msg) {
        return A2($elm$html$Html$Events$on, "click", $elm$json$Json$Decode$succeed(msg));
    };
    var $elm$html$Html$span = _VirtualDom_node("span");
    var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
    var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
    var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
    var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
    var $elm$html$Html$a = _VirtualDom_node("a");
    var $elm$browser$Debugger$Overlay$goodNews1 = "\nThe good news is that having values like this in your message type is not\nso great in the long run. You are better off using simpler data, like\n";
    var $elm$browser$Debugger$Overlay$goodNews2 = "\nfunction can pattern match on that data and call whatever functions, JSON\ndecoders, etc. you need. This makes the code much more explicit and easy to\nfollow for other readers (or you in a few months!)\n";
    var $elm$html$Html$Attributes$href = function(url) {
        return A2($elm$html$Html$Attributes$stringProperty, "href", _VirtualDom_noJavaScriptUri(url));
    };
    var $elm$core$List$foldrHelper = F4(function(fn, acc, ctr, ls) {
        if (!ls.b) return acc;
        else {
            var a = ls.a;
            var r1 = ls.b;
            if (!r1.b) return A2(fn, a, acc);
            else {
                var b = r1.a;
                var r2 = r1.b;
                if (!r2.b) return A2(fn, a, A2(fn, b, acc));
                else {
                    var c = r2.a;
                    var r3 = r2.b;
                    if (!r3.b) return A2(fn, a, A2(fn, b, A2(fn, c, acc)));
                    else {
                        var d = r3.a;
                        var r4 = r3.b;
                        var res = ctr > 500 ? A3($elm$core$List$foldl, fn, acc, $elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
                        return A2(fn, a, A2(fn, b, A2(fn, c, A2(fn, d, res))));
                    }
                }
            }
        }
    });
    var $elm$core$List$foldr = F3(function(fn, acc, ls) {
        return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
    });
    var $elm$core$List$map = F2(function(f, xs) {
        return A3($elm$core$List$foldr, F2(function(x, acc) {
            return A2($elm$core$List$cons, f(x), acc);
        }), _List_Nil, xs);
    });
    var $elm$html$Html$p = _VirtualDom_node("p");
    var $elm$html$Html$ul = _VirtualDom_node("ul");
    var $elm$html$Html$code = _VirtualDom_node("code");
    var $elm$browser$Debugger$Overlay$viewCode = function(name) {
        return A2($elm$html$Html$code, _List_Nil, _List_fromArray([
            $elm$html$Html$text(name)
        ]));
    };
    var $elm$browser$Debugger$Overlay$addCommas = function(items) {
        if (!items.b) return "";
        else {
            if (!items.b.b) {
                var item = items.a;
                return item;
            } else if (!items.b.b.b) {
                var item1 = items.a;
                var _v1 = items.b;
                var item2 = _v1.a;
                return item1 + (" and " + item2);
            } else {
                var lastItem = items.a;
                var otherItems = items.b;
                return A2($elm$core$String$join, ", ", _Utils_ap(otherItems, _List_fromArray([
                    " and " + lastItem
                ])));
            }
        }
    };
    var $elm$html$Html$li = _VirtualDom_node("li");
    var $elm$browser$Debugger$Overlay$problemToString = function(problem) {
        switch(problem.$){
            case "Function":
                return "functions";
            case "Decoder":
                return "JSON decoders";
            case "Task":
                return "tasks";
            case "Process":
                return "processes";
            case "Socket":
                return "web sockets";
            case "Request":
                return "HTTP requests";
            case "Program":
                return "programs";
            default:
                return "virtual DOM values";
        }
    };
    var $elm$browser$Debugger$Overlay$viewProblemType = function(_v0) {
        var name = _v0.name;
        var problems = _v0.problems;
        return A2($elm$html$Html$li, _List_Nil, _List_fromArray([
            $elm$browser$Debugger$Overlay$viewCode(name),
            $elm$html$Html$text(" can contain " + ($elm$browser$Debugger$Overlay$addCommas(A2($elm$core$List$map, $elm$browser$Debugger$Overlay$problemToString, problems)) + "."))
        ]));
    };
    var $elm$browser$Debugger$Overlay$viewBadMetadata = function(_v0) {
        var message = _v0.message;
        var problems = _v0.problems;
        return _List_fromArray([
            A2($elm$html$Html$p, _List_Nil, _List_fromArray([
                $elm$html$Html$text("The "),
                $elm$browser$Debugger$Overlay$viewCode(message),
                $elm$html$Html$text(" type of your program cannot be reliably serialized for history files.")
            ])),
            A2($elm$html$Html$p, _List_Nil, _List_fromArray([
                $elm$html$Html$text("Functions cannot be serialized, nor can values that contain functions. This is a problem in these places:")
            ])),
            A2($elm$html$Html$ul, _List_Nil, A2($elm$core$List$map, $elm$browser$Debugger$Overlay$viewProblemType, problems)),
            A2($elm$html$Html$p, _List_Nil, _List_fromArray([
                $elm$html$Html$text($elm$browser$Debugger$Overlay$goodNews1),
                A2($elm$html$Html$a, _List_fromArray([
                    $elm$html$Html$Attributes$href("https://guide.elm-lang.org/types/custom_types.html")
                ]), _List_fromArray([
                    $elm$html$Html$text("custom types")
                ])),
                $elm$html$Html$text(", in your messages. From there, your "),
                $elm$browser$Debugger$Overlay$viewCode("update"),
                $elm$html$Html$text($elm$browser$Debugger$Overlay$goodNews2)
            ]))
        ]);
    };
    var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
    var $elm$html$Html$map = $elm$virtual_dom$VirtualDom$map;
    var $elm$browser$Debugger$Overlay$Cancel = {
        $: "Cancel"
    };
    var $elm$browser$Debugger$Overlay$Proceed = {
        $: "Proceed"
    };
    var $elm$html$Html$button = _VirtualDom_node("button");
    var $elm$browser$Debugger$Overlay$viewButtons = function(buttons) {
        var btn = F2(function(msg, string) {
            return A2($elm$html$Html$button, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "margin-right", "20px"),
                $elm$html$Html$Events$onClick(msg)
            ]), _List_fromArray([
                $elm$html$Html$text(string)
            ]));
        });
        var buttonNodes = function() {
            if (buttons.$ === "Accept") {
                var proceed = buttons.a;
                return _List_fromArray([
                    A2(btn, $elm$browser$Debugger$Overlay$Proceed, proceed)
                ]);
            } else {
                var cancel = buttons.a;
                var proceed = buttons.b;
                return _List_fromArray([
                    A2(btn, $elm$browser$Debugger$Overlay$Cancel, cancel),
                    A2(btn, $elm$browser$Debugger$Overlay$Proceed, proceed)
                ]);
            }
        }();
        return A2($elm$html$Html$div, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "height", "60px"),
            A2($elm$html$Html$Attributes$style, "line-height", "60px"),
            A2($elm$html$Html$Attributes$style, "text-align", "right"),
            A2($elm$html$Html$Attributes$style, "background-color", "rgb(50, 50, 50)")
        ]), buttonNodes);
    };
    var $elm$browser$Debugger$Overlay$viewMessage = F4(function(config, title, details, buttons) {
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$id("elm-debugger-overlay"),
            A2($elm$html$Html$Attributes$style, "position", "fixed"),
            A2($elm$html$Html$Attributes$style, "top", "0"),
            A2($elm$html$Html$Attributes$style, "left", "0"),
            A2($elm$html$Html$Attributes$style, "width", "100vw"),
            A2($elm$html$Html$Attributes$style, "height", "100vh"),
            A2($elm$html$Html$Attributes$style, "color", "white"),
            A2($elm$html$Html$Attributes$style, "pointer-events", "none"),
            A2($elm$html$Html$Attributes$style, "font-family", "'Trebuchet MS', 'Lucida Grande', 'Bitstream Vera Sans', 'Helvetica Neue', sans-serif"),
            A2($elm$html$Html$Attributes$style, "z-index", "2147483647")
        ]), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "position", "absolute"),
                A2($elm$html$Html$Attributes$style, "width", "600px"),
                A2($elm$html$Html$Attributes$style, "height", "100vh"),
                A2($elm$html$Html$Attributes$style, "padding-left", "calc(50% - 300px)"),
                A2($elm$html$Html$Attributes$style, "padding-right", "calc(50% - 300px)"),
                A2($elm$html$Html$Attributes$style, "background-color", "rgba(200, 200, 200, 0.7)"),
                A2($elm$html$Html$Attributes$style, "pointer-events", "auto")
            ]), _List_fromArray([
                A2($elm$html$Html$div, _List_fromArray([
                    A2($elm$html$Html$Attributes$style, "font-size", "36px"),
                    A2($elm$html$Html$Attributes$style, "height", "80px"),
                    A2($elm$html$Html$Attributes$style, "background-color", "rgb(50, 50, 50)"),
                    A2($elm$html$Html$Attributes$style, "padding-left", "22px"),
                    A2($elm$html$Html$Attributes$style, "vertical-align", "middle"),
                    A2($elm$html$Html$Attributes$style, "line-height", "80px")
                ]), _List_fromArray([
                    $elm$html$Html$text(title)
                ])),
                A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$id("elm-debugger-details"),
                    A2($elm$html$Html$Attributes$style, "padding", " 8px 20px"),
                    A2($elm$html$Html$Attributes$style, "overflow-y", "auto"),
                    A2($elm$html$Html$Attributes$style, "max-height", "calc(100vh - 156px)"),
                    A2($elm$html$Html$Attributes$style, "background-color", "rgb(61, 61, 61)")
                ]), details),
                A2($elm$html$Html$map, config.wrap, $elm$browser$Debugger$Overlay$viewButtons(buttons))
            ]))
        ]));
    });
    var $elm$virtual_dom$VirtualDom$attribute = F2(function(key, value) {
        return A2(_VirtualDom_attribute, _VirtualDom_noOnOrFormAction(key), _VirtualDom_noJavaScriptOrHtmlUri(value));
    });
    var $elm$core$Basics$negate = function(n) {
        return -n;
    };
    var $elm$virtual_dom$VirtualDom$nodeNS = F2(function(namespace, tag) {
        return A2(_VirtualDom_nodeNS, namespace, _VirtualDom_noScript(tag));
    });
    var $elm$core$String$fromFloat = _String_fromNumber;
    var $elm$browser$Debugger$Overlay$viewShape = F4(function(x, y, angle, coordinates) {
        return A4($elm$virtual_dom$VirtualDom$nodeNS, "http://www.w3.org/2000/svg", "polygon", _List_fromArray([
            A2($elm$virtual_dom$VirtualDom$attribute, "points", coordinates),
            A2($elm$virtual_dom$VirtualDom$attribute, "transform", "translate(" + ($elm$core$String$fromFloat(x) + (" " + ($elm$core$String$fromFloat(y) + (") rotate(" + ($elm$core$String$fromFloat(-angle) + ")"))))))
        ]), _List_Nil);
    });
    var $elm$browser$Debugger$Overlay$elmLogo = A4($elm$virtual_dom$VirtualDom$nodeNS, "http://www.w3.org/2000/svg", "svg", _List_fromArray([
        A2($elm$virtual_dom$VirtualDom$attribute, "viewBox", "-300 -300 600 600"),
        A2($elm$virtual_dom$VirtualDom$attribute, "xmlns", "http://www.w3.org/2000/svg"),
        A2($elm$virtual_dom$VirtualDom$attribute, "fill", "currentColor"),
        A2($elm$virtual_dom$VirtualDom$attribute, "width", "24px"),
        A2($elm$virtual_dom$VirtualDom$attribute, "height", "24px")
    ]), _List_fromArray([
        A4($elm$virtual_dom$VirtualDom$nodeNS, "http://www.w3.org/2000/svg", "g", _List_fromArray([
            A2($elm$virtual_dom$VirtualDom$attribute, "transform", "scale(1 -1)")
        ]), _List_fromArray([
            A4($elm$browser$Debugger$Overlay$viewShape, 0, -210, 0, "-280,-90 0,190 280,-90"),
            A4($elm$browser$Debugger$Overlay$viewShape, -210, 0, 90, "-280,-90 0,190 280,-90"),
            A4($elm$browser$Debugger$Overlay$viewShape, 207, 207, 45, "-198,-66 0,132 198,-66"),
            A4($elm$browser$Debugger$Overlay$viewShape, 150, 0, 0, "-130,0 0,-130 130,0 0,130"),
            A4($elm$browser$Debugger$Overlay$viewShape, -89, 239, 0, "-191,61 69,61 191,-61 -69,-61"),
            A4($elm$browser$Debugger$Overlay$viewShape, 0, 106, 180, "-130,-44 0,86  130,-44"),
            A4($elm$browser$Debugger$Overlay$viewShape, 256, -150, 270, "-130,-44 0,86  130,-44")
        ]))
    ]));
    var $elm$core$String$length = _String_length;
    var $elm$browser$Debugger$Overlay$viewMiniControls = F2(function(config, numMsgs) {
        var string = $elm$core$String$fromInt(numMsgs);
        var width = $elm$core$String$fromInt(2 + $elm$core$String$length(string));
        return A2($elm$html$Html$div, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "position", "fixed"),
            A2($elm$html$Html$Attributes$style, "bottom", "2em"),
            A2($elm$html$Html$Attributes$style, "right", "2em"),
            A2($elm$html$Html$Attributes$style, "width", "calc(42px + " + (width + "ch)")),
            A2($elm$html$Html$Attributes$style, "height", "36px"),
            A2($elm$html$Html$Attributes$style, "background-color", "#1293D8"),
            A2($elm$html$Html$Attributes$style, "color", "white"),
            A2($elm$html$Html$Attributes$style, "font-family", "monospace"),
            A2($elm$html$Html$Attributes$style, "pointer-events", "auto"),
            A2($elm$html$Html$Attributes$style, "z-index", "2147483647"),
            A2($elm$html$Html$Attributes$style, "display", "flex"),
            A2($elm$html$Html$Attributes$style, "justify-content", "center"),
            A2($elm$html$Html$Attributes$style, "align-items", "center"),
            A2($elm$html$Html$Attributes$style, "cursor", "pointer"),
            $elm$html$Html$Events$onClick(config.open)
        ]), _List_fromArray([
            $elm$browser$Debugger$Overlay$elmLogo,
            A2($elm$html$Html$span, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "padding-left", "calc(1ch + 6px)"),
                A2($elm$html$Html$Attributes$style, "padding-right", "1ch")
            ]), _List_fromArray([
                $elm$html$Html$text(string)
            ]))
        ]));
    });
    var $elm$browser$Debugger$Overlay$explanationBad = "\nThe messages in this history do not match the messages handled by your\nprogram. I noticed changes in the following types:\n";
    var $elm$browser$Debugger$Overlay$explanationRisky = "\nThis history seems old. It will work with this program, but some\nmessages have been added since the history was created:\n";
    var $elm$core$List$intersperse = F2(function(sep, xs) {
        if (!xs.b) return _List_Nil;
        else {
            var hd = xs.a;
            var tl = xs.b;
            var step = F2(function(x, rest) {
                return A2($elm$core$List$cons, sep, A2($elm$core$List$cons, x, rest));
            });
            var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
            return A2($elm$core$List$cons, hd, spersed);
        }
    });
    var $elm$browser$Debugger$Overlay$viewMention = F2(function(tags, verbed) {
        var _v0 = A2($elm$core$List$map, $elm$browser$Debugger$Overlay$viewCode, $elm$core$List$reverse(tags));
        if (!_v0.b) return $elm$html$Html$text("");
        else {
            if (!_v0.b.b) {
                var tag = _v0.a;
                return A2($elm$html$Html$li, _List_Nil, _List_fromArray([
                    $elm$html$Html$text(verbed),
                    tag,
                    $elm$html$Html$text(".")
                ]));
            } else if (!_v0.b.b.b) {
                var tag2 = _v0.a;
                var _v1 = _v0.b;
                var tag1 = _v1.a;
                return A2($elm$html$Html$li, _List_Nil, _List_fromArray([
                    $elm$html$Html$text(verbed),
                    tag1,
                    $elm$html$Html$text(" and "),
                    tag2,
                    $elm$html$Html$text(".")
                ]));
            } else {
                var lastTag = _v0.a;
                var otherTags = _v0.b;
                return A2($elm$html$Html$li, _List_Nil, A2($elm$core$List$cons, $elm$html$Html$text(verbed), _Utils_ap(A2($elm$core$List$intersperse, $elm$html$Html$text(", "), $elm$core$List$reverse(otherTags)), _List_fromArray([
                    $elm$html$Html$text(", and "),
                    lastTag,
                    $elm$html$Html$text(".")
                ]))));
            }
        }
    });
    var $elm$browser$Debugger$Overlay$viewChange = function(change) {
        return A2($elm$html$Html$li, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "margin", "8px 0")
        ]), function() {
            if (change.$ === "AliasChange") {
                var name = change.a;
                return _List_fromArray([
                    A2($elm$html$Html$span, _List_fromArray([
                        A2($elm$html$Html$Attributes$style, "font-size", "1.5em")
                    ]), _List_fromArray([
                        $elm$browser$Debugger$Overlay$viewCode(name)
                    ]))
                ]);
            } else {
                var name = change.a;
                var removed = change.b.removed;
                var changed = change.b.changed;
                var added = change.b.added;
                var argsMatch = change.b.argsMatch;
                return _List_fromArray([
                    A2($elm$html$Html$span, _List_fromArray([
                        A2($elm$html$Html$Attributes$style, "font-size", "1.5em")
                    ]), _List_fromArray([
                        $elm$browser$Debugger$Overlay$viewCode(name)
                    ])),
                    A2($elm$html$Html$ul, _List_fromArray([
                        A2($elm$html$Html$Attributes$style, "list-style-type", "disc"),
                        A2($elm$html$Html$Attributes$style, "padding-left", "2em")
                    ]), _List_fromArray([
                        A2($elm$browser$Debugger$Overlay$viewMention, removed, "Removed "),
                        A2($elm$browser$Debugger$Overlay$viewMention, changed, "Changed "),
                        A2($elm$browser$Debugger$Overlay$viewMention, added, "Added ")
                    ])),
                    argsMatch ? $elm$html$Html$text("") : $elm$html$Html$text("This may be due to the fact that the type variable names changed.")
                ]);
            }
        }());
    };
    var $elm$browser$Debugger$Overlay$viewReport = F2(function(isBad, report) {
        switch(report.$){
            case "CorruptHistory":
                return _List_fromArray([
                    $elm$html$Html$text("Looks like this history file is corrupt. I cannot understand it.")
                ]);
            case "VersionChanged":
                var old = report.a;
                var _new = report.b;
                return _List_fromArray([
                    $elm$html$Html$text("This history was created with Elm " + (old + (", but you are using Elm " + (_new + " right now."))))
                ]);
            case "MessageChanged":
                var old = report.a;
                var _new = report.b;
                return _List_fromArray([
                    $elm$html$Html$text("To import some other history, the overall message type must be the same. The old history has "),
                    $elm$browser$Debugger$Overlay$viewCode(old),
                    $elm$html$Html$text(" messages, but the new program works with "),
                    $elm$browser$Debugger$Overlay$viewCode(_new),
                    $elm$html$Html$text(" messages.")
                ]);
            default:
                var changes = report.a;
                return _List_fromArray([
                    A2($elm$html$Html$p, _List_Nil, _List_fromArray([
                        $elm$html$Html$text(isBad ? $elm$browser$Debugger$Overlay$explanationBad : $elm$browser$Debugger$Overlay$explanationRisky)
                    ])),
                    A2($elm$html$Html$ul, _List_fromArray([
                        A2($elm$html$Html$Attributes$style, "list-style-type", "none"),
                        A2($elm$html$Html$Attributes$style, "padding-left", "20px")
                    ]), A2($elm$core$List$map, $elm$browser$Debugger$Overlay$viewChange, changes))
                ]);
        }
    });
    var $elm$browser$Debugger$Overlay$view = F5(function(config, isPaused, isOpen, numMsgs, state) {
        switch(state.$){
            case "None":
                return isOpen ? $elm$html$Html$text("") : isPaused ? A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$id("elm-debugger-overlay"),
                    A2($elm$html$Html$Attributes$style, "position", "fixed"),
                    A2($elm$html$Html$Attributes$style, "top", "0"),
                    A2($elm$html$Html$Attributes$style, "left", "0"),
                    A2($elm$html$Html$Attributes$style, "width", "100vw"),
                    A2($elm$html$Html$Attributes$style, "height", "100vh"),
                    A2($elm$html$Html$Attributes$style, "cursor", "pointer"),
                    A2($elm$html$Html$Attributes$style, "display", "flex"),
                    A2($elm$html$Html$Attributes$style, "align-items", "center"),
                    A2($elm$html$Html$Attributes$style, "justify-content", "center"),
                    A2($elm$html$Html$Attributes$style, "pointer-events", "auto"),
                    A2($elm$html$Html$Attributes$style, "background-color", "rgba(200, 200, 200, 0.7)"),
                    A2($elm$html$Html$Attributes$style, "color", "white"),
                    A2($elm$html$Html$Attributes$style, "font-family", "'Trebuchet MS', 'Lucida Grande', 'Bitstream Vera Sans', 'Helvetica Neue', sans-serif"),
                    A2($elm$html$Html$Attributes$style, "z-index", "2147483646"),
                    $elm$html$Html$Events$onClick(config.resume)
                ]), _List_fromArray([
                    A2($elm$html$Html$span, _List_fromArray([
                        A2($elm$html$Html$Attributes$style, "font-size", "80px")
                    ]), _List_fromArray([
                        $elm$html$Html$text("Click to Resume")
                    ])),
                    A2($elm$browser$Debugger$Overlay$viewMiniControls, config, numMsgs)
                ])) : A2($elm$browser$Debugger$Overlay$viewMiniControls, config, numMsgs);
            case "BadMetadata":
                var badMetadata_ = state.a;
                return A4($elm$browser$Debugger$Overlay$viewMessage, config, "Cannot use Import or Export", $elm$browser$Debugger$Overlay$viewBadMetadata(badMetadata_), $elm$browser$Debugger$Overlay$Accept("Ok"));
            case "BadImport":
                var report = state.a;
                return A4($elm$browser$Debugger$Overlay$viewMessage, config, "Cannot Import History", A2($elm$browser$Debugger$Overlay$viewReport, true, report), $elm$browser$Debugger$Overlay$Accept("Ok"));
            default:
                var report = state.a;
                return A4($elm$browser$Debugger$Overlay$viewMessage, config, "Warning", A2($elm$browser$Debugger$Overlay$viewReport, false, report), A2($elm$browser$Debugger$Overlay$Choose, "Cancel", "Import Anyway"));
        }
    });
    var $elm$browser$Debugger$Main$cornerView = function(model) {
        return A5($elm$browser$Debugger$Overlay$view, {
            exportHistory: $elm$browser$Debugger$Main$Export,
            importHistory: $elm$browser$Debugger$Main$Import,
            open: $elm$browser$Debugger$Main$Open,
            resume: $elm$browser$Debugger$Main$Resume,
            wrap: $elm$browser$Debugger$Main$OverlayMsg
        }, $elm$browser$Debugger$Main$isPaused(model.state), _Debugger_isOpen(model.popout), $elm$browser$Debugger$History$size(model.history), model.overlay);
    };
    var $elm$core$Dict$RBEmpty_elm_builtin = {
        $: "RBEmpty_elm_builtin"
    };
    var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
    var $elm$core$Set$foldr = F3(function(func, initialState, _v0) {
        var dict = _v0.a;
        return A3($elm$core$Dict$foldr, F3(function(key, _v1, state) {
            return A2(func, key, state);
        }), initialState, dict);
    });
    var $elm$browser$Debugger$Main$getCurrentModel = function(state) {
        if (state.$ === "Running") {
            var model = state.a;
            return model;
        } else {
            var model = state.b;
            return model;
        }
    };
    var $elm$browser$Debugger$Main$getUserModel = function(model) {
        return $elm$browser$Debugger$Main$getCurrentModel(model.state);
    };
    var $elm$browser$Debugger$Main$initialWindowHeight = 420;
    var $elm$browser$Debugger$Main$initialWindowWidth = 900;
    var $elm$core$Dict$Black = {
        $: "Black"
    };
    var $elm$core$Dict$RBNode_elm_builtin = F5(function(a, b, c, d, e) {
        return {
            $: "RBNode_elm_builtin",
            a: a,
            b: b,
            c: c,
            d: d,
            e: e
        };
    });
    var $elm$core$Dict$Red = {
        $: "Red"
    };
    var $elm$core$Dict$balance = F5(function(color, key, value, left, right) {
        if (right.$ === "RBNode_elm_builtin" && right.a.$ === "Red") {
            var _v1 = right.a;
            var rK = right.b;
            var rV = right.c;
            var rLeft = right.d;
            var rRight = right.e;
            if (left.$ === "RBNode_elm_builtin" && left.a.$ === "Red") {
                var _v3 = left.a;
                var lK = left.b;
                var lV = left.c;
                var lLeft = left.d;
                var lRight = left.e;
                return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight), A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
            } else return A5($elm$core$Dict$RBNode_elm_builtin, color, rK, rV, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft), rRight);
        } else {
            if (left.$ === "RBNode_elm_builtin" && left.a.$ === "Red" && left.d.$ === "RBNode_elm_builtin" && left.d.a.$ === "Red") {
                var _v5 = left.a;
                var lK = left.b;
                var lV = left.c;
                var _v6 = left.d;
                var _v7 = _v6.a;
                var llK = _v6.b;
                var llV = _v6.c;
                var llLeft = _v6.d;
                var llRight = _v6.e;
                var lRight = left.e;
                return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight), A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
            } else return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
        }
    });
    var $elm$core$Basics$compare = _Utils_compare;
    var $elm$core$Dict$insertHelp = F3(function(key, value, dict) {
        if (dict.$ === "RBEmpty_elm_builtin") return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
        else {
            var nColor = dict.a;
            var nKey = dict.b;
            var nValue = dict.c;
            var nLeft = dict.d;
            var nRight = dict.e;
            var _v1 = A2($elm$core$Basics$compare, key, nKey);
            switch(_v1.$){
                case "LT":
                    return A5($elm$core$Dict$balance, nColor, nKey, nValue, A3($elm$core$Dict$insertHelp, key, value, nLeft), nRight);
                case "EQ":
                    return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
                default:
                    return A5($elm$core$Dict$balance, nColor, nKey, nValue, nLeft, A3($elm$core$Dict$insertHelp, key, value, nRight));
            }
        }
    });
    var $elm$core$Dict$insert = F3(function(key, value, dict) {
        var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
        if (_v0.$ === "RBNode_elm_builtin" && _v0.a.$ === "Red") {
            var _v1 = _v0.a;
            var k = _v0.b;
            var v = _v0.c;
            var l = _v0.d;
            var r = _v0.e;
            return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
        } else {
            var x = _v0;
            return x;
        }
    });
    var $elm$browser$Debugger$Main$cachedHistory = function(model) {
        var _v0 = model.state;
        if (_v0.$ === "Running") return model.history;
        else {
            var history1 = _v0.e;
            return history1;
        }
    };
    var $elm$virtual_dom$VirtualDom$node = function(tag) {
        return _VirtualDom_node(_VirtualDom_noScript(tag));
    };
    var $elm$html$Html$node = $elm$virtual_dom$VirtualDom$node;
    var $elm$browser$Debugger$Main$DragEnd = {
        $: "DragEnd"
    };
    var $elm$browser$Debugger$Main$getDragStatus = function(layout) {
        if (layout.$ === "Horizontal") {
            var status = layout.a;
            return status;
        } else {
            var status = layout.a;
            return status;
        }
    };
    var $elm$browser$Debugger$Main$Drag = function(a) {
        return {
            $: "Drag",
            a: a
        };
    };
    var $elm$browser$Debugger$Main$DragInfo = F5(function(x, y, down, width, height) {
        return {
            down: down,
            height: height,
            width: width,
            x: x,
            y: y
        };
    });
    var $elm$json$Json$Decode$field = _Json_decodeField;
    var $elm$json$Json$Decode$at = F2(function(fields, decoder) {
        return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
    });
    var $elm$json$Json$Decode$float = _Json_decodeFloat;
    var $elm$browser$Debugger$Main$decodeDimension = function(field) {
        return A2($elm$json$Json$Decode$at, _List_fromArray([
            "currentTarget",
            "ownerDocument",
            "defaultView",
            field
        ]), $elm$json$Json$Decode$float);
    };
    var $elm$json$Json$Decode$int = _Json_decodeInt;
    var $elm$json$Json$Decode$map5 = _Json_map5;
    var $elm$browser$Debugger$Main$onMouseMove = A2($elm$html$Html$Events$on, "mousemove", A2($elm$json$Json$Decode$map, $elm$browser$Debugger$Main$Drag, A6($elm$json$Json$Decode$map5, $elm$browser$Debugger$Main$DragInfo, A2($elm$json$Json$Decode$field, "pageX", $elm$json$Json$Decode$float), A2($elm$json$Json$Decode$field, "pageY", $elm$json$Json$Decode$float), A2($elm$json$Json$Decode$field, "buttons", A2($elm$json$Json$Decode$map, function(v) {
        return v === 1;
    }, $elm$json$Json$Decode$int)), $elm$browser$Debugger$Main$decodeDimension("innerWidth"), $elm$browser$Debugger$Main$decodeDimension("innerHeight"))));
    var $elm$html$Html$Events$onMouseUp = function(msg) {
        return A2($elm$html$Html$Events$on, "mouseup", $elm$json$Json$Decode$succeed(msg));
    };
    var $elm$browser$Debugger$Main$toDragListeners = function(layout) {
        var _v0 = $elm$browser$Debugger$Main$getDragStatus(layout);
        if (_v0.$ === "Static") return _List_Nil;
        else return _List_fromArray([
            $elm$browser$Debugger$Main$onMouseMove,
            $elm$html$Html$Events$onMouseUp($elm$browser$Debugger$Main$DragEnd)
        ]);
    };
    var $elm$browser$Debugger$Main$toFlexDirection = function(layout) {
        if (layout.$ === "Horizontal") return "row";
        else return "column-reverse";
    };
    var $elm$browser$Debugger$Main$DragStart = {
        $: "DragStart"
    };
    var $elm$html$Html$Events$onMouseDown = function(msg) {
        return A2($elm$html$Html$Events$on, "mousedown", $elm$json$Json$Decode$succeed(msg));
    };
    var $elm$browser$Debugger$Main$toPercent = function(fraction) {
        return $elm$core$String$fromFloat(100 * fraction) + "%";
    };
    var $elm$browser$Debugger$Main$viewDragZone = function(layout) {
        if (layout.$ === "Horizontal") {
            var x = layout.b;
            return A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "position", "absolute"),
                A2($elm$html$Html$Attributes$style, "top", "0"),
                A2($elm$html$Html$Attributes$style, "left", $elm$browser$Debugger$Main$toPercent(x)),
                A2($elm$html$Html$Attributes$style, "margin-left", "-5px"),
                A2($elm$html$Html$Attributes$style, "width", "10px"),
                A2($elm$html$Html$Attributes$style, "height", "100%"),
                A2($elm$html$Html$Attributes$style, "cursor", "col-resize"),
                $elm$html$Html$Events$onMouseDown($elm$browser$Debugger$Main$DragStart)
            ]), _List_Nil);
        } else {
            var y = layout.c;
            return A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "position", "absolute"),
                A2($elm$html$Html$Attributes$style, "top", $elm$browser$Debugger$Main$toPercent(y)),
                A2($elm$html$Html$Attributes$style, "left", "0"),
                A2($elm$html$Html$Attributes$style, "margin-top", "-5px"),
                A2($elm$html$Html$Attributes$style, "width", "100%"),
                A2($elm$html$Html$Attributes$style, "height", "10px"),
                A2($elm$html$Html$Attributes$style, "cursor", "row-resize"),
                $elm$html$Html$Events$onMouseDown($elm$browser$Debugger$Main$DragStart)
            ]), _List_Nil);
        }
    };
    var $elm$browser$Debugger$Main$TweakExpandoModel = function(a) {
        return {
            $: "TweakExpandoModel",
            a: a
        };
    };
    var $elm$browser$Debugger$Main$TweakExpandoMsg = function(a) {
        return {
            $: "TweakExpandoMsg",
            a: a
        };
    };
    var $elm$browser$Debugger$Main$toExpandoPercents = function(layout) {
        if (layout.$ === "Horizontal") {
            var x = layout.b;
            return _Utils_Tuple2($elm$browser$Debugger$Main$toPercent(1 - x), "100%");
        } else {
            var y = layout.c;
            return _Utils_Tuple2("100%", $elm$browser$Debugger$Main$toPercent(y));
        }
    };
    var $elm$browser$Debugger$Main$toMouseBlocker = function(layout) {
        var _v0 = $elm$browser$Debugger$Main$getDragStatus(layout);
        if (_v0.$ === "Static") return "auto";
        else return "none";
    };
    var $elm$browser$Debugger$Expando$Field = F2(function(a, b) {
        return {
            $: "Field",
            a: a,
            b: b
        };
    });
    var $elm$browser$Debugger$Expando$Index = F3(function(a, b, c) {
        return {
            $: "Index",
            a: a,
            b: b,
            c: c
        };
    });
    var $elm$browser$Debugger$Expando$Key = {
        $: "Key"
    };
    var $elm$browser$Debugger$Expando$None = {
        $: "None"
    };
    var $elm$browser$Debugger$Expando$Toggle = {
        $: "Toggle"
    };
    var $elm$browser$Debugger$Expando$Value = {
        $: "Value"
    };
    var $elm$browser$Debugger$Expando$blue = A2($elm$html$Html$Attributes$style, "color", "rgb(28, 0, 207)");
    var $elm$core$Basics$composeL = F3(function(g, f, x) {
        return g(f(x));
    });
    var $elm$browser$Debugger$Expando$leftPad = function(maybeKey) {
        if (maybeKey.$ === "Nothing") return _List_Nil;
        else return _List_fromArray([
            A2($elm$html$Html$Attributes$style, "padding-left", "4ch")
        ]);
    };
    var $elm$browser$Debugger$Expando$makeArrow = function(arrow) {
        return A2($elm$html$Html$span, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "color", "#777"),
            A2($elm$html$Html$Attributes$style, "padding-left", "2ch"),
            A2($elm$html$Html$Attributes$style, "width", "2ch"),
            A2($elm$html$Html$Attributes$style, "display", "inline-block")
        ]), _List_fromArray([
            $elm$html$Html$text(arrow)
        ]));
    };
    var $elm$browser$Debugger$Expando$purple = A2($elm$html$Html$Attributes$style, "color", "rgb(136, 19, 145)");
    var $elm$browser$Debugger$Expando$lineStarter = F3(function(maybeKey, maybeIsClosed, description) {
        var arrow = function() {
            if (maybeIsClosed.$ === "Nothing") return $elm$browser$Debugger$Expando$makeArrow("");
            else {
                if (maybeIsClosed.a) return $elm$browser$Debugger$Expando$makeArrow("\u25B8");
                else return $elm$browser$Debugger$Expando$makeArrow("\u25BE");
            }
        }();
        if (maybeKey.$ === "Nothing") return A2($elm$core$List$cons, arrow, description);
        else {
            var key = maybeKey.a;
            return A2($elm$core$List$cons, arrow, A2($elm$core$List$cons, A2($elm$html$Html$span, _List_fromArray([
                $elm$browser$Debugger$Expando$purple
            ]), _List_fromArray([
                $elm$html$Html$text(key)
            ])), A2($elm$core$List$cons, $elm$html$Html$text(" = "), description)));
        }
    });
    var $elm$browser$Debugger$Expando$red = A2($elm$html$Html$Attributes$style, "color", "rgb(196, 26, 22)");
    var $elm$core$Tuple$second = function(_v0) {
        var y = _v0.b;
        return y;
    };
    var $elm$browser$Debugger$Expando$seqTypeToString = F2(function(n, seqType) {
        switch(seqType.$){
            case "ListSeq":
                return "List(" + ($elm$core$String$fromInt(n) + ")");
            case "SetSeq":
                return "Set(" + ($elm$core$String$fromInt(n) + ")");
            default:
                return "Array(" + ($elm$core$String$fromInt(n) + ")");
        }
    });
    var $elm$core$String$slice = _String_slice;
    var $elm$core$String$left = F2(function(n, string) {
        return n < 1 ? "" : A3($elm$core$String$slice, 0, n, string);
    });
    var $elm$core$String$right = F2(function(n, string) {
        return n < 1 ? "" : A3($elm$core$String$slice, -n, $elm$core$String$length(string), string);
    });
    var $elm$browser$Debugger$Expando$elideMiddle = function(str) {
        return $elm$core$String$length(str) <= 18 ? str : A2($elm$core$String$left, 8, str) + ("..." + A2($elm$core$String$right, 8, str));
    };
    var $elm$core$Dict$isEmpty = function(dict) {
        if (dict.$ === "RBEmpty_elm_builtin") return true;
        else return false;
    };
    var $elm$browser$Debugger$Expando$viewExtraTinyRecord = F3(function(length, starter, entries) {
        if (!entries.b) return _Utils_Tuple2(length + 1, _List_fromArray([
            $elm$html$Html$text("}")
        ]));
        else {
            var field = entries.a;
            var rest = entries.b;
            var nextLength = length + $elm$core$String$length(field) + 1;
            if (nextLength > 18) return _Utils_Tuple2(length + 2, _List_fromArray([
                $elm$html$Html$text("\u2026}")
            ]));
            else {
                var _v1 = A3($elm$browser$Debugger$Expando$viewExtraTinyRecord, nextLength, ",", rest);
                var finalLength = _v1.a;
                var otherHtmls = _v1.b;
                return _Utils_Tuple2(finalLength, A2($elm$core$List$cons, $elm$html$Html$text(starter), A2($elm$core$List$cons, A2($elm$html$Html$span, _List_fromArray([
                    $elm$browser$Debugger$Expando$purple
                ]), _List_fromArray([
                    $elm$html$Html$text(field)
                ])), otherHtmls)));
            }
        }
    });
    var $elm$browser$Debugger$Expando$viewTinyHelp = function(str) {
        return _Utils_Tuple2($elm$core$String$length(str), _List_fromArray([
            $elm$html$Html$text(str)
        ]));
    };
    var $elm$core$Maybe$withDefault = F2(function(_default, maybe) {
        if (maybe.$ === "Just") {
            var value = maybe.a;
            return value;
        } else return _default;
    });
    var $elm$browser$Debugger$Expando$viewExtraTiny = function(value) {
        if (value.$ === "Record") {
            var record = value.b;
            return A3($elm$browser$Debugger$Expando$viewExtraTinyRecord, 0, "{", $elm$core$Dict$keys(record));
        } else return $elm$browser$Debugger$Expando$viewTiny(value);
    };
    var $elm$browser$Debugger$Expando$viewTiny = function(value) {
        switch(value.$){
            case "S":
                var stringRep = value.a;
                var str = $elm$browser$Debugger$Expando$elideMiddle(stringRep);
                return _Utils_Tuple2($elm$core$String$length(str), _List_fromArray([
                    A2($elm$html$Html$span, _List_fromArray([
                        $elm$browser$Debugger$Expando$red
                    ]), _List_fromArray([
                        $elm$html$Html$text(str)
                    ]))
                ]));
            case "Primitive":
                var stringRep = value.a;
                return _Utils_Tuple2($elm$core$String$length(stringRep), _List_fromArray([
                    A2($elm$html$Html$span, _List_fromArray([
                        $elm$browser$Debugger$Expando$blue
                    ]), _List_fromArray([
                        $elm$html$Html$text(stringRep)
                    ]))
                ]));
            case "Sequence":
                var seqType = value.a;
                var valueList = value.c;
                return $elm$browser$Debugger$Expando$viewTinyHelp(A2($elm$browser$Debugger$Expando$seqTypeToString, $elm$core$List$length(valueList), seqType));
            case "Dictionary":
                var keyValuePairs = value.b;
                return $elm$browser$Debugger$Expando$viewTinyHelp("Dict(" + ($elm$core$String$fromInt($elm$core$List$length(keyValuePairs)) + ")"));
            case "Record":
                var record = value.b;
                return $elm$browser$Debugger$Expando$viewTinyRecord(record);
            default:
                if (!value.c.b) {
                    var maybeName = value.a;
                    return $elm$browser$Debugger$Expando$viewTinyHelp(A2($elm$core$Maybe$withDefault, "Unit", maybeName));
                } else {
                    var maybeName = value.a;
                    var valueList = value.c;
                    return $elm$browser$Debugger$Expando$viewTinyHelp(function() {
                        if (maybeName.$ === "Nothing") return "Tuple(" + ($elm$core$String$fromInt($elm$core$List$length(valueList)) + ")");
                        else {
                            var name = maybeName.a;
                            return name + " \u2026";
                        }
                    }());
                }
        }
    };
    var $elm$browser$Debugger$Expando$viewTinyRecord = function(record) {
        return $elm$core$Dict$isEmpty(record) ? _Utils_Tuple2(2, _List_fromArray([
            $elm$html$Html$text("{}")
        ])) : A3($elm$browser$Debugger$Expando$viewTinyRecordHelp, 0, "{ ", $elm$core$Dict$toList(record));
    };
    var $elm$browser$Debugger$Expando$viewTinyRecordHelp = F3(function(length, starter, entries) {
        if (!entries.b) return _Utils_Tuple2(length + 2, _List_fromArray([
            $elm$html$Html$text(" }")
        ]));
        else {
            var _v1 = entries.a;
            var field = _v1.a;
            var value = _v1.b;
            var rest = entries.b;
            var fieldLen = $elm$core$String$length(field);
            var _v2 = $elm$browser$Debugger$Expando$viewExtraTiny(value);
            var valueLen = _v2.a;
            var valueHtmls = _v2.b;
            var newLength = length + fieldLen + valueLen + 5;
            if (newLength > 60) return _Utils_Tuple2(length + 4, _List_fromArray([
                $elm$html$Html$text(", \u2026 }")
            ]));
            else {
                var _v3 = A3($elm$browser$Debugger$Expando$viewTinyRecordHelp, newLength, ", ", rest);
                var finalLength = _v3.a;
                var otherHtmls = _v3.b;
                return _Utils_Tuple2(finalLength, A2($elm$core$List$cons, $elm$html$Html$text(starter), A2($elm$core$List$cons, A2($elm$html$Html$span, _List_fromArray([
                    $elm$browser$Debugger$Expando$purple
                ]), _List_fromArray([
                    $elm$html$Html$text(field)
                ])), A2($elm$core$List$cons, $elm$html$Html$text(" = "), A2($elm$core$List$cons, A2($elm$html$Html$span, _List_Nil, valueHtmls), otherHtmls)))));
            }
        }
    });
    var $elm$browser$Debugger$Expando$view = F2(function(maybeKey, expando) {
        switch(expando.$){
            case "S":
                var stringRep = expando.a;
                return A2($elm$html$Html$div, $elm$browser$Debugger$Expando$leftPad(maybeKey), A3($elm$browser$Debugger$Expando$lineStarter, maybeKey, $elm$core$Maybe$Nothing, _List_fromArray([
                    A2($elm$html$Html$span, _List_fromArray([
                        $elm$browser$Debugger$Expando$red
                    ]), _List_fromArray([
                        $elm$html$Html$text(stringRep)
                    ]))
                ])));
            case "Primitive":
                var stringRep = expando.a;
                return A2($elm$html$Html$div, $elm$browser$Debugger$Expando$leftPad(maybeKey), A3($elm$browser$Debugger$Expando$lineStarter, maybeKey, $elm$core$Maybe$Nothing, _List_fromArray([
                    A2($elm$html$Html$span, _List_fromArray([
                        $elm$browser$Debugger$Expando$blue
                    ]), _List_fromArray([
                        $elm$html$Html$text(stringRep)
                    ]))
                ])));
            case "Sequence":
                var seqType = expando.a;
                var isClosed = expando.b;
                var valueList = expando.c;
                return A4($elm$browser$Debugger$Expando$viewSequence, maybeKey, seqType, isClosed, valueList);
            case "Dictionary":
                var isClosed = expando.a;
                var keyValuePairs = expando.b;
                return A3($elm$browser$Debugger$Expando$viewDictionary, maybeKey, isClosed, keyValuePairs);
            case "Record":
                var isClosed = expando.a;
                var valueDict = expando.b;
                return A3($elm$browser$Debugger$Expando$viewRecord, maybeKey, isClosed, valueDict);
            default:
                var maybeName = expando.a;
                var isClosed = expando.b;
                var valueList = expando.c;
                return A4($elm$browser$Debugger$Expando$viewConstructor, maybeKey, maybeName, isClosed, valueList);
        }
    });
    var $elm$browser$Debugger$Expando$viewConstructor = F4(function(maybeKey, maybeName, isClosed, valueList) {
        var tinyArgs = A2($elm$core$List$map, A2($elm$core$Basics$composeL, $elm$core$Tuple$second, $elm$browser$Debugger$Expando$viewExtraTiny), valueList);
        var description = function() {
            var _v7 = _Utils_Tuple2(maybeName, tinyArgs);
            if (_v7.a.$ === "Nothing") {
                if (!_v7.b.b) {
                    var _v8 = _v7.a;
                    return _List_fromArray([
                        $elm$html$Html$text("()")
                    ]);
                } else {
                    var _v9 = _v7.a;
                    var _v10 = _v7.b;
                    var x = _v10.a;
                    var xs = _v10.b;
                    return A2($elm$core$List$cons, $elm$html$Html$text("( "), A2($elm$core$List$cons, A2($elm$html$Html$span, _List_Nil, x), A3($elm$core$List$foldr, F2(function(args, rest) {
                        return A2($elm$core$List$cons, $elm$html$Html$text(", "), A2($elm$core$List$cons, A2($elm$html$Html$span, _List_Nil, args), rest));
                    }), _List_fromArray([
                        $elm$html$Html$text(" )")
                    ]), xs)));
                }
            } else if (!_v7.b.b) {
                var name = _v7.a.a;
                return _List_fromArray([
                    $elm$html$Html$text(name)
                ]);
            } else {
                var name = _v7.a.a;
                var _v11 = _v7.b;
                var x = _v11.a;
                var xs = _v11.b;
                return A2($elm$core$List$cons, $elm$html$Html$text(name + " "), A2($elm$core$List$cons, A2($elm$html$Html$span, _List_Nil, x), A3($elm$core$List$foldr, F2(function(args, rest) {
                    return A2($elm$core$List$cons, $elm$html$Html$text(" "), A2($elm$core$List$cons, A2($elm$html$Html$span, _List_Nil, args), rest));
                }), _List_Nil, xs)));
            }
        }();
        var _v4 = function() {
            if (!valueList.b) return _Utils_Tuple2($elm$core$Maybe$Nothing, A2($elm$html$Html$div, _List_Nil, _List_Nil));
            else {
                if (!valueList.b.b) {
                    var entry = valueList.a;
                    switch(entry.$){
                        case "S":
                            return _Utils_Tuple2($elm$core$Maybe$Nothing, A2($elm$html$Html$div, _List_Nil, _List_Nil));
                        case "Primitive":
                            return _Utils_Tuple2($elm$core$Maybe$Nothing, A2($elm$html$Html$div, _List_Nil, _List_Nil));
                        case "Sequence":
                            var subValueList = entry.c;
                            return _Utils_Tuple2($elm$core$Maybe$Just(isClosed), isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2($elm$html$Html$map, A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0), $elm$browser$Debugger$Expando$viewSequenceOpen(subValueList)));
                        case "Dictionary":
                            var keyValuePairs = entry.b;
                            return _Utils_Tuple2($elm$core$Maybe$Just(isClosed), isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2($elm$html$Html$map, A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0), $elm$browser$Debugger$Expando$viewDictionaryOpen(keyValuePairs)));
                        case "Record":
                            var record = entry.b;
                            return _Utils_Tuple2($elm$core$Maybe$Just(isClosed), isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2($elm$html$Html$map, A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0), $elm$browser$Debugger$Expando$viewRecordOpen(record)));
                        default:
                            var subValueList = entry.c;
                            return _Utils_Tuple2($elm$core$Maybe$Just(isClosed), isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2($elm$html$Html$map, A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0), $elm$browser$Debugger$Expando$viewConstructorOpen(subValueList)));
                    }
                } else return _Utils_Tuple2($elm$core$Maybe$Just(isClosed), isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : $elm$browser$Debugger$Expando$viewConstructorOpen(valueList));
            }
        }();
        var maybeIsClosed = _v4.a;
        var openHtml = _v4.b;
        return A2($elm$html$Html$div, $elm$browser$Debugger$Expando$leftPad(maybeKey), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
            ]), A3($elm$browser$Debugger$Expando$lineStarter, maybeKey, maybeIsClosed, description)),
            openHtml
        ]));
    });
    var $elm$browser$Debugger$Expando$viewConstructorEntry = F2(function(index, value) {
        return A2($elm$html$Html$map, A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, index), A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Just($elm$core$String$fromInt(index)), value));
    });
    var $elm$browser$Debugger$Expando$viewConstructorOpen = function(valueList) {
        return A2($elm$html$Html$div, _List_Nil, A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewConstructorEntry, valueList));
    };
    var $elm$browser$Debugger$Expando$viewDictionary = F3(function(maybeKey, isClosed, keyValuePairs) {
        var starter = "Dict(" + ($elm$core$String$fromInt($elm$core$List$length(keyValuePairs)) + ")");
        return A2($elm$html$Html$div, $elm$browser$Debugger$Expando$leftPad(maybeKey), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
            ]), A3($elm$browser$Debugger$Expando$lineStarter, maybeKey, $elm$core$Maybe$Just(isClosed), _List_fromArray([
                $elm$html$Html$text(starter)
            ]))),
            isClosed ? $elm$html$Html$text("") : $elm$browser$Debugger$Expando$viewDictionaryOpen(keyValuePairs)
        ]));
    });
    var $elm$browser$Debugger$Expando$viewDictionaryEntry = F2(function(index, _v2) {
        var key = _v2.a;
        var value = _v2.b;
        switch(key.$){
            case "S":
                var stringRep = key.a;
                return A2($elm$html$Html$map, A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index), A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Just(stringRep), value));
            case "Primitive":
                var stringRep = key.a;
                return A2($elm$html$Html$map, A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index), A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Just(stringRep), value));
            default:
                return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
                    A2($elm$html$Html$map, A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Key, index), A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Just("key"), key)),
                    A2($elm$html$Html$map, A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index), A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Just("value"), value))
                ]));
        }
    });
    var $elm$browser$Debugger$Expando$viewDictionaryOpen = function(keyValuePairs) {
        return A2($elm$html$Html$div, _List_Nil, A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewDictionaryEntry, keyValuePairs));
    };
    var $elm$browser$Debugger$Expando$viewRecord = F3(function(maybeKey, isClosed, record) {
        var _v1 = isClosed ? _Utils_Tuple3($elm$browser$Debugger$Expando$viewTinyRecord(record).b, $elm$html$Html$text(""), $elm$html$Html$text("")) : _Utils_Tuple3(_List_fromArray([
            $elm$html$Html$text("{")
        ]), $elm$browser$Debugger$Expando$viewRecordOpen(record), A2($elm$html$Html$div, $elm$browser$Debugger$Expando$leftPad($elm$core$Maybe$Just(_Utils_Tuple0)), _List_fromArray([
            $elm$html$Html$text("}")
        ])));
        var start = _v1.a;
        var middle = _v1.b;
        var end = _v1.c;
        return A2($elm$html$Html$div, $elm$browser$Debugger$Expando$leftPad(maybeKey), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
            ]), A3($elm$browser$Debugger$Expando$lineStarter, maybeKey, $elm$core$Maybe$Just(isClosed), start)),
            middle,
            end
        ]));
    });
    var $elm$browser$Debugger$Expando$viewRecordEntry = function(_v0) {
        var field = _v0.a;
        var value = _v0.b;
        return A2($elm$html$Html$map, $elm$browser$Debugger$Expando$Field(field), A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Just(field), value));
    };
    var $elm$browser$Debugger$Expando$viewRecordOpen = function(record) {
        return A2($elm$html$Html$div, _List_Nil, A2($elm$core$List$map, $elm$browser$Debugger$Expando$viewRecordEntry, $elm$core$Dict$toList(record)));
    };
    var $elm$browser$Debugger$Expando$viewSequence = F4(function(maybeKey, seqType, isClosed, valueList) {
        var starter = A2($elm$browser$Debugger$Expando$seqTypeToString, $elm$core$List$length(valueList), seqType);
        return A2($elm$html$Html$div, $elm$browser$Debugger$Expando$leftPad(maybeKey), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
            ]), A3($elm$browser$Debugger$Expando$lineStarter, maybeKey, $elm$core$Maybe$Just(isClosed), _List_fromArray([
                $elm$html$Html$text(starter)
            ]))),
            isClosed ? $elm$html$Html$text("") : $elm$browser$Debugger$Expando$viewSequenceOpen(valueList)
        ]));
    });
    var $elm$browser$Debugger$Expando$viewSequenceOpen = function(values) {
        return A2($elm$html$Html$div, _List_Nil, A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewConstructorEntry, values));
    };
    var $elm$browser$Debugger$Main$viewExpando = F3(function(expandoMsg, expandoModel, layout) {
        var block = $elm$browser$Debugger$Main$toMouseBlocker(layout);
        var _v0 = $elm$browser$Debugger$Main$toExpandoPercents(layout);
        var w = _v0.a;
        var h = _v0.b;
        return A2($elm$html$Html$div, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "display", "block"),
            A2($elm$html$Html$Attributes$style, "width", "calc(" + (w + " - 4em)")),
            A2($elm$html$Html$Attributes$style, "height", "calc(" + (h + " - 4em)")),
            A2($elm$html$Html$Attributes$style, "padding", "2em"),
            A2($elm$html$Html$Attributes$style, "margin", "0"),
            A2($elm$html$Html$Attributes$style, "overflow", "auto"),
            A2($elm$html$Html$Attributes$style, "pointer-events", block),
            A2($elm$html$Html$Attributes$style, "-webkit-user-select", block),
            A2($elm$html$Html$Attributes$style, "-moz-user-select", block),
            A2($elm$html$Html$Attributes$style, "-ms-user-select", block),
            A2($elm$html$Html$Attributes$style, "user-select", block)
        ]), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "color", "#ccc"),
                A2($elm$html$Html$Attributes$style, "padding", "0 0 1em 0")
            ]), _List_fromArray([
                $elm$html$Html$text("-- MESSAGE")
            ])),
            A2($elm$html$Html$map, $elm$browser$Debugger$Main$TweakExpandoMsg, A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Nothing, expandoMsg)),
            A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "color", "#ccc"),
                A2($elm$html$Html$Attributes$style, "padding", "1em 0")
            ]), _List_fromArray([
                $elm$html$Html$text("-- MODEL")
            ])),
            A2($elm$html$Html$map, $elm$browser$Debugger$Main$TweakExpandoModel, A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Nothing, expandoModel))
        ]));
    });
    var $elm$browser$Debugger$Main$Jump = function(a) {
        return {
            $: "Jump",
            a: a
        };
    };
    var $elm$virtual_dom$VirtualDom$lazy = _VirtualDom_lazy;
    var $elm$html$Html$Lazy$lazy = $elm$virtual_dom$VirtualDom$lazy;
    var $elm$browser$Debugger$Main$toHistoryPercents = function(layout) {
        if (layout.$ === "Horizontal") {
            var x = layout.b;
            return _Utils_Tuple2($elm$browser$Debugger$Main$toPercent(x), "100%");
        } else {
            var y = layout.c;
            return _Utils_Tuple2("100%", $elm$browser$Debugger$Main$toPercent(1 - y));
        }
    };
    var $elm$virtual_dom$VirtualDom$lazy3 = _VirtualDom_lazy3;
    var $elm$html$Html$Lazy$lazy3 = $elm$virtual_dom$VirtualDom$lazy3;
    var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty("className");
    var $elm$browser$Debugger$History$idForMessageIndex = function(index) {
        return "msg-" + $elm$core$String$fromInt(index);
    };
    var $elm$html$Html$Attributes$title = $elm$html$Html$Attributes$stringProperty("title");
    var $elm$browser$Debugger$History$viewMessage = F3(function(currentIndex, index, msg) {
        var messageName = _Debugger_messageToString(msg);
        var className = _Utils_eq(currentIndex, index) ? "elm-debugger-entry elm-debugger-entry-selected" : "elm-debugger-entry";
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$id($elm$browser$Debugger$History$idForMessageIndex(index)),
            $elm$html$Html$Attributes$class(className),
            $elm$html$Html$Events$onClick(index)
        ]), _List_fromArray([
            A2($elm$html$Html$span, _List_fromArray([
                $elm$html$Html$Attributes$title(messageName),
                $elm$html$Html$Attributes$class("elm-debugger-entry-content")
            ]), _List_fromArray([
                $elm$html$Html$text(messageName)
            ])),
            A2($elm$html$Html$span, _List_fromArray([
                $elm$html$Html$Attributes$class("elm-debugger-entry-index")
            ]), _List_fromArray([
                $elm$html$Html$text($elm$core$String$fromInt(index))
            ]))
        ]));
    });
    var $elm$browser$Debugger$History$consMsg = F3(function(currentIndex, msg, _v0) {
        var index = _v0.a;
        var rest = _v0.b;
        return _Utils_Tuple2(index + 1, A2($elm$core$List$cons, _Utils_Tuple2($elm$core$String$fromInt(index), A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewMessage, currentIndex, index, msg)), rest));
    });
    var $elm$core$Array$length = function(_v0) {
        var len = _v0.a;
        return len;
    };
    var $elm$core$Basics$neq = _Utils_notEqual;
    var $elm$virtual_dom$VirtualDom$keyedNode = function(tag) {
        return _VirtualDom_keyedNode(_VirtualDom_noScript(tag));
    };
    var $elm$html$Html$Keyed$node = $elm$virtual_dom$VirtualDom$keyedNode;
    var $elm$browser$Debugger$History$maxSnapshotSize = 31;
    var $elm$browser$Debugger$History$showMoreButton = function(numMessages) {
        var nextIndex = numMessages - 1 - $elm$browser$Debugger$History$maxSnapshotSize * 2;
        var labelText = "View more messages";
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("elm-debugger-entry"),
            $elm$html$Html$Events$onClick(nextIndex)
        ]), _List_fromArray([
            A2($elm$html$Html$span, _List_fromArray([
                $elm$html$Html$Attributes$title(labelText),
                $elm$html$Html$Attributes$class("elm-debugger-entry-content")
            ]), _List_fromArray([
                $elm$html$Html$text(labelText)
            ])),
            A2($elm$html$Html$span, _List_fromArray([
                $elm$html$Html$Attributes$class("elm-debugger-entry-index")
            ]), _List_Nil)
        ]));
    };
    var $elm$browser$Debugger$History$styles = A3($elm$html$Html$node, "style", _List_Nil, _List_fromArray([
        $elm$html$Html$text("\n\n.elm-debugger-entry {\n  cursor: pointer;\n  width: 100%;\n  box-sizing: border-box;\n  padding: 8px;\n}\n\n.elm-debugger-entry:hover {\n  background-color: rgb(41, 41, 41);\n}\n\n.elm-debugger-entry-selected, .elm-debugger-entry-selected:hover {\n  background-color: rgb(10, 10, 10);\n}\n\n.elm-debugger-entry-content {\n  width: calc(100% - 40px);\n  padding: 0 5px;\n  box-sizing: border-box;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  display: inline-block;\n}\n\n.elm-debugger-entry-index {\n  color: #666;\n  width: 40px;\n  text-align: right;\n  display: block;\n  float: right;\n}\n\n")
    ]));
    var $elm$core$Basics$ge = _Utils_ge;
    var $elm$browser$Debugger$History$viewSnapshot = F3(function(selectedIndex, index, _v0) {
        var messages = _v0.messages;
        return A3($elm$html$Html$Keyed$node, "div", _List_Nil, A3($elm$core$Array$foldr, $elm$browser$Debugger$History$consMsg(selectedIndex), _Utils_Tuple2(index, _List_Nil), messages).b);
    });
    var $elm$browser$Debugger$History$consSnapshot = F3(function(selectedIndex, snapshot, _v0) {
        var index = _v0.a;
        var rest = _v0.b;
        var nextIndex = index + $elm$core$Array$length(snapshot.messages);
        var selectedIndexHelp = _Utils_cmp(nextIndex, selectedIndex) > 0 && _Utils_cmp(selectedIndex, index) > -1 ? selectedIndex : -1;
        return _Utils_Tuple2(nextIndex, A2($elm$core$List$cons, A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewSnapshot, selectedIndexHelp, index, snapshot), rest));
    });
    var $elm$core$Elm$JsArray$foldl = _JsArray_foldl;
    var $elm$core$Array$foldl = F3(function(func, baseCase, _v0) {
        var tree = _v0.c;
        var tail = _v0.d;
        var helper = F2(function(node, acc) {
            if (node.$ === "SubTree") {
                var subTree = node.a;
                return A3($elm$core$Elm$JsArray$foldl, helper, acc, subTree);
            } else {
                var values = node.a;
                return A3($elm$core$Elm$JsArray$foldl, func, acc, values);
            }
        });
        return A3($elm$core$Elm$JsArray$foldl, func, A3($elm$core$Elm$JsArray$foldl, helper, baseCase, tree), tail);
    });
    var $elm$browser$Debugger$History$viewAllSnapshots = F3(function(selectedIndex, startIndex, snapshots) {
        return A2($elm$html$Html$div, _List_Nil, A3($elm$core$Array$foldl, $elm$browser$Debugger$History$consSnapshot(selectedIndex), _Utils_Tuple2(startIndex, _List_Nil), snapshots).b);
    });
    var $elm$core$Array$fromListHelp = F3(function(list, nodeList, nodeListSize) {
        fromListHelp: while(true){
            var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
            var jsArray = _v0.a;
            var remainingItems = _v0.b;
            if (_Utils_cmp($elm$core$Elm$JsArray$length(jsArray), $elm$core$Array$branchFactor) < 0) return A2($elm$core$Array$builderToArray, true, {
                nodeList: nodeList,
                nodeListSize: nodeListSize,
                tail: jsArray
            });
            else {
                var $temp$list = remainingItems, $temp$nodeList = A2($elm$core$List$cons, $elm$core$Array$Leaf(jsArray), nodeList), $temp$nodeListSize = nodeListSize + 1;
                list = $temp$list;
                nodeList = $temp$nodeList;
                nodeListSize = $temp$nodeListSize;
                continue fromListHelp;
            }
        }
    });
    var $elm$core$Array$fromList = function(list) {
        if (!list.b) return $elm$core$Array$empty;
        else return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
    };
    var $elm$core$Bitwise$and = _Bitwise_and;
    var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
    var $elm$core$Array$bitMask = 4294967295 >>> 32 - $elm$core$Array$shiftStep;
    var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
    var $elm$core$Array$getHelp = F3(function(shift, index, tree) {
        getHelp: while(true){
            var pos = $elm$core$Array$bitMask & index >>> shift;
            var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
            if (_v0.$ === "SubTree") {
                var subTree = _v0.a;
                var $temp$shift = shift - $elm$core$Array$shiftStep, $temp$index = index, $temp$tree = subTree;
                shift = $temp$shift;
                index = $temp$index;
                tree = $temp$tree;
                continue getHelp;
            } else {
                var values = _v0.a;
                return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
            }
        }
    });
    var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
    var $elm$core$Array$tailIndex = function(len) {
        return len >>> 5 << 5;
    };
    var $elm$core$Array$get = F2(function(index, _v0) {
        var len = _v0.a;
        var startShift = _v0.b;
        var tree = _v0.c;
        var tail = _v0.d;
        return index < 0 || _Utils_cmp(index, len) > -1 ? $elm$core$Maybe$Nothing : _Utils_cmp(index, $elm$core$Array$tailIndex(len)) > -1 ? $elm$core$Maybe$Just(A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(A3($elm$core$Array$getHelp, startShift, index, tree));
    });
    var $elm$core$Elm$JsArray$appendN = _JsArray_appendN;
    var $elm$core$Elm$JsArray$slice = _JsArray_slice;
    var $elm$core$Array$appendHelpBuilder = F2(function(tail, builder) {
        var tailLen = $elm$core$Elm$JsArray$length(tail);
        var notAppended = $elm$core$Array$branchFactor - $elm$core$Elm$JsArray$length(builder.tail) - tailLen;
        var appended = A3($elm$core$Elm$JsArray$appendN, $elm$core$Array$branchFactor, builder.tail, tail);
        return notAppended < 0 ? {
            nodeList: A2($elm$core$List$cons, $elm$core$Array$Leaf(appended), builder.nodeList),
            nodeListSize: builder.nodeListSize + 1,
            tail: A3($elm$core$Elm$JsArray$slice, notAppended, tailLen, tail)
        } : !notAppended ? {
            nodeList: A2($elm$core$List$cons, $elm$core$Array$Leaf(appended), builder.nodeList),
            nodeListSize: builder.nodeListSize + 1,
            tail: $elm$core$Elm$JsArray$empty
        } : {
            nodeList: builder.nodeList,
            nodeListSize: builder.nodeListSize,
            tail: appended
        };
    });
    var $elm$core$List$drop = F2(function(n, list) {
        drop: while(true){
            if (n <= 0) return list;
            else {
                if (!list.b) return list;
                else {
                    var x = list.a;
                    var xs = list.b;
                    var $temp$n = n - 1, $temp$list = xs;
                    n = $temp$n;
                    list = $temp$list;
                    continue drop;
                }
            }
        }
    });
    var $elm$core$Array$sliceLeft = F2(function(from, array) {
        var len = array.a;
        var tree = array.c;
        var tail = array.d;
        if (!from) return array;
        else {
            if (_Utils_cmp(from, $elm$core$Array$tailIndex(len)) > -1) return A4($elm$core$Array$Array_elm_builtin, len - from, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, A3($elm$core$Elm$JsArray$slice, from - $elm$core$Array$tailIndex(len), $elm$core$Elm$JsArray$length(tail), tail));
            else {
                var skipNodes = from / $elm$core$Array$branchFactor | 0;
                var helper = F2(function(node, acc) {
                    if (node.$ === "SubTree") {
                        var subTree = node.a;
                        return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
                    } else {
                        var leaf = node.a;
                        return A2($elm$core$List$cons, leaf, acc);
                    }
                });
                var leafNodes = A3($elm$core$Elm$JsArray$foldr, helper, _List_fromArray([
                    tail
                ]), tree);
                var nodesToInsert = A2($elm$core$List$drop, skipNodes, leafNodes);
                if (!nodesToInsert.b) return $elm$core$Array$empty;
                else {
                    var head = nodesToInsert.a;
                    var rest = nodesToInsert.b;
                    var firstSlice = from - skipNodes * $elm$core$Array$branchFactor;
                    var initialBuilder = {
                        nodeList: _List_Nil,
                        nodeListSize: 0,
                        tail: A3($elm$core$Elm$JsArray$slice, firstSlice, $elm$core$Elm$JsArray$length(head), head)
                    };
                    return A2($elm$core$Array$builderToArray, true, A3($elm$core$List$foldl, $elm$core$Array$appendHelpBuilder, initialBuilder, rest));
                }
            }
        }
    });
    var $elm$core$Array$fetchNewTail = F4(function(shift, end, treeEnd, tree) {
        fetchNewTail: while(true){
            var pos = $elm$core$Array$bitMask & treeEnd >>> shift;
            var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
            if (_v0.$ === "SubTree") {
                var sub = _v0.a;
                var $temp$shift = shift - $elm$core$Array$shiftStep, $temp$end = end, $temp$treeEnd = treeEnd, $temp$tree = sub;
                shift = $temp$shift;
                end = $temp$end;
                treeEnd = $temp$treeEnd;
                tree = $temp$tree;
                continue fetchNewTail;
            } else {
                var values = _v0.a;
                return A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, values);
            }
        }
    });
    var $elm$core$Array$hoistTree = F3(function(oldShift, newShift, tree) {
        hoistTree: while(true){
            if (_Utils_cmp(oldShift, newShift) < 1 || !$elm$core$Elm$JsArray$length(tree)) return tree;
            else {
                var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, 0, tree);
                if (_v0.$ === "SubTree") {
                    var sub = _v0.a;
                    var $temp$oldShift = oldShift - $elm$core$Array$shiftStep, $temp$newShift = newShift, $temp$tree = sub;
                    oldShift = $temp$oldShift;
                    newShift = $temp$newShift;
                    tree = $temp$tree;
                    continue hoistTree;
                } else return tree;
            }
        }
    });
    var $elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
    var $elm$core$Array$sliceTree = F3(function(shift, endIdx, tree) {
        var lastPos = $elm$core$Array$bitMask & endIdx >>> shift;
        var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, lastPos, tree);
        if (_v0.$ === "SubTree") {
            var sub = _v0.a;
            var newSub = A3($elm$core$Array$sliceTree, shift - $elm$core$Array$shiftStep, endIdx, sub);
            return !$elm$core$Elm$JsArray$length(newSub) ? A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree) : A3($elm$core$Elm$JsArray$unsafeSet, lastPos, $elm$core$Array$SubTree(newSub), A3($elm$core$Elm$JsArray$slice, 0, lastPos + 1, tree));
        } else return A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree);
    });
    var $elm$core$Array$sliceRight = F2(function(end, array) {
        var len = array.a;
        var startShift = array.b;
        var tree = array.c;
        var tail = array.d;
        if (_Utils_eq(end, len)) return array;
        else {
            if (_Utils_cmp(end, $elm$core$Array$tailIndex(len)) > -1) return A4($elm$core$Array$Array_elm_builtin, end, startShift, tree, A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, tail));
            else {
                var endIdx = $elm$core$Array$tailIndex(end);
                var depth = $elm$core$Basics$floor(A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, A2($elm$core$Basics$max, 1, endIdx - 1)));
                var newShift = A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep);
                return A4($elm$core$Array$Array_elm_builtin, end, newShift, A3($elm$core$Array$hoistTree, startShift, newShift, A3($elm$core$Array$sliceTree, startShift, endIdx, tree)), A4($elm$core$Array$fetchNewTail, startShift, end, endIdx, tree));
            }
        }
    });
    var $elm$core$Array$translateIndex = F2(function(index, _v0) {
        var len = _v0.a;
        var posIndex = index < 0 ? len + index : index;
        return posIndex < 0 ? 0 : _Utils_cmp(posIndex, len) > 0 ? len : posIndex;
    });
    var $elm$core$Array$slice = F3(function(from, to, array) {
        var correctTo = A2($elm$core$Array$translateIndex, to, array);
        var correctFrom = A2($elm$core$Array$translateIndex, from, array);
        return _Utils_cmp(correctFrom, correctTo) > 0 ? $elm$core$Array$empty : A2($elm$core$Array$sliceLeft, correctFrom, A2($elm$core$Array$sliceRight, correctTo, array));
    });
    var $elm$browser$Debugger$History$viewRecentSnapshots = F3(function(selectedIndex, recentMessagesNum, snapshots) {
        var messagesToFill = $elm$browser$Debugger$History$maxSnapshotSize - recentMessagesNum;
        var arrayLength = $elm$core$Array$length(snapshots);
        var snapshotsToRender = function() {
            var _v0 = _Utils_Tuple2(A2($elm$core$Array$get, arrayLength - 2, snapshots), A2($elm$core$Array$get, arrayLength - 1, snapshots));
            if (_v0.a.$ === "Just" && _v0.b.$ === "Just") {
                var fillerSnapshot = _v0.a.a;
                var recentSnapshot = _v0.b.a;
                return $elm$core$Array$fromList(_List_fromArray([
                    {
                        messages: A3($elm$core$Array$slice, 0, messagesToFill, fillerSnapshot.messages),
                        model: fillerSnapshot.model
                    },
                    recentSnapshot
                ]));
            } else return snapshots;
        }();
        var startingIndex = arrayLength * $elm$browser$Debugger$History$maxSnapshotSize - $elm$browser$Debugger$History$maxSnapshotSize - messagesToFill;
        return A3($elm$browser$Debugger$History$viewAllSnapshots, selectedIndex, startingIndex, snapshotsToRender);
    });
    var $elm$browser$Debugger$History$view = F2(function(maybeIndex, _v0) {
        var snapshots = _v0.snapshots;
        var recent = _v0.recent;
        var numMessages = _v0.numMessages;
        var recentMessageStartIndex = numMessages - recent.numMessages;
        var index = A2($elm$core$Maybe$withDefault, -1, maybeIndex);
        var newStuff = A3($elm$html$Html$Keyed$node, "div", _List_Nil, A3($elm$core$List$foldr, $elm$browser$Debugger$History$consMsg(index), _Utils_Tuple2(recentMessageStartIndex, _List_Nil), recent.messages).b);
        var onlyRenderRecentMessages = !_Utils_eq(index, -1) || $elm$core$Array$length(snapshots) < 2;
        var oldStuff = onlyRenderRecentMessages ? A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewAllSnapshots, index, 0, snapshots) : A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewRecentSnapshots, index, recent.numMessages, snapshots);
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$id("elm-debugger-sidebar"),
            A2($elm$html$Html$Attributes$style, "width", "100%"),
            A2($elm$html$Html$Attributes$style, "overflow-y", "auto"),
            A2($elm$html$Html$Attributes$style, "height", "calc(100% - 72px)")
        ]), A2($elm$core$List$cons, $elm$browser$Debugger$History$styles, A2($elm$core$List$cons, newStuff, A2($elm$core$List$cons, oldStuff, onlyRenderRecentMessages ? _List_Nil : _List_fromArray([
            $elm$browser$Debugger$History$showMoreButton(numMessages)
        ])))));
    });
    var $elm$browser$Debugger$Main$SwapLayout = {
        $: "SwapLayout"
    };
    var $elm$browser$Debugger$Main$toHistoryIcon = function(layout) {
        if (layout.$ === "Horizontal") return "M13 1a3 3 0 0 1 3 3v8a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M13 3h-10a1 1 0 0 0-1 1v5h12v-5a1 1 0 0 0-1-1z M14 10h-12v2a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1z";
        else return "M0 4a3 3 0 0 1 3-3h10a3 3 0 0 1 3 3v8a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3z M2 4v8a1 1 0 0 0 1 1h2v-10h-2a1 1 0 0 0-1 1z M6 3v10h7a1 1 0 0 0 1-1v-8a1 1 0 0 0-1-1z";
    };
    var $elm$browser$Debugger$Main$icon = function(path) {
        return A4($elm$virtual_dom$VirtualDom$nodeNS, "http://www.w3.org/2000/svg", "svg", _List_fromArray([
            A2($elm$virtual_dom$VirtualDom$attribute, "viewBox", "0 0 16 16"),
            A2($elm$virtual_dom$VirtualDom$attribute, "xmlns", "http://www.w3.org/2000/svg"),
            A2($elm$virtual_dom$VirtualDom$attribute, "fill", "currentColor"),
            A2($elm$virtual_dom$VirtualDom$attribute, "width", "16px"),
            A2($elm$virtual_dom$VirtualDom$attribute, "height", "16px")
        ]), _List_fromArray([
            A4($elm$virtual_dom$VirtualDom$nodeNS, "http://www.w3.org/2000/svg", "path", _List_fromArray([
                A2($elm$virtual_dom$VirtualDom$attribute, "d", path)
            ]), _List_Nil)
        ]));
    };
    var $elm$browser$Debugger$Main$viewHistoryButton = F3(function(label, msg, path) {
        return A2($elm$html$Html$button, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "display", "flex"),
            A2($elm$html$Html$Attributes$style, "flex-direction", "row"),
            A2($elm$html$Html$Attributes$style, "align-items", "center"),
            A2($elm$html$Html$Attributes$style, "background", "none"),
            A2($elm$html$Html$Attributes$style, "border", "none"),
            A2($elm$html$Html$Attributes$style, "color", "inherit"),
            A2($elm$html$Html$Attributes$style, "cursor", "pointer"),
            $elm$html$Html$Events$onClick(msg)
        ]), _List_fromArray([
            $elm$browser$Debugger$Main$icon(path),
            A2($elm$html$Html$span, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "padding-left", "6px")
            ]), _List_fromArray([
                $elm$html$Html$text(label)
            ]))
        ]));
    });
    var $elm$browser$Debugger$Main$viewHistoryOptions = function(layout) {
        return A2($elm$html$Html$div, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "width", "100%"),
            A2($elm$html$Html$Attributes$style, "height", "36px"),
            A2($elm$html$Html$Attributes$style, "display", "flex"),
            A2($elm$html$Html$Attributes$style, "flex-direction", "row"),
            A2($elm$html$Html$Attributes$style, "align-items", "center"),
            A2($elm$html$Html$Attributes$style, "justify-content", "space-between"),
            A2($elm$html$Html$Attributes$style, "background-color", "rgb(50, 50, 50)")
        ]), _List_fromArray([
            A3($elm$browser$Debugger$Main$viewHistoryButton, "Swap Layout", $elm$browser$Debugger$Main$SwapLayout, $elm$browser$Debugger$Main$toHistoryIcon(layout)),
            A2($elm$html$Html$div, _List_fromArray([
                A2($elm$html$Html$Attributes$style, "display", "flex"),
                A2($elm$html$Html$Attributes$style, "flex-direction", "row"),
                A2($elm$html$Html$Attributes$style, "align-items", "center"),
                A2($elm$html$Html$Attributes$style, "justify-content", "space-between")
            ]), _List_fromArray([
                A3($elm$browser$Debugger$Main$viewHistoryButton, "Import", $elm$browser$Debugger$Main$Import, "M5 1a1 1 0 0 1 0 2h-2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1a1 1 0 0 1 2 0a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M10 2a1 1 0 0 0 -2 0v6a1 1 0 0 0 1 1h6a1 1 0 0 0 0-2h-3.586l4.293-4.293a1 1 0 0 0-1.414-1.414l-4.293 4.293z"),
                A3($elm$browser$Debugger$Main$viewHistoryButton, "Export", $elm$browser$Debugger$Main$Export, "M5 1a1 1 0 0 1 0 2h-2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1 a1 1 0 0 1 2 0a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M9 3a1 1 0 1 1 0-2h6a1 1 0 0 1 1 1v6a1 1 0 1 1-2 0v-3.586l-5.293 5.293 a1 1 0 0 1-1.414-1.414l5.293 -5.293z")
            ]))
        ]));
    };
    var $elm$browser$Debugger$Main$SliderJump = function(a) {
        return {
            $: "SliderJump",
            a: a
        };
    };
    var $elm$core$Basics$composeR = F3(function(f, g, x) {
        return g(f(x));
    });
    var $elm$html$Html$input = _VirtualDom_node("input");
    var $elm$browser$Debugger$Main$isPlaying = function(maybeIndex) {
        if (maybeIndex.$ === "Nothing") return true;
        else return false;
    };
    var $elm$html$Html$Attributes$max = $elm$html$Html$Attributes$stringProperty("max");
    var $elm$html$Html$Attributes$min = $elm$html$Html$Attributes$stringProperty("min");
    var $elm$html$Html$Events$alwaysStop = function(x) {
        return _Utils_Tuple2(x, true);
    };
    var $elm$virtual_dom$VirtualDom$MayStopPropagation = function(a) {
        return {
            $: "MayStopPropagation",
            a: a
        };
    };
    var $elm$html$Html$Events$stopPropagationOn = F2(function(event, decoder) {
        return A2($elm$virtual_dom$VirtualDom$on, event, $elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
    });
    var $elm$json$Json$Decode$string = _Json_decodeString;
    var $elm$html$Html$Events$targetValue = A2($elm$json$Json$Decode$at, _List_fromArray([
        "target",
        "value"
    ]), $elm$json$Json$Decode$string);
    var $elm$html$Html$Events$onInput = function(tagger) {
        return A2($elm$html$Html$Events$stopPropagationOn, "input", A2($elm$json$Json$Decode$map, $elm$html$Html$Events$alwaysStop, A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
    };
    var $elm$core$String$toInt = _String_toInt;
    var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty("type");
    var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty("value");
    var $elm$browser$Debugger$Main$viewPlayButton = function(playing) {
        return A2($elm$html$Html$button, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "background", "#1293D8"),
            A2($elm$html$Html$Attributes$style, "border", "none"),
            A2($elm$html$Html$Attributes$style, "color", "white"),
            A2($elm$html$Html$Attributes$style, "cursor", "pointer"),
            A2($elm$html$Html$Attributes$style, "width", "36px"),
            A2($elm$html$Html$Attributes$style, "height", "36px"),
            $elm$html$Html$Events$onClick($elm$browser$Debugger$Main$Resume)
        ]), _List_fromArray([
            playing ? $elm$browser$Debugger$Main$icon("M2 2h4v12h-4v-12z M10 2h4v12h-4v-12z") : $elm$browser$Debugger$Main$icon("M2 2l12 7l-12 7z")
        ]));
    };
    var $elm$browser$Debugger$Main$viewHistorySlider = F2(function(history1, maybeIndex) {
        var lastIndex = $elm$browser$Debugger$History$size(history1) - 1;
        var selectedIndex = A2($elm$core$Maybe$withDefault, lastIndex, maybeIndex);
        return A2($elm$html$Html$div, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "display", "flex"),
            A2($elm$html$Html$Attributes$style, "flex-direction", "row"),
            A2($elm$html$Html$Attributes$style, "align-items", "center"),
            A2($elm$html$Html$Attributes$style, "width", "100%"),
            A2($elm$html$Html$Attributes$style, "height", "36px"),
            A2($elm$html$Html$Attributes$style, "background-color", "rgb(50, 50, 50)")
        ]), _List_fromArray([
            A2($elm$html$Html$Lazy$lazy, $elm$browser$Debugger$Main$viewPlayButton, $elm$browser$Debugger$Main$isPlaying(maybeIndex)),
            A2($elm$html$Html$input, _List_fromArray([
                $elm$html$Html$Attributes$type_("range"),
                A2($elm$html$Html$Attributes$style, "width", "calc(100% - 56px)"),
                A2($elm$html$Html$Attributes$style, "height", "36px"),
                A2($elm$html$Html$Attributes$style, "margin", "0 10px"),
                $elm$html$Html$Attributes$min("0"),
                $elm$html$Html$Attributes$max($elm$core$String$fromInt(lastIndex)),
                $elm$html$Html$Attributes$value($elm$core$String$fromInt(selectedIndex)),
                $elm$html$Html$Events$onInput(A2($elm$core$Basics$composeR, $elm$core$String$toInt, A2($elm$core$Basics$composeR, $elm$core$Maybe$withDefault(lastIndex), $elm$browser$Debugger$Main$SliderJump)))
            ]), _List_Nil)
        ]));
    });
    var $elm$browser$Debugger$Main$viewHistory = F3(function(maybeIndex, history1, layout) {
        var block = $elm$browser$Debugger$Main$toMouseBlocker(layout);
        var _v0 = $elm$browser$Debugger$Main$toHistoryPercents(layout);
        var w = _v0.a;
        var h = _v0.b;
        return A2($elm$html$Html$div, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "width", w),
            A2($elm$html$Html$Attributes$style, "height", h),
            A2($elm$html$Html$Attributes$style, "display", "flex"),
            A2($elm$html$Html$Attributes$style, "flex-direction", "column"),
            A2($elm$html$Html$Attributes$style, "color", "#DDDDDD"),
            A2($elm$html$Html$Attributes$style, "background-color", "rgb(61, 61, 61)"),
            A2($elm$html$Html$Attributes$style, "pointer-events", block),
            A2($elm$html$Html$Attributes$style, "user-select", block)
        ]), _List_fromArray([
            A2($elm$browser$Debugger$Main$viewHistorySlider, history1, maybeIndex),
            A2($elm$html$Html$map, $elm$browser$Debugger$Main$Jump, A2($elm$browser$Debugger$History$view, maybeIndex, history1)),
            A2($elm$html$Html$Lazy$lazy, $elm$browser$Debugger$Main$viewHistoryOptions, layout)
        ]));
    });
    var $elm$browser$Debugger$Main$popoutView = function(model) {
        var maybeIndex = function() {
            var _v0 = model.state;
            if (_v0.$ === "Running") return $elm$core$Maybe$Nothing;
            else {
                var index = _v0.a;
                return $elm$core$Maybe$Just(index);
            }
        }();
        var historyToRender = $elm$browser$Debugger$Main$cachedHistory(model);
        return A3($elm$html$Html$node, "body", _Utils_ap($elm$browser$Debugger$Main$toDragListeners(model.layout), _List_fromArray([
            A2($elm$html$Html$Attributes$style, "margin", "0"),
            A2($elm$html$Html$Attributes$style, "padding", "0"),
            A2($elm$html$Html$Attributes$style, "width", "100%"),
            A2($elm$html$Html$Attributes$style, "height", "100%"),
            A2($elm$html$Html$Attributes$style, "font-family", "monospace"),
            A2($elm$html$Html$Attributes$style, "display", "flex"),
            A2($elm$html$Html$Attributes$style, "flex-direction", $elm$browser$Debugger$Main$toFlexDirection(model.layout))
        ])), _List_fromArray([
            A3($elm$browser$Debugger$Main$viewHistory, maybeIndex, historyToRender, model.layout),
            $elm$browser$Debugger$Main$viewDragZone(model.layout),
            A3($elm$browser$Debugger$Main$viewExpando, model.expandoMsg, model.expandoModel, model.layout)
        ]));
    };
    var $elm$browser$Debugger$Overlay$BlockAll = {
        $: "BlockAll"
    };
    var $elm$browser$Debugger$Overlay$toBlockerType = F2(function(isPaused, state) {
        switch(state.$){
            case "None":
                return isPaused ? $elm$browser$Debugger$Overlay$BlockAll : $elm$browser$Debugger$Overlay$BlockNone;
            case "BadMetadata":
                return $elm$browser$Debugger$Overlay$BlockMost;
            case "BadImport":
                return $elm$browser$Debugger$Overlay$BlockMost;
            default:
                return $elm$browser$Debugger$Overlay$BlockMost;
        }
    });
    var $elm$browser$Debugger$Main$toBlockerType = function(model) {
        return A2($elm$browser$Debugger$Overlay$toBlockerType, $elm$browser$Debugger$Main$isPaused(model.state), model.overlay);
    };
    var $elm$browser$Debugger$Main$Horizontal = F3(function(a, b, c) {
        return {
            $: "Horizontal",
            a: a,
            b: b,
            c: c
        };
    });
    var $elm$browser$Debugger$Main$Running = function(a) {
        return {
            $: "Running",
            a: a
        };
    };
    var $elm$browser$Debugger$Main$Static = {
        $: "Static"
    };
    var $elm$browser$Debugger$Metadata$Error = F2(function(message, problems) {
        return {
            message: message,
            problems: problems
        };
    });
    var $elm$json$Json$Decode$decodeValue = _Json_run;
    var $elm$browser$Debugger$Metadata$Metadata = F2(function(versions, types) {
        return {
            types: types,
            versions: versions
        };
    });
    var $elm$browser$Debugger$Metadata$Types = F3(function(message, aliases, unions) {
        return {
            aliases: aliases,
            message: message,
            unions: unions
        };
    });
    var $elm$browser$Debugger$Metadata$Alias = F2(function(args, tipe) {
        return {
            args: args,
            tipe: tipe
        };
    });
    var $elm$json$Json$Decode$list = _Json_decodeList;
    var $elm$browser$Debugger$Metadata$decodeAlias = A3($elm$json$Json$Decode$map2, $elm$browser$Debugger$Metadata$Alias, A2($elm$json$Json$Decode$field, "args", $elm$json$Json$Decode$list($elm$json$Json$Decode$string)), A2($elm$json$Json$Decode$field, "type", $elm$json$Json$Decode$string));
    var $elm$browser$Debugger$Metadata$Union = F2(function(args, tags) {
        return {
            args: args,
            tags: tags
        };
    });
    var $elm$core$Dict$fromList = function(assocs) {
        return A3($elm$core$List$foldl, F2(function(_v0, dict) {
            var key = _v0.a;
            var value = _v0.b;
            return A3($elm$core$Dict$insert, key, value, dict);
        }), $elm$core$Dict$empty, assocs);
    };
    var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
    var $elm$json$Json$Decode$dict = function(decoder) {
        return A2($elm$json$Json$Decode$map, $elm$core$Dict$fromList, $elm$json$Json$Decode$keyValuePairs(decoder));
    };
    var $elm$browser$Debugger$Metadata$decodeUnion = A3($elm$json$Json$Decode$map2, $elm$browser$Debugger$Metadata$Union, A2($elm$json$Json$Decode$field, "args", $elm$json$Json$Decode$list($elm$json$Json$Decode$string)), A2($elm$json$Json$Decode$field, "tags", $elm$json$Json$Decode$dict($elm$json$Json$Decode$list($elm$json$Json$Decode$string))));
    var $elm$json$Json$Decode$map3 = _Json_map3;
    var $elm$browser$Debugger$Metadata$decodeTypes = A4($elm$json$Json$Decode$map3, $elm$browser$Debugger$Metadata$Types, A2($elm$json$Json$Decode$field, "message", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "aliases", $elm$json$Json$Decode$dict($elm$browser$Debugger$Metadata$decodeAlias)), A2($elm$json$Json$Decode$field, "unions", $elm$json$Json$Decode$dict($elm$browser$Debugger$Metadata$decodeUnion)));
    var $elm$browser$Debugger$Metadata$Versions = function(elm) {
        return {
            elm: elm
        };
    };
    var $elm$browser$Debugger$Metadata$decodeVersions = A2($elm$json$Json$Decode$map, $elm$browser$Debugger$Metadata$Versions, A2($elm$json$Json$Decode$field, "elm", $elm$json$Json$Decode$string));
    var $elm$browser$Debugger$Metadata$decoder = A3($elm$json$Json$Decode$map2, $elm$browser$Debugger$Metadata$Metadata, A2($elm$json$Json$Decode$field, "versions", $elm$browser$Debugger$Metadata$decodeVersions), A2($elm$json$Json$Decode$field, "types", $elm$browser$Debugger$Metadata$decodeTypes));
    var $elm$browser$Debugger$Metadata$ProblemType = F2(function(name, problems) {
        return {
            name: name,
            problems: problems
        };
    });
    var $elm$core$List$maybeCons = F3(function(f, mx, xs) {
        var _v0 = f(mx);
        if (_v0.$ === "Just") {
            var x = _v0.a;
            return A2($elm$core$List$cons, x, xs);
        } else return xs;
    });
    var $elm$core$List$filterMap = F2(function(f, xs) {
        return A3($elm$core$List$foldr, $elm$core$List$maybeCons(f), _List_Nil, xs);
    });
    var $elm$core$String$contains = _String_contains;
    var $elm$browser$Debugger$Metadata$hasProblem = F2(function(tipe, _v0) {
        var problem = _v0.a;
        var token = _v0.b;
        return A2($elm$core$String$contains, token, tipe) ? $elm$core$Maybe$Just(problem) : $elm$core$Maybe$Nothing;
    });
    var $elm$browser$Debugger$Metadata$Decoder = {
        $: "Decoder"
    };
    var $elm$browser$Debugger$Metadata$Function = {
        $: "Function"
    };
    var $elm$browser$Debugger$Metadata$Process = {
        $: "Process"
    };
    var $elm$browser$Debugger$Metadata$Program = {
        $: "Program"
    };
    var $elm$browser$Debugger$Metadata$Request = {
        $: "Request"
    };
    var $elm$browser$Debugger$Metadata$Socket = {
        $: "Socket"
    };
    var $elm$browser$Debugger$Metadata$Task = {
        $: "Task"
    };
    var $elm$browser$Debugger$Metadata$VirtualDom = {
        $: "VirtualDom"
    };
    var $elm$browser$Debugger$Metadata$problemTable = _List_fromArray([
        _Utils_Tuple2($elm$browser$Debugger$Metadata$Function, "->"),
        _Utils_Tuple2($elm$browser$Debugger$Metadata$Decoder, "Json.Decode.Decoder"),
        _Utils_Tuple2($elm$browser$Debugger$Metadata$Task, "Task.Task"),
        _Utils_Tuple2($elm$browser$Debugger$Metadata$Process, "Process.Id"),
        _Utils_Tuple2($elm$browser$Debugger$Metadata$Socket, "WebSocket.LowLevel.WebSocket"),
        _Utils_Tuple2($elm$browser$Debugger$Metadata$Request, "Http.Request"),
        _Utils_Tuple2($elm$browser$Debugger$Metadata$Program, "Platform.Program"),
        _Utils_Tuple2($elm$browser$Debugger$Metadata$VirtualDom, "VirtualDom.Node"),
        _Utils_Tuple2($elm$browser$Debugger$Metadata$VirtualDom, "VirtualDom.Attribute")
    ]);
    var $elm$browser$Debugger$Metadata$findProblems = function(tipe) {
        return A2($elm$core$List$filterMap, $elm$browser$Debugger$Metadata$hasProblem(tipe), $elm$browser$Debugger$Metadata$problemTable);
    };
    var $elm$browser$Debugger$Metadata$collectBadAliases = F3(function(name, _v0, list) {
        var tipe = _v0.tipe;
        var _v1 = $elm$browser$Debugger$Metadata$findProblems(tipe);
        if (!_v1.b) return list;
        else {
            var problems = _v1;
            return A2($elm$core$List$cons, A2($elm$browser$Debugger$Metadata$ProblemType, name, problems), list);
        }
    });
    var $elm$core$List$append = F2(function(xs, ys) {
        if (!ys.b) return xs;
        else return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
    });
    var $elm$core$List$concat = function(lists) {
        return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
    };
    var $elm$core$List$concatMap = F2(function(f, list) {
        return $elm$core$List$concat(A2($elm$core$List$map, f, list));
    });
    var $elm$core$Dict$values = function(dict) {
        return A3($elm$core$Dict$foldr, F3(function(key, value, valueList) {
            return A2($elm$core$List$cons, value, valueList);
        }), _List_Nil, dict);
    };
    var $elm$browser$Debugger$Metadata$collectBadUnions = F3(function(name, _v0, list) {
        var tags = _v0.tags;
        var _v1 = A2($elm$core$List$concatMap, $elm$browser$Debugger$Metadata$findProblems, $elm$core$List$concat($elm$core$Dict$values(tags)));
        if (!_v1.b) return list;
        else {
            var problems = _v1;
            return A2($elm$core$List$cons, A2($elm$browser$Debugger$Metadata$ProblemType, name, problems), list);
        }
    });
    var $elm$core$Dict$foldl = F3(function(func, acc, dict) {
        foldl: while(true){
            if (dict.$ === "RBEmpty_elm_builtin") return acc;
            else {
                var key = dict.b;
                var value = dict.c;
                var left = dict.d;
                var right = dict.e;
                var $temp$func = func, $temp$acc = A3(func, key, value, A3($elm$core$Dict$foldl, func, acc, left)), $temp$dict = right;
                func = $temp$func;
                acc = $temp$acc;
                dict = $temp$dict;
                continue foldl;
            }
        }
    });
    var $elm$browser$Debugger$Metadata$isPortable = function(_v0) {
        var types = _v0.types;
        var badAliases = A3($elm$core$Dict$foldl, $elm$browser$Debugger$Metadata$collectBadAliases, _List_Nil, types.aliases);
        var _v1 = A3($elm$core$Dict$foldl, $elm$browser$Debugger$Metadata$collectBadUnions, badAliases, types.unions);
        if (!_v1.b) return $elm$core$Maybe$Nothing;
        else {
            var problems = _v1;
            return $elm$core$Maybe$Just(A2($elm$browser$Debugger$Metadata$Error, types.message, problems));
        }
    };
    var $elm$browser$Debugger$Metadata$decode = function(value) {
        var _v0 = A2($elm$json$Json$Decode$decodeValue, $elm$browser$Debugger$Metadata$decoder, value);
        if (_v0.$ === "Err") return $elm$core$Result$Err(A2($elm$browser$Debugger$Metadata$Error, "The compiler is generating bad metadata. This is a compiler bug!", _List_Nil));
        else {
            var metadata = _v0.a;
            var _v1 = $elm$browser$Debugger$Metadata$isPortable(metadata);
            if (_v1.$ === "Nothing") return $elm$core$Result$Ok(metadata);
            else {
                var error = _v1.a;
                return $elm$core$Result$Err(error);
            }
        }
    };
    var $elm$browser$Debugger$History$History = F3(function(snapshots, recent, numMessages) {
        return {
            numMessages: numMessages,
            recent: recent,
            snapshots: snapshots
        };
    });
    var $elm$browser$Debugger$History$RecentHistory = F3(function(model, messages, numMessages) {
        return {
            messages: messages,
            model: model,
            numMessages: numMessages
        };
    });
    var $elm$browser$Debugger$History$empty = function(model) {
        return A3($elm$browser$Debugger$History$History, $elm$core$Array$empty, A3($elm$browser$Debugger$History$RecentHistory, model, _List_Nil, 0), 0);
    };
    var $elm$core$Dict$map = F2(function(func, dict) {
        if (dict.$ === "RBEmpty_elm_builtin") return $elm$core$Dict$RBEmpty_elm_builtin;
        else {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            return A5($elm$core$Dict$RBNode_elm_builtin, color, key, A2(func, key, value), A2($elm$core$Dict$map, func, left), A2($elm$core$Dict$map, func, right));
        }
    });
    var $elm$core$Dict$sizeHelp = F2(function(n, dict) {
        sizeHelp: while(true){
            if (dict.$ === "RBEmpty_elm_builtin") return n;
            else {
                var left = dict.d;
                var right = dict.e;
                var $temp$n = A2($elm$core$Dict$sizeHelp, n + 1, right), $temp$dict = left;
                n = $temp$n;
                dict = $temp$dict;
                continue sizeHelp;
            }
        }
    });
    var $elm$core$Dict$size = function(dict) {
        return A2($elm$core$Dict$sizeHelp, 0, dict);
    };
    var $elm$browser$Debugger$Expando$initHelp = F2(function(isOuter, expando) {
        switch(expando.$){
            case "S":
                return expando;
            case "Primitive":
                return expando;
            case "Sequence":
                var seqType = expando.a;
                var isClosed = expando.b;
                var items = expando.c;
                return isOuter ? A3($elm$browser$Debugger$Expando$Sequence, seqType, false, A2($elm$core$List$map, $elm$browser$Debugger$Expando$initHelp(false), items)) : $elm$core$List$length(items) <= 8 ? A3($elm$browser$Debugger$Expando$Sequence, seqType, false, items) : expando;
            case "Dictionary":
                var isClosed = expando.a;
                var keyValuePairs = expando.b;
                return isOuter ? A2($elm$browser$Debugger$Expando$Dictionary, false, A2($elm$core$List$map, function(_v1) {
                    var k = _v1.a;
                    var v = _v1.b;
                    return _Utils_Tuple2(k, A2($elm$browser$Debugger$Expando$initHelp, false, v));
                }, keyValuePairs)) : $elm$core$List$length(keyValuePairs) <= 8 ? A2($elm$browser$Debugger$Expando$Dictionary, false, keyValuePairs) : expando;
            case "Record":
                var isClosed = expando.a;
                var entries = expando.b;
                return isOuter ? A2($elm$browser$Debugger$Expando$Record, false, A2($elm$core$Dict$map, F2(function(_v2, v) {
                    return A2($elm$browser$Debugger$Expando$initHelp, false, v);
                }), entries)) : $elm$core$Dict$size(entries) <= 4 ? A2($elm$browser$Debugger$Expando$Record, false, entries) : expando;
            default:
                var maybeName = expando.a;
                var isClosed = expando.b;
                var args = expando.c;
                return isOuter ? A3($elm$browser$Debugger$Expando$Constructor, maybeName, false, A2($elm$core$List$map, $elm$browser$Debugger$Expando$initHelp(false), args)) : $elm$core$List$length(args) <= 4 ? A3($elm$browser$Debugger$Expando$Constructor, maybeName, false, args) : expando;
        }
    });
    var $elm$browser$Debugger$Expando$init = function(value) {
        return A2($elm$browser$Debugger$Expando$initHelp, true, _Debugger_init(value));
    };
    var $elm$core$Platform$Cmd$map = _Platform_map;
    var $elm$browser$Debugger$Overlay$None = {
        $: "None"
    };
    var $elm$browser$Debugger$Overlay$none = $elm$browser$Debugger$Overlay$None;
    var $elm$browser$Debugger$Main$wrapInit = F4(function(metadata, popout, init, flags) {
        var _v0 = init(flags);
        var userModel = _v0.a;
        var userCommands = _v0.b;
        return _Utils_Tuple2({
            expandoModel: $elm$browser$Debugger$Expando$init(userModel),
            expandoMsg: $elm$browser$Debugger$Expando$init(_Utils_Tuple0),
            history: $elm$browser$Debugger$History$empty(userModel),
            layout: A3($elm$browser$Debugger$Main$Horizontal, $elm$browser$Debugger$Main$Static, 0.3, 0.5),
            metadata: $elm$browser$Debugger$Metadata$decode(metadata),
            overlay: $elm$browser$Debugger$Overlay$none,
            popout: popout,
            state: $elm$browser$Debugger$Main$Running(userModel)
        }, A2($elm$core$Platform$Cmd$map, $elm$browser$Debugger$Main$UserMsg, userCommands));
    });
    var $elm$browser$Debugger$Main$getLatestModel = function(state) {
        if (state.$ === "Running") {
            var model = state.a;
            return model;
        } else {
            var model = state.c;
            return model;
        }
    };
    var $elm$core$Platform$Sub$map = _Platform_map;
    var $elm$browser$Debugger$Main$wrapSubs = F2(function(subscriptions, model) {
        return A2($elm$core$Platform$Sub$map, $elm$browser$Debugger$Main$UserMsg, subscriptions($elm$browser$Debugger$Main$getLatestModel(model.state)));
    });
    var $elm$browser$Debugger$Main$Moving = {
        $: "Moving"
    };
    var $elm$browser$Debugger$Main$Paused = F5(function(a, b, c, d, e) {
        return {
            $: "Paused",
            a: a,
            b: b,
            c: c,
            d: d,
            e: e
        };
    });
    var $elm$browser$Debugger$History$Snapshot = F2(function(model, messages) {
        return {
            messages: messages,
            model: model
        };
    });
    var $elm$browser$Debugger$History$addRecent = F3(function(msg, newModel, _v0) {
        var model = _v0.model;
        var messages = _v0.messages;
        var numMessages = _v0.numMessages;
        return _Utils_eq(numMessages, $elm$browser$Debugger$History$maxSnapshotSize) ? _Utils_Tuple2($elm$core$Maybe$Just(A2($elm$browser$Debugger$History$Snapshot, model, $elm$core$Array$fromList(messages))), A3($elm$browser$Debugger$History$RecentHistory, newModel, _List_fromArray([
            msg
        ]), 1)) : _Utils_Tuple2($elm$core$Maybe$Nothing, A3($elm$browser$Debugger$History$RecentHistory, model, A2($elm$core$List$cons, msg, messages), numMessages + 1));
    });
    var $elm$core$Elm$JsArray$push = _JsArray_push;
    var $elm$core$Elm$JsArray$singleton = _JsArray_singleton;
    var $elm$core$Array$insertTailInTree = F4(function(shift, index, tail, tree) {
        var pos = $elm$core$Array$bitMask & index >>> shift;
        if (_Utils_cmp(pos, $elm$core$Elm$JsArray$length(tree)) > -1) {
            if (shift === 5) return A2($elm$core$Elm$JsArray$push, $elm$core$Array$Leaf(tail), tree);
            else {
                var newSub = $elm$core$Array$SubTree(A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, $elm$core$Elm$JsArray$empty));
                return A2($elm$core$Elm$JsArray$push, newSub, tree);
            }
        } else {
            var value = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
            if (value.$ === "SubTree") {
                var subTree = value.a;
                var newSub = $elm$core$Array$SubTree(A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, subTree));
                return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
            } else {
                var newSub = $elm$core$Array$SubTree(A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, $elm$core$Elm$JsArray$singleton(value)));
                return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
            }
        }
    });
    var $elm$core$Array$unsafeReplaceTail = F2(function(newTail, _v0) {
        var len = _v0.a;
        var startShift = _v0.b;
        var tree = _v0.c;
        var tail = _v0.d;
        var originalTailLen = $elm$core$Elm$JsArray$length(tail);
        var newTailLen = $elm$core$Elm$JsArray$length(newTail);
        var newArrayLen = len + (newTailLen - originalTailLen);
        if (_Utils_eq(newTailLen, $elm$core$Array$branchFactor)) {
            var overflow = _Utils_cmp(newArrayLen >>> $elm$core$Array$shiftStep, 1 << startShift) > 0;
            if (overflow) {
                var newShift = startShift + $elm$core$Array$shiftStep;
                var newTree = A4($elm$core$Array$insertTailInTree, newShift, len, newTail, $elm$core$Elm$JsArray$singleton($elm$core$Array$SubTree(tree)));
                return A4($elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, $elm$core$Elm$JsArray$empty);
            } else return A4($elm$core$Array$Array_elm_builtin, newArrayLen, startShift, A4($elm$core$Array$insertTailInTree, startShift, len, newTail, tree), $elm$core$Elm$JsArray$empty);
        } else return A4($elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);
    });
    var $elm$core$Array$push = F2(function(a, array) {
        var tail = array.d;
        return A2($elm$core$Array$unsafeReplaceTail, A2($elm$core$Elm$JsArray$push, a, tail), array);
    });
    var $elm$browser$Debugger$History$add = F3(function(msg, model, _v0) {
        var snapshots = _v0.snapshots;
        var recent = _v0.recent;
        var numMessages = _v0.numMessages;
        var _v1 = A3($elm$browser$Debugger$History$addRecent, msg, model, recent);
        if (_v1.a.$ === "Just") {
            var snapshot = _v1.a.a;
            var newRecent = _v1.b;
            return A3($elm$browser$Debugger$History$History, A2($elm$core$Array$push, snapshot, snapshots), newRecent, numMessages + 1);
        } else {
            var _v2 = _v1.a;
            var newRecent = _v1.b;
            return A3($elm$browser$Debugger$History$History, snapshots, newRecent, numMessages + 1);
        }
    });
    var $elm$core$Basics$always = F2(function(a, _v0) {
        return a;
    });
    var $elm$browser$Debugger$Overlay$BadImport = function(a) {
        return {
            $: "BadImport",
            a: a
        };
    };
    var $elm$browser$Debugger$Overlay$RiskyImport = F2(function(a, b) {
        return {
            $: "RiskyImport",
            a: a,
            b: b
        };
    });
    var $elm$browser$Debugger$Report$VersionChanged = F2(function(a, b) {
        return {
            $: "VersionChanged",
            a: a,
            b: b
        };
    });
    var $elm$browser$Debugger$Report$MessageChanged = F2(function(a, b) {
        return {
            $: "MessageChanged",
            a: a,
            b: b
        };
    });
    var $elm$browser$Debugger$Report$SomethingChanged = function(a) {
        return {
            $: "SomethingChanged",
            a: a
        };
    };
    var $elm$browser$Debugger$Report$AliasChange = function(a) {
        return {
            $: "AliasChange",
            a: a
        };
    };
    var $elm$browser$Debugger$Metadata$checkAlias = F4(function(name, old, _new, changes) {
        return _Utils_eq(old.tipe, _new.tipe) && _Utils_eq(old.args, _new.args) ? changes : A2($elm$core$List$cons, $elm$browser$Debugger$Report$AliasChange(name), changes);
    });
    var $elm$browser$Debugger$Report$UnionChange = F2(function(a, b) {
        return {
            $: "UnionChange",
            a: a,
            b: b
        };
    });
    var $elm$browser$Debugger$Metadata$addTag = F3(function(tag, _v0, changes) {
        return _Utils_update(changes, {
            added: A2($elm$core$List$cons, tag, changes.added)
        });
    });
    var $elm$browser$Debugger$Metadata$checkTag = F4(function(tag, old, _new, changes) {
        return _Utils_eq(old, _new) ? changes : _Utils_update(changes, {
            changed: A2($elm$core$List$cons, tag, changes.changed)
        });
    });
    var $elm$browser$Debugger$Report$TagChanges = F4(function(removed, changed, added, argsMatch) {
        return {
            added: added,
            argsMatch: argsMatch,
            changed: changed,
            removed: removed
        };
    });
    var $elm$browser$Debugger$Report$emptyTagChanges = function(argsMatch) {
        return A4($elm$browser$Debugger$Report$TagChanges, _List_Nil, _List_Nil, _List_Nil, argsMatch);
    };
    var $elm$browser$Debugger$Report$hasTagChanges = function(tagChanges) {
        return _Utils_eq(tagChanges, A4($elm$browser$Debugger$Report$TagChanges, _List_Nil, _List_Nil, _List_Nil, true));
    };
    var $elm$core$Dict$merge = F6(function(leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
        var stepState = F3(function(rKey, rValue, _v0) {
            stepState: while(true){
                var list = _v0.a;
                var result = _v0.b;
                if (!list.b) return _Utils_Tuple2(list, A3(rightStep, rKey, rValue, result));
                else {
                    var _v2 = list.a;
                    var lKey = _v2.a;
                    var lValue = _v2.b;
                    var rest = list.b;
                    if (_Utils_cmp(lKey, rKey) < 0) {
                        var $temp$rKey = rKey, $temp$rValue = rValue, $temp$_v0 = _Utils_Tuple2(rest, A3(leftStep, lKey, lValue, result));
                        rKey = $temp$rKey;
                        rValue = $temp$rValue;
                        _v0 = $temp$_v0;
                        continue stepState;
                    } else {
                        if (_Utils_cmp(lKey, rKey) > 0) return _Utils_Tuple2(list, A3(rightStep, rKey, rValue, result));
                        else return _Utils_Tuple2(rest, A4(bothStep, lKey, lValue, rValue, result));
                    }
                }
            }
        });
        var _v3 = A3($elm$core$Dict$foldl, stepState, _Utils_Tuple2($elm$core$Dict$toList(leftDict), initialResult), rightDict);
        var leftovers = _v3.a;
        var intermediateResult = _v3.b;
        return A3($elm$core$List$foldl, F2(function(_v4, result) {
            var k = _v4.a;
            var v = _v4.b;
            return A3(leftStep, k, v, result);
        }), intermediateResult, leftovers);
    });
    var $elm$browser$Debugger$Metadata$removeTag = F3(function(tag, _v0, changes) {
        return _Utils_update(changes, {
            removed: A2($elm$core$List$cons, tag, changes.removed)
        });
    });
    var $elm$browser$Debugger$Metadata$checkUnion = F4(function(name, old, _new, changes) {
        var tagChanges = A6($elm$core$Dict$merge, $elm$browser$Debugger$Metadata$removeTag, $elm$browser$Debugger$Metadata$checkTag, $elm$browser$Debugger$Metadata$addTag, old.tags, _new.tags, $elm$browser$Debugger$Report$emptyTagChanges(_Utils_eq(old.args, _new.args)));
        return $elm$browser$Debugger$Report$hasTagChanges(tagChanges) ? changes : A2($elm$core$List$cons, A2($elm$browser$Debugger$Report$UnionChange, name, tagChanges), changes);
    });
    var $elm$browser$Debugger$Metadata$ignore = F3(function(key, value, report) {
        return report;
    });
    var $elm$browser$Debugger$Metadata$checkTypes = F2(function(old, _new) {
        return !_Utils_eq(old.message, _new.message) ? A2($elm$browser$Debugger$Report$MessageChanged, old.message, _new.message) : $elm$browser$Debugger$Report$SomethingChanged(A6($elm$core$Dict$merge, $elm$browser$Debugger$Metadata$ignore, $elm$browser$Debugger$Metadata$checkUnion, $elm$browser$Debugger$Metadata$ignore, old.unions, _new.unions, A6($elm$core$Dict$merge, $elm$browser$Debugger$Metadata$ignore, $elm$browser$Debugger$Metadata$checkAlias, $elm$browser$Debugger$Metadata$ignore, old.aliases, _new.aliases, _List_Nil)));
    });
    var $elm$browser$Debugger$Metadata$check = F2(function(old, _new) {
        return !_Utils_eq(old.versions.elm, _new.versions.elm) ? A2($elm$browser$Debugger$Report$VersionChanged, old.versions.elm, _new.versions.elm) : A2($elm$browser$Debugger$Metadata$checkTypes, old.types, _new.types);
    });
    var $elm$browser$Debugger$Report$CorruptHistory = {
        $: "CorruptHistory"
    };
    var $elm$browser$Debugger$Overlay$corruptImport = $elm$browser$Debugger$Overlay$BadImport($elm$browser$Debugger$Report$CorruptHistory);
    var $elm$json$Json$Decode$decodeString = _Json_runOnString;
    var $elm$browser$Debugger$Report$Fine = {
        $: "Fine"
    };
    var $elm$browser$Debugger$Report$Impossible = {
        $: "Impossible"
    };
    var $elm$browser$Debugger$Report$Risky = {
        $: "Risky"
    };
    var $elm$core$Basics$not = _Basics_not;
    var $elm$core$List$isEmpty = function(xs) {
        if (!xs.b) return true;
        else return false;
    };
    var $elm$browser$Debugger$Report$some = function(list) {
        return !$elm$core$List$isEmpty(list);
    };
    var $elm$browser$Debugger$Report$evaluateChange = function(change) {
        if (change.$ === "AliasChange") return $elm$browser$Debugger$Report$Impossible;
        else {
            var removed = change.b.removed;
            var changed = change.b.changed;
            var added = change.b.added;
            var argsMatch = change.b.argsMatch;
            return !argsMatch || $elm$browser$Debugger$Report$some(changed) || $elm$browser$Debugger$Report$some(removed) ? $elm$browser$Debugger$Report$Impossible : $elm$browser$Debugger$Report$some(added) ? $elm$browser$Debugger$Report$Risky : $elm$browser$Debugger$Report$Fine;
        }
    };
    var $elm$browser$Debugger$Report$worstCase = F2(function(status, statusList) {
        worstCase: while(true){
            if (!statusList.b) return status;
            else switch(statusList.a.$){
                case "Impossible":
                    var _v1 = statusList.a;
                    return $elm$browser$Debugger$Report$Impossible;
                case "Risky":
                    var _v2 = statusList.a;
                    var rest = statusList.b;
                    var $temp$status = $elm$browser$Debugger$Report$Risky, $temp$statusList = rest;
                    status = $temp$status;
                    statusList = $temp$statusList;
                    continue worstCase;
                default:
                    var _v3 = statusList.a;
                    var rest = statusList.b;
                    var $temp$status = status, $temp$statusList = rest;
                    status = $temp$status;
                    statusList = $temp$statusList;
                    continue worstCase;
            }
        }
    });
    var $elm$browser$Debugger$Report$evaluate = function(report) {
        switch(report.$){
            case "CorruptHistory":
                return $elm$browser$Debugger$Report$Impossible;
            case "VersionChanged":
                return $elm$browser$Debugger$Report$Impossible;
            case "MessageChanged":
                return $elm$browser$Debugger$Report$Impossible;
            default:
                var changes = report.a;
                return A2($elm$browser$Debugger$Report$worstCase, $elm$browser$Debugger$Report$Fine, A2($elm$core$List$map, $elm$browser$Debugger$Report$evaluateChange, changes));
        }
    };
    var $elm$json$Json$Decode$value = _Json_decodeValue;
    var $elm$browser$Debugger$Overlay$uploadDecoder = A3($elm$json$Json$Decode$map2, F2(function(x, y) {
        return _Utils_Tuple2(x, y);
    }), A2($elm$json$Json$Decode$field, "metadata", $elm$browser$Debugger$Metadata$decoder), A2($elm$json$Json$Decode$field, "history", $elm$json$Json$Decode$value));
    var $elm$browser$Debugger$Overlay$assessImport = F2(function(metadata, jsonString) {
        var _v0 = A2($elm$json$Json$Decode$decodeString, $elm$browser$Debugger$Overlay$uploadDecoder, jsonString);
        if (_v0.$ === "Err") return $elm$core$Result$Err($elm$browser$Debugger$Overlay$corruptImport);
        else {
            var _v1 = _v0.a;
            var foreignMetadata = _v1.a;
            var rawHistory = _v1.b;
            var report = A2($elm$browser$Debugger$Metadata$check, foreignMetadata, metadata);
            var _v2 = $elm$browser$Debugger$Report$evaluate(report);
            switch(_v2.$){
                case "Impossible":
                    return $elm$core$Result$Err($elm$browser$Debugger$Overlay$BadImport(report));
                case "Risky":
                    return $elm$core$Result$Err(A2($elm$browser$Debugger$Overlay$RiskyImport, report, rawHistory));
                default:
                    return $elm$core$Result$Ok(rawHistory);
            }
        }
    });
    var $elm$core$Platform$Cmd$batch = _Platform_batch;
    var $elm$browser$Debugger$Overlay$close = F2(function(msg, state) {
        switch(state.$){
            case "None":
                return $elm$core$Maybe$Nothing;
            case "BadMetadata":
                return $elm$core$Maybe$Nothing;
            case "BadImport":
                return $elm$core$Maybe$Nothing;
            default:
                var rawHistory = state.b;
                if (msg.$ === "Cancel") return $elm$core$Maybe$Nothing;
                else return $elm$core$Maybe$Just(rawHistory);
        }
    });
    var $elm$browser$Debugger$History$elmToJs = A2($elm$core$Basics$composeR, _Json_wrap, _Debugger_unsafeCoerce);
    var $elm$browser$Debugger$History$encodeHelp = F2(function(snapshot, allMessages) {
        return A3($elm$core$Array$foldl, $elm$core$List$cons, allMessages, snapshot.messages);
    });
    var $elm$json$Json$Encode$list = F2(function(func, entries) {
        return _Json_wrap(A3($elm$core$List$foldl, _Json_addEntry(func), _Json_emptyArray(_Utils_Tuple0), entries));
    });
    var $elm$browser$Debugger$History$encode = function(_v0) {
        var snapshots = _v0.snapshots;
        var recent = _v0.recent;
        return A2($elm$json$Json$Encode$list, $elm$browser$Debugger$History$elmToJs, A3($elm$core$Array$foldr, $elm$browser$Debugger$History$encodeHelp, $elm$core$List$reverse(recent.messages), snapshots));
    };
    var $elm$json$Json$Encode$object = function(pairs) {
        return _Json_wrap(A3($elm$core$List$foldl, F2(function(_v0, obj) {
            var k = _v0.a;
            var v = _v0.b;
            return A3(_Json_addField, k, v, obj);
        }), _Json_emptyObject(_Utils_Tuple0), pairs));
    };
    var $elm$browser$Debugger$Metadata$encodeAlias = function(_v0) {
        var args = _v0.args;
        var tipe = _v0.tipe;
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("args", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, args)),
            _Utils_Tuple2("type", $elm$json$Json$Encode$string(tipe))
        ]));
    };
    var $elm$browser$Debugger$Metadata$encodeDict = F2(function(f, dict) {
        return $elm$json$Json$Encode$object($elm$core$Dict$toList(A2($elm$core$Dict$map, F2(function(key, value) {
            return f(value);
        }), dict)));
    });
    var $elm$browser$Debugger$Metadata$encodeUnion = function(_v0) {
        var args = _v0.args;
        var tags = _v0.tags;
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("args", A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, args)),
            _Utils_Tuple2("tags", A2($elm$browser$Debugger$Metadata$encodeDict, $elm$json$Json$Encode$list($elm$json$Json$Encode$string), tags))
        ]));
    };
    var $elm$browser$Debugger$Metadata$encodeTypes = function(_v0) {
        var message = _v0.message;
        var unions = _v0.unions;
        var aliases = _v0.aliases;
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("message", $elm$json$Json$Encode$string(message)),
            _Utils_Tuple2("aliases", A2($elm$browser$Debugger$Metadata$encodeDict, $elm$browser$Debugger$Metadata$encodeAlias, aliases)),
            _Utils_Tuple2("unions", A2($elm$browser$Debugger$Metadata$encodeDict, $elm$browser$Debugger$Metadata$encodeUnion, unions))
        ]));
    };
    var $elm$browser$Debugger$Metadata$encodeVersions = function(_v0) {
        var elm = _v0.elm;
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("elm", $elm$json$Json$Encode$string(elm))
        ]));
    };
    var $elm$browser$Debugger$Metadata$encode = function(_v0) {
        var versions = _v0.versions;
        var types = _v0.types;
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("versions", $elm$browser$Debugger$Metadata$encodeVersions(versions)),
            _Utils_Tuple2("types", $elm$browser$Debugger$Metadata$encodeTypes(types))
        ]));
    };
    var $elm$core$Basics$identity = function(x) {
        return x;
    };
    var $elm$core$Task$Perform = function(a) {
        return {
            $: "Perform",
            a: a
        };
    };
    var $elm$core$Task$succeed = _Scheduler_succeed;
    var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
    var $elm$core$Task$andThen = _Scheduler_andThen;
    var $elm$core$Task$map = F2(function(func, taskA) {
        return A2($elm$core$Task$andThen, function(a) {
            return $elm$core$Task$succeed(func(a));
        }, taskA);
    });
    var $elm$core$Task$map2 = F3(function(func, taskA, taskB) {
        return A2($elm$core$Task$andThen, function(a) {
            return A2($elm$core$Task$andThen, function(b) {
                return $elm$core$Task$succeed(A2(func, a, b));
            }, taskB);
        }, taskA);
    });
    var $elm$core$Task$sequence = function(tasks) {
        return A3($elm$core$List$foldr, $elm$core$Task$map2($elm$core$List$cons), $elm$core$Task$succeed(_List_Nil), tasks);
    };
    var $elm$core$Platform$sendToApp = _Platform_sendToApp;
    var $elm$core$Task$spawnCmd = F2(function(router, _v0) {
        var task = _v0.a;
        return _Scheduler_spawn(A2($elm$core$Task$andThen, $elm$core$Platform$sendToApp(router), task));
    });
    var $elm$core$Task$onEffects = F3(function(router, commands, state) {
        return A2($elm$core$Task$map, function(_v0) {
            return _Utils_Tuple0;
        }, $elm$core$Task$sequence(A2($elm$core$List$map, $elm$core$Task$spawnCmd(router), commands)));
    });
    var $elm$core$Task$onSelfMsg = F3(function(_v0, _v1, _v2) {
        return $elm$core$Task$succeed(_Utils_Tuple0);
    });
    var $elm$core$Task$cmdMap = F2(function(tagger, _v0) {
        var task = _v0.a;
        return $elm$core$Task$Perform(A2($elm$core$Task$map, tagger, task));
    });
    _Platform_effectManagers["Task"] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
    var $elm$core$Task$command = _Platform_leaf("Task");
    var $elm$core$Task$perform = F2(function(toMessage, task) {
        return $elm$core$Task$command($elm$core$Task$Perform(A2($elm$core$Task$map, toMessage, task)));
    });
    var $elm$browser$Debugger$Main$download = F2(function(metadata, history1) {
        var historyLength = $elm$browser$Debugger$History$size(history1);
        return A2($elm$core$Task$perform, function(_v0) {
            return $elm$browser$Debugger$Main$NoOp;
        }, A2(_Debugger_download, historyLength, _Json_unwrap($elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("metadata", $elm$browser$Debugger$Metadata$encode(metadata)),
            _Utils_Tuple2("history", $elm$browser$Debugger$History$encode(history1))
        ])))));
    });
    var $elm$browser$Debugger$Main$Vertical = F3(function(a, b, c) {
        return {
            $: "Vertical",
            a: a,
            b: b,
            c: c
        };
    });
    var $elm$browser$Debugger$Main$drag = F2(function(info, layout) {
        if (layout.$ === "Horizontal") {
            var status = layout.a;
            var y = layout.c;
            return A3($elm$browser$Debugger$Main$Horizontal, status, info.x / info.width, y);
        } else {
            var status = layout.a;
            var x = layout.b;
            return A3($elm$browser$Debugger$Main$Vertical, status, x, info.y / info.height);
        }
    });
    var $elm$browser$Debugger$History$Stepping = F2(function(a, b) {
        return {
            $: "Stepping",
            a: a,
            b: b
        };
    });
    var $elm$browser$Debugger$History$Done = F2(function(a, b) {
        return {
            $: "Done",
            a: a,
            b: b
        };
    });
    var $elm$browser$Debugger$History$getHelp = F3(function(update, msg, getResult) {
        if (getResult.$ === "Done") return getResult;
        else {
            var n = getResult.a;
            var model = getResult.b;
            return !n ? A2($elm$browser$Debugger$History$Done, msg, A2(update, msg, model).a) : A2($elm$browser$Debugger$History$Stepping, n - 1, A2(update, msg, model).a);
        }
    });
    var $elm$browser$Debugger$History$undone = function(getResult) {
        undone: while(true)if (getResult.$ === "Done") {
            var msg = getResult.a;
            var model = getResult.b;
            return _Utils_Tuple2(model, msg);
        } else {
            var $temp$getResult = getResult;
            getResult = $temp$getResult;
            continue undone;
        }
    };
    var $elm$browser$Debugger$History$get = F3(function(update, index, history1) {
        get: while(true){
            var recent = history1.recent;
            var snapshotMax = history1.numMessages - recent.numMessages;
            if (_Utils_cmp(index, snapshotMax) > -1) return $elm$browser$Debugger$History$undone(A3($elm$core$List$foldr, $elm$browser$Debugger$History$getHelp(update), A2($elm$browser$Debugger$History$Stepping, index - snapshotMax, recent.model), recent.messages));
            else {
                var _v0 = A2($elm$core$Array$get, index / $elm$browser$Debugger$History$maxSnapshotSize | 0, history1.snapshots);
                if (_v0.$ === "Nothing") {
                    var $temp$update = update, $temp$index = index, $temp$history = history1;
                    update = $temp$update;
                    index = $temp$index;
                    history1 = $temp$history;
                    continue get;
                } else {
                    var model = _v0.a.model;
                    var messages = _v0.a.messages;
                    return $elm$browser$Debugger$History$undone(A3($elm$core$Array$foldr, $elm$browser$Debugger$History$getHelp(update), A2($elm$browser$Debugger$History$Stepping, index % $elm$browser$Debugger$History$maxSnapshotSize, model), messages));
                }
            }
        }
    });
    var $elm$browser$Debugger$History$getRecentMsg = function(history1) {
        getRecentMsg: while(true){
            var _v0 = history1.recent.messages;
            if (!_v0.b) {
                var $temp$history = history1;
                history1 = $temp$history;
                continue getRecentMsg;
            } else {
                var first = _v0.a;
                return first;
            }
        }
    };
    var $elm$core$Dict$get = F2(function(targetKey, dict) {
        get: while(true){
            if (dict.$ === "RBEmpty_elm_builtin") return $elm$core$Maybe$Nothing;
            else {
                var key = dict.b;
                var value = dict.c;
                var left = dict.d;
                var right = dict.e;
                var _v1 = A2($elm$core$Basics$compare, targetKey, key);
                switch(_v1.$){
                    case "LT":
                        var $temp$targetKey = targetKey, $temp$dict = left;
                        targetKey = $temp$targetKey;
                        dict = $temp$dict;
                        continue get;
                    case "EQ":
                        return $elm$core$Maybe$Just(value);
                    default:
                        var $temp$targetKey = targetKey, $temp$dict = right;
                        targetKey = $temp$targetKey;
                        dict = $temp$dict;
                        continue get;
                }
            }
        }
    });
    var $elm$browser$Debugger$Expando$mergeDictHelp = F3(function(oldDict, key, value) {
        var _v12 = A2($elm$core$Dict$get, key, oldDict);
        if (_v12.$ === "Nothing") return value;
        else {
            var oldValue = _v12.a;
            return A2($elm$browser$Debugger$Expando$mergeHelp, oldValue, value);
        }
    });
    var $elm$browser$Debugger$Expando$mergeHelp = F2(function(old, _new) {
        var _v3 = _Utils_Tuple2(old, _new);
        _v3$6: while(true)switch(_v3.b.$){
            case "S":
                return _new;
            case "Primitive":
                return _new;
            case "Sequence":
                if (_v3.a.$ === "Sequence") {
                    var _v4 = _v3.a;
                    var isClosed = _v4.b;
                    var oldValues = _v4.c;
                    var _v5 = _v3.b;
                    var seqType = _v5.a;
                    var newValues = _v5.c;
                    return A3($elm$browser$Debugger$Expando$Sequence, seqType, isClosed, A2($elm$browser$Debugger$Expando$mergeListHelp, oldValues, newValues));
                } else break _v3$6;
            case "Dictionary":
                if (_v3.a.$ === "Dictionary") {
                    var _v6 = _v3.a;
                    var isClosed = _v6.a;
                    var _v7 = _v3.b;
                    var keyValuePairs = _v7.b;
                    return A2($elm$browser$Debugger$Expando$Dictionary, isClosed, keyValuePairs);
                } else break _v3$6;
            case "Record":
                if (_v3.a.$ === "Record") {
                    var _v8 = _v3.a;
                    var isClosed = _v8.a;
                    var oldDict = _v8.b;
                    var _v9 = _v3.b;
                    var newDict = _v9.b;
                    return A2($elm$browser$Debugger$Expando$Record, isClosed, A2($elm$core$Dict$map, $elm$browser$Debugger$Expando$mergeDictHelp(oldDict), newDict));
                } else break _v3$6;
            default:
                if (_v3.a.$ === "Constructor") {
                    var _v10 = _v3.a;
                    var isClosed = _v10.b;
                    var oldValues = _v10.c;
                    var _v11 = _v3.b;
                    var maybeName = _v11.a;
                    var newValues = _v11.c;
                    return A3($elm$browser$Debugger$Expando$Constructor, maybeName, isClosed, A2($elm$browser$Debugger$Expando$mergeListHelp, oldValues, newValues));
                } else break _v3$6;
        }
        return _new;
    });
    var $elm$browser$Debugger$Expando$mergeListHelp = F2(function(olds, news) {
        var _v0 = _Utils_Tuple2(olds, news);
        if (!_v0.a.b) return news;
        else {
            if (!_v0.b.b) return news;
            else {
                var _v1 = _v0.a;
                var x = _v1.a;
                var xs = _v1.b;
                var _v2 = _v0.b;
                var y = _v2.a;
                var ys = _v2.b;
                return A2($elm$core$List$cons, A2($elm$browser$Debugger$Expando$mergeHelp, x, y), A2($elm$browser$Debugger$Expando$mergeListHelp, xs, ys));
            }
        }
    });
    var $elm$browser$Debugger$Expando$merge = F2(function(value, expando) {
        return A2($elm$browser$Debugger$Expando$mergeHelp, expando, _Debugger_init(value));
    });
    var $elm$browser$Debugger$Main$jumpUpdate = F3(function(update, index, model) {
        var history1 = $elm$browser$Debugger$Main$cachedHistory(model);
        var currentMsg = $elm$browser$Debugger$History$getRecentMsg(history1);
        var currentModel = $elm$browser$Debugger$Main$getLatestModel(model.state);
        var _v0 = A3($elm$browser$Debugger$History$get, update, index, history1);
        var indexModel = _v0.a;
        var indexMsg = _v0.b;
        return _Utils_update(model, {
            expandoModel: A2($elm$browser$Debugger$Expando$merge, indexModel, model.expandoModel),
            expandoMsg: A2($elm$browser$Debugger$Expando$merge, indexMsg, model.expandoMsg),
            state: A5($elm$browser$Debugger$Main$Paused, index, indexModel, currentModel, currentMsg, history1)
        });
    });
    var $elm$browser$Debugger$History$jsToElm = A2($elm$core$Basics$composeR, _Json_unwrap, _Debugger_unsafeCoerce);
    var $elm$browser$Debugger$History$decoder = F2(function(initialModel, update) {
        var addMessage = F2(function(rawMsg, _v0) {
            var model = _v0.a;
            var history1 = _v0.b;
            var msg = $elm$browser$Debugger$History$jsToElm(rawMsg);
            return _Utils_Tuple2(A2(update, msg, model), A3($elm$browser$Debugger$History$add, msg, model, history1));
        });
        var updateModel = function(rawMsgs) {
            return A3($elm$core$List$foldl, addMessage, _Utils_Tuple2(initialModel, $elm$browser$Debugger$History$empty(initialModel)), rawMsgs);
        };
        return A2($elm$json$Json$Decode$map, updateModel, $elm$json$Json$Decode$list($elm$json$Json$Decode$value));
    });
    var $elm$browser$Debugger$History$getInitialModel = function(_v0) {
        var snapshots = _v0.snapshots;
        var recent = _v0.recent;
        var _v1 = A2($elm$core$Array$get, 0, snapshots);
        if (_v1.$ === "Just") {
            var model = _v1.a.model;
            return model;
        } else return recent.model;
    };
    var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
    var $elm$browser$Debugger$Main$loadNewHistory = F3(function(rawHistory, update, model) {
        var pureUserUpdate = F2(function(msg, userModel) {
            return A2(update, msg, userModel).a;
        });
        var initialUserModel = $elm$browser$Debugger$History$getInitialModel(model.history);
        var decoder = A2($elm$browser$Debugger$History$decoder, initialUserModel, pureUserUpdate);
        var _v0 = A2($elm$json$Json$Decode$decodeValue, decoder, rawHistory);
        if (_v0.$ === "Err") return _Utils_Tuple2(_Utils_update(model, {
            overlay: $elm$browser$Debugger$Overlay$corruptImport
        }), $elm$core$Platform$Cmd$none);
        else {
            var _v1 = _v0.a;
            var latestUserModel = _v1.a;
            var newHistory = _v1.b;
            return _Utils_Tuple2(_Utils_update(model, {
                expandoModel: $elm$browser$Debugger$Expando$init(latestUserModel),
                expandoMsg: $elm$browser$Debugger$Expando$init($elm$browser$Debugger$History$getRecentMsg(newHistory)),
                history: newHistory,
                overlay: $elm$browser$Debugger$Overlay$none,
                state: $elm$browser$Debugger$Main$Running(latestUserModel)
            }), $elm$core$Platform$Cmd$none);
        }
    });
    var $elm$browser$Debugger$Main$scroll = function(popout) {
        return A2($elm$core$Task$perform, $elm$core$Basics$always($elm$browser$Debugger$Main$NoOp), _Debugger_scroll(popout));
    };
    var $elm$browser$Debugger$Main$scrollTo = F2(function(id, popout) {
        return A2($elm$core$Task$perform, $elm$core$Basics$always($elm$browser$Debugger$Main$NoOp), A2(_Debugger_scrollTo, id, popout));
    });
    var $elm$browser$Debugger$Main$setDragStatus = F2(function(status, layout) {
        if (layout.$ === "Horizontal") {
            var x = layout.b;
            var y = layout.c;
            return A3($elm$browser$Debugger$Main$Horizontal, status, x, y);
        } else {
            var x = layout.b;
            var y = layout.c;
            return A3($elm$browser$Debugger$Main$Vertical, status, x, y);
        }
    });
    var $elm$browser$Debugger$Main$swapLayout = function(layout) {
        if (layout.$ === "Horizontal") {
            var s = layout.a;
            var x = layout.b;
            var y = layout.c;
            return A3($elm$browser$Debugger$Main$Vertical, s, x, y);
        } else {
            var s = layout.a;
            var x = layout.b;
            var y = layout.c;
            return A3($elm$browser$Debugger$Main$Horizontal, s, x, y);
        }
    };
    var $elm$core$Dict$getMin = function(dict) {
        getMin: while(true){
            if (dict.$ === "RBNode_elm_builtin" && dict.d.$ === "RBNode_elm_builtin") {
                var left = dict.d;
                var $temp$dict = left;
                dict = $temp$dict;
                continue getMin;
            } else return dict;
        }
    };
    var $elm$core$Dict$moveRedLeft = function(dict) {
        if (dict.$ === "RBNode_elm_builtin" && dict.d.$ === "RBNode_elm_builtin" && dict.e.$ === "RBNode_elm_builtin") {
            if (dict.e.d.$ === "RBNode_elm_builtin" && dict.e.d.a.$ === "Red") {
                var clr = dict.a;
                var k = dict.b;
                var v = dict.c;
                var _v1 = dict.d;
                var lClr = _v1.a;
                var lK = _v1.b;
                var lV = _v1.c;
                var lLeft = _v1.d;
                var lRight = _v1.e;
                var _v2 = dict.e;
                var rClr = _v2.a;
                var rK = _v2.b;
                var rV = _v2.c;
                var rLeft = _v2.d;
                var _v3 = rLeft.a;
                var rlK = rLeft.b;
                var rlV = rLeft.c;
                var rlL = rLeft.d;
                var rlR = rLeft.e;
                var rRight = _v2.e;
                return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rlK, rlV, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight), rlL), A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
            } else {
                var clr = dict.a;
                var k = dict.b;
                var v = dict.c;
                var _v4 = dict.d;
                var lClr = _v4.a;
                var lK = _v4.b;
                var lV = _v4.c;
                var lLeft = _v4.d;
                var lRight = _v4.e;
                var _v5 = dict.e;
                var rClr = _v5.a;
                var rK = _v5.b;
                var rV = _v5.c;
                var rLeft = _v5.d;
                var rRight = _v5.e;
                if (clr.$ === "Black") return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight), A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
                else return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight), A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
            }
        } else return dict;
    };
    var $elm$core$Dict$moveRedRight = function(dict) {
        if (dict.$ === "RBNode_elm_builtin" && dict.d.$ === "RBNode_elm_builtin" && dict.e.$ === "RBNode_elm_builtin") {
            if (dict.d.d.$ === "RBNode_elm_builtin" && dict.d.d.a.$ === "Red") {
                var clr = dict.a;
                var k = dict.b;
                var v = dict.c;
                var _v1 = dict.d;
                var lClr = _v1.a;
                var lK = _v1.b;
                var lV = _v1.c;
                var _v2 = _v1.d;
                var _v3 = _v2.a;
                var llK = _v2.b;
                var llV = _v2.c;
                var llLeft = _v2.d;
                var llRight = _v2.e;
                var lRight = _v1.e;
                var _v4 = dict.e;
                var rClr = _v4.a;
                var rK = _v4.b;
                var rV = _v4.c;
                var rLeft = _v4.d;
                var rRight = _v4.e;
                return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight), A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, lRight, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
            } else {
                var clr = dict.a;
                var k = dict.b;
                var v = dict.c;
                var _v5 = dict.d;
                var lClr = _v5.a;
                var lK = _v5.b;
                var lV = _v5.c;
                var lLeft = _v5.d;
                var lRight = _v5.e;
                var _v6 = dict.e;
                var rClr = _v6.a;
                var rK = _v6.b;
                var rV = _v6.c;
                var rLeft = _v6.d;
                var rRight = _v6.e;
                if (clr.$ === "Black") return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight), A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
                else return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight), A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
            }
        } else return dict;
    };
    var $elm$core$Dict$removeHelpPrepEQGT = F7(function(targetKey, dict, color, key, value, left, right) {
        if (left.$ === "RBNode_elm_builtin" && left.a.$ === "Red") {
            var _v1 = left.a;
            var lK = left.b;
            var lV = left.c;
            var lLeft = left.d;
            var lRight = left.e;
            return A5($elm$core$Dict$RBNode_elm_builtin, color, lK, lV, lLeft, A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
        } else {
            _v2$2: while(true){
                if (right.$ === "RBNode_elm_builtin" && right.a.$ === "Black") {
                    if (right.d.$ === "RBNode_elm_builtin") {
                        if (right.d.a.$ === "Black") {
                            var _v3 = right.a;
                            var _v4 = right.d;
                            var _v5 = _v4.a;
                            return $elm$core$Dict$moveRedRight(dict);
                        } else break _v2$2;
                    } else {
                        var _v6 = right.a;
                        var _v7 = right.d;
                        return $elm$core$Dict$moveRedRight(dict);
                    }
                } else break _v2$2;
            }
            return dict;
        }
    });
    var $elm$core$Dict$removeMin = function(dict) {
        if (dict.$ === "RBNode_elm_builtin" && dict.d.$ === "RBNode_elm_builtin") {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var lColor = left.a;
            var lLeft = left.d;
            var right = dict.e;
            if (lColor.$ === "Black") {
                if (lLeft.$ === "RBNode_elm_builtin" && lLeft.a.$ === "Red") {
                    var _v3 = lLeft.a;
                    return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, $elm$core$Dict$removeMin(left), right);
                } else {
                    var _v4 = $elm$core$Dict$moveRedLeft(dict);
                    if (_v4.$ === "RBNode_elm_builtin") {
                        var nColor = _v4.a;
                        var nKey = _v4.b;
                        var nValue = _v4.c;
                        var nLeft = _v4.d;
                        var nRight = _v4.e;
                        return A5($elm$core$Dict$balance, nColor, nKey, nValue, $elm$core$Dict$removeMin(nLeft), nRight);
                    } else return $elm$core$Dict$RBEmpty_elm_builtin;
                }
            } else return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, $elm$core$Dict$removeMin(left), right);
        } else return $elm$core$Dict$RBEmpty_elm_builtin;
    };
    var $elm$core$Dict$removeHelp = F2(function(targetKey, dict) {
        if (dict.$ === "RBEmpty_elm_builtin") return $elm$core$Dict$RBEmpty_elm_builtin;
        else {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            if (_Utils_cmp(targetKey, key) < 0) {
                if (left.$ === "RBNode_elm_builtin" && left.a.$ === "Black") {
                    var _v4 = left.a;
                    var lLeft = left.d;
                    if (lLeft.$ === "RBNode_elm_builtin" && lLeft.a.$ === "Red") {
                        var _v6 = lLeft.a;
                        return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, A2($elm$core$Dict$removeHelp, targetKey, left), right);
                    } else {
                        var _v7 = $elm$core$Dict$moveRedLeft(dict);
                        if (_v7.$ === "RBNode_elm_builtin") {
                            var nColor = _v7.a;
                            var nKey = _v7.b;
                            var nValue = _v7.c;
                            var nLeft = _v7.d;
                            var nRight = _v7.e;
                            return A5($elm$core$Dict$balance, nColor, nKey, nValue, A2($elm$core$Dict$removeHelp, targetKey, nLeft), nRight);
                        } else return $elm$core$Dict$RBEmpty_elm_builtin;
                    }
                } else return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, A2($elm$core$Dict$removeHelp, targetKey, left), right);
            } else return A2($elm$core$Dict$removeHelpEQGT, targetKey, A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
        }
    });
    var $elm$core$Dict$removeHelpEQGT = F2(function(targetKey, dict) {
        if (dict.$ === "RBNode_elm_builtin") {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            if (_Utils_eq(targetKey, key)) {
                var _v1 = $elm$core$Dict$getMin(right);
                if (_v1.$ === "RBNode_elm_builtin") {
                    var minKey = _v1.b;
                    var minValue = _v1.c;
                    return A5($elm$core$Dict$balance, color, minKey, minValue, left, $elm$core$Dict$removeMin(right));
                } else return $elm$core$Dict$RBEmpty_elm_builtin;
            } else return A5($elm$core$Dict$balance, color, key, value, left, A2($elm$core$Dict$removeHelp, targetKey, right));
        } else return $elm$core$Dict$RBEmpty_elm_builtin;
    });
    var $elm$core$Dict$remove = F2(function(key, dict) {
        var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
        if (_v0.$ === "RBNode_elm_builtin" && _v0.a.$ === "Red") {
            var _v1 = _v0.a;
            var k = _v0.b;
            var v = _v0.c;
            var l = _v0.d;
            var r = _v0.e;
            return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
        } else {
            var x = _v0;
            return x;
        }
    });
    var $elm$core$Dict$update = F3(function(targetKey, alter, dictionary) {
        var _v0 = alter(A2($elm$core$Dict$get, targetKey, dictionary));
        if (_v0.$ === "Just") {
            var value = _v0.a;
            return A3($elm$core$Dict$insert, targetKey, value, dictionary);
        } else return A2($elm$core$Dict$remove, targetKey, dictionary);
    });
    var $elm$browser$Debugger$Expando$updateIndex = F3(function(n, func, list) {
        if (!list.b) return _List_Nil;
        else {
            var x = list.a;
            var xs = list.b;
            return n <= 0 ? A2($elm$core$List$cons, func(x), xs) : A2($elm$core$List$cons, x, A3($elm$browser$Debugger$Expando$updateIndex, n - 1, func, xs));
        }
    });
    var $elm$browser$Debugger$Expando$update = F2(function(msg, value) {
        switch(value.$){
            case "S":
                return value;
            case "Primitive":
                return value;
            case "Sequence":
                var seqType = value.a;
                var isClosed = value.b;
                var valueList = value.c;
                switch(msg.$){
                    case "Toggle":
                        return A3($elm$browser$Debugger$Expando$Sequence, seqType, !isClosed, valueList);
                    case "Index":
                        if (msg.a.$ === "None") {
                            var _v3 = msg.a;
                            var index = msg.b;
                            var subMsg = msg.c;
                            return A3($elm$browser$Debugger$Expando$Sequence, seqType, isClosed, A3($elm$browser$Debugger$Expando$updateIndex, index, $elm$browser$Debugger$Expando$update(subMsg), valueList));
                        } else return value;
                    default:
                        return value;
                }
            case "Dictionary":
                var isClosed = value.a;
                var keyValuePairs = value.b;
                switch(msg.$){
                    case "Toggle":
                        return A2($elm$browser$Debugger$Expando$Dictionary, !isClosed, keyValuePairs);
                    case "Index":
                        var redirect = msg.a;
                        var index = msg.b;
                        var subMsg = msg.c;
                        switch(redirect.$){
                            case "None":
                                return value;
                            case "Key":
                                return A2($elm$browser$Debugger$Expando$Dictionary, isClosed, A3($elm$browser$Debugger$Expando$updateIndex, index, function(_v6) {
                                    var k = _v6.a;
                                    var v = _v6.b;
                                    return _Utils_Tuple2(A2($elm$browser$Debugger$Expando$update, subMsg, k), v);
                                }, keyValuePairs));
                            default:
                                return A2($elm$browser$Debugger$Expando$Dictionary, isClosed, A3($elm$browser$Debugger$Expando$updateIndex, index, function(_v7) {
                                    var k = _v7.a;
                                    var v = _v7.b;
                                    return _Utils_Tuple2(k, A2($elm$browser$Debugger$Expando$update, subMsg, v));
                                }, keyValuePairs));
                        }
                    default:
                        return value;
                }
            case "Record":
                var isClosed = value.a;
                var valueDict = value.b;
                switch(msg.$){
                    case "Toggle":
                        return A2($elm$browser$Debugger$Expando$Record, !isClosed, valueDict);
                    case "Index":
                        return value;
                    default:
                        var field = msg.a;
                        var subMsg = msg.b;
                        return A2($elm$browser$Debugger$Expando$Record, isClosed, A3($elm$core$Dict$update, field, $elm$browser$Debugger$Expando$updateField(subMsg), valueDict));
                }
            default:
                var maybeName = value.a;
                var isClosed = value.b;
                var valueList = value.c;
                switch(msg.$){
                    case "Toggle":
                        return A3($elm$browser$Debugger$Expando$Constructor, maybeName, !isClosed, valueList);
                    case "Index":
                        if (msg.a.$ === "None") {
                            var _v10 = msg.a;
                            var index = msg.b;
                            var subMsg = msg.c;
                            return A3($elm$browser$Debugger$Expando$Constructor, maybeName, isClosed, A3($elm$browser$Debugger$Expando$updateIndex, index, $elm$browser$Debugger$Expando$update(subMsg), valueList));
                        } else return value;
                    default:
                        return value;
                }
        }
    });
    var $elm$browser$Debugger$Expando$updateField = F2(function(msg, maybeExpando) {
        if (maybeExpando.$ === "Nothing") return maybeExpando;
        else {
            var expando = maybeExpando.a;
            return $elm$core$Maybe$Just(A2($elm$browser$Debugger$Expando$update, msg, expando));
        }
    });
    var $elm$browser$Debugger$Main$Upload = function(a) {
        return {
            $: "Upload",
            a: a
        };
    };
    var $elm$browser$Debugger$Main$upload = function(popout) {
        return A2($elm$core$Task$perform, $elm$browser$Debugger$Main$Upload, _Debugger_upload(popout));
    };
    var $elm$browser$Debugger$Overlay$BadMetadata = function(a) {
        return {
            $: "BadMetadata",
            a: a
        };
    };
    var $elm$browser$Debugger$Overlay$badMetadata = $elm$browser$Debugger$Overlay$BadMetadata;
    var $elm$browser$Debugger$Main$withGoodMetadata = F2(function(model, func) {
        var _v0 = model.metadata;
        if (_v0.$ === "Ok") {
            var metadata = _v0.a;
            return func(metadata);
        } else {
            var error = _v0.a;
            return _Utils_Tuple2(_Utils_update(model, {
                overlay: $elm$browser$Debugger$Overlay$badMetadata(error)
            }), $elm$core$Platform$Cmd$none);
        }
    });
    var $elm$browser$Debugger$Main$wrapUpdate = F3(function(update, msg, model) {
        wrapUpdate: while(true)switch(msg.$){
            case "NoOp":
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "UserMsg":
                var userMsg = msg.a;
                var userModel = $elm$browser$Debugger$Main$getLatestModel(model.state);
                var newHistory = A3($elm$browser$Debugger$History$add, userMsg, userModel, model.history);
                var _v1 = A2(update, userMsg, userModel);
                var newUserModel = _v1.a;
                var userCmds = _v1.b;
                var commands = A2($elm$core$Platform$Cmd$map, $elm$browser$Debugger$Main$UserMsg, userCmds);
                var _v2 = model.state;
                if (_v2.$ === "Running") return _Utils_Tuple2(_Utils_update(model, {
                    expandoModel: A2($elm$browser$Debugger$Expando$merge, newUserModel, model.expandoModel),
                    expandoMsg: A2($elm$browser$Debugger$Expando$merge, userMsg, model.expandoMsg),
                    history: newHistory,
                    state: $elm$browser$Debugger$Main$Running(newUserModel)
                }), $elm$core$Platform$Cmd$batch(_List_fromArray([
                    commands,
                    $elm$browser$Debugger$Main$scroll(model.popout)
                ])));
                else {
                    var index = _v2.a;
                    var indexModel = _v2.b;
                    var history1 = _v2.e;
                    return _Utils_Tuple2(_Utils_update(model, {
                        history: newHistory,
                        state: A5($elm$browser$Debugger$Main$Paused, index, indexModel, newUserModel, userMsg, history1)
                    }), commands);
                }
            case "TweakExpandoMsg":
                var eMsg = msg.a;
                return _Utils_Tuple2(_Utils_update(model, {
                    expandoMsg: A2($elm$browser$Debugger$Expando$update, eMsg, model.expandoMsg)
                }), $elm$core$Platform$Cmd$none);
            case "TweakExpandoModel":
                var eMsg = msg.a;
                return _Utils_Tuple2(_Utils_update(model, {
                    expandoModel: A2($elm$browser$Debugger$Expando$update, eMsg, model.expandoModel)
                }), $elm$core$Platform$Cmd$none);
            case "Resume":
                var _v3 = model.state;
                if (_v3.$ === "Running") return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                else {
                    var userModel = _v3.c;
                    var userMsg = _v3.d;
                    return _Utils_Tuple2(_Utils_update(model, {
                        expandoModel: A2($elm$browser$Debugger$Expando$merge, userModel, model.expandoModel),
                        expandoMsg: A2($elm$browser$Debugger$Expando$merge, userMsg, model.expandoMsg),
                        state: $elm$browser$Debugger$Main$Running(userModel)
                    }), $elm$browser$Debugger$Main$scroll(model.popout));
                }
            case "Jump":
                var index = msg.a;
                return _Utils_Tuple2(A3($elm$browser$Debugger$Main$jumpUpdate, update, index, model), $elm$core$Platform$Cmd$none);
            case "SliderJump":
                var index = msg.a;
                return _Utils_Tuple2(A3($elm$browser$Debugger$Main$jumpUpdate, update, index, model), A2($elm$browser$Debugger$Main$scrollTo, $elm$browser$Debugger$History$idForMessageIndex(index), model.popout));
            case "Open":
                return _Utils_Tuple2(model, A2($elm$core$Task$perform, $elm$core$Basics$always($elm$browser$Debugger$Main$NoOp), _Debugger_open(model.popout)));
            case "Up":
                var _v4 = model.state;
                if (_v4.$ === "Running") return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                else {
                    var i = _v4.a;
                    var history1 = _v4.e;
                    var targetIndex = i + 1;
                    if (_Utils_cmp(targetIndex, $elm$browser$Debugger$History$size(history1)) < 0) {
                        var $temp$update = update, $temp$msg = $elm$browser$Debugger$Main$SliderJump(targetIndex), $temp$model = model;
                        update = $temp$update;
                        msg = $temp$msg;
                        model = $temp$model;
                        continue wrapUpdate;
                    } else {
                        var $temp$update = update, $temp$msg = $elm$browser$Debugger$Main$Resume, $temp$model = model;
                        update = $temp$update;
                        msg = $temp$msg;
                        model = $temp$model;
                        continue wrapUpdate;
                    }
                }
            case "Down":
                var _v5 = model.state;
                if (_v5.$ === "Running") {
                    var $temp$update = update, $temp$msg = $elm$browser$Debugger$Main$Jump($elm$browser$Debugger$History$size(model.history) - 1), $temp$model = model;
                    update = $temp$update;
                    msg = $temp$msg;
                    model = $temp$model;
                    continue wrapUpdate;
                } else {
                    var index = _v5.a;
                    if (index > 0) {
                        var $temp$update = update, $temp$msg = $elm$browser$Debugger$Main$SliderJump(index - 1), $temp$model = model;
                        update = $temp$update;
                        msg = $temp$msg;
                        model = $temp$model;
                        continue wrapUpdate;
                    } else return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                }
            case "Import":
                return A2($elm$browser$Debugger$Main$withGoodMetadata, model, function(_v6) {
                    return _Utils_Tuple2(model, $elm$browser$Debugger$Main$upload(model.popout));
                });
            case "Export":
                return A2($elm$browser$Debugger$Main$withGoodMetadata, model, function(metadata) {
                    return _Utils_Tuple2(model, A2($elm$browser$Debugger$Main$download, metadata, model.history));
                });
            case "Upload":
                var jsonString = msg.a;
                return A2($elm$browser$Debugger$Main$withGoodMetadata, model, function(metadata) {
                    var _v7 = A2($elm$browser$Debugger$Overlay$assessImport, metadata, jsonString);
                    if (_v7.$ === "Err") {
                        var newOverlay = _v7.a;
                        return _Utils_Tuple2(_Utils_update(model, {
                            overlay: newOverlay
                        }), $elm$core$Platform$Cmd$none);
                    } else {
                        var rawHistory = _v7.a;
                        return A3($elm$browser$Debugger$Main$loadNewHistory, rawHistory, update, model);
                    }
                });
            case "OverlayMsg":
                var overlayMsg = msg.a;
                var _v8 = A2($elm$browser$Debugger$Overlay$close, overlayMsg, model.overlay);
                if (_v8.$ === "Nothing") return _Utils_Tuple2(_Utils_update(model, {
                    overlay: $elm$browser$Debugger$Overlay$none
                }), $elm$core$Platform$Cmd$none);
                else {
                    var rawHistory = _v8.a;
                    return A3($elm$browser$Debugger$Main$loadNewHistory, rawHistory, update, model);
                }
            case "SwapLayout":
                return _Utils_Tuple2(_Utils_update(model, {
                    layout: $elm$browser$Debugger$Main$swapLayout(model.layout)
                }), $elm$core$Platform$Cmd$none);
            case "DragStart":
                return _Utils_Tuple2(_Utils_update(model, {
                    layout: A2($elm$browser$Debugger$Main$setDragStatus, $elm$browser$Debugger$Main$Moving, model.layout)
                }), $elm$core$Platform$Cmd$none);
            case "Drag":
                var info = msg.a;
                return _Utils_Tuple2(_Utils_update(model, {
                    layout: A2($elm$browser$Debugger$Main$drag, info, model.layout)
                }), $elm$core$Platform$Cmd$none);
            default:
                return _Utils_Tuple2(_Utils_update(model, {
                    layout: A2($elm$browser$Debugger$Main$setDragStatus, $elm$browser$Debugger$Main$Static, model.layout)
                }), $elm$core$Platform$Cmd$none);
        }
    });
    var $elm$browser$Browser$External = function(a) {
        return {
            $: "External",
            a: a
        };
    };
    var $elm$browser$Browser$Internal = function(a) {
        return {
            $: "Internal",
            a: a
        };
    };
    var $elm$browser$Browser$Dom$NotFound = function(a) {
        return {
            $: "NotFound",
            a: a
        };
    };
    var $elm$url$Url$Http = {
        $: "Http"
    };
    var $elm$url$Url$Https = {
        $: "Https"
    };
    var $elm$url$Url$Url = F6(function(protocol, host, port_, path, query, fragment) {
        return {
            fragment: fragment,
            host: host,
            path: path,
            port_: port_,
            protocol: protocol,
            query: query
        };
    });
    var $elm$core$String$dropLeft = F2(function(n, string) {
        return n < 1 ? string : A3($elm$core$String$slice, n, $elm$core$String$length(string), string);
    });
    var $elm$core$String$indexes = _String_indexes;
    var $elm$core$String$isEmpty = function(string) {
        return string === "";
    };
    var $elm$url$Url$chompBeforePath = F5(function(protocol, path, params, frag, str) {
        if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, "@", str)) return $elm$core$Maybe$Nothing;
        else {
            var _v0 = A2($elm$core$String$indexes, ":", str);
            if (!_v0.b) return $elm$core$Maybe$Just(A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
            else {
                if (!_v0.b.b) {
                    var i = _v0.a;
                    var _v1 = $elm$core$String$toInt(A2($elm$core$String$dropLeft, i + 1, str));
                    if (_v1.$ === "Nothing") return $elm$core$Maybe$Nothing;
                    else {
                        var port_ = _v1;
                        return $elm$core$Maybe$Just(A6($elm$url$Url$Url, protocol, A2($elm$core$String$left, i, str), port_, path, params, frag));
                    }
                } else return $elm$core$Maybe$Nothing;
            }
        }
    });
    var $elm$url$Url$chompBeforeQuery = F4(function(protocol, params, frag, str) {
        if ($elm$core$String$isEmpty(str)) return $elm$core$Maybe$Nothing;
        else {
            var _v0 = A2($elm$core$String$indexes, "/", str);
            if (!_v0.b) return A5($elm$url$Url$chompBeforePath, protocol, "/", params, frag, str);
            else {
                var i = _v0.a;
                return A5($elm$url$Url$chompBeforePath, protocol, A2($elm$core$String$dropLeft, i, str), params, frag, A2($elm$core$String$left, i, str));
            }
        }
    });
    var $elm$url$Url$chompBeforeFragment = F3(function(protocol, frag, str) {
        if ($elm$core$String$isEmpty(str)) return $elm$core$Maybe$Nothing;
        else {
            var _v0 = A2($elm$core$String$indexes, "?", str);
            if (!_v0.b) return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
            else {
                var i = _v0.a;
                return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Just(A2($elm$core$String$dropLeft, i + 1, str)), frag, A2($elm$core$String$left, i, str));
            }
        }
    });
    var $elm$url$Url$chompAfterProtocol = F2(function(protocol, str) {
        if ($elm$core$String$isEmpty(str)) return $elm$core$Maybe$Nothing;
        else {
            var _v0 = A2($elm$core$String$indexes, "#", str);
            if (!_v0.b) return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
            else {
                var i = _v0.a;
                return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Just(A2($elm$core$String$dropLeft, i + 1, str)), A2($elm$core$String$left, i, str));
            }
        }
    });
    var $elm$core$String$startsWith = _String_startsWith;
    var $elm$url$Url$fromString = function(str) {
        return A2($elm$core$String$startsWith, "http://", str) ? A2($elm$url$Url$chompAfterProtocol, $elm$url$Url$Http, A2($elm$core$String$dropLeft, 7, str)) : A2($elm$core$String$startsWith, "https://", str) ? A2($elm$url$Url$chompAfterProtocol, $elm$url$Url$Https, A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing;
    };
    var $elm$core$Basics$never = function(_v0) {
        never: while(true){
            var nvr = _v0.a;
            var $temp$_v0 = nvr;
            _v0 = $temp$_v0;
            continue never;
        }
    };
    var $elm$browser$Browser$application = _Browser_application;
    var $author$project$Main$BlankPage = function(a) {
        return {
            $: "BlankPage",
            a: a
        };
    };
    var $author$project$Pages$Blank$Blank = function(a) {
        return {
            $: "Blank",
            a: a
        };
    };
    var $author$project$Pages$Blank$Loading = {
        $: "Loading"
    };
    var $author$project$Pages$Blank$initialModel = {
        root: $author$project$Pages$Blank$Blank({
            name: "Loading..."
        }),
        status: $author$project$Pages$Blank$Loading,
        title: "Blank"
    };
    var $elm$time$Time$Posix = function(a) {
        return {
            $: "Posix",
            a: a
        };
    };
    var $elm$time$Time$millisToPosix = $elm$time$Time$Posix;
    var $author$project$Main$HardwarePage = function(a) {
        return {
            $: "HardwarePage",
            a: a
        };
    };
    var $elm$core$List$filter = F2(function(isGood, list) {
        return A3($elm$core$List$foldr, F2(function(x, xs) {
            return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
        }), _List_Nil, list);
    });
    var $RomanErnst$erl$Erl$getQueryValuesForKey = F2(function(key, url) {
        return A2($elm$core$List$map, $elm$core$Tuple$second, A2($elm$core$List$filter, function(_v0) {
            var k = _v0.a;
            return _Utils_eq(k, key);
        }, url.query));
    });
    var $elm$core$List$head = function(list) {
        if (list.b) {
            var x = list.a;
            var xs = list.b;
            return $elm$core$Maybe$Just(x);
        } else return $elm$core$Maybe$Nothing;
    };
    var $RomanErnst$erl$Erl$extractProtocol = function(str) {
        var parts = A2($elm$core$String$split, "://", str);
        var _v0 = $elm$core$List$length(parts);
        if (_v0 === 1) return "";
        else return A2($elm$core$Maybe$withDefault, "", $elm$core$List$head(parts));
    };
    var $elm$regex$Regex$Match = F4(function(match, index, number, submatches) {
        return {
            index: index,
            match: match,
            number: number,
            submatches: submatches
        };
    });
    var $elm$regex$Regex$findAtMost = _Regex_findAtMost;
    var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
    var $elm$regex$Regex$fromString = function(string) {
        return A2($elm$regex$Regex$fromStringWith, {
            caseInsensitive: false,
            multiline: false
        }, string);
    };
    var $elm$core$Maybe$map = F2(function(f, maybe) {
        if (maybe.$ === "Just") {
            var value = maybe.a;
            return $elm$core$Maybe$Just(f(value));
        } else return $elm$core$Maybe$Nothing;
    });
    var $RomanErnst$erl$Erl$extractPort = function(str) {
        var res = A2($elm$core$Maybe$withDefault, _List_Nil, A2($elm$core$Maybe$map, function(rx) {
            return A3($elm$regex$Regex$findAtMost, 1, rx, str);
        }, $elm$regex$Regex$fromString(":\\d+")));
        return function(result) {
            if (result.$ === "Just") {
                var port_ = result.a;
                return port_;
            } else {
                var _v1 = $RomanErnst$erl$Erl$extractProtocol(str);
                switch(_v1){
                    case "http":
                        return 80;
                    case "https":
                        return 443;
                    case "ftp":
                        return 21;
                    case "sftp":
                        return 22;
                    default:
                        return 0;
                }
            }
        }($elm$core$String$toInt(A2($elm$core$String$dropLeft, 1, A2($elm$core$Maybe$withDefault, "", $elm$core$List$head(A2($elm$core$List$map, function($) {
            return $.match;
        }, res))))));
    };
    var $elm$regex$Regex$contains = _Regex_contains;
    var $RomanErnst$erl$Erl$leftFromOrSame = F2(function(delimiter, str) {
        var parts = A2($elm$core$String$split, delimiter, str);
        return A2($elm$core$Maybe$withDefault, "", $elm$core$List$head(parts));
    });
    var $RomanErnst$erl$Erl$rightFromOrSame = F2(function(delimiter, str) {
        var parts = A2($elm$core$String$split, delimiter, str);
        return A2($elm$core$Maybe$withDefault, "", $elm$core$List$head($elm$core$List$reverse(parts)));
    });
    var $RomanErnst$erl$Erl$extractHost = function(str) {
        if (A2($elm$core$String$contains, "//", str)) return A2($RomanErnst$erl$Erl$leftFromOrSame, ":", A2($RomanErnst$erl$Erl$leftFromOrSame, "/", A2($RomanErnst$erl$Erl$rightFromOrSame, "//", str)));
        else {
            var matches = function(s) {
                return A2($elm$core$Maybe$withDefault, _List_Nil, A2($elm$core$Maybe$map, function(rx) {
                    return A3($elm$regex$Regex$findAtMost, 1, rx, s);
                }, $elm$regex$Regex$fromString("((\\w|-)+\\.)+(\\w|-)+")));
            };
            return A2($elm$core$Maybe$withDefault, "", A2($elm$core$Maybe$map, function($) {
                return $.match;
            }, $elm$core$List$head(matches(A2($RomanErnst$erl$Erl$leftFromOrSame, "/", A2($RomanErnst$erl$Erl$rightFromOrSame, "//", str))))));
        }
    };
    var $elm$regex$Regex$replaceAtMost = _Regex_replaceAtMost;
    var $RomanErnst$erl$Erl$extractPath = function(str) {
        var replace = F2(function(maybeRegex, s) {
            return A2($elm$core$Maybe$withDefault, s, A2($elm$core$Maybe$map, function(rx) {
                return A4($elm$regex$Regex$replaceAtMost, 1, rx, function(_v0) {
                    return "";
                }, s);
            }, maybeRegex));
        });
        var host_ = $RomanErnst$erl$Erl$extractHost(str);
        return A2(replace, $elm$regex$Regex$fromString(":\\d+"), A2(replace, $elm$regex$Regex$fromString(host_), A2($RomanErnst$erl$Erl$leftFromOrSame, "#", A2($RomanErnst$erl$Erl$leftFromOrSame, "?", A2($RomanErnst$erl$Erl$rightFromOrSame, "//", str)))));
    };
    var $RomanErnst$erl$Erl$hasLeadingSlashFromAll = function(str) {
        return A2($elm$core$Maybe$withDefault, false, A2($elm$core$Maybe$map, function(rx) {
            return A2($elm$regex$Regex$contains, rx, $RomanErnst$erl$Erl$extractPath(str));
        }, $elm$regex$Regex$fromString("^/")));
    };
    var $RomanErnst$erl$Erl$hasTrailingSlashFromAll = function(str) {
        return A2($elm$core$Maybe$withDefault, false, A2($elm$core$Maybe$map, function(rx) {
            return A2($elm$regex$Regex$contains, rx, $RomanErnst$erl$Erl$extractPath(str));
        }, $elm$regex$Regex$fromString("/$")));
    };
    var $RomanErnst$erl$Erl$extractHash = function(str) {
        return A2($elm$core$Maybe$withDefault, "", $elm$core$List$head(A2($elm$core$List$drop, 1, A2($elm$core$String$split, "#", str))));
    };
    var $RomanErnst$erl$Erl$hashFromAll = function(str) {
        return $RomanErnst$erl$Erl$extractHash(str);
    };
    var $RomanErnst$erl$Erl$parseHost = function(str) {
        return A2($elm$core$String$split, ".", str);
    };
    var $RomanErnst$erl$Erl$host = function(str) {
        return $RomanErnst$erl$Erl$parseHost($RomanErnst$erl$Erl$extractHost(str));
    };
    var $RomanErnst$erl$Erl$notEmpty = function(str) {
        return !$elm$core$String$isEmpty(str);
    };
    var $elm$url$Url$percentDecode = _Url_percentDecode;
    var $RomanErnst$erl$Erl$parsePath = function(str) {
        return A2($elm$core$List$map, $elm$core$Maybe$withDefault(""), A2($elm$core$List$map, $elm$url$Url$percentDecode, A2($elm$core$List$filter, $RomanErnst$erl$Erl$notEmpty, A2($elm$core$String$split, "/", str))));
    };
    var $RomanErnst$erl$Erl$pathFromAll = function(str) {
        return $RomanErnst$erl$Erl$parsePath($RomanErnst$erl$Erl$extractPath(str));
    };
    var $RomanErnst$erl$Erl$extractQuery = function(str) {
        return A2($elm$core$Maybe$withDefault, "", $elm$core$List$head(A2($elm$core$String$split, "#", A2($elm$core$Maybe$withDefault, "", $elm$core$List$head(A2($elm$core$List$drop, 1, A2($elm$core$String$split, "?", str)))))));
    };
    var $RomanErnst$erl$Erl$queryStringElementToTuple = function(element) {
        var splitted = A2($elm$core$String$split, "=", element);
        var second = A2($elm$core$Maybe$withDefault, "", $elm$core$List$head(A2($elm$core$List$drop, 1, splitted)));
        var secondDecoded = A2($elm$core$Maybe$withDefault, "", $elm$url$Url$percentDecode(second));
        var first = A2($elm$core$Maybe$withDefault, "", $elm$core$List$head(splitted));
        var firstDecoded = A2($elm$core$Maybe$withDefault, "", $elm$url$Url$percentDecode(first));
        return _Utils_Tuple2(firstDecoded, secondDecoded);
    };
    var $RomanErnst$erl$Erl$parseQuery = function(queryString) {
        var splitted = A2($elm$core$String$split, "&", queryString);
        return $elm$core$String$isEmpty(queryString) ? _List_Nil : A2($elm$core$List$map, $RomanErnst$erl$Erl$queryStringElementToTuple, splitted);
    };
    var $RomanErnst$erl$Erl$queryFromAll = function(all) {
        return $RomanErnst$erl$Erl$parseQuery($RomanErnst$erl$Erl$extractQuery(all));
    };
    var $RomanErnst$erl$Erl$parse = function(str) {
        return {
            hasLeadingSlash: $RomanErnst$erl$Erl$hasLeadingSlashFromAll(str),
            hasTrailingSlash: $RomanErnst$erl$Erl$hasTrailingSlashFromAll(str),
            hash: $RomanErnst$erl$Erl$hashFromAll(str),
            host: $RomanErnst$erl$Erl$host(str),
            password: "",
            path: $RomanErnst$erl$Erl$pathFromAll(str),
            port_: $RomanErnst$erl$Erl$extractPort(str),
            protocol: $RomanErnst$erl$Erl$extractProtocol(str),
            query: $RomanErnst$erl$Erl$queryFromAll(str),
            username: ""
        };
    };
    var $elm$url$Url$addPort = F2(function(maybePort, starter) {
        if (maybePort.$ === "Nothing") return starter;
        else {
            var port_ = maybePort.a;
            return starter + (":" + $elm$core$String$fromInt(port_));
        }
    });
    var $elm$url$Url$addPrefixed = F3(function(prefix, maybeSegment, starter) {
        if (maybeSegment.$ === "Nothing") return starter;
        else {
            var segment = maybeSegment.a;
            return _Utils_ap(starter, _Utils_ap(prefix, segment));
        }
    });
    var $elm$url$Url$toString = function(url) {
        var http = function() {
            var _v0 = url.protocol;
            if (_v0.$ === "Http") return "http://";
            else return "https://";
        }();
        return A3($elm$url$Url$addPrefixed, "#", url.fragment, A3($elm$url$Url$addPrefixed, "?", url.query, _Utils_ap(A2($elm$url$Url$addPort, url.port_, _Utils_ap(http, url.host)), url.path)));
    };
    var $author$project$Main$gotCodeFromUrl = function(url) {
        return $elm$core$Maybe$Just(A2($elm$core$String$join, "", A2($RomanErnst$erl$Erl$getQueryValuesForKey, "code", $RomanErnst$erl$Erl$parse($elm$url$Url$toString(url)))));
    };
    var $author$project$Pages$Blank$init = function(_v0) {
        return _Utils_Tuple2(_Utils_update($author$project$Pages$Blank$initialModel, {
            title: "Haveno-Web Main"
        }), $elm$core$Platform$Cmd$none);
    };
    var $author$project$Pages$Buy$Buy = function(a) {
        return {
            $: "Buy",
            a: a
        };
    };
    var $author$project$Pages$Buy$Loading = {
        $: "Loading"
    };
    var $author$project$Pages$Buy$initialModel = {
        root: $author$project$Pages$Buy$Buy({
            name: "Loading..."
        }),
        status: $author$project$Pages$Buy$Loading,
        title: "Buy"
    };
    var $author$project$Pages$Buy$init = function(_v0) {
        return _Utils_Tuple2(_Utils_update($author$project$Pages$Buy$initialModel, {
            title: "Haveno-Web Buy"
        }), $elm$core$Platform$Cmd$none);
    };
    var $author$project$Pages$Dashboard$Dashboard = function(a) {
        return {
            $: "Dashboard",
            a: a
        };
    };
    var $author$project$Pages$Dashboard$Loaded = {
        $: "Loaded"
    };
    var $author$project$Pages$Dashboard$Model = F8(function(status, pagetitle, root, balance, flagUrl, havenoAPKHttpRequest, version, errors) {
        return {
            balance: balance,
            errors: errors,
            flagUrl: flagUrl,
            havenoAPKHttpRequest: havenoAPKHttpRequest,
            pagetitle: pagetitle,
            root: root,
            status: status,
            version: version
        };
    });
    var $author$project$Pages$Dashboard$init = function(fromMainToDashboard) {
        var newUrl = A6($elm$url$Url$Url, $elm$url$Url$Http, "localhost", $elm$core$Maybe$Nothing, "/dashboard", $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing);
        var newModel = A8($author$project$Pages$Dashboard$Model, $author$project$Pages$Dashboard$Loaded, "Dashboard", $author$project$Pages$Dashboard$Dashboard({
            name: "Loading..."
        }), "0.00", newUrl, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, _List_Nil);
        return _Utils_Tuple2(newModel, $elm$core$Platform$Cmd$none);
    };
    var $author$project$Pages$Funds$Funds = function(a) {
        return {
            $: "Funds",
            a: a
        };
    };
    var $author$project$Pages$Funds$Loading = {
        $: "Loading"
    };
    var $author$project$Pages$Funds$initialModel = {
        root: $author$project$Pages$Funds$Funds({
            name: "Loading..."
        }),
        status: $author$project$Pages$Funds$Loading,
        title: "Funds"
    };
    var $author$project$Pages$Funds$init = function(_v0) {
        return _Utils_Tuple2(_Utils_update($author$project$Pages$Funds$initialModel, {
            title: "Haveno-Web Funds"
        }), $elm$core$Platform$Cmd$none);
    };
    var $author$project$Pages$Hardware$Hardware = function(a) {
        return {
            $: "Hardware",
            a: a
        };
    };
    var $author$project$Pages$Hardware$Loaded = {
        $: "Loaded"
    };
    var $author$project$Pages$Hardware$LoggedInUser = {
        $: "LoggedInUser"
    };
    var $author$project$Pages$Hardware$Model = function(status) {
        return function(title) {
            return function(root) {
                return function(flagUrl) {
                    return function(datetimeFromMain) {
                        return function(apiSpecifics) {
                            return function(queryType) {
                                return function(isValidNewAccessToken) {
                                    return function(isHardwareLNSConnected) {
                                        return function(isHardwareLNXConnected) {
                                            return function(isXMRWalletConnected) {
                                                return function(xmrWalletAddress) {
                                                    return function(errors) {
                                                        return function(isReturnUser) {
                                                            return function(user) {
                                                                return function(objectJSONfromJSPort) {
                                                                    return {
                                                                        apiSpecifics: apiSpecifics,
                                                                        datetimeFromMain: datetimeFromMain,
                                                                        errors: errors,
                                                                        flagUrl: flagUrl,
                                                                        isHardwareLNSConnected: isHardwareLNSConnected,
                                                                        isHardwareLNXConnected: isHardwareLNXConnected,
                                                                        isReturnUser: isReturnUser,
                                                                        isValidNewAccessToken: isValidNewAccessToken,
                                                                        isXMRWalletConnected: isXMRWalletConnected,
                                                                        objectJSONfromJSPort: objectJSONfromJSPort,
                                                                        queryType: queryType,
                                                                        root: root,
                                                                        status: status,
                                                                        title: title,
                                                                        user: user,
                                                                        xmrWalletAddress: xmrWalletAddress
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var $author$project$Pages$Hardware$ApiSpecifics = F2(function(maxResults, accessToken) {
        return {
            accessToken: accessToken,
            maxResults: maxResults
        };
    });
    var $author$project$Pages$Hardware$apiSpecsPlaceHolder = A2($author$project$Pages$Hardware$ApiSpecifics, "", $elm$core$Maybe$Nothing);
    var $author$project$Data$User$Spectator = function(a) {
        return {
            $: "Spectator",
            a: a
        };
    };
    var $author$project$Data$User$Male = {
        $: "Male"
    };
    var $author$project$Data$User$UserInfo = function(userid) {
        return function(password) {
            return function(passwordValidationError) {
                return function(token) {
                    return function(nickname) {
                        return function(isNameInputFocused) {
                            return function(nameValidationError) {
                                return function(age) {
                                    return function(gender) {
                                        return function(email) {
                                            return function(isEmailInputFocused) {
                                                return function(emailValidationError) {
                                                    return function(mobile) {
                                                        return function(isMobileInputFocused) {
                                                            return function(mobileValidationError) {
                                                                return function(datestamp) {
                                                                    return function(active) {
                                                                        return function(ownedRankings) {
                                                                            return function(memberRankings) {
                                                                                return function(updatetext) {
                                                                                    return function(description) {
                                                                                        return function(credits) {
                                                                                            return function(addInfo) {
                                                                                                return {
                                                                                                    active: active,
                                                                                                    addInfo: addInfo,
                                                                                                    age: age,
                                                                                                    credits: credits,
                                                                                                    datestamp: datestamp,
                                                                                                    description: description,
                                                                                                    email: email,
                                                                                                    emailValidationError: emailValidationError,
                                                                                                    gender: gender,
                                                                                                    isEmailInputFocused: isEmailInputFocused,
                                                                                                    isMobileInputFocused: isMobileInputFocused,
                                                                                                    isNameInputFocused: isNameInputFocused,
                                                                                                    memberRankings: memberRankings,
                                                                                                    mobile: mobile,
                                                                                                    mobileValidationError: mobileValidationError,
                                                                                                    nameValidationError: nameValidationError,
                                                                                                    nickname: nickname,
                                                                                                    ownedRankings: ownedRankings,
                                                                                                    password: password,
                                                                                                    passwordValidationError: passwordValidationError,
                                                                                                    token: token,
                                                                                                    updatetext: updatetext,
                                                                                                    userid: userid
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var $author$project$Data$User$emptyDescription = {
        comment: "",
        level: ""
    };
    var $author$project$Data$User$emptyUserInfo = $author$project$Data$User$UserInfo("")("")("")($elm$core$Maybe$Nothing)("")(false)("")(40)($author$project$Data$User$Male)($elm$core$Maybe$Nothing)(false)("")($elm$core$Maybe$Nothing)(false)("")(0)(false)(_List_Nil)(_List_Nil)("")($author$project$Data$User$emptyDescription)(0)("");
    var $author$project$Data$User$emptySpectator = $author$project$Data$User$Spectator($author$project$Data$User$emptyUserInfo);
    var $author$project$Extras$Constants$localorproductionServerAutoCheck = "haveno-web.squashpassion";
    var $author$project$Extras$Constants$middleWarePath = "/middleware";
    var $author$project$Extras$Constants$productionProxyConfig = "/proxy/";
    var $author$project$Pages$Hardware$init = function(fromMainToHardware) {
        var updatedFlagUrlToIncludeMongoDBMWSvr = A2($elm$core$String$contains, $author$project$Extras$Constants$localorproductionServerAutoCheck, fromMainToHardware.flagUrl.host) ? A6($elm$url$Url$Url, fromMainToHardware.flagUrl.protocol, fromMainToHardware.flagUrl.host, $elm$core$Maybe$Nothing, $author$project$Extras$Constants$productionProxyConfig, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing) : A6($elm$url$Url$Url, fromMainToHardware.flagUrl.protocol, fromMainToHardware.flagUrl.host, $elm$core$Maybe$Just(3000), $author$project$Extras$Constants$middleWarePath, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing);
        var newUrl = A6($elm$url$Url$Url, $elm$url$Url$Http, "localhost", $elm$core$Maybe$Just(1234), "/hardware", $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing);
        return _Utils_Tuple2($author$project$Pages$Hardware$Model($author$project$Pages$Hardware$Loaded)("Hardware")($author$project$Pages$Hardware$Hardware({
            name: "Loading..."
        }))(newUrl)(A2($elm$core$Maybe$withDefault, $elm$core$Maybe$Nothing, $elm$core$Maybe$Just(fromMainToHardware.time)))($author$project$Pages$Hardware$apiSpecsPlaceHolder)($author$project$Pages$Hardware$LoggedInUser)(false)(false)(false)(false)("")(_List_Nil)(false)($author$project$Data$User$emptySpectator)($elm$core$Maybe$Nothing), $elm$core$Platform$Cmd$none);
    };
    var $author$project$Pages$Market$Loading = {
        $: "Loading"
    };
    var $author$project$Pages$Market$Market = function(a) {
        return {
            $: "Market",
            a: a
        };
    };
    var $author$project$Pages$Market$initialModel = {
        root: $author$project$Pages$Market$Market({
            name: "Loading..."
        }),
        status: $author$project$Pages$Market$Loading,
        title: "Market"
    };
    var $author$project$Pages$Market$init = function(_v0) {
        return _Utils_Tuple2(_Utils_update($author$project$Pages$Market$initialModel, {
            title: "Haveno-Web Market"
        }), $elm$core$Platform$Cmd$none);
    };
    var $author$project$Pages$Portfolio$Loading = {
        $: "Loading"
    };
    var $author$project$Pages$Portfolio$Portfolio = function(a) {
        return {
            $: "Portfolio",
            a: a
        };
    };
    var $author$project$Pages$Portfolio$initialModel = {
        root: $author$project$Pages$Portfolio$Portfolio({
            name: "Loading..."
        }),
        status: $author$project$Pages$Portfolio$Loading,
        title: "Portfolio"
    };
    var $author$project$Pages$Portfolio$init = function(_v0) {
        return _Utils_Tuple2(_Utils_update($author$project$Pages$Portfolio$initialModel, {
            title: "Haveno-Web Portfolio"
        }), $elm$core$Platform$Cmd$none);
    };
    var $author$project$Pages$Sell$Loading = {
        $: "Loading"
    };
    var $author$project$Pages$Sell$Sell = function(a) {
        return {
            $: "Sell",
            a: a
        };
    };
    var $author$project$Pages$Sell$initialModel = {
        root: $author$project$Pages$Sell$Sell({
            name: "Loading..."
        }),
        status: $author$project$Pages$Sell$Loading,
        title: "Sell"
    };
    var $author$project$Pages$Sell$init = function(_v0) {
        return _Utils_Tuple2(_Utils_update($author$project$Pages$Sell$initialModel, {
            title: "Haveno-Web Sell"
        }), $elm$core$Platform$Cmd$none);
    };
    var $author$project$Pages$Support$Loading = {
        $: "Loading"
    };
    var $author$project$Pages$Support$Support = function(a) {
        return {
            $: "Support",
            a: a
        };
    };
    var $author$project$Pages$Support$initialModel = {
        root: $author$project$Pages$Support$Support({
            name: "Loading..."
        }),
        status: $author$project$Pages$Support$Loading,
        title: "Support"
    };
    var $author$project$Pages$Support$init = function(_v0) {
        return _Utils_Tuple2(_Utils_update($author$project$Pages$Support$initialModel, {
            title: "Haveno-Web Support"
        }), $elm$core$Platform$Cmd$none);
    };
    var $author$project$Pages$Hardware$initialModel = {
        apiSpecifics: {
            accessToken: $elm$core$Maybe$Nothing,
            maxResults: ""
        },
        datetimeFromMain: $elm$core$Maybe$Nothing,
        errors: _List_Nil,
        flagUrl: A6($elm$url$Url$Url, $elm$url$Url$Http, "localhost", $elm$core$Maybe$Just(1234), "/hardware", $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing),
        isHardwareLNSConnected: false,
        isHardwareLNXConnected: false,
        isReturnUser: false,
        isValidNewAccessToken: false,
        isXMRWalletConnected: false,
        objectJSONfromJSPort: $elm$core$Maybe$Nothing,
        queryType: $author$project$Pages$Hardware$LoggedInUser,
        root: $author$project$Pages$Hardware$Hardware({
            name: "Loading..."
        }),
        status: $author$project$Pages$Hardware$Loaded,
        title: "Hardware",
        user: $author$project$Data$User$emptySpectator,
        xmrWalletAddress: ""
    };
    var $elm$url$Url$Parser$State = F5(function(visited, unvisited, params, frag, value) {
        return {
            frag: frag,
            params: params,
            unvisited: unvisited,
            value: value,
            visited: visited
        };
    });
    var $elm$url$Url$Parser$getFirstMatch = function(states) {
        getFirstMatch: while(true){
            if (!states.b) return $elm$core$Maybe$Nothing;
            else {
                var state = states.a;
                var rest = states.b;
                var _v1 = state.unvisited;
                if (!_v1.b) return $elm$core$Maybe$Just(state.value);
                else {
                    if (_v1.a === "" && !_v1.b.b) return $elm$core$Maybe$Just(state.value);
                    else {
                        var $temp$states = rest;
                        states = $temp$states;
                        continue getFirstMatch;
                    }
                }
            }
        }
    };
    var $elm$url$Url$Parser$removeFinalEmpty = function(segments) {
        if (!segments.b) return _List_Nil;
        else {
            if (segments.a === "" && !segments.b.b) return _List_Nil;
            else {
                var segment = segments.a;
                var rest = segments.b;
                return A2($elm$core$List$cons, segment, $elm$url$Url$Parser$removeFinalEmpty(rest));
            }
        }
    };
    var $elm$url$Url$Parser$preparePath = function(path) {
        var _v0 = A2($elm$core$String$split, "/", path);
        if (_v0.b && _v0.a === "") {
            var segments = _v0.b;
            return $elm$url$Url$Parser$removeFinalEmpty(segments);
        } else {
            var segments = _v0;
            return $elm$url$Url$Parser$removeFinalEmpty(segments);
        }
    };
    var $elm$url$Url$Parser$addToParametersHelp = F2(function(value, maybeList) {
        if (maybeList.$ === "Nothing") return $elm$core$Maybe$Just(_List_fromArray([
            value
        ]));
        else {
            var list = maybeList.a;
            return $elm$core$Maybe$Just(A2($elm$core$List$cons, value, list));
        }
    });
    var $elm$url$Url$Parser$addParam = F2(function(segment, dict) {
        var _v0 = A2($elm$core$String$split, "=", segment);
        if (_v0.b && _v0.b.b && !_v0.b.b.b) {
            var rawKey = _v0.a;
            var _v1 = _v0.b;
            var rawValue = _v1.a;
            var _v2 = $elm$url$Url$percentDecode(rawKey);
            if (_v2.$ === "Nothing") return dict;
            else {
                var key = _v2.a;
                var _v3 = $elm$url$Url$percentDecode(rawValue);
                if (_v3.$ === "Nothing") return dict;
                else {
                    var value = _v3.a;
                    return A3($elm$core$Dict$update, key, $elm$url$Url$Parser$addToParametersHelp(value), dict);
                }
            }
        } else return dict;
    });
    var $elm$url$Url$Parser$prepareQuery = function(maybeQuery) {
        if (maybeQuery.$ === "Nothing") return $elm$core$Dict$empty;
        else {
            var qry = maybeQuery.a;
            return A3($elm$core$List$foldr, $elm$url$Url$Parser$addParam, $elm$core$Dict$empty, A2($elm$core$String$split, "&", qry));
        }
    };
    var $elm$url$Url$Parser$parse = F2(function(_v0, url) {
        var parser = _v0.a;
        return $elm$url$Url$Parser$getFirstMatch(parser(A5($elm$url$Url$Parser$State, _List_Nil, $elm$url$Url$Parser$preparePath(url.path), $elm$url$Url$Parser$prepareQuery(url.query), url.fragment, $elm$core$Basics$identity)));
    });
    var $author$project$Main$GotBlankMsg = function(a) {
        return {
            $: "GotBlankMsg",
            a: a
        };
    };
    var $author$project$Main$toBlank = F2(function(model, _v0) {
        var blank = _v0.a;
        var cmd = _v0.b;
        return _Utils_Tuple2(_Utils_update(model, {
            page: $author$project$Main$BlankPage(blank)
        }), A2($elm$core$Platform$Cmd$map, $author$project$Main$GotBlankMsg, cmd));
    });
    var $author$project$Main$AdjustTimeZone = function(a) {
        return {
            $: "AdjustTimeZone",
            a: a
        };
    };
    var $author$project$Main$DashboardPage = function(a) {
        return {
            $: "DashboardPage",
            a: a
        };
    };
    var $author$project$Main$GotDashboardMsg = function(a) {
        return {
            $: "GotDashboardMsg",
            a: a
        };
    };
    var $elm$time$Time$Name = function(a) {
        return {
            $: "Name",
            a: a
        };
    };
    var $elm$time$Time$Offset = function(a) {
        return {
            $: "Offset",
            a: a
        };
    };
    var $elm$time$Time$Zone = F2(function(a, b) {
        return {
            $: "Zone",
            a: a,
            b: b
        };
    });
    var $elm$time$Time$customZone = $elm$time$Time$Zone;
    var $elm$time$Time$here = _Time_here(_Utils_Tuple0);
    var $author$project$Main$toDashboard = F2(function(model, _v0) {
        var dashboard = _v0.a;
        var cmd = _v0.b;
        return _Utils_Tuple2(_Utils_update(model, {
            page: $author$project$Main$DashboardPage(dashboard)
        }), $elm$core$Platform$Cmd$batch(_List_fromArray([
            A2($elm$core$Platform$Cmd$map, $author$project$Main$GotDashboardMsg, cmd),
            A2($elm$core$Task$perform, $author$project$Main$AdjustTimeZone, $elm$time$Time$here)
        ])));
    });
    var $author$project$Main$FundsPage = function(a) {
        return {
            $: "FundsPage",
            a: a
        };
    };
    var $author$project$Main$GotFundsMsg = function(a) {
        return {
            $: "GotFundsMsg",
            a: a
        };
    };
    var $author$project$Main$toFunds = F2(function(model, _v0) {
        var funds = _v0.a;
        var cmd = _v0.b;
        return _Utils_Tuple2(_Utils_update(model, {
            page: $author$project$Main$FundsPage(funds)
        }), A2($elm$core$Platform$Cmd$map, $author$project$Main$GotFundsMsg, cmd));
    });
    var $author$project$Main$GotHardwareMsg = function(a) {
        return {
            $: "GotHardwareMsg",
            a: a
        };
    };
    var $author$project$Main$GotVersion = function(a) {
        return {
            $: "GotVersion",
            a: a
        };
    };
    var $anmolitor$elm_grpc$Grpc$InternalRpcRequest = function(a) {
        return {
            $: "InternalRpcRequest",
            a: a
        };
    };
    var $elm$http$Http$Header = F2(function(a, b) {
        return {
            $: "Header",
            a: a,
            b: b
        };
    });
    var $elm$http$Http$header = $elm$http$Http$Header;
    var $anmolitor$elm_grpc$Grpc$addHeader = F3(function(key, value, _v0) {
        var req = _v0.a;
        return $anmolitor$elm_grpc$Grpc$InternalRpcRequest(_Utils_update(req, {
            headers: A2($elm$core$List$cons, A2($elm$http$Http$header, key, value), req.headers)
        }));
    });
    var $anmolitor$elm_grpc$Grpc$Internal$Rpc = function(a) {
        return {
            $: "Rpc",
            a: a
        };
    };
    var $author$project$Proto$Io$Haveno$Protobuffer$Internals_$defaultProto__Io__Haveno__Protobuffer__GetVersionReply = {
        version: ""
    };
    var $eriktim$elm_protocol_buffers$Protobuf$Decode$Decoder = function(a) {
        return {
            $: "Decoder",
            a: a
        };
    };
    var $elm$bytes$Bytes$Encode$getWidth = function(builder) {
        switch(builder.$){
            case "I8":
                return 1;
            case "I16":
                return 2;
            case "I32":
                return 4;
            case "U8":
                return 1;
            case "U16":
                return 2;
            case "U32":
                return 4;
            case "F32":
                return 4;
            case "F64":
                return 8;
            case "Seq":
                var w = builder.a;
                return w;
            case "Utf8":
                var w = builder.a;
                return w;
            default:
                var bs = builder.a;
                return _Bytes_width(bs);
        }
    };
    var $elm$bytes$Bytes$LE = {
        $: "LE"
    };
    var $elm$bytes$Bytes$Encode$write = F3(function(builder, mb, offset) {
        switch(builder.$){
            case "I8":
                var n = builder.a;
                return A3(_Bytes_write_i8, mb, offset, n);
            case "I16":
                var e = builder.a;
                var n = builder.b;
                return A4(_Bytes_write_i16, mb, offset, n, _Utils_eq(e, $elm$bytes$Bytes$LE));
            case "I32":
                var e = builder.a;
                var n = builder.b;
                return A4(_Bytes_write_i32, mb, offset, n, _Utils_eq(e, $elm$bytes$Bytes$LE));
            case "U8":
                var n = builder.a;
                return A3(_Bytes_write_u8, mb, offset, n);
            case "U16":
                var e = builder.a;
                var n = builder.b;
                return A4(_Bytes_write_u16, mb, offset, n, _Utils_eq(e, $elm$bytes$Bytes$LE));
            case "U32":
                var e = builder.a;
                var n = builder.b;
                return A4(_Bytes_write_u32, mb, offset, n, _Utils_eq(e, $elm$bytes$Bytes$LE));
            case "F32":
                var e = builder.a;
                var n = builder.b;
                return A4(_Bytes_write_f32, mb, offset, n, _Utils_eq(e, $elm$bytes$Bytes$LE));
            case "F64":
                var e = builder.a;
                var n = builder.b;
                return A4(_Bytes_write_f64, mb, offset, n, _Utils_eq(e, $elm$bytes$Bytes$LE));
            case "Seq":
                var bs = builder.b;
                return A3($elm$bytes$Bytes$Encode$writeSequence, bs, mb, offset);
            case "Utf8":
                var s = builder.b;
                return A3(_Bytes_write_string, mb, offset, s);
            default:
                var bs = builder.a;
                return A3(_Bytes_write_bytes, mb, offset, bs);
        }
    });
    var $elm$bytes$Bytes$Encode$writeSequence = F3(function(builders, mb, offset) {
        writeSequence: while(true){
            if (!builders.b) return offset;
            else {
                var b = builders.a;
                var bs = builders.b;
                var $temp$builders = bs, $temp$mb = mb, $temp$offset = A3($elm$bytes$Bytes$Encode$write, b, mb, offset);
                builders = $temp$builders;
                mb = $temp$mb;
                offset = $temp$offset;
                continue writeSequence;
            }
        }
    });
    var $elm$bytes$Bytes$Decode$Decoder = function(a) {
        return {
            $: "Decoder",
            a: a
        };
    };
    var $elm$bytes$Bytes$Decode$fail = $elm$bytes$Bytes$Decode$Decoder(_Bytes_decodeFailure);
    var $elm$core$Set$Set_elm_builtin = function(a) {
        return {
            $: "Set_elm_builtin",
            a: a
        };
    };
    var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
    var $elm$core$Set$insert = F2(function(key, _v0) {
        var dict = _v0.a;
        return $elm$core$Set$Set_elm_builtin(A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
    });
    var $elm$core$Set$fromList = function(list) {
        return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
    };
    var $elm$bytes$Bytes$Decode$loopHelp = F4(function(state, callback, bites, offset) {
        loopHelp: while(true){
            var _v0 = callback(state);
            var decoder = _v0.a;
            var _v1 = A2(decoder, bites, offset);
            var newOffset = _v1.a;
            var step = _v1.b;
            if (step.$ === "Loop") {
                var newState = step.a;
                var $temp$state = newState, $temp$callback = callback, $temp$bites = bites, $temp$offset = newOffset;
                state = $temp$state;
                callback = $temp$callback;
                bites = $temp$bites;
                offset = $temp$offset;
                continue loopHelp;
            } else {
                var result = step.a;
                return _Utils_Tuple2(newOffset, result);
            }
        }
    });
    var $elm$bytes$Bytes$Decode$loop = F2(function(state, callback) {
        return $elm$bytes$Bytes$Decode$Decoder(A2($elm$bytes$Bytes$Decode$loopHelp, state, callback));
    });
    var $elm$core$Tuple$mapFirst = F2(function(func, _v0) {
        var x = _v0.a;
        var y = _v0.b;
        return _Utils_Tuple2(func(x), y);
    });
    var $elm$core$Tuple$mapSecond = F2(function(func, _v0) {
        var x = _v0.a;
        var y = _v0.b;
        return _Utils_Tuple2(x, func(y));
    });
    var $elm$bytes$Bytes$Decode$Done = function(a) {
        return {
            $: "Done",
            a: a
        };
    };
    var $elm$bytes$Bytes$Decode$Loop = function(a) {
        return {
            $: "Loop",
            a: a
        };
    };
    var $elm$bytes$Bytes$Decode$andThen = F2(function(callback, _v0) {
        var decodeA = _v0.a;
        return $elm$bytes$Bytes$Decode$Decoder(F2(function(bites, offset) {
            var _v1 = A2(decodeA, bites, offset);
            var newOffset = _v1.a;
            var a = _v1.b;
            var _v2 = callback(a);
            var decodeB = _v2.a;
            return A2(decodeB, bites, newOffset);
        }));
    });
    var $elm$core$Set$isEmpty = function(_v0) {
        var dict = _v0.a;
        return $elm$core$Dict$isEmpty(dict);
    };
    var $elm$bytes$Bytes$Decode$map = F2(function(func, _v0) {
        var decodeA = _v0.a;
        return $elm$bytes$Bytes$Decode$Decoder(F2(function(bites, offset) {
            var _v1 = A2(decodeA, bites, offset);
            var aOffset = _v1.a;
            var a = _v1.b;
            return _Utils_Tuple2(aOffset, func(a));
        }));
    });
    var $elm$core$Set$remove = F2(function(key, _v0) {
        var dict = _v0.a;
        return $elm$core$Set$Set_elm_builtin(A2($elm$core$Dict$remove, key, dict));
    });
    var $elm$bytes$Bytes$Decode$succeed = function(a) {
        return $elm$bytes$Bytes$Decode$Decoder(F2(function(_v0, offset) {
            return _Utils_Tuple2(offset, a);
        }));
    };
    var $eriktim$elm_protocol_buffers$Internal$Protobuf$Bit32 = {
        $: "Bit32"
    };
    var $eriktim$elm_protocol_buffers$Internal$Protobuf$Bit64 = {
        $: "Bit64"
    };
    var $eriktim$elm_protocol_buffers$Internal$Protobuf$EndGroup = {
        $: "EndGroup"
    };
    var $eriktim$elm_protocol_buffers$Internal$Protobuf$LengthDelimited = function(a) {
        return {
            $: "LengthDelimited",
            a: a
        };
    };
    var $eriktim$elm_protocol_buffers$Internal$Protobuf$StartGroup = {
        $: "StartGroup"
    };
    var $eriktim$elm_protocol_buffers$Internal$Protobuf$VarInt = {
        $: "VarInt"
    };
    var $elm$core$Basics$pow = _Basics_pow;
    var $eriktim$elm_protocol_buffers$Internal$Int32$fromSigned = function(value) {
        return value < 0 ? value + A2($elm$core$Basics$pow, 2, 32) : value;
    };
    var $elm$core$Bitwise$xor = _Bitwise_xor;
    var $eriktim$elm_protocol_buffers$Internal$Int32$fromZigZag = function(value) {
        return value >>> 1 ^ -1 * (1 & value);
    };
    var $eriktim$elm_protocol_buffers$Internal$Int32$popBase128 = function(value) {
        var higherBits = value >>> 7;
        var base128 = 127 & value;
        return _Utils_Tuple2(base128, higherBits);
    };
    var $eriktim$elm_protocol_buffers$Internal$Int32$pushBase128 = F2(function(base128, _int) {
        return base128 + (_int << 7);
    });
    var $eriktim$elm_protocol_buffers$Internal$Int32$toSigned = function(value) {
        return _Utils_cmp(value, A2($elm$core$Basics$pow, 2, 31)) > -1 ? value - A2($elm$core$Basics$pow, 2, 32) : value;
    };
    var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
    var $eriktim$elm_protocol_buffers$Internal$Int32$toZigZag = function(value) {
        return value >> 31 ^ value << 1;
    };
    var $eriktim$elm_protocol_buffers$Internal$Int32$operations = {
        fromBase128: $elm$core$Basics$identity,
        fromSigned: $eriktim$elm_protocol_buffers$Internal$Int32$fromSigned,
        fromZigZag: $eriktim$elm_protocol_buffers$Internal$Int32$fromZigZag,
        popBase128: $eriktim$elm_protocol_buffers$Internal$Int32$popBase128,
        pushBase128: $eriktim$elm_protocol_buffers$Internal$Int32$pushBase128,
        toSigned: $eriktim$elm_protocol_buffers$Internal$Int32$toSigned,
        toZigZag: $eriktim$elm_protocol_buffers$Internal$Int32$toZigZag
    };
    var $elm$bytes$Bytes$Decode$unsignedInt8 = $elm$bytes$Bytes$Decode$Decoder(_Bytes_read_u8);
    var $eriktim$elm_protocol_buffers$Protobuf$Decode$varIntDecoder = function(config) {
        return A2($elm$bytes$Bytes$Decode$andThen, function(octet) {
            return (128 & octet) === 128 ? A2($elm$bytes$Bytes$Decode$map, function(_v0) {
                var usedBytes = _v0.a;
                var value = _v0.b;
                return _Utils_Tuple2(usedBytes + 1, A2(config.pushBase128, 127 & octet, value));
            }, $eriktim$elm_protocol_buffers$Protobuf$Decode$varIntDecoder(config)) : $elm$bytes$Bytes$Decode$succeed(_Utils_Tuple2(1, config.fromBase128(octet)));
        }, $elm$bytes$Bytes$Decode$unsignedInt8);
    };
    var $eriktim$elm_protocol_buffers$Protobuf$Decode$tagDecoder = A2($elm$bytes$Bytes$Decode$andThen, function(_v0) {
        var usedBytes = _v0.a;
        var value = _v0.b;
        var fieldNumber = value >>> 3;
        return A2($elm$bytes$Bytes$Decode$map, function(_v1) {
            var n = _v1.a;
            var wireType = _v1.b;
            return _Utils_Tuple2(usedBytes + n, _Utils_Tuple2(fieldNumber, wireType));
        }, function() {
            var _v2 = 7 & value;
            switch(_v2){
                case 0:
                    return $elm$bytes$Bytes$Decode$succeed(_Utils_Tuple2(0, $eriktim$elm_protocol_buffers$Internal$Protobuf$VarInt));
                case 1:
                    return $elm$bytes$Bytes$Decode$succeed(_Utils_Tuple2(0, $eriktim$elm_protocol_buffers$Internal$Protobuf$Bit64));
                case 2:
                    return A2($elm$bytes$Bytes$Decode$map, $elm$core$Tuple$mapSecond($eriktim$elm_protocol_buffers$Internal$Protobuf$LengthDelimited), $eriktim$elm_protocol_buffers$Protobuf$Decode$varIntDecoder($eriktim$elm_protocol_buffers$Internal$Int32$operations));
                case 3:
                    return $elm$bytes$Bytes$Decode$succeed(_Utils_Tuple2(0, $eriktim$elm_protocol_buffers$Internal$Protobuf$StartGroup));
                case 4:
                    return $elm$bytes$Bytes$Decode$succeed(_Utils_Tuple2(0, $eriktim$elm_protocol_buffers$Internal$Protobuf$EndGroup));
                case 5:
                    return $elm$bytes$Bytes$Decode$succeed(_Utils_Tuple2(0, $eriktim$elm_protocol_buffers$Internal$Protobuf$Bit32));
                default:
                    return $elm$bytes$Bytes$Decode$fail;
            }
        }());
    }, $eriktim$elm_protocol_buffers$Protobuf$Decode$varIntDecoder($eriktim$elm_protocol_buffers$Internal$Int32$operations));
    var $elm$bytes$Bytes$Decode$bytes = function(n) {
        return $elm$bytes$Bytes$Decode$Decoder(_Bytes_read_bytes(n));
    };
    var $eriktim$elm_protocol_buffers$Protobuf$Decode$unknownFieldDecoder = function(wireType) {
        switch(wireType.$){
            case "VarInt":
                return A2($elm$bytes$Bytes$Decode$map, $elm$core$Tuple$first, $eriktim$elm_protocol_buffers$Protobuf$Decode$varIntDecoder($eriktim$elm_protocol_buffers$Internal$Int32$operations));
            case "Bit64":
                return A2($elm$bytes$Bytes$Decode$map, $elm$core$Basics$always(8), $elm$bytes$Bytes$Decode$bytes(8));
            case "LengthDelimited":
                var width = wireType.a;
                return A2($elm$bytes$Bytes$Decode$map, $elm$core$Basics$always(width), $elm$bytes$Bytes$Decode$bytes(width));
            case "StartGroup":
                return $elm$bytes$Bytes$Decode$fail;
            case "EndGroup":
                return $elm$bytes$Bytes$Decode$fail;
            default:
                return A2($elm$bytes$Bytes$Decode$map, $elm$core$Basics$always(4), $elm$bytes$Bytes$Decode$bytes(4));
        }
    };
    var $eriktim$elm_protocol_buffers$Protobuf$Decode$stepMessage = F2(function(width, state) {
        return state.width <= 0 ? $elm$core$Set$isEmpty(state.requiredFieldNumbers) ? $elm$bytes$Bytes$Decode$succeed($elm$bytes$Bytes$Decode$Done(_Utils_Tuple2(width, state.model))) : $elm$bytes$Bytes$Decode$fail : A2($elm$bytes$Bytes$Decode$andThen, function(_v0) {
            var usedBytes = _v0.a;
            var _v1 = _v0.b;
            var fieldNumber = _v1.a;
            var wireType = _v1.b;
            var _v2 = A2($elm$core$Dict$get, fieldNumber, state.dict);
            if (_v2.$ === "Just") {
                var decoder = _v2.a.a;
                return A2($elm$bytes$Bytes$Decode$map, function(_v3) {
                    var n = _v3.a;
                    var fn = _v3.b;
                    return $elm$bytes$Bytes$Decode$Loop(_Utils_update(state, {
                        model: fn(state.model),
                        requiredFieldNumbers: A2($elm$core$Set$remove, fieldNumber, state.requiredFieldNumbers),
                        width: state.width - usedBytes - n
                    }));
                }, decoder(wireType));
            } else return A2($elm$bytes$Bytes$Decode$map, function(n) {
                return $elm$bytes$Bytes$Decode$Loop(_Utils_update(state, {
                    width: state.width - usedBytes - n
                }));
            }, $eriktim$elm_protocol_buffers$Protobuf$Decode$unknownFieldDecoder(wireType));
        }, $eriktim$elm_protocol_buffers$Protobuf$Decode$tagDecoder);
    });
    var $eriktim$elm_protocol_buffers$Protobuf$Decode$message = F2(function(v, fieldDecoders) {
        var _v0 = A2($elm$core$Tuple$mapSecond, $elm$core$Dict$fromList, A2($elm$core$Tuple$mapFirst, $elm$core$Set$fromList, A3($elm$core$List$foldr, F2(function(_v1, _v2) {
            var isRequired = _v1.a;
            var items = _v1.b;
            var numbers = _v2.a;
            var decoders = _v2.b;
            var numbers_ = isRequired ? _Utils_ap(numbers, A2($elm$core$List$map, $elm$core$Tuple$first, items)) : numbers;
            return _Utils_Tuple2(numbers_, _Utils_ap(items, decoders));
        }), _Utils_Tuple2(_List_Nil, _List_Nil), fieldDecoders)));
        var requiredSet = _v0.a;
        var dict = _v0.b;
        return $eriktim$elm_protocol_buffers$Protobuf$Decode$Decoder(function(wireType) {
            if (wireType.$ === "LengthDelimited") {
                var width = wireType.a;
                return A2($elm$bytes$Bytes$Decode$loop, {
                    dict: dict,
                    model: v,
                    requiredFieldNumbers: requiredSet,
                    width: width
                }, $eriktim$elm_protocol_buffers$Protobuf$Decode$stepMessage(width));
            } else return $elm$bytes$Bytes$Decode$fail;
        });
    });
    var $eriktim$elm_protocol_buffers$Protobuf$Decode$FieldDecoder = F2(function(a, b) {
        return {
            $: "FieldDecoder",
            a: a,
            b: b
        };
    });
    var $eriktim$elm_protocol_buffers$Protobuf$Decode$map = F2(function(fn, _v0) {
        var decoder = _v0.a;
        return $eriktim$elm_protocol_buffers$Protobuf$Decode$Decoder(function(wireType) {
            return A2($elm$bytes$Bytes$Decode$map, $elm$core$Tuple$mapSecond(fn), decoder(wireType));
        });
    });
    var $eriktim$elm_protocol_buffers$Protobuf$Decode$optional = F3(function(fieldNumber, decoder, set) {
        return A2($eriktim$elm_protocol_buffers$Protobuf$Decode$FieldDecoder, false, _List_fromArray([
            _Utils_Tuple2(fieldNumber, A2($eriktim$elm_protocol_buffers$Protobuf$Decode$map, set, decoder))
        ]));
    });
    var $elm$core$Tuple$pair = F2(function(a, b) {
        return _Utils_Tuple2(a, b);
    });
    var $eriktim$elm_protocol_buffers$Protobuf$Decode$lengthDelimitedDecoder = function(decoder) {
        return $eriktim$elm_protocol_buffers$Protobuf$Decode$Decoder(function(wireType) {
            if (wireType.$ === "LengthDelimited") {
                var width = wireType.a;
                return A2($elm$bytes$Bytes$Decode$map, $elm$core$Tuple$pair(width), decoder(width));
            } else return $elm$bytes$Bytes$Decode$fail;
        });
    };
    var $elm$bytes$Bytes$Decode$string = function(n) {
        return $elm$bytes$Bytes$Decode$Decoder(_Bytes_read_string(n));
    };
    var $eriktim$elm_protocol_buffers$Protobuf$Decode$string = $eriktim$elm_protocol_buffers$Protobuf$Decode$lengthDelimitedDecoder($elm$bytes$Bytes$Decode$string);
    var $author$project$Proto$Io$Haveno$Protobuffer$Internals_$decodeProto__Io__Haveno__Protobuffer__GetVersionReply = A2($eriktim$elm_protocol_buffers$Protobuf$Decode$message, $author$project$Proto$Io$Haveno$Protobuffer$Internals_$defaultProto__Io__Haveno__Protobuffer__GetVersionReply, _List_fromArray([
        A3($eriktim$elm_protocol_buffers$Protobuf$Decode$optional, 1, $eriktim$elm_protocol_buffers$Protobuf$Decode$string, F2(function(a, r) {
            return _Utils_update(r, {
                version: a
            });
        }))
    ]));
    var $author$project$Proto$Io$Haveno$Protobuffer$decodeGetVersionReply = $author$project$Proto$Io$Haveno$Protobuffer$Internals_$decodeProto__Io__Haveno__Protobuffer__GetVersionReply;
    var $eriktim$elm_protocol_buffers$Protobuf$Encode$Encoder = F2(function(a, b) {
        return {
            $: "Encoder",
            a: a,
            b: b
        };
    });
    var $elm$bytes$Bytes$Encode$Seq = F2(function(a, b) {
        return {
            $: "Seq",
            a: a,
            b: b
        };
    });
    var $elm$bytes$Bytes$Encode$getWidths = F2(function(width, builders) {
        getWidths: while(true){
            if (!builders.b) return width;
            else {
                var b = builders.a;
                var bs = builders.b;
                var $temp$width = width + $elm$bytes$Bytes$Encode$getWidth(b), $temp$builders = bs;
                width = $temp$width;
                builders = $temp$builders;
                continue getWidths;
            }
        }
    });
    var $elm$bytes$Bytes$Encode$sequence = function(builders) {
        return A2($elm$bytes$Bytes$Encode$Seq, A2($elm$bytes$Bytes$Encode$getWidths, 0, builders), builders);
    };
    var $elm$core$List$sum = function(numbers) {
        return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
    };
    var $eriktim$elm_protocol_buffers$Protobuf$Encode$sequence = function(items) {
        var width = $elm$core$List$sum(A2($elm$core$List$map, $elm$core$Tuple$first, items));
        return _Utils_Tuple2(width, $elm$bytes$Bytes$Encode$sequence(A2($elm$core$List$map, $elm$core$Tuple$second, items)));
    };
    var $elm$core$List$sortBy = _List_sortBy;
    var $elm$core$Bitwise$or = _Bitwise_or;
    var $elm$bytes$Bytes$Encode$U8 = function(a) {
        return {
            $: "U8",
            a: a
        };
    };
    var $elm$bytes$Bytes$Encode$unsignedInt8 = $elm$bytes$Bytes$Encode$U8;
    var $eriktim$elm_protocol_buffers$Protobuf$Encode$toVarIntEncoders = F2(function(config, value) {
        var _v0 = config.popBase128(value);
        var base128 = _v0.a;
        var higherBits = _v0.b;
        return _Utils_eq(higherBits, config.fromBase128(0)) ? _List_fromArray([
            $elm$bytes$Bytes$Encode$unsignedInt8(base128)
        ]) : A2($elm$core$List$cons, $elm$bytes$Bytes$Encode$unsignedInt8(128 | base128), A2($eriktim$elm_protocol_buffers$Protobuf$Encode$toVarIntEncoders, config, higherBits));
    });
    var $eriktim$elm_protocol_buffers$Protobuf$Encode$varInt = F2(function(config, value) {
        var encoders = A2($eriktim$elm_protocol_buffers$Protobuf$Encode$toVarIntEncoders, config, value);
        return _Utils_Tuple2($elm$core$List$length(encoders), $elm$bytes$Bytes$Encode$sequence(encoders));
    });
    var $eriktim$elm_protocol_buffers$Protobuf$Encode$varInt32 = $eriktim$elm_protocol_buffers$Protobuf$Encode$varInt($eriktim$elm_protocol_buffers$Internal$Int32$operations);
    var $eriktim$elm_protocol_buffers$Protobuf$Encode$tag = F2(function(fieldNumber, wireType) {
        var encodeTag = function(base4) {
            return $eriktim$elm_protocol_buffers$Protobuf$Encode$varInt32(fieldNumber << 3 | base4);
        };
        switch(wireType.$){
            case "VarInt":
                return encodeTag(0);
            case "Bit64":
                return encodeTag(1);
            case "LengthDelimited":
                var width = wireType.a;
                return $eriktim$elm_protocol_buffers$Protobuf$Encode$sequence(_List_fromArray([
                    encodeTag(2),
                    $eriktim$elm_protocol_buffers$Protobuf$Encode$varInt32(width)
                ]));
            case "StartGroup":
                return encodeTag(3);
            case "EndGroup":
                return encodeTag(4);
            default:
                return encodeTag(5);
        }
    });
    var $eriktim$elm_protocol_buffers$Protobuf$Encode$unwrap = function(encoder) {
        if (encoder.$ === "Encoder") {
            var encoder_ = encoder.b;
            return $elm$core$Maybe$Just(encoder_);
        } else return $elm$core$Maybe$Nothing;
    };
    var $eriktim$elm_protocol_buffers$Protobuf$Encode$toPackedEncoder = function(encoders) {
        if (encoders.b && encoders.a.$ === "Encoder") {
            var _v1 = encoders.a;
            var wireType = _v1.a;
            var encoder = _v1.b;
            var others = encoders.b;
            if (wireType.$ === "LengthDelimited") return $elm$core$Maybe$Nothing;
            else return $elm$core$Maybe$Just($eriktim$elm_protocol_buffers$Protobuf$Encode$sequence(A2($elm$core$List$cons, encoder, A2($elm$core$List$filterMap, $eriktim$elm_protocol_buffers$Protobuf$Encode$unwrap, others))));
        } else return $elm$core$Maybe$Nothing;
    };
    var $eriktim$elm_protocol_buffers$Protobuf$Encode$toKeyValuePairEncoder = function(_v0) {
        var fieldNumber = _v0.a;
        var encoder = _v0.b;
        switch(encoder.$){
            case "Encoder":
                var wireType = encoder.a;
                var encoder_ = encoder.b;
                return $eriktim$elm_protocol_buffers$Protobuf$Encode$sequence(_List_fromArray([
                    A2($eriktim$elm_protocol_buffers$Protobuf$Encode$tag, fieldNumber, wireType),
                    encoder_
                ]));
            case "ListEncoder":
                var encoders = encoder.a;
                var _v2 = $eriktim$elm_protocol_buffers$Protobuf$Encode$toPackedEncoder(encoders);
                if (_v2.$ === "Just") {
                    var encoder_ = _v2.a;
                    return $eriktim$elm_protocol_buffers$Protobuf$Encode$sequence(_List_fromArray([
                        A2($eriktim$elm_protocol_buffers$Protobuf$Encode$tag, fieldNumber, $eriktim$elm_protocol_buffers$Internal$Protobuf$LengthDelimited(encoder_.a)),
                        encoder_
                    ]));
                } else return $eriktim$elm_protocol_buffers$Protobuf$Encode$sequence(A2($elm$core$List$map, A2($elm$core$Basics$composeL, $eriktim$elm_protocol_buffers$Protobuf$Encode$toKeyValuePairEncoder, $elm$core$Tuple$pair(fieldNumber)), encoders));
            default:
                return $eriktim$elm_protocol_buffers$Protobuf$Encode$sequence(_List_Nil);
        }
    };
    var $eriktim$elm_protocol_buffers$Protobuf$Encode$message = function(items) {
        return function(e) {
            return A2($eriktim$elm_protocol_buffers$Protobuf$Encode$Encoder, $eriktim$elm_protocol_buffers$Internal$Protobuf$LengthDelimited(e.a), e);
        }($eriktim$elm_protocol_buffers$Protobuf$Encode$sequence(A2($elm$core$List$map, $eriktim$elm_protocol_buffers$Protobuf$Encode$toKeyValuePairEncoder, A2($elm$core$List$sortBy, $elm$core$Tuple$first, items))));
    };
    var $author$project$Proto$Io$Haveno$Protobuffer$Internals_$encodeProto__Io__Haveno__Protobuffer__GetVersionRequest = function(_v0) {
        return $eriktim$elm_protocol_buffers$Protobuf$Encode$message(_List_Nil);
    };
    var $author$project$Proto$Io$Haveno$Protobuffer$encodeGetVersionRequest = $author$project$Proto$Io$Haveno$Protobuffer$Internals_$encodeProto__Io__Haveno__Protobuffer__GetVersionRequest;
    var $author$project$Proto$Io$Haveno$Protobuffer$GetVersion$getVersion = $anmolitor$elm_grpc$Grpc$Internal$Rpc({
        decoder: $author$project$Proto$Io$Haveno$Protobuffer$decodeGetVersionReply,
        encoder: $author$project$Proto$Io$Haveno$Protobuffer$encodeGetVersionRequest,
        _package: "io.haveno.protobuffer",
        rpcName: "GetVersion",
        service: "GetVersion"
    });
    var $anmolitor$elm_grpc$Grpc$grpcContentType = "application/grpc-web+proto";
    var $anmolitor$elm_grpc$Grpc$new = F2(function(rpc, req) {
        return $anmolitor$elm_grpc$Grpc$InternalRpcRequest({
            body: req,
            headers: _List_fromArray([
                A2($elm$http$Http$header, "accept", $anmolitor$elm_grpc$Grpc$grpcContentType)
            ]),
            host: "",
            risky: false,
            rpc: rpc,
            timeout: $elm$core$Maybe$Nothing,
            tracker: $elm$core$Maybe$Nothing
        });
    });
    var $anmolitor$elm_grpc$Grpc$setHost = F2(function(host, _v0) {
        var req = _v0.a;
        return $anmolitor$elm_grpc$Grpc$InternalRpcRequest(_Utils_update(req, {
            host: host
        }));
    });
    var $elm$http$Http$BadStatus_ = F2(function(a, b) {
        return {
            $: "BadStatus_",
            a: a,
            b: b
        };
    });
    var $elm$http$Http$BadUrl_ = function(a) {
        return {
            $: "BadUrl_",
            a: a
        };
    };
    var $elm$http$Http$GoodStatus_ = F2(function(a, b) {
        return {
            $: "GoodStatus_",
            a: a,
            b: b
        };
    });
    var $elm$http$Http$NetworkError_ = {
        $: "NetworkError_"
    };
    var $elm$http$Http$Receiving = function(a) {
        return {
            $: "Receiving",
            a: a
        };
    };
    var $elm$http$Http$Sending = function(a) {
        return {
            $: "Sending",
            a: a
        };
    };
    var $elm$http$Http$Timeout_ = {
        $: "Timeout_"
    };
    var $elm$core$Maybe$isJust = function(maybe) {
        if (maybe.$ === "Just") return true;
        else return false;
    };
    var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
    var $elm$http$Http$bytesBody = _Http_pair;
    var $elm$bytes$Bytes$Encode$Bytes = function(a) {
        return {
            $: "Bytes",
            a: a
        };
    };
    var $elm$bytes$Bytes$Encode$bytes = $elm$bytes$Bytes$Encode$Bytes;
    var $elm$bytes$Bytes$Encode$encode = _Bytes_encode;
    var $eriktim$elm_protocol_buffers$Protobuf$Encode$encode = function(encoder) {
        switch(encoder.$){
            case "Encoder":
                var _v1 = encoder.b;
                var encoder_ = _v1.b;
                return $elm$bytes$Bytes$Encode$encode(encoder_);
            case "ListEncoder":
                var encoders = encoder.a;
                return $elm$bytes$Bytes$Encode$encode($elm$bytes$Bytes$Encode$sequence(A2($elm$core$List$map, A2($elm$core$Basics$composeL, $elm$bytes$Bytes$Encode$bytes, $eriktim$elm_protocol_buffers$Protobuf$Encode$encode), encoders)));
            default:
                return $elm$bytes$Bytes$Encode$encode($elm$bytes$Bytes$Encode$sequence(_List_Nil));
        }
    };
    var $elm$http$Http$expectBytesResponse = F2(function(toMsg, toResult) {
        return A3(_Http_expect, "arraybuffer", _Http_toDataView, A2($elm$core$Basics$composeR, toResult, toMsg));
    });
    var $elm$bytes$Bytes$BE = {
        $: "BE"
    };
    var $elm$bytes$Bytes$Encode$U32 = F2(function(a, b) {
        return {
            $: "U32",
            a: a,
            b: b
        };
    });
    var $elm$bytes$Bytes$Encode$unsignedInt32 = $elm$bytes$Bytes$Encode$U32;
    var $elm$bytes$Bytes$width = _Bytes_width;
    var $anmolitor$elm_grpc$Grpc$requestEncoder = function(message) {
        var messageLength = $elm$bytes$Bytes$width(message);
        return $elm$bytes$Bytes$Encode$sequence(_List_fromArray([
            $elm$bytes$Bytes$Encode$unsignedInt8(0),
            A2($elm$bytes$Bytes$Encode$unsignedInt32, $elm$bytes$Bytes$BE, messageLength),
            $elm$bytes$Bytes$Encode$bytes(message)
        ]));
    };
    var $anmolitor$elm_grpc$Grpc$frameRequest = function(binaryData) {
        return $elm$bytes$Bytes$Encode$encode($anmolitor$elm_grpc$Grpc$requestEncoder(binaryData));
    };
    var $anmolitor$elm_grpc$Grpc$BadBody = function(a) {
        return {
            $: "BadBody",
            a: a
        };
    };
    var $anmolitor$elm_grpc$Grpc$BadStatus = function(a) {
        return {
            $: "BadStatus",
            a: a
        };
    };
    var $anmolitor$elm_grpc$Grpc$BadUrl = function(a) {
        return {
            $: "BadUrl",
            a: a
        };
    };
    var $anmolitor$elm_grpc$Grpc$NetworkError = {
        $: "NetworkError"
    };
    var $anmolitor$elm_grpc$Grpc$Ok_ = {
        $: "Ok_"
    };
    var $anmolitor$elm_grpc$Grpc$Timeout = {
        $: "Timeout"
    };
    var $elm$core$Maybe$andThen = F2(function(callback, maybeValue) {
        if (maybeValue.$ === "Just") {
            var value = maybeValue.a;
            return callback(value);
        } else return $elm$core$Maybe$Nothing;
    });
    var $elm$bytes$Bytes$Decode$decode = F2(function(_v0, bs) {
        var decoder = _v0.a;
        return A2(_Bytes_decode, decoder, bs);
    });
    var $eriktim$elm_protocol_buffers$Protobuf$Decode$decode = F2(function(_v0, bs) {
        var decoder = _v0.a;
        var wireType = $eriktim$elm_protocol_buffers$Internal$Protobuf$LengthDelimited($elm$bytes$Bytes$width(bs));
        return A2($elm$core$Maybe$map, $elm$core$Tuple$second, A2($elm$bytes$Bytes$Decode$decode, decoder(wireType), bs));
    });
    var $anmolitor$elm_grpc$Grpc$Aborted = {
        $: "Aborted"
    };
    var $anmolitor$elm_grpc$Grpc$AlreadyExists = {
        $: "AlreadyExists"
    };
    var $anmolitor$elm_grpc$Grpc$Cancelled = {
        $: "Cancelled"
    };
    var $anmolitor$elm_grpc$Grpc$DataLoss = {
        $: "DataLoss"
    };
    var $anmolitor$elm_grpc$Grpc$DeadlineExceeded = {
        $: "DeadlineExceeded"
    };
    var $anmolitor$elm_grpc$Grpc$FailedPrecondition = {
        $: "FailedPrecondition"
    };
    var $anmolitor$elm_grpc$Grpc$Internal = {
        $: "Internal"
    };
    var $anmolitor$elm_grpc$Grpc$InvalidArgument = {
        $: "InvalidArgument"
    };
    var $anmolitor$elm_grpc$Grpc$NotFound = {
        $: "NotFound"
    };
    var $anmolitor$elm_grpc$Grpc$OutOfRange = {
        $: "OutOfRange"
    };
    var $anmolitor$elm_grpc$Grpc$PermissionDenied = {
        $: "PermissionDenied"
    };
    var $anmolitor$elm_grpc$Grpc$ResourceExhausted = {
        $: "ResourceExhausted"
    };
    var $anmolitor$elm_grpc$Grpc$Unauthenticated = {
        $: "Unauthenticated"
    };
    var $anmolitor$elm_grpc$Grpc$Unavailable = {
        $: "Unavailable"
    };
    var $anmolitor$elm_grpc$Grpc$Unimplemented = {
        $: "Unimplemented"
    };
    var $anmolitor$elm_grpc$Grpc$Unknown = {
        $: "Unknown"
    };
    var $anmolitor$elm_grpc$Grpc$errCodeFromInt = function(n) {
        switch(n){
            case 0:
                return $elm$core$Maybe$Just($anmolitor$elm_grpc$Grpc$Ok_);
            case 1:
                return $elm$core$Maybe$Just($anmolitor$elm_grpc$Grpc$Cancelled);
            case 2:
                return $elm$core$Maybe$Just($anmolitor$elm_grpc$Grpc$Unknown);
            case 3:
                return $elm$core$Maybe$Just($anmolitor$elm_grpc$Grpc$InvalidArgument);
            case 4:
                return $elm$core$Maybe$Just($anmolitor$elm_grpc$Grpc$DeadlineExceeded);
            case 5:
                return $elm$core$Maybe$Just($anmolitor$elm_grpc$Grpc$NotFound);
            case 6:
                return $elm$core$Maybe$Just($anmolitor$elm_grpc$Grpc$AlreadyExists);
            case 7:
                return $elm$core$Maybe$Just($anmolitor$elm_grpc$Grpc$PermissionDenied);
            case 8:
                return $elm$core$Maybe$Just($anmolitor$elm_grpc$Grpc$ResourceExhausted);
            case 9:
                return $elm$core$Maybe$Just($anmolitor$elm_grpc$Grpc$FailedPrecondition);
            case 10:
                return $elm$core$Maybe$Just($anmolitor$elm_grpc$Grpc$Aborted);
            case 11:
                return $elm$core$Maybe$Just($anmolitor$elm_grpc$Grpc$OutOfRange);
            case 12:
                return $elm$core$Maybe$Just($anmolitor$elm_grpc$Grpc$Unimplemented);
            case 13:
                return $elm$core$Maybe$Just($anmolitor$elm_grpc$Grpc$Internal);
            case 14:
                return $elm$core$Maybe$Just($anmolitor$elm_grpc$Grpc$Unavailable);
            case 15:
                return $elm$core$Maybe$Just($anmolitor$elm_grpc$Grpc$DataLoss);
            case 16:
                return $elm$core$Maybe$Just($anmolitor$elm_grpc$Grpc$Unauthenticated);
            default:
                return $elm$core$Maybe$Nothing;
        }
    };
    var $elm$core$Result$fromMaybe = F2(function(err, maybe) {
        if (maybe.$ === "Just") {
            var v = maybe.a;
            return $elm$core$Result$Ok(v);
        } else return $elm$core$Result$Err(err);
    });
    var $anmolitor$elm_grpc$Grpc$httpBadStatusToGrpcStatus = function(statusCode) {
        switch(statusCode){
            case 400:
                return $anmolitor$elm_grpc$Grpc$Internal;
            case 401:
                return $anmolitor$elm_grpc$Grpc$Unauthenticated;
            case 403:
                return $anmolitor$elm_grpc$Grpc$PermissionDenied;
            case 404:
                return $anmolitor$elm_grpc$Grpc$Unimplemented;
            case 429:
                return $anmolitor$elm_grpc$Grpc$Unavailable;
            case 502:
                return $anmolitor$elm_grpc$Grpc$Unavailable;
            case 503:
                return $anmolitor$elm_grpc$Grpc$Unavailable;
            case 504:
                return $anmolitor$elm_grpc$Grpc$Unavailable;
            default:
                return $anmolitor$elm_grpc$Grpc$Unknown;
        }
    };
    var $anmolitor$elm_grpc$Grpc$Response = function(message) {
        return {
            message: message
        };
    };
    var $elm$bytes$Bytes$Decode$map2 = F3(function(func, _v0, _v1) {
        var decodeA = _v0.a;
        var decodeB = _v1.a;
        return $elm$bytes$Bytes$Decode$Decoder(F2(function(bites, offset) {
            var _v2 = A2(decodeA, bites, offset);
            var aOffset = _v2.a;
            var a = _v2.b;
            var _v3 = A2(decodeB, bites, aOffset);
            var bOffset = _v3.a;
            var b = _v3.b;
            return _Utils_Tuple2(bOffset, A2(func, a, b));
        }));
    });
    var $elm$bytes$Bytes$Decode$unsignedInt32 = function(endianness) {
        return $elm$bytes$Bytes$Decode$Decoder(_Bytes_read_u32(_Utils_eq(endianness, $elm$bytes$Bytes$LE)));
    };
    var $anmolitor$elm_grpc$Grpc$responseDecoder = A3($elm$bytes$Bytes$Decode$map2, function(_v0) {
        return $anmolitor$elm_grpc$Grpc$Response;
    }, $elm$bytes$Bytes$Decode$bytes(1), A2($elm$bytes$Bytes$Decode$andThen, $elm$bytes$Bytes$Decode$bytes, $elm$bytes$Bytes$Decode$unsignedInt32($elm$bytes$Bytes$BE)));
    var $anmolitor$elm_grpc$Grpc$handleResponse = F2(function(decoder, httpResponse) {
        var parseResponse = F3(function(isGoodStatus, metadata, bytes) {
            var defaultGrpcStatus = isGoodStatus ? $anmolitor$elm_grpc$Grpc$Ok_ : $anmolitor$elm_grpc$Grpc$httpBadStatusToGrpcStatus(metadata.statusCode);
            var grpcStatus = A2($elm$core$Maybe$withDefault, defaultGrpcStatus, A2($elm$core$Maybe$andThen, $anmolitor$elm_grpc$Grpc$errCodeFromInt, A2($elm$core$Maybe$andThen, $elm$core$String$toInt, A2($elm$core$Dict$get, "grpc-status", metadata.headers))));
            if (grpcStatus.$ === "Ok_") return A2($elm$core$Result$fromMaybe, $anmolitor$elm_grpc$Grpc$BadBody(bytes), A2($elm$core$Maybe$andThen, function(response) {
                return A2($eriktim$elm_protocol_buffers$Protobuf$Decode$decode, decoder, response.message);
            }, A2($elm$bytes$Bytes$Decode$decode, $anmolitor$elm_grpc$Grpc$responseDecoder, bytes)));
            else {
                var errMessage = A2($elm$core$Maybe$withDefault, metadata.statusText, A2($elm$core$Dict$get, "grpc-message", metadata.headers));
                return $elm$core$Result$Err($anmolitor$elm_grpc$Grpc$BadStatus({
                    errMessage: errMessage,
                    metadata: metadata,
                    response: bytes,
                    status: grpcStatus
                }));
            }
        });
        switch(httpResponse.$){
            case "GoodStatus_":
                var metadata = httpResponse.a;
                var bytes = httpResponse.b;
                return A3(parseResponse, true, metadata, bytes);
            case "BadUrl_":
                var badUrl = httpResponse.a;
                return $elm$core$Result$Err($anmolitor$elm_grpc$Grpc$BadUrl(badUrl));
            case "Timeout_":
                return $elm$core$Result$Err($anmolitor$elm_grpc$Grpc$Timeout);
            case "NetworkError_":
                return $elm$core$Result$Err($anmolitor$elm_grpc$Grpc$NetworkError);
            default:
                var metadata = httpResponse.a;
                var bytes = httpResponse.b;
                return A3(parseResponse, false, metadata, bytes);
        }
    });
    var $elm$http$Http$Request = function(a) {
        return {
            $: "Request",
            a: a
        };
    };
    var $elm$http$Http$State = F2(function(reqs, subs) {
        return {
            reqs: reqs,
            subs: subs
        };
    });
    var $elm$http$Http$init = $elm$core$Task$succeed(A2($elm$http$Http$State, $elm$core$Dict$empty, _List_Nil));
    var $elm$core$Process$kill = _Scheduler_kill;
    var $elm$core$Process$spawn = _Scheduler_spawn;
    var $elm$http$Http$updateReqs = F3(function(router, cmds, reqs) {
        updateReqs: while(true){
            if (!cmds.b) return $elm$core$Task$succeed(reqs);
            else {
                var cmd = cmds.a;
                var otherCmds = cmds.b;
                if (cmd.$ === "Cancel") {
                    var tracker = cmd.a;
                    var _v2 = A2($elm$core$Dict$get, tracker, reqs);
                    if (_v2.$ === "Nothing") {
                        var $temp$router = router, $temp$cmds = otherCmds, $temp$reqs = reqs;
                        router = $temp$router;
                        cmds = $temp$cmds;
                        reqs = $temp$reqs;
                        continue updateReqs;
                    } else {
                        var pid = _v2.a;
                        return A2($elm$core$Task$andThen, function(_v3) {
                            return A3($elm$http$Http$updateReqs, router, otherCmds, A2($elm$core$Dict$remove, tracker, reqs));
                        }, $elm$core$Process$kill(pid));
                    }
                } else {
                    var req = cmd.a;
                    return A2($elm$core$Task$andThen, function(pid) {
                        var _v4 = req.tracker;
                        if (_v4.$ === "Nothing") return A3($elm$http$Http$updateReqs, router, otherCmds, reqs);
                        else {
                            var tracker = _v4.a;
                            return A3($elm$http$Http$updateReqs, router, otherCmds, A3($elm$core$Dict$insert, tracker, pid, reqs));
                        }
                    }, $elm$core$Process$spawn(A3(_Http_toTask, router, $elm$core$Platform$sendToApp(router), req)));
                }
            }
        }
    });
    var $elm$http$Http$onEffects = F4(function(router, cmds, subs, state) {
        return A2($elm$core$Task$andThen, function(reqs) {
            return $elm$core$Task$succeed(A2($elm$http$Http$State, reqs, subs));
        }, A3($elm$http$Http$updateReqs, router, cmds, state.reqs));
    });
    var $elm$http$Http$maybeSend = F4(function(router, desiredTracker, progress, _v0) {
        var actualTracker = _v0.a;
        var toMsg = _v0.b;
        return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(A2($elm$core$Platform$sendToApp, router, toMsg(progress))) : $elm$core$Maybe$Nothing;
    });
    var $elm$http$Http$onSelfMsg = F3(function(router, _v0, state) {
        var tracker = _v0.a;
        var progress = _v0.b;
        return A2($elm$core$Task$andThen, function(_v1) {
            return $elm$core$Task$succeed(state);
        }, $elm$core$Task$sequence(A2($elm$core$List$filterMap, A3($elm$http$Http$maybeSend, router, tracker, progress), state.subs)));
    });
    var $elm$http$Http$Cancel = function(a) {
        return {
            $: "Cancel",
            a: a
        };
    };
    var $elm$http$Http$cmdMap = F2(function(func, cmd) {
        if (cmd.$ === "Cancel") {
            var tracker = cmd.a;
            return $elm$http$Http$Cancel(tracker);
        } else {
            var r = cmd.a;
            return $elm$http$Http$Request({
                allowCookiesFromOtherDomains: r.allowCookiesFromOtherDomains,
                body: r.body,
                expect: A2(_Http_mapExpect, func, r.expect),
                headers: r.headers,
                method: r.method,
                timeout: r.timeout,
                tracker: r.tracker,
                url: r.url
            });
        }
    });
    var $elm$http$Http$MySub = F2(function(a, b) {
        return {
            $: "MySub",
            a: a,
            b: b
        };
    });
    var $elm$http$Http$subMap = F2(function(func, _v0) {
        var tracker = _v0.a;
        var toMsg = _v0.b;
        return A2($elm$http$Http$MySub, tracker, A2($elm$core$Basics$composeR, toMsg, func));
    });
    _Platform_effectManagers["Http"] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
    var $elm$http$Http$command = _Platform_leaf("Http");
    var $elm$http$Http$subscription = _Platform_leaf("Http");
    var $elm$http$Http$request = function(r) {
        return $elm$http$Http$command($elm$http$Http$Request({
            allowCookiesFromOtherDomains: false,
            body: r.body,
            expect: r.expect,
            headers: r.headers,
            method: r.method,
            timeout: r.timeout,
            tracker: r.tracker,
            url: r.url
        }));
    };
    var $elm$http$Http$riskyRequest = function(r) {
        return $elm$http$Http$command($elm$http$Http$Request({
            allowCookiesFromOtherDomains: true,
            body: r.body,
            expect: r.expect,
            headers: r.headers,
            method: r.method,
            timeout: r.timeout,
            tracker: r.tracker,
            url: r.url
        }));
    };
    var $anmolitor$elm_grpc$Grpc$rpcPath = function(_v0) {
        var service = _v0.a.service;
        var _package = _v0.a._package;
        var rpcName = _v0.a.rpcName;
        return "/" + (($elm$core$String$isEmpty(_package) ? "" : _package + ".") + (service + ("/" + rpcName)));
    };
    var $anmolitor$elm_grpc$Grpc$toCmd = F2(function(expect, _v0) {
        var req = _v0.a;
        var toHttpRequest = req.risky ? $elm$http$Http$riskyRequest : $elm$http$Http$request;
        var _v1 = req.rpc;
        var rpc = _v1.a;
        var body = A2($elm$http$Http$bytesBody, $anmolitor$elm_grpc$Grpc$grpcContentType, $anmolitor$elm_grpc$Grpc$frameRequest($eriktim$elm_protocol_buffers$Protobuf$Encode$encode(rpc.encoder(req.body))));
        return toHttpRequest({
            body: body,
            expect: A2($elm$http$Http$expectBytesResponse, expect, $anmolitor$elm_grpc$Grpc$handleResponse(rpc.decoder)),
            headers: req.headers,
            method: "POST",
            timeout: req.timeout,
            tracker: req.tracker,
            url: _Utils_ap(req.host, $anmolitor$elm_grpc$Grpc$rpcPath(req.rpc))
        });
    });
    var $author$project$Main$sendVersionRequest = function(request) {
        var grpcRequest = A2($anmolitor$elm_grpc$Grpc$setHost, "http://localhost:8080", A3($anmolitor$elm_grpc$Grpc$addHeader, "password", "apitest", A2($anmolitor$elm_grpc$Grpc$new, $author$project$Proto$Io$Haveno$Protobuffer$GetVersion$getVersion, request)));
        return A2($anmolitor$elm_grpc$Grpc$toCmd, $author$project$Main$GotVersion, grpcRequest);
    };
    var $author$project$Main$toHardware = F2(function(model, _v0) {
        var hardware = _v0.a;
        var cmd = _v0.b;
        return _Utils_Tuple2(model, $elm$core$Platform$Cmd$batch(_List_fromArray([
            A2($elm$core$Platform$Cmd$map, $author$project$Main$GotHardwareMsg, cmd),
            $author$project$Main$sendVersionRequest({})
        ])));
    });
    var $author$project$Main$GotMarketMsg = function(a) {
        return {
            $: "GotMarketMsg",
            a: a
        };
    };
    var $author$project$Main$MarketPage = function(a) {
        return {
            $: "MarketPage",
            a: a
        };
    };
    var $author$project$Main$toMarket = F2(function(model, _v0) {
        var market = _v0.a;
        var cmd = _v0.b;
        return _Utils_Tuple2(_Utils_update(model, {
            page: $author$project$Main$MarketPage(market)
        }), A2($elm$core$Platform$Cmd$map, $author$project$Main$GotMarketMsg, cmd));
    });
    var $author$project$Main$GotPortfolioMsg = function(a) {
        return {
            $: "GotPortfolioMsg",
            a: a
        };
    };
    var $author$project$Main$PortfolioPage = function(a) {
        return {
            $: "PortfolioPage",
            a: a
        };
    };
    var $author$project$Main$toPortfolio = F2(function(model, _v0) {
        var portfolio = _v0.a;
        var cmd = _v0.b;
        return _Utils_Tuple2(_Utils_update(model, {
            page: $author$project$Main$PortfolioPage(portfolio)
        }), A2($elm$core$Platform$Cmd$map, $author$project$Main$GotPortfolioMsg, cmd));
    });
    var $author$project$Main$BuyPage = function(a) {
        return {
            $: "BuyPage",
            a: a
        };
    };
    var $author$project$Main$GotBuyMsg = function(a) {
        return {
            $: "GotBuyMsg",
            a: a
        };
    };
    var $author$project$Main$toPricing = F2(function(model, _v0) {
        var pricing = _v0.a;
        var cmd = _v0.b;
        return _Utils_Tuple2(_Utils_update(model, {
            page: $author$project$Main$BuyPage(pricing)
        }), A2($elm$core$Platform$Cmd$map, $author$project$Main$GotBuyMsg, cmd));
    });
    var $author$project$Main$GotSellMsg = function(a) {
        return {
            $: "GotSellMsg",
            a: a
        };
    };
    var $author$project$Main$SellPage = function(a) {
        return {
            $: "SellPage",
            a: a
        };
    };
    var $author$project$Main$toSell = F2(function(model, _v0) {
        var sell = _v0.a;
        var cmd = _v0.b;
        return _Utils_Tuple2(_Utils_update(model, {
            page: $author$project$Main$SellPage(sell)
        }), A2($elm$core$Platform$Cmd$map, $author$project$Main$GotSellMsg, cmd));
    });
    var $author$project$Main$GotSupportMsg = function(a) {
        return {
            $: "GotSupportMsg",
            a: a
        };
    };
    var $author$project$Main$SupportPage = function(a) {
        return {
            $: "SupportPage",
            a: a
        };
    };
    var $author$project$Main$toSupport = F2(function(model, _v0) {
        var support = _v0.a;
        var cmd = _v0.b;
        return _Utils_Tuple2(_Utils_update(model, {
            page: $author$project$Main$SupportPage(support)
        }), A2($elm$core$Platform$Cmd$map, $author$project$Main$GotSupportMsg, cmd));
    });
    var $author$project$Main$Blank = {
        $: "Blank"
    };
    var $author$project$Main$Buy = {
        $: "Buy"
    };
    var $author$project$Main$Dashboard = {
        $: "Dashboard"
    };
    var $author$project$Main$Funds = {
        $: "Funds"
    };
    var $author$project$Main$Hardware = {
        $: "Hardware"
    };
    var $author$project$Main$Market = {
        $: "Market"
    };
    var $author$project$Main$Portfolio = {
        $: "Portfolio"
    };
    var $author$project$Main$Sell = {
        $: "Sell"
    };
    var $author$project$Main$Support = {
        $: "Support"
    };
    var $elm$url$Url$Parser$Parser = function(a) {
        return {
            $: "Parser",
            a: a
        };
    };
    var $elm$url$Url$Parser$mapState = F2(function(func, _v0) {
        var visited = _v0.visited;
        var unvisited = _v0.unvisited;
        var params = _v0.params;
        var frag = _v0.frag;
        var value = _v0.value;
        return A5($elm$url$Url$Parser$State, visited, unvisited, params, frag, func(value));
    });
    var $elm$url$Url$Parser$map = F2(function(subValue, _v0) {
        var parseArg = _v0.a;
        return $elm$url$Url$Parser$Parser(function(_v1) {
            var visited = _v1.visited;
            var unvisited = _v1.unvisited;
            var params = _v1.params;
            var frag = _v1.frag;
            var value = _v1.value;
            return A2($elm$core$List$map, $elm$url$Url$Parser$mapState(value), parseArg(A5($elm$url$Url$Parser$State, visited, unvisited, params, frag, subValue)));
        });
    });
    var $elm$url$Url$Parser$oneOf = function(parsers) {
        return $elm$url$Url$Parser$Parser(function(state) {
            return A2($elm$core$List$concatMap, function(_v0) {
                var parser = _v0.a;
                return parser(state);
            }, parsers);
        });
    };
    var $elm$url$Url$Parser$s = function(str) {
        return $elm$url$Url$Parser$Parser(function(_v0) {
            var visited = _v0.visited;
            var unvisited = _v0.unvisited;
            var params = _v0.params;
            var frag = _v0.frag;
            var value = _v0.value;
            if (!unvisited.b) return _List_Nil;
            else {
                var next = unvisited.a;
                var rest = unvisited.b;
                return _Utils_eq(next, str) ? _List_fromArray([
                    A5($elm$url$Url$Parser$State, A2($elm$core$List$cons, next, visited), rest, params, frag, value)
                ]) : _List_Nil;
            }
        });
    };
    var $elm$url$Url$Parser$top = $elm$url$Url$Parser$Parser(function(state) {
        return _List_fromArray([
            state
        ]);
    });
    var $author$project$Main$urlAsPageParser = $elm$url$Url$Parser$oneOf(_List_fromArray([
        A2($elm$url$Url$Parser$map, $author$project$Main$Blank, $elm$url$Url$Parser$s("index.html")),
        A2($elm$url$Url$Parser$map, $author$project$Main$Blank, $elm$url$Url$Parser$top),
        A2($elm$url$Url$Parser$map, $author$project$Main$Dashboard, $elm$url$Url$Parser$s("dashboard")),
        A2($elm$url$Url$Parser$map, $author$project$Main$Sell, $elm$url$Url$Parser$s("sell")),
        A2($elm$url$Url$Parser$map, $author$project$Main$Portfolio, $elm$url$Url$Parser$s("portfolio")),
        A2($elm$url$Url$Parser$map, $author$project$Main$Funds, $elm$url$Url$Parser$s("funds")),
        A2($elm$url$Url$Parser$map, $author$project$Main$Support, $elm$url$Url$Parser$s("support")),
        A2($elm$url$Url$Parser$map, $author$project$Main$Buy, $elm$url$Url$Parser$s("buy")),
        A2($elm$url$Url$Parser$map, $author$project$Main$Market, $elm$url$Url$Parser$s("market")),
        A2($elm$url$Url$Parser$map, $author$project$Main$Hardware, $elm$url$Url$Parser$s("hardware"))
    ]));
    var $author$project$Main$updateUrl = F2(function(url, model) {
        var urlMinusQueryStr = _Utils_update(url, {
            query: $elm$core$Maybe$Just("")
        });
        var oauthCode = $author$project$Main$gotCodeFromUrl(url);
        var _v0 = A2($elm$url$Url$Parser$parse, $author$project$Main$urlAsPageParser, urlMinusQueryStr);
        if (_v0.$ === "Just") switch(_v0.a.$){
            case "Dashboard":
                var _v1 = _v0.a;
                var newFlagUrl = A6($elm$url$Url$Url, $elm$url$Url$Http, "localhost", $elm$core$Maybe$Just(1234), "/dashboard", $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing);
                var newModel = _Utils_update(model, {
                    flag: newFlagUrl
                });
                if (oauthCode.$ === "Nothing") return A2($author$project$Main$toDashboard, newModel, $author$project$Pages$Dashboard$init({
                    flagUrl: newFlagUrl,
                    time: $elm$core$Maybe$Nothing
                }));
                else {
                    if (oauthCode.a === "") return A2($author$project$Main$toDashboard, newModel, $author$project$Pages$Dashboard$init({
                        flagUrl: newFlagUrl,
                        time: $elm$core$Maybe$Nothing
                    }));
                    else return A2($author$project$Main$toDashboard, newModel, $author$project$Pages$Dashboard$init({
                        flagUrl: newFlagUrl,
                        time: $elm$core$Maybe$Nothing
                    }));
                }
            case "Sell":
                var _v3 = _v0.a;
                return A2($author$project$Main$toSell, model, $author$project$Pages$Sell$init(_Utils_Tuple0));
            case "Blank":
                var _v4 = _v0.a;
                return A2($author$project$Main$toBlank, model, $author$project$Pages$Blank$init(_Utils_Tuple0));
            case "Portfolio":
                var _v5 = _v0.a;
                return A2($author$project$Main$toPortfolio, model, $author$project$Pages$Portfolio$init(_Utils_Tuple0));
            case "Funds":
                var _v6 = _v0.a;
                return A2($author$project$Main$toFunds, model, $author$project$Pages$Funds$init(_Utils_Tuple0));
            case "Support":
                var _v7 = _v0.a;
                return A2($author$project$Main$toSupport, model, $author$project$Pages$Support$init(_Utils_Tuple0));
            case "Buy":
                var _v8 = _v0.a;
                return A2($author$project$Main$toPricing, model, $author$project$Pages$Buy$init(_Utils_Tuple0));
            case "Market":
                var _v9 = _v0.a;
                return A2($author$project$Main$toMarket, model, $author$project$Pages$Market$init(_Utils_Tuple0));
            default:
                var _v10 = _v0.a;
                var newHWmodel = function() {
                    var _v11 = model.page;
                    if (_v11.$ === "HardwarePage") {
                        var hardwareModel = _v11.a;
                        return _Utils_update(hardwareModel, {
                            isHardwareLNSConnected: model.isHardwareLNSConnected,
                            isHardwareLNXConnected: model.isHardwareLNXConnected,
                            isXMRWalletConnected: model.isXMRWalletConnected
                        });
                    } else return $author$project$Pages$Hardware$initialModel;
                }();
                var newModel = _Utils_update(model, {
                    page: $author$project$Main$HardwarePage(newHWmodel)
                });
                return A2($author$project$Main$toHardware, newModel, $author$project$Pages$Hardware$init({
                    flagUrl: A6($elm$url$Url$Url, $elm$url$Url$Http, "localhost", $elm$core$Maybe$Just(1234), "/hardware", $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing),
                    time: $elm$core$Maybe$Nothing
                }));
        }
        else return A2($author$project$Main$toDashboard, model, $author$project$Pages$Dashboard$init({
            flagUrl: model.flag,
            time: $elm$core$Maybe$Nothing
        }));
    });
    var $elm$json$Json$Decode$andThen = _Json_andThen;
    var $elm$json$Json$Decode$fail = _Json_fail;
    var $author$project$Main$urlDecoder = A2($elm$json$Json$Decode$andThen, function(s) {
        var _v0 = $elm$url$Url$fromString(s);
        if (_v0.$ === "Just") {
            var url = _v0.a;
            return $elm$json$Json$Decode$succeed(url);
        } else return $elm$json$Json$Decode$fail("Invalid URL");
    }, $elm$json$Json$Decode$string);
    var $author$project$Main$init = F3(function(flag, url, key) {
        var decodedJsonFromSetupElmmjs = function() {
            var _v0 = A2($elm$json$Json$Decode$decodeString, $author$project$Main$urlDecoder, flag);
            if (_v0.$ === "Ok") {
                var urL = _v0.a;
                return urL;
            } else return A6($elm$url$Url$Url, $elm$url$Url$Https, "haveno-web.squashpassion.com", $elm$core$Maybe$Nothing, "", $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing);
        }();
        var updatedModel = {
            errors: _List_Nil,
            flag: decodedJsonFromSetupElmmjs,
            isHardwareLNSConnected: false,
            isHardwareLNXConnected: false,
            isNavMenuActive: true,
            isPopUpVisible: true,
            isXMRWalletConnected: false,
            key: key,
            page: $author$project$Main$BlankPage($author$project$Pages$Blank$initialModel),
            time: $elm$time$Time$millisToPosix(0),
            version: $elm$core$Maybe$Nothing,
            xmrWalletAddress: "",
            zone: $elm$core$Maybe$Nothing
        };
        return A2($author$project$Main$updateUrl, url, updatedModel);
    });
    var $author$project$Main$Recv = function(a) {
        return {
            $: "Recv",
            a: a
        };
    };
    var $elm$core$Platform$Sub$batch = _Platform_batch;
    var $author$project$Main$receiveMessageFromJs = _Platform_incomingPort("receiveMessageFromJs", $elm$json$Json$Decode$value);
    var $author$project$Main$subscriptions = function(_v0) {
        return $elm$core$Platform$Sub$batch(_List_fromArray([
            $author$project$Main$receiveMessageFromJs($author$project$Main$Recv)
        ]));
    };
    var $author$project$Pages$Hardware$Spectator = {
        $: "Spectator"
    };
    var $author$project$Main$fromJsonToString = function(value) {
        return A2($elm$json$Json$Encode$encode, 0, value);
    };
    var $author$project$Pages$Dashboard$initialModel = {
        balance: "0.00",
        errors: _List_Nil,
        flagUrl: A6($elm$url$Url$Url, $elm$url$Url$Http, "localhost", $elm$core$Maybe$Nothing, "/dashboard", $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing),
        havenoAPKHttpRequest: $elm$core$Maybe$Nothing,
        pagetitle: "Dashboard",
        root: $author$project$Pages$Dashboard$Dashboard({
            name: "Loading..."
        }),
        status: $author$project$Pages$Dashboard$Loaded,
        version: $elm$core$Maybe$Nothing
    };
    var $elm$parser$Parser$DeadEnd = F3(function(row, col, problem) {
        return {
            col: col,
            problem: problem,
            row: row
        };
    });
    var $elm$parser$Parser$problemToDeadEnd = function(p) {
        return A3($elm$parser$Parser$DeadEnd, p.row, p.col, p.problem);
    };
    var $elm$parser$Parser$Advanced$bagToList = F2(function(bag, list) {
        bagToList: while(true)switch(bag.$){
            case "Empty":
                return list;
            case "AddRight":
                var bag1 = bag.a;
                var x = bag.b;
                var $temp$bag = bag1, $temp$list = A2($elm$core$List$cons, x, list);
                bag = $temp$bag;
                list = $temp$list;
                continue bagToList;
            default:
                var bag1 = bag.a;
                var bag2 = bag.b;
                var $temp$bag = bag1, $temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
                bag = $temp$bag;
                list = $temp$list;
                continue bagToList;
        }
    });
    var $elm$parser$Parser$Advanced$run = F2(function(_v0, src) {
        var parse = _v0.a;
        var _v1 = parse({
            col: 1,
            context: _List_Nil,
            indent: 1,
            offset: 0,
            row: 1,
            src: src
        });
        if (_v1.$ === "Good") {
            var value = _v1.b;
            return $elm$core$Result$Ok(value);
        } else {
            var bag = _v1.b;
            return $elm$core$Result$Err(A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
        }
    });
    var $elm$parser$Parser$run = F2(function(parser, source) {
        var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
        if (_v0.$ === "Ok") {
            var a = _v0.a;
            return $elm$core$Result$Ok(a);
        } else {
            var problems = _v0.a;
            return $elm$core$Result$Err(A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
        }
    });
    var $elm$parser$Parser$Advanced$Bad = F2(function(a, b) {
        return {
            $: "Bad",
            a: a,
            b: b
        };
    });
    var $elm$parser$Parser$Advanced$Good = F3(function(a, b, c) {
        return {
            $: "Good",
            a: a,
            b: b,
            c: c
        };
    });
    var $elm$parser$Parser$Advanced$Parser = function(a) {
        return {
            $: "Parser",
            a: a
        };
    };
    var $elm$parser$Parser$Advanced$andThen = F2(function(callback, _v0) {
        var parseA = _v0.a;
        return $elm$parser$Parser$Advanced$Parser(function(s0) {
            var _v1 = parseA(s0);
            if (_v1.$ === "Bad") {
                var p = _v1.a;
                var x = _v1.b;
                return A2($elm$parser$Parser$Advanced$Bad, p, x);
            } else {
                var p1 = _v1.a;
                var a = _v1.b;
                var s1 = _v1.c;
                var _v2 = callback(a);
                var parseB = _v2.a;
                var _v3 = parseB(s1);
                if (_v3.$ === "Bad") {
                    var p2 = _v3.a;
                    var x = _v3.b;
                    return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
                } else {
                    var p2 = _v3.a;
                    var b = _v3.b;
                    var s2 = _v3.c;
                    return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
                }
            }
        });
    });
    var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
    var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
    var $elm$parser$Parser$Advanced$chompWhileHelp = F5(function(isGood, offset, row, col, s0) {
        chompWhileHelp: while(true){
            var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.src);
            if (_Utils_eq(newOffset, -1)) return A3($elm$parser$Parser$Advanced$Good, _Utils_cmp(s0.offset, offset) < 0, _Utils_Tuple0, {
                col: col,
                context: s0.context,
                indent: s0.indent,
                offset: offset,
                row: row,
                src: s0.src
            });
            else if (_Utils_eq(newOffset, -2)) {
                var $temp$isGood = isGood, $temp$offset = offset + 1, $temp$row = row + 1, $temp$col = 1, $temp$s0 = s0;
                isGood = $temp$isGood;
                offset = $temp$offset;
                row = $temp$row;
                col = $temp$col;
                s0 = $temp$s0;
                continue chompWhileHelp;
            } else {
                var $temp$isGood = isGood, $temp$offset = newOffset, $temp$row = row, $temp$col = col + 1, $temp$s0 = s0;
                isGood = $temp$isGood;
                offset = $temp$offset;
                row = $temp$row;
                col = $temp$col;
                s0 = $temp$s0;
                continue chompWhileHelp;
            }
        }
    });
    var $elm$parser$Parser$Advanced$chompWhile = function(isGood) {
        return $elm$parser$Parser$Advanced$Parser(function(s) {
            return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.offset, s.row, s.col, s);
        });
    };
    var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
    var $elm$parser$Parser$ExpectingEnd = {
        $: "ExpectingEnd"
    };
    var $elm$parser$Parser$Advanced$AddRight = F2(function(a, b) {
        return {
            $: "AddRight",
            a: a,
            b: b
        };
    });
    var $elm$parser$Parser$Advanced$DeadEnd = F4(function(row, col, problem, contextStack) {
        return {
            col: col,
            contextStack: contextStack,
            problem: problem,
            row: row
        };
    });
    var $elm$parser$Parser$Advanced$Empty = {
        $: "Empty"
    };
    var $elm$parser$Parser$Advanced$fromState = F2(function(s, x) {
        return A2($elm$parser$Parser$Advanced$AddRight, $elm$parser$Parser$Advanced$Empty, A4($elm$parser$Parser$Advanced$DeadEnd, s.row, s.col, x, s.context));
    });
    var $elm$parser$Parser$Advanced$end = function(x) {
        return $elm$parser$Parser$Advanced$Parser(function(s) {
            return _Utils_eq($elm$core$String$length(s.src), s.offset) ? A3($elm$parser$Parser$Advanced$Good, false, _Utils_Tuple0, s) : A2($elm$parser$Parser$Advanced$Bad, false, A2($elm$parser$Parser$Advanced$fromState, s, x));
        });
    };
    var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
    var $elm$parser$Parser$Advanced$mapChompedString = F2(function(func, _v0) {
        var parse = _v0.a;
        return $elm$parser$Parser$Advanced$Parser(function(s0) {
            var _v1 = parse(s0);
            if (_v1.$ === "Bad") {
                var p = _v1.a;
                var x = _v1.b;
                return A2($elm$parser$Parser$Advanced$Bad, p, x);
            } else {
                var p = _v1.a;
                var a = _v1.b;
                var s1 = _v1.c;
                return A3($elm$parser$Parser$Advanced$Good, p, A2(func, A3($elm$core$String$slice, s0.offset, s1.offset, s0.src), a), s1);
            }
        });
    });
    var $elm$parser$Parser$Advanced$getChompedString = function(parser) {
        return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
    };
    var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
    var $elm$parser$Parser$Advanced$map = F2(function(func, _v0) {
        var parse = _v0.a;
        return $elm$parser$Parser$Advanced$Parser(function(s0) {
            var _v1 = parse(s0);
            if (_v1.$ === "Good") {
                var p = _v1.a;
                var a = _v1.b;
                var s1 = _v1.c;
                return A3($elm$parser$Parser$Advanced$Good, p, func(a), s1);
            } else {
                var p = _v1.a;
                var x = _v1.b;
                return A2($elm$parser$Parser$Advanced$Bad, p, x);
            }
        });
    });
    var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
    var $elm$parser$Parser$Problem = function(a) {
        return {
            $: "Problem",
            a: a
        };
    };
    var $elm$parser$Parser$Advanced$problem = function(x) {
        return $elm$parser$Parser$Advanced$Parser(function(s) {
            return A2($elm$parser$Parser$Advanced$Bad, false, A2($elm$parser$Parser$Advanced$fromState, s, x));
        });
    };
    var $elm$parser$Parser$problem = function(msg) {
        return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem(msg));
    };
    var $elm$parser$Parser$Advanced$succeed = function(a) {
        return $elm$parser$Parser$Advanced$Parser(function(s) {
            return A3($elm$parser$Parser$Advanced$Good, false, a, s);
        });
    };
    var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
    var $author$project$Data$Hardware$validXMRAddressParser = A2($elm$parser$Parser$andThen, function(str) {
        return A2($elm$parser$Parser$map, function(_v0) {
            return str;
        }, $elm$parser$Parser$end);
    }, A2($elm$parser$Parser$andThen, function(str) {
        return $elm$core$String$length(str) === 95 ? $elm$parser$Parser$succeed(str) : $elm$parser$Parser$problem("Invalid length");
    }, $elm$parser$Parser$getChompedString($elm$parser$Parser$chompWhile($elm$core$Char$isAlphaNum))));
    var $author$project$Main$isValidXMRAddress = function(str) {
        var _v0 = A2($elm$parser$Parser$run, $author$project$Data$Hardware$validXMRAddressParser, str);
        if (_v0.$ === "Ok") return true;
        else return false;
    };
    var $author$project$Main$OperationEventMsg = function(operationEventMsg) {
        return {
            operationEventMsg: operationEventMsg
        };
    };
    var $author$project$Main$justmsgFieldFromJsonDecoder = A2($elm$json$Json$Decode$map, $author$project$Main$OperationEventMsg, A2($elm$json$Json$Decode$field, "operationEventMsg", $elm$json$Json$Decode$string));
    var $elm$browser$Browser$Navigation$load = _Browser_load;
    var $elm$core$Debug$log = _Debug_log;
    var $author$project$Main$pageToUrlPath = function(page) {
        switch(page.$){
            case "HardwarePage":
                return "/hardware";
            case "DashboardPage":
                return "/dashboard";
            default:
                return "/";
        }
    };
    var $elm$browser$Browser$Navigation$pushUrl = _Browser_pushUrl;
    var $author$project$Main$sendMessageToJs = _Platform_outgoingPort("sendMessageToJs", $elm$json$Json$Encode$string);
    var $author$project$Pages$Blank$update = F2(function(msg, model) {
        var newModel = msg.a;
        return _Utils_Tuple2(_Utils_update(newModel, {
            title: model.title
        }), $elm$core$Platform$Cmd$none);
    });
    var $author$project$Pages$Buy$update = F2(function(msg, model) {
        var newModel = msg.a;
        return _Utils_Tuple2(_Utils_update(newModel, {
            title: model.title
        }), $elm$core$Platform$Cmd$none);
    });
    var $author$project$Pages$Dashboard$HavenoAPKHttpRequest = F6(function(method, headers, url, body, timeout, tracker) {
        return {
            body: body,
            headers: headers,
            method: method,
            timeout: timeout,
            tracker: tracker,
            url: url
        };
    });
    var $elm$http$Http$emptyBody = _Http_emptyBody;
    var $author$project$Extras$Constants$get = "GET";
    var $author$project$Extras$Constants$httpErrorToString = function(err) {
        switch(err.$){
            case "BadUrl":
                var url = err.a;
                return "Bad URL: " + url;
            case "Timeout":
                return "Request timed out";
            case "NetworkError":
                return "Network error occurred";
            case "BadStatus":
                var status = err.a;
                return "Bad status: " + $elm$core$String$fromInt(status);
            default:
                var body = err.a;
                return "Bad body: " + body;
        }
    };
    var $author$project$Pages$Dashboard$update = F2(function(msg, model) {
        switch(msg.$){
            case "GotVersion":
                if (msg.a.$ === "Ok") {
                    var versionResp = msg.a.a;
                    return _Utils_Tuple2(_Utils_update(model, {
                        version: $elm$core$Maybe$Just(versionResp)
                    }), $elm$core$Platform$Cmd$none);
                } else return _Utils_Tuple2(_Utils_update(model, {
                    version: model.version
                }), $elm$core$Platform$Cmd$none);
            case "GotInitialModel":
                var newModel = msg.a;
                return _Utils_Tuple2(_Utils_update(newModel, {
                    pagetitle: model.pagetitle
                }), $elm$core$Platform$Cmd$none);
            default:
                if (msg.a.$ === "Ok") {
                    var auth = msg.a.a;
                    var headers = _List_fromArray([
                        A2($elm$http$Http$header, "Authorization", "Bearer " + A2($elm$core$Maybe$withDefault, "No access token 2", $elm$core$Maybe$Just(auth.deployment_model)))
                    ]);
                    var flagUrlWithMongoDBMWAndPortUpdate = A2($elm$core$String$contains, $author$project$Extras$Constants$localorproductionServerAutoCheck, model.flagUrl.host) ? $elm$url$Url$toString(A6($elm$url$Url$Url, model.flagUrl.protocol, model.flagUrl.host, $elm$core$Maybe$Nothing, $author$project$Extras$Constants$middleWarePath, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing)) : $elm$url$Url$toString(A6($elm$url$Url$Url, model.flagUrl.protocol, model.flagUrl.host, $elm$core$Maybe$Just(3000), $author$project$Extras$Constants$middleWarePath, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing));
                    var newHttpParams = A6($author$project$Pages$Dashboard$HavenoAPKHttpRequest, $author$project$Extras$Constants$get, headers, flagUrlWithMongoDBMWAndPortUpdate, $elm$http$Http$emptyBody, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing);
                    var newModel = _Utils_update(model, {
                        havenoAPKHttpRequest: $elm$core$Maybe$Just(newHttpParams)
                    });
                    return _Utils_Tuple2(newModel, $elm$core$Platform$Cmd$none);
                } else {
                    var responseErr = msg.a.a;
                    var respErr = $author$project$Extras$Constants$httpErrorToString(responseErr);
                    return _Utils_Tuple2(_Utils_update(model, {
                        errors: _Utils_ap(model.errors, _List_fromArray([
                            respErr
                        ]))
                    }), $elm$core$Platform$Cmd$none);
                }
        }
    });
    var $author$project$Pages$Funds$update = F2(function(msg, model) {
        var newModel = msg.a;
        return _Utils_Tuple2(_Utils_update(newModel, {
            title: model.title
        }), $elm$core$Platform$Cmd$none);
    });
    var $author$project$Pages$Hardware$ConfirmDeleteOwnedRanking = {
        $: "ConfirmDeleteOwnedRanking"
    };
    var $author$project$Pages$Hardware$ConfirmDeleteUserView = {
        $: "ConfirmDeleteUserView"
    };
    var $author$project$Pages$Hardware$ConfirmJoinMemberView = {
        $: "ConfirmJoinMemberView"
    };
    var $author$project$Pages$Hardware$ConfirmLeaveMemberView = {
        $: "ConfirmLeaveMemberView"
    };
    var $author$project$Types$DateType$CurrentDateTime = F2(function(a, b) {
        return {
            $: "CurrentDateTime",
            a: a,
            b: b
        };
    });
    var $author$project$Pages$Hardware$Login = function(a) {
        return {
            $: "Login",
            a: a
        };
    };
    var $author$project$Pages$Hardware$MemberSelectedView = {
        $: "MemberSelectedView"
    };
    var $author$project$Pages$Hardware$OwnedSelectedView = {
        $: "OwnedSelectedView"
    };
    var $author$project$Data$Hardware$Rank = F3(function(rank, player, challenger) {
        return {
            challenger: challenger,
            player: player,
            rank: rank
        };
    });
    var $author$project$Pages$Hardware$RegisterUser = function(a) {
        return {
            $: "RegisterUser",
            a: a
        };
    };
    var $author$project$Types$DateType$SelectedDateTime = F2(function(a, b) {
        return {
            $: "SelectedDateTime",
            a: a,
            b: b
        };
    });
    var $author$project$Pages$Hardware$SpectatorSelectedView = {
        $: "SpectatorSelectedView"
    };
    var $author$project$Pages$Hardware$ToMongoDBMWConfig = F6(function(method, headers, url, body, timeout, tracker) {
        return {
            body: body,
            headers: headers,
            method: method,
            timeout: timeout,
            tracker: tracker,
            url: url
        };
    });
    var $author$project$Pages$Hardware$UpdateComment = function(a) {
        return {
            $: "UpdateComment",
            a: a
        };
    };
    var $author$project$Pages$Hardware$UpdateLevel = function(a) {
        return {
            $: "UpdateLevel",
            a: a
        };
    };
    var $author$project$Pages$Hardware$UpdateMobile = function(a) {
        return {
            $: "UpdateMobile",
            a: a
        };
    };
    var $author$project$Pages$Hardware$UpdateNickName = function(a) {
        return {
            $: "UpdateNickName",
            a: a
        };
    };
    var $author$project$Pages$Hardware$UpdatePhone = function(a) {
        return {
            $: "UpdatePhone",
            a: a
        };
    };
    var $author$project$Extras$Constants$emptyEmailPassword = {
        email: "",
        password: ""
    };
    var $author$project$Data$Hardware$emptyRank = {
        challenger: {
            id: "String",
            nickname: "String"
        },
        player: {
            id: "String",
            nickname: "String"
        },
        rank: 0
    };
    var $author$project$Data$Hardware$emptyRanking = {
        active: false,
        baseaddress: {
            city: "",
            street: ""
        },
        id: "",
        ladder: _List_fromArray([
            $author$project$Data$Hardware$emptyRank
        ]),
        name: "",
        owner_id: "",
        owner_name: "",
        player_count: 0
    };
    var $author$project$Pages$Hardware$isValidXMRAddress = function(str) {
        var _v0 = A2($elm$parser$Parser$run, $author$project$Data$Hardware$validXMRAddressParser, str);
        if (_v0.$ === "Ok") return true;
        else return false;
    };
    var $author$project$Pages$Hardware$OperationEventMsg = function(operationEventMsg) {
        return {
            operationEventMsg: operationEventMsg
        };
    };
    var $author$project$Pages$Hardware$justmsgFieldFromJsonDecoder = A2($elm$json$Json$Decode$map, $author$project$Pages$Hardware$OperationEventMsg, A2($elm$json$Json$Decode$field, "operationEventMsg", $elm$json$Json$Decode$string));
    var $author$project$Extras$Constants$noCurrentChallengerId = "6353e8b6aedf80653eb34191";
    var $author$project$Pages$Hardware$ProfileResponse = function(a) {
        return {
            $: "ProfileResponse",
            a: a
        };
    };
    var $elm$http$Http$expectStringResponse = F2(function(toMsg, toResult) {
        return A3(_Http_expect, "", $elm$core$Basics$identity, A2($elm$core$Basics$composeR, toResult, toMsg));
    });
    var $elm$core$Result$mapError = F2(function(f, result) {
        if (result.$ === "Ok") {
            var v = result.a;
            return $elm$core$Result$Ok(v);
        } else {
            var e = result.a;
            return $elm$core$Result$Err(f(e));
        }
    });
    var $elm$http$Http$BadBody = function(a) {
        return {
            $: "BadBody",
            a: a
        };
    };
    var $elm$http$Http$BadStatus = function(a) {
        return {
            $: "BadStatus",
            a: a
        };
    };
    var $elm$http$Http$BadUrl = function(a) {
        return {
            $: "BadUrl",
            a: a
        };
    };
    var $elm$http$Http$NetworkError = {
        $: "NetworkError"
    };
    var $elm$http$Http$Timeout = {
        $: "Timeout"
    };
    var $elm$http$Http$resolve = F2(function(toResult, response) {
        switch(response.$){
            case "BadUrl_":
                var url = response.a;
                return $elm$core$Result$Err($elm$http$Http$BadUrl(url));
            case "Timeout_":
                return $elm$core$Result$Err($elm$http$Http$Timeout);
            case "NetworkError_":
                return $elm$core$Result$Err($elm$http$Http$NetworkError);
            case "BadStatus_":
                var metadata = response.a;
                return $elm$core$Result$Err($elm$http$Http$BadStatus(metadata.statusCode));
            default:
                var body = response.b;
                return A2($elm$core$Result$mapError, $elm$http$Http$BadBody, toResult(body));
        }
    });
    var $elm$http$Http$expectJson = F2(function(toMsg, decoder) {
        return A2($elm$http$Http$expectStringResponse, toMsg, $elm$http$Http$resolve(function(string) {
            return A2($elm$core$Result$mapError, $elm$json$Json$Decode$errorToString, A2($elm$json$Json$Decode$decodeString, decoder, string));
        }));
    });
    var $author$project$Pages$Hardware$SuccessfullProfileResult = F5(function(user_id, domain_id, identities, data, typeOfData) {
        return {
            data: data,
            domain_id: domain_id,
            identities: identities,
            typeOfData: typeOfData,
            user_id: user_id
        };
    });
    var $author$project$Pages$Hardware$Identities = F4(function(id, provider_type, provider_id, provider_data) {
        return {
            id: id,
            provider_data: provider_data,
            provider_id: provider_id,
            provider_type: provider_type
        };
    });
    var $elm$json$Json$Decode$map4 = _Json_map4;
    var $author$project$Pages$Hardware$ProviderData = function(email) {
        return {
            email: email
        };
    };
    var $author$project$Pages$Hardware$providerDataDecoder = A2($elm$json$Json$Decode$map, $author$project$Pages$Hardware$ProviderData, A2($elm$json$Json$Decode$field, "email", $elm$json$Json$Decode$string));
    var $author$project$Pages$Hardware$identitiesDecoder = $elm$json$Json$Decode$list(A5($elm$json$Json$Decode$map4, $author$project$Pages$Hardware$Identities, A2($elm$json$Json$Decode$field, "id", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "provider_type", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "provider_id", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "provider_data", $author$project$Pages$Hardware$providerDataDecoder)));
    var $author$project$Pages$Hardware$profileDecoder = A6($elm$json$Json$Decode$map5, $author$project$Pages$Hardware$SuccessfullProfileResult, A2($elm$json$Json$Decode$field, "user_id", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "domain_id", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "identities", $author$project$Pages$Hardware$identitiesDecoder), A2($elm$json$Json$Decode$field, "data", $author$project$Pages$Hardware$providerDataDecoder), A2($elm$json$Json$Decode$field, "type", $elm$json$Json$Decode$string));
    var $author$project$Pages$Hardware$profileRequest = function(model) {
        var headers = _List_fromArray([
            A2($elm$http$Http$header, "Authorization", "Bearer " + A2($elm$core$Maybe$withDefault, "No access token ", model.apiSpecifics.accessToken))
        ]);
        var therequest = $elm$http$Http$request({
            body: $elm$http$Http$emptyBody,
            expect: A2($elm$http$Http$expectJson, $author$project$Pages$Hardware$ProfileResponse, $author$project$Pages$Hardware$profileDecoder),
            headers: headers,
            method: "GET",
            timeout: $elm$core$Maybe$Nothing,
            tracker: $elm$core$Maybe$Nothing,
            url: "https://ap-southeast-1.aws.realm.mongodb.com/api/client/v2.0/auth/profile"
        });
        return therequest;
    };
    var $author$project$Pages$Hardware$Error = function(a) {
        return {
            $: "Error",
            a: a
        };
    };
    var $author$project$Data$User$Female = {
        $: "Female"
    };
    var $author$project$Pages$Hardware$validateName = function(nme) {
        var pattern = $elm$regex$Regex$fromString("^[a-zA-Z\\s]+$");
        if (nme.$ === "Just") {
            var name = nme.a;
            if ($elm$core$String$length(name) >= 3 && $elm$core$String$length(name) <= 30) {
                if (pattern.$ === "Just") {
                    var patn = pattern.a;
                    return A2($elm$regex$Regex$contains, patn, name) ? $elm$core$Result$Ok(name) : $elm$core$Result$Err("Name can only contain alphabetic characters");
                } else return $elm$core$Result$Err("Name can only contain alphabetic characters");
            } else {
                if ($elm$core$String$isEmpty(name)) return $elm$core$Result$Err("Name cannot be empty");
                else {
                    if ($elm$core$String$length(name) < 3) return $elm$core$Result$Err("Name must have at least 3 characters");
                    else return $elm$core$Result$Err("Name cannot exceed 30 characters");
                }
            }
        } else return $elm$core$Result$Err("Name ");
    };
    var $author$project$Pages$Hardware$updateNewUserRegistrationFormField = F3(function(msg, queryType, model) {
        var newUserDetails = function() {
            if (queryType.$ === "RegisterUser") {
                var userDetails = queryType.a;
                switch(msg.$){
                    case "UpdateNickName":
                        var nme = msg.a;
                        var newname = nme === "" ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(nme);
                        var vldResult = function() {
                            var _v3 = $author$project$Pages$Hardware$validateName(newname);
                            if (_v3.$ === "Ok") return "";
                            else {
                                var err = _v3.a;
                                return err;
                            }
                        }();
                        return _Utils_update(userDetails, {
                            nameValidationError: vldResult,
                            nickname: nme
                        });
                    case "UpdateAge":
                        var age = msg.a;
                        return _Utils_update(userDetails, {
                            age: age
                        });
                    case "UpdateGender":
                        var value = msg.a;
                        var newValue = function() {
                            switch(value){
                                case "Male":
                                    return $author$project$Data$User$Male;
                                case "Female":
                                    return $author$project$Data$User$Female;
                                default:
                                    return $author$project$Data$User$Male;
                            }
                        }();
                        return _Utils_update(userDetails, {
                            gender: newValue
                        });
                    case "UpdateLevel":
                        var value = msg.a;
                        var desc = userDetails.description;
                        var newDesc = _Utils_update(desc, {
                            level: value
                        });
                        return _Utils_update(userDetails, {
                            description: newDesc
                        });
                    case "UpdateComment":
                        var value = msg.a;
                        var desc = userDetails.description;
                        var newDesc = _Utils_update(desc, {
                            comment: value
                        });
                        return _Utils_update(userDetails, {
                            description: newDesc
                        });
                    case "UpdateMobile":
                        var value = msg.a;
                        return _Utils_update(userDetails, {
                            mobile: $elm$core$Maybe$Just(value)
                        });
                    case "AddInfoInput":
                        var value = msg.a;
                        return _Utils_update(userDetails, {
                            addInfo: value
                        });
                    default:
                        return userDetails;
                }
            } else return $author$project$Data$User$emptyUserInfo;
        }();
        var newLoginOrRegistration = function() {
            if (queryType.$ === "RegisterUser") return $author$project$Pages$Hardware$RegisterUser(newUserDetails);
            else return $author$project$Pages$Hardware$Error("newLoginOrRegistration err");
        }();
        return _Utils_update(model, {
            queryType: newLoginOrRegistration
        });
    });
    var $elm$time$Time$utc = A2($elm$time$Time$Zone, 0, _List_Nil);
    var $author$project$Pages$Hardware$update = F2(function(msg, model) {
        switch(msg.$){
            case "NoOp":
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "CancelDialoguePrepareResultView":
                return _Utils_Tuple2(_Utils_update(model, {
                    queryType: $author$project$Pages$Hardware$MemberSelectedView
                }), $elm$core$Platform$Cmd$none);
            case "DialogueConfirmDeleteAccount":
                return _Utils_Tuple2(_Utils_update(model, {
                    queryType: $author$project$Pages$Hardware$ConfirmDeleteUserView
                }), $elm$core$Platform$Cmd$none);
            case "DeleteAccount":
                return _Utils_Tuple2(_Utils_update(model, {
                    queryType: $author$project$Pages$Hardware$Login($author$project$Extras$Constants$emptyEmailPassword)
                }), $elm$core$Platform$Cmd$none);
            case "ConfirmLeaveMemberRanking":
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "RegisteredUserJoin":
                return _Utils_Tuple2(_Utils_update(model, {
                    queryType: $author$project$Pages$Hardware$LoggedInUser
                }), $elm$core$Platform$Cmd$none);
            case "DialogueConfirmJoinView":
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "DialogueConfirmLeaveView":
                return _Utils_Tuple2(_Utils_update(model, {
                    queryType: $author$project$Pages$Hardware$ConfirmLeaveMemberView
                }), $elm$core$Platform$Cmd$none);
            case "ConfirmJoin":
                return _Utils_Tuple2(_Utils_update(model, {
                    queryType: $author$project$Pages$Hardware$SpectatorSelectedView
                }), $elm$core$Platform$Cmd$none);
            case "SpectatorJoin":
                var _v1 = model.user;
                if (_v1.$ === "Registered") {
                    var userInfo = _v1.a;
                    return _Utils_Tuple2(_Utils_update(model, {
                        queryType: $author$project$Pages$Hardware$ConfirmJoinMemberView
                    }), $elm$core$Platform$Cmd$none);
                } else return _Utils_Tuple2(_Utils_update(model, {
                    queryType: $author$project$Pages$Hardware$RegisterUser($author$project$Data$User$emptyUserInfo)
                }), $elm$core$Platform$Cmd$none);
            case "CancelRegistration":
                return _Utils_Tuple2(_Utils_update(model, {
                    queryType: $author$project$Pages$Hardware$Login($author$project$Extras$Constants$emptyEmailPassword)
                }), $elm$core$Platform$Cmd$none);
            case "ConfirmChallenge":
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "ConfirmResult":
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "ViewRank":
                var rank = msg.a;
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "CancelCreateNewRanking":
                return _Utils_Tuple2(_Utils_update(model, {
                    queryType: $author$project$Pages$Hardware$LoggedInUser
                }), $elm$core$Platform$Cmd$none);
            case "CancelFetchedMember":
                return _Utils_Tuple2(_Utils_update(model, {
                    queryType: $author$project$Pages$Hardware$LoggedInUser
                }), $elm$core$Platform$Cmd$none);
            case "CancelFetchedOwned":
                return _Utils_Tuple2(_Utils_update(model, {
                    queryType: $author$project$Pages$Hardware$LoggedInUser
                }), $elm$core$Platform$Cmd$none);
            case "CancelFetchedSpectator":
                return _Utils_Tuple2(_Utils_update(model, {
                    queryType: $author$project$Pages$Hardware$LoggedInUser
                }), $elm$core$Platform$Cmd$none);
            case "DeleteOwnedRanking":
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "DialogDeleteOwnedRanking":
                return _Utils_Tuple2(_Utils_update(model, {
                    queryType: $author$project$Pages$Hardware$ConfirmDeleteOwnedRanking
                }), $elm$core$Platform$Cmd$none);
            case "RankingNameChg":
                var value = msg.a;
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "StreetAddressChg":
                var value = msg.a;
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "CityAddressChg":
                var value = msg.a;
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "CreateNewRanking":
                var userInfo = msg.a;
                var newRanking = $author$project$Data$Hardware$emptyRanking;
                var newRank = A3($author$project$Data$Hardware$Rank, 1, {
                    id: userInfo.userid,
                    nickname: userInfo.nickname
                }, {
                    id: $author$project$Extras$Constants$noCurrentChallengerId,
                    nickname: "Challenger"
                });
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "ViewMember":
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "FetchMember":
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "ListSpectator":
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "FetchOwned":
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "ResponseDataFromMain":
                var receivedJson = msg.a;
                var decodedHardwareDeviceMsg = function() {
                    var _v2 = A2($elm$json$Json$Decode$decodeValue, $author$project$Pages$Hardware$justmsgFieldFromJsonDecoder, receivedJson);
                    if (_v2.$ === "Ok") {
                        var message = _v2.a;
                        return message.operationEventMsg;
                    } else {
                        var err = _v2.a;
                        return "error in decodedHardwareDeviceMsg";
                    }
                }();
                var updatedIsLNSConnected = decodedHardwareDeviceMsg === "nanoS" ? true : false;
                var updatedIsLNXConnected = decodedHardwareDeviceMsg === "nanoX" ? true : false;
                var updatedIsXMRConnected = $author$project$Pages$Hardware$isValidXMRAddress(decodedHardwareDeviceMsg) ? true : false;
                return _Utils_Tuple2(_Utils_update(model, {
                    isHardwareLNSConnected: updatedIsLNSConnected,
                    isHardwareLNXConnected: updatedIsLNXConnected,
                    isXMRWalletConnected: updatedIsXMRConnected,
                    xmrWalletAddress: decodedHardwareDeviceMsg
                }), $elm$core$Platform$Cmd$none);
            case "Confirm":
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "ConfirmNewRanking":
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "Cancel":
                return _Utils_Tuple2(function() {
                    var _v3 = model.queryType;
                    switch(_v3.$){
                        case "ConfirmDeleteOwnedRanking":
                            return _Utils_update(model, {
                                queryType: $author$project$Pages$Hardware$OwnedSelectedView
                            });
                        case "ConfirmChallengeView":
                            return _Utils_update(model, {
                                queryType: $author$project$Pages$Hardware$MemberSelectedView
                            });
                        case "CreateChallengeView":
                            return _Utils_update(model, {
                                queryType: $author$project$Pages$Hardware$LoggedInUser
                            });
                        default:
                            return _Utils_update(model, {
                                queryType: $author$project$Pages$Hardware$Login($author$project$Extras$Constants$emptyEmailPassword)
                            });
                    }
                }(), $elm$core$Platform$Cmd$none);
            case "LogOut":
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "ClickedHardwareDeviceConnect":
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "ClickedXMRWalletConnect":
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "ClickedXMRInitiateTransaction":
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "RegisUser":
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "Create":
                return _Utils_Tuple2(_Utils_update(model, {
                    queryType: $author$project$Pages$Hardware$RegisterUser($author$project$Data$User$emptyUserInfo)
                }), $elm$core$Platform$Cmd$none);
            case "ToggleReturnUser":
                return _Utils_Tuple2(_Utils_update(model, {
                    isReturnUser: !model.isReturnUser
                }), $elm$core$Platform$Cmd$none);
            case "SelDateTime":
                var selectedHour = msg.a;
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "InputFocused":
                var inputElement = msg.a;
                var _v4 = model.queryType;
                if (_v4.$ === "RegisterUser") {
                    var bkaapt = _v4.a;
                    var newApiSpecs = model.apiSpecifics;
                    return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                } else return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "InputBlurred":
                var inputElement = msg.a;
                var _v5 = model.queryType;
                if (_v5.$ === "RegisterUser") {
                    var bkaapt = _v5.a;
                    var newApiSpecs = model.apiSpecifics;
                    return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                } else return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "Tick":
                var newTime = msg.a;
                var dateTimeOnlyUpdatedIfNotSelected = function() {
                    var _v6 = model.datetimeFromMain;
                    if (_v6.$ === "Just") {
                        if (_v6.a.$ === "CurrentDateTime") {
                            var _v7 = _v6.a;
                            return $elm$core$Maybe$Just(A2($author$project$Types$DateType$CurrentDateTime, newTime, $elm$time$Time$utc));
                        } else {
                            var _v8 = _v6.a;
                            var dt = _v8.a;
                            var zone = _v8.b;
                            return $elm$core$Maybe$Just(A2($author$project$Types$DateType$SelectedDateTime, dt, zone));
                        }
                    } else return $elm$core$Maybe$Just(A2($author$project$Types$DateType$CurrentDateTime, newTime, $elm$time$Time$utc));
                }();
                return _Utils_Tuple2(_Utils_update(model, {
                    datetimeFromMain: dateTimeOnlyUpdatedIfNotSelected
                }), $elm$core$Platform$Cmd$none);
            case "DismissErrors":
                return _Utils_Tuple2(_Utils_update(model, {
                    errors: _List_Nil
                }), $elm$core$Platform$Cmd$none);
            case "ProfileResponse":
                if (msg.a.$ === "Ok") {
                    var auth = msg.a.a;
                    var newModel = _Utils_update(model, {
                        isValidNewAccessToken: true
                    });
                    var headers = _List_fromArray([
                        A2($elm$http$Http$header, "Authorization", "Bearer " + A2($elm$core$Maybe$withDefault, "No access token 2", $elm$core$Maybe$Just(auth.typeOfData)))
                    ]);
                    var flagUrlWithMongoDBMWAndPortUpdate = A2($elm$core$String$contains, $author$project$Extras$Constants$localorproductionServerAutoCheck, model.flagUrl.host) ? $elm$url$Url$toString(A6($elm$url$Url$Url, model.flagUrl.protocol, model.flagUrl.host, $elm$core$Maybe$Nothing, $author$project$Extras$Constants$middleWarePath, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing)) : $elm$url$Url$toString(A6($elm$url$Url$Url, model.flagUrl.protocol, model.flagUrl.host, $elm$core$Maybe$Just(3000), $author$project$Extras$Constants$middleWarePath, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing));
                    var newHttpParams = A6($author$project$Pages$Hardware$ToMongoDBMWConfig, $author$project$Extras$Constants$get, headers, flagUrlWithMongoDBMWAndPortUpdate, $elm$http$Http$emptyBody, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing);
                    var apiSpecs = model.apiSpecifics;
                    return _Utils_Tuple2(newModel, $elm$core$Platform$Cmd$none);
                } else {
                    var responseErr = msg.a.a;
                    var respErr = $author$project$Extras$Constants$httpErrorToString(responseErr);
                    var apiSpecs = model.apiSpecifics;
                    var newapiSpecs = _Utils_update(apiSpecs, {
                        accessToken: $elm$core$Maybe$Nothing
                    });
                    return _Utils_Tuple2(_Utils_update(model, {
                        apiSpecifics: newapiSpecs,
                        errors: _Utils_ap(model.errors, _List_fromArray([
                            respErr
                        ])),
                        isValidNewAccessToken: false
                    }), $elm$core$Platform$Cmd$none);
                }
            case "LNSConnectResponse":
                if (msg.a.$ === "Ok") {
                    var auth = msg.a.a;
                    var newModel = _Utils_update(model, {
                        queryType: $author$project$Pages$Hardware$LoggedInUser
                    });
                    var headers = _List_Nil;
                    var flagUrlWithMongoDBMWAndPortUpdate = A2($elm$core$String$contains, $author$project$Extras$Constants$localorproductionServerAutoCheck, model.flagUrl.host) ? $elm$url$Url$toString(A6($elm$url$Url$Url, model.flagUrl.protocol, model.flagUrl.host, $elm$core$Maybe$Nothing, $author$project$Extras$Constants$middleWarePath, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing)) : $elm$url$Url$toString(A6($elm$url$Url$Url, model.flagUrl.protocol, model.flagUrl.host, $elm$core$Maybe$Just(3000), $author$project$Extras$Constants$middleWarePath, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing));
                    var newHttpParams = A6($author$project$Pages$Hardware$ToMongoDBMWConfig, $author$project$Extras$Constants$get, headers, flagUrlWithMongoDBMWAndPortUpdate, $elm$http$Http$emptyBody, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing);
                    var apiSpecs = model.apiSpecifics;
                    return _Utils_Tuple2(newModel, $elm$core$Platform$Cmd$none);
                } else {
                    var responseErr = msg.a.a;
                    var respErr = $author$project$Extras$Constants$httpErrorToString(responseErr);
                    var apiSpecs = model.apiSpecifics;
                    var newapiSpecs = _Utils_update(apiSpecs, {
                        accessToken: $elm$core$Maybe$Nothing
                    });
                    return _Utils_Tuple2(_Utils_update(model, {
                        apiSpecifics: newapiSpecs,
                        errors: _Utils_ap(model.errors, _List_fromArray([
                            respErr
                        ])),
                        isValidNewAccessToken: false
                    }), $elm$core$Platform$Cmd$none);
                }
            case "BookingForm":
                var separatePosixDateandTimeCombined = msg.a;
                var apiSpecs = model.apiSpecifics;
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "LoginResponse":
                if (msg.a.$ === "Ok") {
                    var auth = msg.a.a;
                    var headers = _List_fromArray([
                        A2($elm$http$Http$header, "Authorization", "Bearer " + A2($elm$core$Maybe$withDefault, "No access token 2", $elm$core$Maybe$Just(auth.access_token)))
                    ]);
                    var flagUrlWithMongoDBMWAndPortUpdate = A2($elm$core$String$contains, $author$project$Extras$Constants$localorproductionServerAutoCheck, model.flagUrl.host) ? $elm$url$Url$toString(A6($elm$url$Url$Url, model.flagUrl.protocol, model.flagUrl.host, $elm$core$Maybe$Nothing, $author$project$Extras$Constants$middleWarePath, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing)) : $elm$url$Url$toString(A6($elm$url$Url$Url, model.flagUrl.protocol, model.flagUrl.host, $elm$core$Maybe$Just(3000), $author$project$Extras$Constants$middleWarePath, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing));
                    var newHttpParams = A6($author$project$Pages$Hardware$ToMongoDBMWConfig, $author$project$Extras$Constants$get, headers, flagUrlWithMongoDBMWAndPortUpdate, $elm$http$Http$emptyBody, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing);
                    var apiSpecs = model.apiSpecifics;
                    var newModel = _Utils_update(model, {
                        apiSpecifics: _Utils_update(apiSpecs, {
                            accessToken: $elm$core$Maybe$Just(auth.access_token)
                        }),
                        isValidNewAccessToken: true,
                        queryType: $author$project$Pages$Hardware$LoggedInUser
                    });
                    return _Utils_Tuple2(newModel, $author$project$Pages$Hardware$profileRequest(newModel));
                } else {
                    var responseErr = msg.a.a;
                    var newFailedErr = function() {
                        if (responseErr.$ === "BadStatus" && responseErr.a === 401) return "Login Denied - Please try again ...";
                        else return "Login Denied - Please try again ...";
                    }();
                    var newModel = _Utils_update(model, {
                        errors: _List_fromArray([
                            newFailedErr
                        ])
                    });
                    return _Utils_Tuple2(newModel, $elm$core$Platform$Cmd$none);
                }
            case "SpectatorRankingResponse":
                if (msg.a.$ === "Ok") {
                    var specRankingResult = msg.a.a;
                    return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                } else {
                    var responseErr = msg.a.a;
                    return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                }
            case "UpdateNickName":
                var value = msg.a;
                var newModel = A3($author$project$Pages$Hardware$updateNewUserRegistrationFormField, $author$project$Pages$Hardware$UpdateNickName(value), model.queryType, model);
                return _Utils_Tuple2(_Utils_update(newModel, {
                    errors: _List_fromArray([
                        ""
                    ])
                }), $elm$core$Platform$Cmd$none);
            case "UpdateAge":
                var value = msg.a;
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "UpdateGender":
                var value = msg.a;
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "UpdateLevel":
                var lvel = msg.a;
                return _Utils_Tuple2(A3($author$project$Pages$Hardware$updateNewUserRegistrationFormField, $author$project$Pages$Hardware$UpdateLevel(lvel), model.queryType, model), $elm$core$Platform$Cmd$none);
            case "UpdateComment":
                var comment = msg.a;
                return _Utils_Tuple2(A3($author$project$Pages$Hardware$updateNewUserRegistrationFormField, $author$project$Pages$Hardware$UpdateComment(comment), model.queryType, model), $elm$core$Platform$Cmd$none);
            case "UpdateMobile":
                var mobile = msg.a;
                return _Utils_Tuple2(A3($author$project$Pages$Hardware$updateNewUserRegistrationFormField, $author$project$Pages$Hardware$UpdateMobile(mobile), model.queryType, model), $elm$core$Platform$Cmd$none);
            case "UpdatePhone":
                var phone = msg.a;
                return _Utils_Tuple2(A3($author$project$Pages$Hardware$updateNewUserRegistrationFormField, $author$project$Pages$Hardware$UpdatePhone(phone), model.queryType, model), $elm$core$Platform$Cmd$none);
            case "CondoNameInput":
                var value = msg.a;
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "CondoAddressInput":
                var value = msg.a;
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "AddInfoInput":
                var value = msg.a;
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "FetchSpectatorRanking":
                var rankingId = msg.a;
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            default:
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
        }
    });
    var $author$project$Pages$Market$update = F2(function(msg, model) {
        var newModel = msg.a;
        return _Utils_Tuple2(_Utils_update(newModel, {
            title: model.title
        }), $elm$core$Platform$Cmd$none);
    });
    var $author$project$Pages$Portfolio$update = F2(function(msg, model) {
        var newModel = msg.a;
        return _Utils_Tuple2(_Utils_update(newModel, {
            title: model.title
        }), $elm$core$Platform$Cmd$none);
    });
    var $author$project$Pages$Sell$update = F2(function(msg, model) {
        var newModel = msg.a;
        return _Utils_Tuple2(_Utils_update(newModel, {
            title: model.title
        }), $elm$core$Platform$Cmd$none);
    });
    var $author$project$Pages$Support$update = F2(function(msg, model) {
        var newModel = msg.a;
        return _Utils_Tuple2(_Utils_update(newModel, {
            title: model.title
        }), $elm$core$Platform$Cmd$none);
    });
    var $author$project$Main$update = F2(function(msg, model) {
        switch(msg.$){
            case "NavigateTo":
                var newpage = msg.a;
                var newUrl = A6($elm$url$Url$Url, $elm$url$Url$Http, "localhost", $elm$core$Maybe$Just(1234), $author$project$Main$pageToUrlPath(newpage), $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing);
                return _Utils_Tuple2(_Utils_update(model, {
                    page: newpage
                }), A2($elm$browser$Browser$Navigation$pushUrl, model.key, $author$project$Main$pageToUrlPath(newpage)));
            case "GotVersion":
                if (msg.a.$ === "Ok") {
                    var versionResp = msg.a.a;
                    return _Utils_Tuple2(_Utils_update(model, {
                        version: $elm$core$Maybe$Just(versionResp)
                    }), $elm$core$Platform$Cmd$none);
                } else return _Utils_Tuple2(_Utils_update(model, {
                    version: model.version
                }), $elm$core$Platform$Cmd$none);
            case "ShowPopUp":
                return _Utils_Tuple2(_Utils_update(model, {
                    isPopUpVisible: true
                }), $elm$core$Platform$Cmd$none);
            case "HidePopUp":
                return _Utils_Tuple2(_Utils_update(model, {
                    isNavMenuActive: true,
                    isPopUpVisible: false,
                    page: $author$project$Main$HardwarePage($author$project$Pages$Hardware$initialModel)
                }), $elm$core$Platform$Cmd$none);
            case "HardwareDeviceConnect":
                return _Utils_Tuple2(model, $author$project$Main$sendMessageToJs("connectLNS"));
            case "RecvText":
                var textMessageFromJs = msg.a;
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "Recv":
                var rawJsonMessage = msg.a;
                if (A2($elm$core$String$contains, "Problem", $author$project$Main$fromJsonToString(rawJsonMessage))) return _Utils_Tuple2(_Utils_update(model, {
                    errors: _Utils_ap(model.errors, _List_fromArray([
                        "Problem fetching data"
                    ]))
                }), $elm$core$Platform$Cmd$none);
                else {
                    if (A2($elm$core$String$contains, "LOGINDENIED", $author$project$Main$fromJsonToString(rawJsonMessage))) return _Utils_Tuple2(_Utils_update(model, {
                        errors: _Utils_ap(model.errors, _List_fromArray([
                            "Login Denied - Please try again ..."
                        ]))
                    }), $elm$core$Platform$Cmd$none);
                    else {
                        var _v1 = model.page;
                        switch(_v1.$){
                            case "DashboardPage":
                                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                            case "SellPage":
                                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                            case "BlankPage":
                                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                            case "PortfolioPage":
                                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                            case "FundsPage":
                                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                            case "SupportPage":
                                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                            case "BuyPage":
                                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                            case "MarketPage":
                                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                            default:
                                var hwModel = _v1.a;
                                var newUrl = A6($elm$url$Url$Url, $elm$url$Url$Http, "localhost", $elm$core$Maybe$Just(1234), "/hardware", $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing);
                                var decodedHardwareDeviceMsg = function() {
                                    var _v3 = A2($elm$json$Json$Decode$decodeValue, $author$project$Main$justmsgFieldFromJsonDecoder, rawJsonMessage);
                                    if (_v3.$ === "Ok") {
                                        var message = _v3.a;
                                        return message.operationEventMsg;
                                    } else {
                                        var err = _v3.a;
                                        return "error";
                                    }
                                }();
                                var updatedIsLNSConnected = !model.isHardwareLNSConnected && decodedHardwareDeviceMsg === "nanoS" ? true : model.isHardwareLNSConnected ? true : false;
                                var updatedIsLNXConnected = !model.isHardwareLNXConnected && decodedHardwareDeviceMsg === "nanoX" ? true : model.isHardwareLNXConnected ? true : false;
                                var updatedIsValidXMRAddressConnected = !model.isXMRWalletConnected && $author$project$Main$isValidXMRAddress(decodedHardwareDeviceMsg) ? true : model.isXMRWalletConnected ? true : false;
                                var newUrlAfterCheckConnections = updatedIsValidXMRAddressConnected ? A6($elm$url$Url$Url, $elm$url$Url$Http, "localhost", $elm$core$Maybe$Just(1234), "/dashboard", $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing) : A6($elm$url$Url$Url, $elm$url$Url$Http, "localhost", $elm$core$Maybe$Just(1234), "/hardware", $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing);
                                var popupVisibility = updatedIsLNSConnected || updatedIsLNXConnected || updatedIsValidXMRAddressConnected ? false : true;
                                var updatedWalletAddress = $author$project$Main$isValidXMRAddress(decodedHardwareDeviceMsg) ? decodedHardwareDeviceMsg : "";
                                var newHardwareModel = _Utils_update(hwModel, {
                                    isHardwareLNSConnected: updatedIsLNSConnected,
                                    isHardwareLNXConnected: updatedIsLNXConnected,
                                    isXMRWalletConnected: updatedIsValidXMRAddressConnected,
                                    xmrWalletAddress: updatedWalletAddress
                                });
                                var newPage = updatedIsValidXMRAddressConnected ? $author$project$Main$DashboardPage($author$project$Pages$Dashboard$initialModel) : $author$project$Main$HardwarePage(newHardwareModel);
                                var newMainModel = _Utils_update(model, {
                                    flag: newUrlAfterCheckConnections,
                                    isHardwareLNSConnected: updatedIsLNSConnected,
                                    isHardwareLNXConnected: updatedIsLNXConnected,
                                    isPopUpVisible: popupVisibility,
                                    isXMRWalletConnected: updatedIsValidXMRAddressConnected,
                                    page: newPage,
                                    xmrWalletAddress: updatedWalletAddress
                                });
                                var _v2 = A2($elm$core$Debug$log, "newPage", newPage);
                                return A2($author$project$Main$updateUrl, newUrlAfterCheckConnections, newMainModel);
                        }
                    }
                }
            case "Tick":
                var newTime = msg.a;
                return _Utils_Tuple2(_Utils_update(model, {
                    time: newTime
                }), A2($elm$core$Task$perform, $author$project$Main$AdjustTimeZone, $elm$time$Time$here));
            case "AdjustTimeZone":
                var newZone = msg.a;
                return _Utils_Tuple2(_Utils_update(model, {
                    zone: $elm$core$Maybe$Just(newZone)
                }), $elm$core$Platform$Cmd$none);
            case "ClickedLink":
                var urlRequest = msg.a;
                if (urlRequest.$ === "External") {
                    var href = urlRequest.a;
                    return _Utils_Tuple2(model, $elm$browser$Browser$Navigation$load(href));
                } else {
                    var url = urlRequest.a;
                    var _v5 = $elm$url$Url$toString(url);
                    if (_v5 === "https://haveno-web.squashpassion.com/") return _Utils_Tuple2(model, $elm$browser$Browser$Navigation$load($elm$url$Url$toString(url)));
                    else return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
                }
            case "ChangedUrl":
                var url = msg.a;
                return A2($author$project$Main$updateUrl, url, model);
            case "GotDashboardMsg":
                var dashboardMsg = msg.a;
                var _v6 = model.page;
                if (_v6.$ === "DashboardPage") {
                    var dashboard = _v6.a;
                    return A2($author$project$Main$toDashboard, model, A2($author$project$Pages$Dashboard$update, dashboardMsg, dashboard));
                } else return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "GotSellMsg":
                var sellMsg = msg.a;
                var _v7 = model.page;
                if (_v7.$ === "SellPage") {
                    var sell = _v7.a;
                    return A2($author$project$Main$toSell, model, A2($author$project$Pages$Sell$update, sellMsg, sell));
                } else return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "GotBlankMsg":
                var blankMsg = msg.a;
                var _v8 = model.page;
                if (_v8.$ === "BlankPage") {
                    var blank = _v8.a;
                    return A2($author$project$Main$toBlank, model, A2($author$project$Pages$Blank$update, blankMsg, blank));
                } else return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "GotPortfolioMsg":
                var termsMsg = msg.a;
                var _v9 = model.page;
                if (_v9.$ === "PortfolioPage") {
                    var terms = _v9.a;
                    return A2($author$project$Main$toPortfolio, model, A2($author$project$Pages$Portfolio$update, termsMsg, terms));
                } else return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "GotFundsMsg":
                var privacyMsg = msg.a;
                var _v10 = model.page;
                if (_v10.$ === "FundsPage") {
                    var privacy = _v10.a;
                    return A2($author$project$Main$toFunds, model, A2($author$project$Pages$Funds$update, privacyMsg, privacy));
                } else return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "GotSupportMsg":
                var supportMsg = msg.a;
                var _v11 = model.page;
                if (_v11.$ === "SupportPage") {
                    var support = _v11.a;
                    return A2($author$project$Main$toSupport, model, A2($author$project$Pages$Support$update, supportMsg, support));
                } else return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "GotBuyMsg":
                var pricingMsg = msg.a;
                var _v12 = model.page;
                if (_v12.$ === "BuyPage") {
                    var pricing = _v12.a;
                    return A2($author$project$Main$toPricing, model, A2($author$project$Pages$Buy$update, pricingMsg, pricing));
                } else return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "GotMarketMsg":
                var aboutMsg = msg.a;
                var _v13 = model.page;
                if (_v13.$ === "MarketPage") {
                    var about = _v13.a;
                    return A2($author$project$Main$toMarket, model, A2($author$project$Pages$Market$update, aboutMsg, about));
                } else return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            case "GotHardwareMsg":
                var hardwareMsg = msg.a;
                var _v14 = model.page;
                if (_v14.$ === "HardwarePage") {
                    var hardwareModel = _v14.a;
                    switch(hardwareMsg.$){
                        case "ClickedHardwareDeviceConnect":
                            var newHardwareModel = _Utils_update(hardwareModel, {
                                queryType: $author$project$Pages$Hardware$Spectator
                            });
                            return _Utils_Tuple2(_Utils_update(model, {
                                page: $author$project$Main$HardwarePage(newHardwareModel)
                            }), $author$project$Main$sendMessageToJs("connectLNS"));
                        case "ClickedXMRWalletConnect":
                            var newHardwareModel = _Utils_update(hardwareModel, {
                                queryType: $author$project$Pages$Hardware$LoggedInUser
                            });
                            return _Utils_Tuple2(_Utils_update(model, {
                                page: $author$project$Main$HardwarePage(newHardwareModel)
                            }), $author$project$Main$sendMessageToJs("getMoneroAddress"));
                        case "ClickedXMRInitiateTransaction":
                            var amt = hardwareMsg.a;
                            var newHardwareModel = _Utils_update(hardwareModel, {
                                queryType: $author$project$Pages$Hardware$LoggedInUser
                            });
                            return _Utils_Tuple2(_Utils_update(model, {
                                page: $author$project$Main$HardwarePage(newHardwareModel)
                            }), $author$project$Main$sendMessageToJs("initiateXMRToBTCTrans " + ("~^&" + amt)));
                        default:
                            return A2($author$project$Main$toHardware, model, A2($author$project$Pages$Hardware$update, hardwareMsg, hardwareModel));
                    }
                } else return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
            default:
                return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
        }
    });
    var $elm$html$Html$br = _VirtualDom_node("br");
    var $elm$html$Html$footer = _VirtualDom_node("footer");
    var $elm$html$Html$h6 = _VirtualDom_node("h6");
    var $author$project$Main$footerContent = function(model) {
        var newVersion = function() {
            var _v0 = model.version;
            if (_v0.$ === "Just") {
                var version = _v0.a.version;
                return version;
            } else return "No Haveno version available";
        }();
        return A2($elm$html$Html$footer, _List_Nil, _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("footer"),
                A2($elm$html$Html$Attributes$style, "text-align", "center")
            ]), _List_fromArray([
                A2($elm$html$Html$br, _List_Nil, _List_Nil),
                A2($elm$html$Html$span, _List_Nil, _List_fromArray([
                    $elm$html$Html$text(""),
                    A2($elm$html$Html$a, _List_fromArray([
                        $elm$html$Html$Attributes$href("https://github.com/haveno-dex/haveno")
                    ]), _List_fromArray([
                        $elm$html$Html$text("Haveno-Web")
                    ])),
                    A2($elm$html$Html$br, _List_Nil, _List_Nil),
                    $elm$html$Html$text("Open source code & design"),
                    A2($elm$html$Html$p, _List_Nil, _List_fromArray([
                        $elm$html$Html$text("Version 0.0.15")
                    ])),
                    $elm$html$Html$text("Haveno Version"),
                    A2($elm$html$Html$h6, _List_fromArray([
                        $elm$html$Html$Attributes$id("havenoversion")
                    ]), _List_fromArray([
                        $elm$html$Html$text(newVersion)
                    ]))
                ]))
            ]))
        ]));
    };
    var $elm$html$Html$h3 = _VirtualDom_node("h3");
    var $author$project$Main$isHWConnectedIndicator = F2(function(model, isConnected) {
        return A2($elm$html$Html$h3, _List_Nil, _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("indicator"),
                A2($elm$html$Html$Attributes$style, "text-align", "center")
            ]), _List_fromArray([
                A2($elm$html$Html$br, _List_Nil, _List_Nil),
                A2($elm$html$Html$span, _List_Nil, _List_fromArray([
                    A2($elm$html$Html$span, _List_fromArray([
                        $elm$html$Html$Attributes$class(isConnected ? "indicator green" : "indicator red")
                    ]), _List_fromArray([
                        $elm$html$Html$text(isConnected ? "Connected" : model.isPopUpVisible ? "_" : "Disconnected")
                    ]))
                ]))
            ]))
        ]));
    });
    var $elm$html$Html$h5 = _VirtualDom_node("h5");
    var $author$project$Main$isXMRWalletConnectedIndicator = function(model) {
        return A2($elm$html$Html$h3, _List_Nil, _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("indicator"),
                A2($elm$html$Html$Attributes$style, "text-align", "center")
            ]), _List_fromArray([
                A2($elm$html$Html$br, _List_Nil, _List_Nil),
                A2($elm$html$Html$span, _List_Nil, _List_fromArray([
                    A2($elm$html$Html$h6, _List_fromArray([
                        $elm$html$Html$Attributes$class(model.isHardwareLNSConnected || model.isHardwareLNXConnected ? "indicator green" : "indicator red")
                    ]), _List_fromArray([
                        $elm$html$Html$text(model.isHardwareLNSConnected || model.isHardwareLNXConnected ? "XMR Wallet Connected" : model.isPopUpVisible ? "_" : "XMR Wallet Disconnected")
                    ])),
                    A2($elm$html$Html$br, _List_Nil, _List_Nil),
                    A2($elm$html$Html$h5, _List_Nil, _List_fromArray([
                        $elm$html$Html$text(model.isHardwareLNSConnected || model.isHardwareLNXConnected ? "XMR Wallet Address: " + model.xmrWalletAddress : model.isPopUpVisible ? "_" : "No XMR Wallet Address")
                    ]))
                ]))
            ]))
        ]));
    };
    var $elm$html$Html$nav = _VirtualDom_node("nav");
    var $elm$html$Html$Attributes$classList = function(classes) {
        return $elm$html$Html$Attributes$class(A2($elm$core$String$join, " ", A2($elm$core$List$map, $elm$core$Tuple$first, A2($elm$core$List$filter, $elm$core$Tuple$second, classes))));
    };
    var $author$project$Main$isActive = function(_v0) {
        var link = _v0.link;
        var page = _v0.page;
        var _v1 = _Utils_Tuple2(link, page);
        switch(_v1.a.$){
            case "Dashboard":
                if (_v1.b.$ === "DashboardPage") {
                    var _v2 = _v1.a;
                    return true;
                } else {
                    var _v3 = _v1.a;
                    return false;
                }
            case "Sell":
                if (_v1.b.$ === "SellPage") {
                    var _v4 = _v1.a;
                    return true;
                } else {
                    var _v5 = _v1.a;
                    return false;
                }
            case "Blank":
                if (_v1.b.$ === "BlankPage") {
                    var _v6 = _v1.a;
                    return true;
                } else {
                    var _v7 = _v1.a;
                    return false;
                }
            case "Portfolio":
                if (_v1.b.$ === "PortfolioPage") {
                    var _v8 = _v1.a;
                    return true;
                } else {
                    var _v9 = _v1.a;
                    return false;
                }
            case "Funds":
                if (_v1.b.$ === "FundsPage") {
                    var _v10 = _v1.a;
                    return true;
                } else {
                    var _v11 = _v1.a;
                    return false;
                }
            case "Support":
                if (_v1.b.$ === "SupportPage") {
                    var _v12 = _v1.a;
                    return true;
                } else {
                    var _v13 = _v1.a;
                    return false;
                }
            case "Buy":
                if (_v1.b.$ === "BuyPage") {
                    var _v14 = _v1.a;
                    return true;
                } else {
                    var _v15 = _v1.a;
                    return false;
                }
            case "Market":
                if (_v1.b.$ === "MarketPage") {
                    var _v16 = _v1.a;
                    return true;
                } else {
                    var _v17 = _v1.a;
                    return false;
                }
            default:
                if (_v1.b.$ === "HardwarePage") {
                    var _v18 = _v1.a;
                    return true;
                } else {
                    var _v19 = _v1.a;
                    return false;
                }
        }
    };
    var $elm$html$Html$Attributes$alt = $elm$html$Html$Attributes$stringProperty("alt");
    var $elm$html$Html$Attributes$height = function(n) {
        return A2(_VirtualDom_attribute, "height", $elm$core$String$fromInt(n));
    };
    var $elm$html$Html$img = _VirtualDom_node("img");
    var $elm$html$Html$Attributes$src = function(url) {
        return A2($elm$html$Html$Attributes$stringProperty, "src", _VirtualDom_noJavaScriptOrHtmlUri(url));
    };
    var $elm$html$Html$Attributes$width = function(n) {
        return A2(_VirtualDom_attribute, "width", $elm$core$String$fromInt(n));
    };
    var $author$project$Main$logoImage = A2($elm$html$Html$img, _List_fromArray([
        $elm$html$Html$Attributes$src("resources/Logos/monero_icon.jpg"),
        $elm$html$Html$Attributes$width(200),
        $elm$html$Html$Attributes$height(67),
        $elm$html$Html$Attributes$alt("Monero Logo"),
        $elm$html$Html$Attributes$title("Monero Logo")
    ]), _List_Nil);
    var $author$project$Main$navLinks = function(page) {
        var navLink = F2(function(route, _v0) {
            var url = _v0.url;
            var caption = _v0.caption;
            return A2($elm$html$Html$li, _List_fromArray([
                $elm$html$Html$Attributes$classList(_List_fromArray([
                    _Utils_Tuple2("active", $author$project$Main$isActive({
                        link: route,
                        page: page
                    })),
                    _Utils_Tuple2("navLink", true)
                ]))
            ]), _List_fromArray([
                A2($elm$html$Html$a, _List_fromArray([
                    $elm$html$Html$Attributes$href(url)
                ]), _List_fromArray([
                    $elm$html$Html$text(caption)
                ]))
            ]));
        });
        var links = A2($elm$html$Html$ul, _List_Nil, _List_fromArray([
            A2($elm$html$Html$li, _List_fromArray([
                $elm$html$Html$Attributes$class("logo")
            ]), _List_fromArray([
                A2($elm$html$Html$a, _List_fromArray([
                    $elm$html$Html$Attributes$href("https://haveno-web.squashpassion.com"),
                    $elm$html$Html$Attributes$class("logoImageShrink")
                ]), _List_fromArray([
                    $author$project$Main$logoImage
                ]))
            ])),
            A2(navLink, $author$project$Main$Blank, {
                caption: "",
                url: "/"
            }),
            A2(navLink, $author$project$Main$Dashboard, {
                caption: "Dashboard",
                url: "dashboard"
            }),
            A2(navLink, $author$project$Main$Market, {
                caption: "Market",
                url: "market"
            }),
            A2(navLink, $author$project$Main$Support, {
                caption: "Support",
                url: "support"
            }),
            A2(navLink, $author$project$Main$Sell, {
                caption: "Sell",
                url: "sell"
            }),
            A2(navLink, $author$project$Main$Buy, {
                caption: "Buy",
                url: "buy"
            }),
            A2(navLink, $author$project$Main$Hardware, {
                caption: "Hardware",
                url: "hardware"
            }),
            A2(navLink, $author$project$Main$Portfolio, {
                caption: "Portfolio",
                url: "portfolio"
            })
        ]));
        return links;
    };
    var $author$project$Main$burgerMenu = function(page) {
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("menu-btn"),
            $elm$html$Html$Attributes$id("menu-btn")
        ]), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("menu-btn_burger")
            ]), _List_Nil),
            A2($elm$html$Html$nav, _List_fromArray([
                $elm$html$Html$Attributes$class("below800pxnavlinks")
            ]), _List_fromArray([
                $author$project$Main$navLinks(page)
            ]))
        ]));
    };
    var $elm$html$Html$header = _VirtualDom_node("header");
    var $elm$html$Html$i = _VirtualDom_node("i");
    var $elm$html$Html$Attributes$name = $elm$html$Html$Attributes$stringProperty("name");
    var $elm$html$Html$Attributes$target = $elm$html$Html$Attributes$stringProperty("target");
    var $author$project$Main$socialsLinks = A2($elm$html$Html$div, _List_fromArray([
        $elm$html$Html$Attributes$class("socials-main-container")
    ]), _List_fromArray([
        A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("socials-sub-container socials-sub-container-whatsapp")
        ]), _List_fromArray([
            A2($elm$html$Html$i, _List_Nil, _List_fromArray([
                A2($elm$html$Html$a, _List_fromArray([
                    $elm$html$Html$Attributes$href(""),
                    $elm$html$Html$Attributes$target("_blank")
                ]), _List_fromArray([
                    A3($elm$html$Html$node, "ion-icon", _List_fromArray([
                        $elm$html$Html$Attributes$name("logo-whatsapp")
                    ]), _List_Nil)
                ]))
            ]))
        ]))
    ]));
    var $author$project$Main$topLinksLeft = function() {
        var navLink = function(_v0) {
            var url = _v0.url;
            var caption = _v0.caption;
            return A2($elm$html$Html$li, _List_fromArray([
                $elm$html$Html$Attributes$class("emailphone")
            ]), _List_fromArray([
                A2($elm$html$Html$a, _List_fromArray([
                    $elm$html$Html$Attributes$href(url)
                ]), _List_fromArray([
                    $elm$html$Html$text(caption)
                ]))
            ]));
        };
        var links = A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("topLinksLeft")
        ]), _List_fromArray([
            A2($elm$html$Html$i, _List_fromArray([
                $elm$html$Html$Attributes$class("material-icons")
            ]), _List_fromArray([
                $elm$html$Html$text("email")
            ])),
            navLink({
                caption: "potential support url   ",
                url: "/"
            }),
            A2($elm$html$Html$i, _List_fromArray([
                $elm$html$Html$Attributes$class("material-icons")
            ]), _List_fromArray([
                $elm$html$Html$text("support")
            ])),
            navLink({
                caption: "other potential support",
                url: "support"
            })
        ]));
        return links;
    }();
    var $author$project$Main$topLinksLogoImage = A2($elm$html$Html$img, _List_fromArray([
        $elm$html$Html$Attributes$src("resources/Logos/monero_icon.jpg"),
        $elm$html$Html$Attributes$width(100),
        $elm$html$Html$Attributes$height(33),
        $elm$html$Html$Attributes$alt("Monero Logo"),
        $elm$html$Html$Attributes$title("Monero Logo")
    ]), _List_Nil);
    var $author$project$Main$topLinksLogo = A2($elm$html$Html$div, _List_fromArray([
        $elm$html$Html$Attributes$class("topLinksLogo")
    ]), _List_fromArray([
        A2($elm$html$Html$a, _List_fromArray([
            $elm$html$Html$Attributes$href("https://haveno-web.squashpassion.com")
        ]), _List_fromArray([
            $author$project$Main$topLinksLogoImage
        ]))
    ]));
    var $author$project$Main$pageHeader = function(page) {
        var pageheader = A2($elm$html$Html$header, _List_Nil, _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("topLinks-flex-container")
            ]), _List_fromArray([
                $author$project$Main$burgerMenu(page),
                $author$project$Main$topLinksLogo,
                $author$project$Main$topLinksLeft,
                $author$project$Main$socialsLinks
            ])),
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("main-nav-flex-container")
            ]), _List_fromArray([
                A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$class("section")
                ]), _List_Nil),
                A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$class("nav-section-above800px")
                ]), _List_fromArray([
                    A2($elm$html$Html$nav, _List_fromArray([
                        $elm$html$Html$Attributes$class("above800pxnavlinks")
                    ]), _List_fromArray([
                        $author$project$Main$navLinks(page)
                    ]))
                ])),
                A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$class("section")
                ]), _List_Nil)
            ]))
        ]));
        return pageheader;
    };
    var $author$project$Main$showVideoOrBanner = function(page) {
        return A2($elm$html$Html$img, _List_fromArray([
            $elm$html$Html$Attributes$class("banner"),
            $elm$html$Html$Attributes$src("resources/Banners/monero - 1918x494.png"),
            $elm$html$Html$Attributes$alt("Monero"),
            $elm$html$Html$Attributes$width(1918),
            $elm$html$Html$Attributes$height(494),
            $elm$html$Html$Attributes$title("Monero Banner")
        ]), _List_Nil);
    };
    var $elm$html$Html$section = _VirtualDom_node("section");
    var $author$project$Pages$Blank$content = A2($elm$html$Html$section, _List_fromArray([
        $elm$html$Html$Attributes$class("section-background"),
        $elm$html$Html$Attributes$id("page")
    ]), _List_Nil);
    var $author$project$Pages$Blank$view = function(_v0) {
        return $author$project$Pages$Blank$content;
    };
    var $author$project$Buttons$Default$defaultButton = function(btnName) {
        return A2($elm$html$Html$div, _List_fromArray([
            A2($elm$html$Html$Attributes$style, "align-self", "center")
        ]), _List_fromArray([
            A2($elm$html$Html$button, _List_fromArray([
                $elm$html$Html$Attributes$class("default-button")
            ]), _List_fromArray([
                A2($elm$html$Html$a, _List_fromArray([
                    A2($elm$html$Html$Attributes$style, "color", "white"),
                    function() {
                        switch(btnName){
                            case "contact":
                                return $elm$html$Html$Attributes$href("/contact");
                            case "hardware":
                                return $elm$html$Html$Attributes$href("/hardware");
                            case "cost":
                                return $elm$html$Html$Attributes$href("/pricing");
                            default:
                                return $elm$html$Html$Attributes$href("/");
                        }
                    }()
                ]), _List_fromArray([
                    function() {
                        switch(btnName){
                            case "hardware":
                                return $elm$html$Html$text("Hardware Now");
                            case "cost":
                                return $elm$html$Html$text("Buy");
                            default:
                                return $elm$html$Html$text("");
                        }
                    }()
                ]))
            ]))
        ]));
    };
    var $elm$html$Html$h1 = _VirtualDom_node("h1");
    var $author$project$Pages$Buy$content = A2($elm$html$Html$section, _List_fromArray([
        $elm$html$Html$Attributes$id("page"),
        $elm$html$Html$Attributes$class("section-background"),
        $elm$html$Html$Attributes$class("text-center")
    ]), _List_fromArray([
        A2($elm$html$Html$ul, _List_Nil, _List_fromArray([
            A2($elm$html$Html$h1, _List_fromArray([
                $elm$html$Html$Attributes$class("pricing")
            ]), _List_fromArray([
                $elm$html$Html$text("Buy")
            ])),
            $author$project$Buttons$Default$defaultButton("hardware")
        ]))
    ]));
    var $author$project$Pages$Buy$view = function(_v0) {
        return $author$project$Pages$Buy$content;
    };
    var $mdgriffith$elm_ui$Internal$Model$Unkeyed = function(a) {
        return {
            $: "Unkeyed",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Model$AsColumn = {
        $: "AsColumn"
    };
    var $mdgriffith$elm_ui$Internal$Model$asColumn = $mdgriffith$elm_ui$Internal$Model$AsColumn;
    var $mdgriffith$elm_ui$Internal$Style$classes = {
        above: "a",
        active: "atv",
        alignBottom: "ab",
        alignCenterX: "cx",
        alignCenterY: "cy",
        alignContainerBottom: "acb",
        alignContainerCenterX: "accx",
        alignContainerCenterY: "accy",
        alignContainerRight: "acr",
        alignLeft: "al",
        alignRight: "ar",
        alignTop: "at",
        alignedHorizontally: "ah",
        alignedVertically: "av",
        any: "s",
        behind: "bh",
        below: "b",
        bold: "w7",
        borderDashed: "bd",
        borderDotted: "bdt",
        borderNone: "bn",
        borderSolid: "bs",
        capturePointerEvents: "cpe",
        clip: "cp",
        clipX: "cpx",
        clipY: "cpy",
        column: "c",
        container: "ctr",
        contentBottom: "cb",
        contentCenterX: "ccx",
        contentCenterY: "ccy",
        contentLeft: "cl",
        contentRight: "cr",
        contentTop: "ct",
        cursorPointer: "cptr",
        cursorText: "ctxt",
        focus: "fcs",
        focusedWithin: "focus-within",
        fullSize: "fs",
        grid: "g",
        hasBehind: "hbh",
        heightContent: "hc",
        heightExact: "he",
        heightFill: "hf",
        heightFillPortion: "hfp",
        hover: "hv",
        imageContainer: "ic",
        inFront: "fr",
        inputLabel: "lbl",
        inputMultiline: "iml",
        inputMultilineFiller: "imlf",
        inputMultilineParent: "imlp",
        inputMultilineWrapper: "implw",
        inputText: "it",
        italic: "i",
        link: "lnk",
        nearby: "nb",
        noTextSelection: "notxt",
        onLeft: "ol",
        onRight: "or",
        opaque: "oq",
        overflowHidden: "oh",
        page: "pg",
        paragraph: "p",
        passPointerEvents: "ppe",
        root: "ui",
        row: "r",
        scrollbars: "sb",
        scrollbarsX: "sbx",
        scrollbarsY: "sby",
        seButton: "sbt",
        single: "e",
        sizeByCapital: "cap",
        spaceEvenly: "sev",
        strike: "sk",
        text: "t",
        textCenter: "tc",
        textExtraBold: "w8",
        textExtraLight: "w2",
        textHeavy: "w9",
        textJustify: "tj",
        textJustifyAll: "tja",
        textLeft: "tl",
        textLight: "w3",
        textMedium: "w5",
        textNormalWeight: "w4",
        textRight: "tr",
        textSemiBold: "w6",
        textThin: "w1",
        textUnitalicized: "tun",
        transition: "ts",
        transparent: "clr",
        underline: "u",
        widthContent: "wc",
        widthExact: "we",
        widthFill: "wf",
        widthFillPortion: "wfp",
        wrapped: "wrp"
    };
    var $mdgriffith$elm_ui$Internal$Model$Generic = {
        $: "Generic"
    };
    var $mdgriffith$elm_ui$Internal$Model$div = $mdgriffith$elm_ui$Internal$Model$Generic;
    var $mdgriffith$elm_ui$Internal$Model$NoNearbyChildren = {
        $: "NoNearbyChildren"
    };
    var $mdgriffith$elm_ui$Internal$Model$columnClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (" " + $mdgriffith$elm_ui$Internal$Style$classes.column);
    var $mdgriffith$elm_ui$Internal$Model$gridClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (" " + $mdgriffith$elm_ui$Internal$Style$classes.grid);
    var $mdgriffith$elm_ui$Internal$Model$pageClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (" " + $mdgriffith$elm_ui$Internal$Style$classes.page);
    var $mdgriffith$elm_ui$Internal$Model$paragraphClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (" " + $mdgriffith$elm_ui$Internal$Style$classes.paragraph);
    var $mdgriffith$elm_ui$Internal$Model$rowClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (" " + $mdgriffith$elm_ui$Internal$Style$classes.row);
    var $mdgriffith$elm_ui$Internal$Model$singleClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (" " + $mdgriffith$elm_ui$Internal$Style$classes.single);
    var $mdgriffith$elm_ui$Internal$Model$contextClasses = function(context) {
        switch(context.$){
            case "AsRow":
                return $mdgriffith$elm_ui$Internal$Model$rowClass;
            case "AsColumn":
                return $mdgriffith$elm_ui$Internal$Model$columnClass;
            case "AsEl":
                return $mdgriffith$elm_ui$Internal$Model$singleClass;
            case "AsGrid":
                return $mdgriffith$elm_ui$Internal$Model$gridClass;
            case "AsParagraph":
                return $mdgriffith$elm_ui$Internal$Model$paragraphClass;
            default:
                return $mdgriffith$elm_ui$Internal$Model$pageClass;
        }
    };
    var $mdgriffith$elm_ui$Internal$Model$Keyed = function(a) {
        return {
            $: "Keyed",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Model$NoStyleSheet = {
        $: "NoStyleSheet"
    };
    var $mdgriffith$elm_ui$Internal$Model$Styled = function(a) {
        return {
            $: "Styled",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Model$Unstyled = function(a) {
        return {
            $: "Unstyled",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Model$addChildren = F2(function(existing, nearbyChildren) {
        switch(nearbyChildren.$){
            case "NoNearbyChildren":
                return existing;
            case "ChildrenBehind":
                var behind = nearbyChildren.a;
                return _Utils_ap(behind, existing);
            case "ChildrenInFront":
                var inFront = nearbyChildren.a;
                return _Utils_ap(existing, inFront);
            default:
                var behind = nearbyChildren.a;
                var inFront = nearbyChildren.b;
                return _Utils_ap(behind, _Utils_ap(existing, inFront));
        }
    });
    var $mdgriffith$elm_ui$Internal$Model$addKeyedChildren = F3(function(key, existing, nearbyChildren) {
        switch(nearbyChildren.$){
            case "NoNearbyChildren":
                return existing;
            case "ChildrenBehind":
                var behind = nearbyChildren.a;
                return _Utils_ap(A2($elm$core$List$map, function(x) {
                    return _Utils_Tuple2(key, x);
                }, behind), existing);
            case "ChildrenInFront":
                var inFront = nearbyChildren.a;
                return _Utils_ap(existing, A2($elm$core$List$map, function(x) {
                    return _Utils_Tuple2(key, x);
                }, inFront));
            default:
                var behind = nearbyChildren.a;
                var inFront = nearbyChildren.b;
                return _Utils_ap(A2($elm$core$List$map, function(x) {
                    return _Utils_Tuple2(key, x);
                }, behind), _Utils_ap(existing, A2($elm$core$List$map, function(x) {
                    return _Utils_Tuple2(key, x);
                }, inFront)));
        }
    });
    var $mdgriffith$elm_ui$Internal$Model$AsEl = {
        $: "AsEl"
    };
    var $mdgriffith$elm_ui$Internal$Model$asEl = $mdgriffith$elm_ui$Internal$Model$AsEl;
    var $mdgriffith$elm_ui$Internal$Model$AsParagraph = {
        $: "AsParagraph"
    };
    var $mdgriffith$elm_ui$Internal$Model$asParagraph = $mdgriffith$elm_ui$Internal$Model$AsParagraph;
    var $mdgriffith$elm_ui$Internal$Flag$Flag = function(a) {
        return {
            $: "Flag",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Flag$Second = function(a) {
        return {
            $: "Second",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Flag$flag = function(i) {
        return i > 31 ? $mdgriffith$elm_ui$Internal$Flag$Second(1 << i - 32) : $mdgriffith$elm_ui$Internal$Flag$Flag(1 << i);
    };
    var $mdgriffith$elm_ui$Internal$Flag$alignBottom = $mdgriffith$elm_ui$Internal$Flag$flag(41);
    var $mdgriffith$elm_ui$Internal$Flag$alignRight = $mdgriffith$elm_ui$Internal$Flag$flag(40);
    var $mdgriffith$elm_ui$Internal$Flag$centerX = $mdgriffith$elm_ui$Internal$Flag$flag(42);
    var $mdgriffith$elm_ui$Internal$Flag$centerY = $mdgriffith$elm_ui$Internal$Flag$flag(43);
    var $mdgriffith$elm_ui$Internal$Model$lengthClassName = function(x) {
        switch(x.$){
            case "Px":
                var px = x.a;
                return $elm$core$String$fromInt(px) + "px";
            case "Content":
                return "auto";
            case "Fill":
                var i = x.a;
                return $elm$core$String$fromInt(i) + "fr";
            case "Min":
                var min = x.a;
                var len = x.b;
                return "min" + ($elm$core$String$fromInt(min) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
            default:
                var max = x.a;
                var len = x.b;
                return "max" + ($elm$core$String$fromInt(max) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
        }
    };
    var $elm$core$Basics$round = _Basics_round;
    var $mdgriffith$elm_ui$Internal$Model$floatClass = function(x) {
        return $elm$core$String$fromInt($elm$core$Basics$round(x * 255));
    };
    var $mdgriffith$elm_ui$Internal$Model$transformClass = function(transform) {
        switch(transform.$){
            case "Untransformed":
                return $elm$core$Maybe$Nothing;
            case "Moved":
                var _v1 = transform.a;
                var x = _v1.a;
                var y = _v1.b;
                var z = _v1.c;
                return $elm$core$Maybe$Just("mv-" + ($mdgriffith$elm_ui$Internal$Model$floatClass(x) + ("-" + ($mdgriffith$elm_ui$Internal$Model$floatClass(y) + ("-" + $mdgriffith$elm_ui$Internal$Model$floatClass(z))))));
            default:
                var _v2 = transform.a;
                var tx = _v2.a;
                var ty = _v2.b;
                var tz = _v2.c;
                var _v3 = transform.b;
                var sx = _v3.a;
                var sy = _v3.b;
                var sz = _v3.c;
                var _v4 = transform.c;
                var ox = _v4.a;
                var oy = _v4.b;
                var oz = _v4.c;
                var angle = transform.d;
                return $elm$core$Maybe$Just("tfrm-" + ($mdgriffith$elm_ui$Internal$Model$floatClass(tx) + ("-" + ($mdgriffith$elm_ui$Internal$Model$floatClass(ty) + ("-" + ($mdgriffith$elm_ui$Internal$Model$floatClass(tz) + ("-" + ($mdgriffith$elm_ui$Internal$Model$floatClass(sx) + ("-" + ($mdgriffith$elm_ui$Internal$Model$floatClass(sy) + ("-" + ($mdgriffith$elm_ui$Internal$Model$floatClass(sz) + ("-" + ($mdgriffith$elm_ui$Internal$Model$floatClass(ox) + ("-" + ($mdgriffith$elm_ui$Internal$Model$floatClass(oy) + ("-" + ($mdgriffith$elm_ui$Internal$Model$floatClass(oz) + ("-" + $mdgriffith$elm_ui$Internal$Model$floatClass(angle))))))))))))))))))));
        }
    };
    var $mdgriffith$elm_ui$Internal$Model$getStyleName = function(style) {
        switch(style.$){
            case "Shadows":
                var name = style.a;
                return name;
            case "Transparency":
                var name = style.a;
                var o = style.b;
                return name;
            case "Style":
                var _class = style.a;
                return _class;
            case "FontFamily":
                var name = style.a;
                return name;
            case "FontSize":
                var i = style.a;
                return "font-size-" + $elm$core$String$fromInt(i);
            case "Single":
                var _class = style.a;
                return _class;
            case "Colored":
                var _class = style.a;
                return _class;
            case "SpacingStyle":
                var cls = style.a;
                var x = style.b;
                var y = style.c;
                return cls;
            case "PaddingStyle":
                var cls = style.a;
                var top = style.b;
                var right = style.c;
                var bottom = style.d;
                var left = style.e;
                return cls;
            case "BorderWidth":
                var cls = style.a;
                var top = style.b;
                var right = style.c;
                var bottom = style.d;
                var left = style.e;
                return cls;
            case "GridTemplateStyle":
                var template = style.a;
                return "grid-rows-" + (A2($elm$core$String$join, "-", A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ("-cols-" + (A2($elm$core$String$join, "-", A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ("-space-x-" + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ("-space-y-" + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
            case "GridPosition":
                var pos = style.a;
                return "gp grid-pos-" + ($elm$core$String$fromInt(pos.row) + ("-" + ($elm$core$String$fromInt(pos.col) + ("-" + ($elm$core$String$fromInt(pos.width) + ("-" + $elm$core$String$fromInt(pos.height)))))));
            case "PseudoSelector":
                var selector = style.a;
                var subStyle = style.b;
                var name = function() {
                    switch(selector.$){
                        case "Focus":
                            return "fs";
                        case "Hover":
                            return "hv";
                        default:
                            return "act";
                    }
                }();
                return A2($elm$core$String$join, " ", A2($elm$core$List$map, function(sty) {
                    var _v1 = $mdgriffith$elm_ui$Internal$Model$getStyleName(sty);
                    if (_v1 === "") return "";
                    else {
                        var styleName = _v1;
                        return styleName + ("-" + name);
                    }
                }, subStyle));
            default:
                var x = style.a;
                return A2($elm$core$Maybe$withDefault, "", $mdgriffith$elm_ui$Internal$Model$transformClass(x));
        }
    };
    var $elm$core$Dict$member = F2(function(key, dict) {
        var _v0 = A2($elm$core$Dict$get, key, dict);
        if (_v0.$ === "Just") return true;
        else return false;
    });
    var $elm$core$Set$member = F2(function(key, _v0) {
        var dict = _v0.a;
        return A2($elm$core$Dict$member, key, dict);
    });
    var $mdgriffith$elm_ui$Internal$Model$reduceStyles = F2(function(style, nevermind) {
        var cache = nevermind.a;
        var existing = nevermind.b;
        var styleName = $mdgriffith$elm_ui$Internal$Model$getStyleName(style);
        return A2($elm$core$Set$member, styleName, cache) ? nevermind : _Utils_Tuple2(A2($elm$core$Set$insert, styleName, cache), A2($elm$core$List$cons, style, existing));
    });
    var $mdgriffith$elm_ui$Internal$Model$Property = F2(function(a, b) {
        return {
            $: "Property",
            a: a,
            b: b
        };
    });
    var $mdgriffith$elm_ui$Internal$Model$Style = F2(function(a, b) {
        return {
            $: "Style",
            a: a,
            b: b
        };
    });
    var $mdgriffith$elm_ui$Internal$Style$dot = function(c) {
        return "." + c;
    };
    var $mdgriffith$elm_ui$Internal$Model$formatColor = function(_v0) {
        var red = _v0.a;
        var green = _v0.b;
        var blue = _v0.c;
        var alpha = _v0.d;
        return "rgba(" + ($elm$core$String$fromInt($elm$core$Basics$round(red * 255)) + ("," + $elm$core$String$fromInt($elm$core$Basics$round(green * 255)) + ("," + $elm$core$String$fromInt($elm$core$Basics$round(blue * 255)) + ("," + ($elm$core$String$fromFloat(alpha) + ")")))));
    };
    var $mdgriffith$elm_ui$Internal$Model$formatBoxShadow = function(shadow) {
        return A2($elm$core$String$join, " ", A2($elm$core$List$filterMap, $elm$core$Basics$identity, _List_fromArray([
            shadow.inset ? $elm$core$Maybe$Just("inset") : $elm$core$Maybe$Nothing,
            $elm$core$Maybe$Just($elm$core$String$fromFloat(shadow.offset.a) + "px"),
            $elm$core$Maybe$Just($elm$core$String$fromFloat(shadow.offset.b) + "px"),
            $elm$core$Maybe$Just($elm$core$String$fromFloat(shadow.blur) + "px"),
            $elm$core$Maybe$Just($elm$core$String$fromFloat(shadow.size) + "px"),
            $elm$core$Maybe$Just($mdgriffith$elm_ui$Internal$Model$formatColor(shadow.color))
        ])));
    };
    var $mdgriffith$elm_ui$Internal$Model$renderFocusStyle = function(focus) {
        return _List_fromArray([
            A2($mdgriffith$elm_ui$Internal$Model$Style, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin) + ":focus-within", A2($elm$core$List$filterMap, $elm$core$Basics$identity, _List_fromArray([
                A2($elm$core$Maybe$map, function(color) {
                    return A2($mdgriffith$elm_ui$Internal$Model$Property, "border-color", $mdgriffith$elm_ui$Internal$Model$formatColor(color));
                }, focus.borderColor),
                A2($elm$core$Maybe$map, function(color) {
                    return A2($mdgriffith$elm_ui$Internal$Model$Property, "background-color", $mdgriffith$elm_ui$Internal$Model$formatColor(color));
                }, focus.backgroundColor),
                A2($elm$core$Maybe$map, function(shadow) {
                    return A2($mdgriffith$elm_ui$Internal$Model$Property, "box-shadow", $mdgriffith$elm_ui$Internal$Model$formatBoxShadow({
                        blur: shadow.blur,
                        color: shadow.color,
                        inset: false,
                        offset: A2($elm$core$Tuple$mapSecond, $elm$core$Basics$toFloat, A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
                        size: shadow.size
                    }));
                }, focus.shadow),
                $elm$core$Maybe$Just(A2($mdgriffith$elm_ui$Internal$Model$Property, "outline", "none"))
            ]))),
            A2($mdgriffith$elm_ui$Internal$Model$Style, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ":focus .focusable, " + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ".focusable:focus, " + (".ui-slide-bar:focus + " + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + " .focusable-thumb"))), A2($elm$core$List$filterMap, $elm$core$Basics$identity, _List_fromArray([
                A2($elm$core$Maybe$map, function(color) {
                    return A2($mdgriffith$elm_ui$Internal$Model$Property, "border-color", $mdgriffith$elm_ui$Internal$Model$formatColor(color));
                }, focus.borderColor),
                A2($elm$core$Maybe$map, function(color) {
                    return A2($mdgriffith$elm_ui$Internal$Model$Property, "background-color", $mdgriffith$elm_ui$Internal$Model$formatColor(color));
                }, focus.backgroundColor),
                A2($elm$core$Maybe$map, function(shadow) {
                    return A2($mdgriffith$elm_ui$Internal$Model$Property, "box-shadow", $mdgriffith$elm_ui$Internal$Model$formatBoxShadow({
                        blur: shadow.blur,
                        color: shadow.color,
                        inset: false,
                        offset: A2($elm$core$Tuple$mapSecond, $elm$core$Basics$toFloat, A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
                        size: shadow.size
                    }));
                }, focus.shadow),
                $elm$core$Maybe$Just(A2($mdgriffith$elm_ui$Internal$Model$Property, "outline", "none"))
            ])))
        ]);
    };
    var $elm$virtual_dom$VirtualDom$property = F2(function(key, value) {
        return A2(_VirtualDom_property, _VirtualDom_noInnerHtmlOrFormAction(key), _VirtualDom_noJavaScriptOrHtmlJson(value));
    });
    var $mdgriffith$elm_ui$Internal$Style$AllChildren = F2(function(a, b) {
        return {
            $: "AllChildren",
            a: a,
            b: b
        };
    });
    var $mdgriffith$elm_ui$Internal$Style$Batch = function(a) {
        return {
            $: "Batch",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Style$Child = F2(function(a, b) {
        return {
            $: "Child",
            a: a,
            b: b
        };
    });
    var $mdgriffith$elm_ui$Internal$Style$Class = F2(function(a, b) {
        return {
            $: "Class",
            a: a,
            b: b
        };
    });
    var $mdgriffith$elm_ui$Internal$Style$Descriptor = F2(function(a, b) {
        return {
            $: "Descriptor",
            a: a,
            b: b
        };
    });
    var $mdgriffith$elm_ui$Internal$Style$Left = {
        $: "Left"
    };
    var $mdgriffith$elm_ui$Internal$Style$Prop = F2(function(a, b) {
        return {
            $: "Prop",
            a: a,
            b: b
        };
    });
    var $mdgriffith$elm_ui$Internal$Style$Right = {
        $: "Right"
    };
    var $mdgriffith$elm_ui$Internal$Style$Self = function(a) {
        return {
            $: "Self",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Style$Supports = F2(function(a, b) {
        return {
            $: "Supports",
            a: a,
            b: b
        };
    });
    var $mdgriffith$elm_ui$Internal$Style$Content = function(a) {
        return {
            $: "Content",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Style$Bottom = {
        $: "Bottom"
    };
    var $mdgriffith$elm_ui$Internal$Style$CenterX = {
        $: "CenterX"
    };
    var $mdgriffith$elm_ui$Internal$Style$CenterY = {
        $: "CenterY"
    };
    var $mdgriffith$elm_ui$Internal$Style$Top = {
        $: "Top"
    };
    var $mdgriffith$elm_ui$Internal$Style$alignments = _List_fromArray([
        $mdgriffith$elm_ui$Internal$Style$Top,
        $mdgriffith$elm_ui$Internal$Style$Bottom,
        $mdgriffith$elm_ui$Internal$Style$Right,
        $mdgriffith$elm_ui$Internal$Style$Left,
        $mdgriffith$elm_ui$Internal$Style$CenterX,
        $mdgriffith$elm_ui$Internal$Style$CenterY
    ]);
    var $mdgriffith$elm_ui$Internal$Style$contentName = function(desc) {
        switch(desc.a.$){
            case "Top":
                var _v1 = desc.a;
                return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentTop);
            case "Bottom":
                var _v2 = desc.a;
                return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentBottom);
            case "Right":
                var _v3 = desc.a;
                return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentRight);
            case "Left":
                var _v4 = desc.a;
                return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentLeft);
            case "CenterX":
                var _v5 = desc.a;
                return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX);
            default:
                var _v6 = desc.a;
                return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY);
        }
    };
    var $mdgriffith$elm_ui$Internal$Style$selfName = function(desc) {
        switch(desc.a.$){
            case "Top":
                var _v1 = desc.a;
                return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignTop);
            case "Bottom":
                var _v2 = desc.a;
                return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
            case "Right":
                var _v3 = desc.a;
                return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignRight);
            case "Left":
                var _v4 = desc.a;
                return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
            case "CenterX":
                var _v5 = desc.a;
                return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
            default:
                var _v6 = desc.a;
                return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
        }
    };
    var $mdgriffith$elm_ui$Internal$Style$describeAlignment = function(values) {
        var createDescription = function(alignment) {
            var _v0 = values(alignment);
            var content = _v0.a;
            var indiv = _v0.b;
            return _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$contentName($mdgriffith$elm_ui$Internal$Style$Content(alignment)), content),
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$selfName($mdgriffith$elm_ui$Internal$Style$Self(alignment)), indiv)
                ]))
            ]);
        };
        return $mdgriffith$elm_ui$Internal$Style$Batch(A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
    };
    var $mdgriffith$elm_ui$Internal$Style$elDescription = _List_fromArray([
        A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "flex"),
        A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-direction", "column"),
        A2($mdgriffith$elm_ui$Internal$Style$Prop, "white-space", "pre"),
        A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind), _List_fromArray([
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "z-index", "0"),
            A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "z-index", "-1")
            ]))
        ])),
        A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.seButton), _List_fromArray([
            A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-grow", "0")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-self", "auto !important")
                ]))
            ]))
        ])),
        A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightContent), _List_fromArray([
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "height", "auto")
        ])),
        A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill), _List_fromArray([
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-grow", "100000")
        ])),
        A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill), _List_fromArray([
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "width", "100%")
        ])),
        A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion), _List_fromArray([
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "width", "100%")
        ])),
        A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent), _List_fromArray([
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-self", "flex-start")
        ])),
        $mdgriffith$elm_ui$Internal$Style$describeAlignment(function(alignment) {
            switch(alignment.$){
                case "Top":
                    return _Utils_Tuple2(_List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "justify-content", "flex-start")
                    ]), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin-bottom", "auto !important"),
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin-top", "0 !important")
                    ]));
                case "Bottom":
                    return _Utils_Tuple2(_List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "justify-content", "flex-end")
                    ]), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin-top", "auto !important"),
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin-bottom", "0 !important")
                    ]));
                case "Right":
                    return _Utils_Tuple2(_List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-items", "flex-end")
                    ]), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-self", "flex-end")
                    ]));
                case "Left":
                    return _Utils_Tuple2(_List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-items", "flex-start")
                    ]), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-self", "flex-start")
                    ]));
                case "CenterX":
                    return _Utils_Tuple2(_List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-items", "center")
                    ]), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-self", "center")
                    ]));
                default:
                    return _Utils_Tuple2(_List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any), _List_fromArray([
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin-top", "auto"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin-bottom", "auto")
                        ]))
                    ]), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin-top", "auto !important"),
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin-bottom", "auto !important")
                    ]));
            }
        })
    ]);
    var $mdgriffith$elm_ui$Internal$Style$gridAlignments = function(values) {
        var createDescription = function(alignment) {
            return _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$selfName($mdgriffith$elm_ui$Internal$Style$Self(alignment)), values(alignment))
                ]))
            ]);
        };
        return $mdgriffith$elm_ui$Internal$Style$Batch(A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
    };
    var $mdgriffith$elm_ui$Internal$Style$Above = {
        $: "Above"
    };
    var $mdgriffith$elm_ui$Internal$Style$Behind = {
        $: "Behind"
    };
    var $mdgriffith$elm_ui$Internal$Style$Below = {
        $: "Below"
    };
    var $mdgriffith$elm_ui$Internal$Style$OnLeft = {
        $: "OnLeft"
    };
    var $mdgriffith$elm_ui$Internal$Style$OnRight = {
        $: "OnRight"
    };
    var $mdgriffith$elm_ui$Internal$Style$Within = {
        $: "Within"
    };
    var $mdgriffith$elm_ui$Internal$Style$locations = function() {
        var loc = $mdgriffith$elm_ui$Internal$Style$Above;
        var _v0 = function() {
            switch(loc.$){
                case "Above":
                    return _Utils_Tuple0;
                case "Below":
                    return _Utils_Tuple0;
                case "OnRight":
                    return _Utils_Tuple0;
                case "OnLeft":
                    return _Utils_Tuple0;
                case "Within":
                    return _Utils_Tuple0;
                default:
                    return _Utils_Tuple0;
            }
        }();
        return _List_fromArray([
            $mdgriffith$elm_ui$Internal$Style$Above,
            $mdgriffith$elm_ui$Internal$Style$Below,
            $mdgriffith$elm_ui$Internal$Style$OnRight,
            $mdgriffith$elm_ui$Internal$Style$OnLeft,
            $mdgriffith$elm_ui$Internal$Style$Within,
            $mdgriffith$elm_ui$Internal$Style$Behind
        ]);
    }();
    var $mdgriffith$elm_ui$Internal$Style$baseSheet = _List_fromArray([
        A2($mdgriffith$elm_ui$Internal$Style$Class, "html,body", _List_fromArray([
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "height", "100%"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "padding", "0"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin", "0")
        ])),
        A2($mdgriffith$elm_ui$Internal$Style$Class, _Utils_ap($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any), _Utils_ap($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single), $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.imageContainer))), _List_fromArray([
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "block"),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Child, "img", _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "max-height", "100%"),
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "object-fit", "cover")
                ]))
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Child, "img", _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "max-width", "100%"),
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "object-fit", "cover")
                ]))
            ]))
        ])),
        A2($mdgriffith$elm_ui$Internal$Style$Class, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ":focus", _List_fromArray([
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "outline", "none")
        ])),
        A2($mdgriffith$elm_ui$Internal$Style$Class, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.root), _List_fromArray([
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "width", "100%"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "height", "auto"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "min-height", "100%"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "z-index", "0"),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, _Utils_ap($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any), $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill)), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "height", "100%"),
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "height", "100%")
                ]))
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "position", "fixed"),
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "z-index", "20")
                ]))
            ]))
        ])),
        A2($mdgriffith$elm_ui$Internal$Style$Class, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby), _List_fromArray([
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "position", "relative"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "border", "none"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "flex"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-direction", "row"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-basis", "auto"),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single), $mdgriffith$elm_ui$Internal$Style$elDescription),
            $mdgriffith$elm_ui$Internal$Style$Batch(function(fn) {
                return A2($elm$core$List$map, fn, $mdgriffith$elm_ui$Internal$Style$locations);
            }(function(loc) {
                switch(loc.$){
                    case "Above":
                        return A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above), _List_fromArray([
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "position", "absolute"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "bottom", "100%"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "left", "0"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "width", "100%"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "z-index", "20"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin", "0 !important"),
                            A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill), _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "height", "auto")
                            ])),
                            A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill), _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "width", "100%")
                            ])),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "pointer-events", "none"),
                            A2($mdgriffith$elm_ui$Internal$Style$Child, "*", _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "pointer-events", "auto")
                            ]))
                        ]));
                    case "Below":
                        return A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below), _List_fromArray([
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "position", "absolute"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "bottom", "0"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "left", "0"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "height", "0"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "width", "100%"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "z-index", "20"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin", "0 !important"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "pointer-events", "none"),
                            A2($mdgriffith$elm_ui$Internal$Style$Child, "*", _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "pointer-events", "auto")
                            ])),
                            A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill), _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "height", "auto")
                            ]))
                        ]));
                    case "OnRight":
                        return A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight), _List_fromArray([
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "position", "absolute"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "left", "100%"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "top", "0"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "height", "100%"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin", "0 !important"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "z-index", "20"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "pointer-events", "none"),
                            A2($mdgriffith$elm_ui$Internal$Style$Child, "*", _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "pointer-events", "auto")
                            ]))
                        ]));
                    case "OnLeft":
                        return A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft), _List_fromArray([
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "position", "absolute"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "right", "100%"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "top", "0"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "height", "100%"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin", "0 !important"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "z-index", "20"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "pointer-events", "none"),
                            A2($mdgriffith$elm_ui$Internal$Style$Child, "*", _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "pointer-events", "auto")
                            ]))
                        ]));
                    case "Within":
                        return A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront), _List_fromArray([
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "position", "absolute"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "width", "100%"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "height", "100%"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "left", "0"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "top", "0"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin", "0 !important"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "pointer-events", "none"),
                            A2($mdgriffith$elm_ui$Internal$Style$Child, "*", _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "pointer-events", "auto")
                            ]))
                        ]));
                    default:
                        return A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind), _List_fromArray([
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "position", "absolute"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "width", "100%"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "height", "100%"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "left", "0"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "top", "0"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin", "0 !important"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "z-index", "0"),
                            A2($mdgriffith$elm_ui$Internal$Style$Prop, "pointer-events", "none"),
                            A2($mdgriffith$elm_ui$Internal$Style$Child, "*", _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "pointer-events", "auto")
                            ]))
                        ]));
                }
            }))
        ])),
        A2($mdgriffith$elm_ui$Internal$Style$Class, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any), _List_fromArray([
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "position", "relative"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "border", "none"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-shrink", "0"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "flex"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-direction", "row"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-basis", "auto"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "resize", "none"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-feature-settings", "inherit"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "box-sizing", "border-box"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin", "0"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "padding", "0"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "border-width", "0"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "border-style", "solid"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-size", "inherit"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "color", "inherit"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-family", "inherit"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "line-height", "1"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-weight", "inherit"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "text-decoration", "none"),
            A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-style", "inherit"),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.wrapped), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-wrap", "wrap")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "-moz-user-select", "none"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "-webkit-user-select", "none"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "-ms-user-select", "none"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "user-select", "none")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorPointer), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "cursor", "pointer")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorText), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "cursor", "text")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "pointer-events", "none !important")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.capturePointerEvents), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "pointer-events", "auto !important")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transparent), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "opacity", "0")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.opaque), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "opacity", "1")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot(_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ":hover", _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "opacity", "0")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot(_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ":hover", _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "opacity", "1")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot(_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ":focus", _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "opacity", "0")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot(_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ":focus", _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "opacity", "1")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot(_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ":active", _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "opacity", "0")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot(_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ":active", _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "opacity", "1")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transition), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "transition", A2($elm$core$String$join, ", ", A2($elm$core$List$map, function(x) {
                    return x + " 160ms";
                }, _List_fromArray([
                    "transform",
                    "opacity",
                    "filter",
                    "background-color",
                    "color",
                    "font-size"
                ]))))
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbars), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "overflow", "auto"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-shrink", "1")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "overflow-x", "auto"),
                A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-shrink", "1")
                ]))
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "overflow-y", "auto"),
                A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-shrink", "1")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-shrink", "1")
                ]))
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clip), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "overflow", "hidden")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipX), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "overflow-x", "hidden")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipY), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "overflow-y", "hidden")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "width", "auto")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderNone), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "border-width", "0")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDashed), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "border-style", "dashed")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDotted), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "border-style", "dotted")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderSolid), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "border-style", "solid")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "white-space", "pre"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "inline-block")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputText), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "line-height", "1.05"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "background", "transparent"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "text-align", "inherit")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single), $mdgriffith$elm_ui$Internal$Style$elDescription),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "flex"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-direction", "row"),
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-basis", "0%"),
                    A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-basis", "auto")
                    ])),
                    A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.link), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-basis", "auto")
                    ]))
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-self", "stretch !important")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-self", "stretch !important")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-grow", "100000")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-grow", "0"),
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-basis", "auto"),
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-self", "stretch")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, "u:first-of-type." + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight, _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-grow", "1")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, "s:first-of-type." + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX, _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-grow", "1"),
                    A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin-left", "auto !important")
                    ]))
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, "s:last-of-type." + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX, _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-grow", "1"),
                    A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin-right", "auto !important")
                    ]))
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, "s:only-of-type." + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX, _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-grow", "1"),
                    A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin-top", "auto !important"),
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin-bottom", "auto !important")
                    ]))
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, "s:last-of-type." + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX + " ~ u"), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-grow", "0")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, "u:first-of-type." + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight + (" ~ s." + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX)), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-grow", "0")
                ])),
                $mdgriffith$elm_ui$Internal$Style$describeAlignment(function(alignment) {
                    switch(alignment.$){
                        case "Top":
                            return _Utils_Tuple2(_List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-items", "flex-start")
                            ]), _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-self", "flex-start")
                            ]));
                        case "Bottom":
                            return _Utils_Tuple2(_List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-items", "flex-end")
                            ]), _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-self", "flex-end")
                            ]));
                        case "Right":
                            return _Utils_Tuple2(_List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "justify-content", "flex-end")
                            ]), _List_Nil);
                        case "Left":
                            return _Utils_Tuple2(_List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "justify-content", "flex-start")
                            ]), _List_Nil);
                        case "CenterX":
                            return _Utils_Tuple2(_List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "justify-content", "center")
                            ]), _List_Nil);
                        default:
                            return _Utils_Tuple2(_List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-items", "center")
                            ]), _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-self", "center")
                            ]));
                    }
                }),
                A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "justify-content", "space-between")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputLabel), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-items", "baseline")
                ]))
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "flex"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-direction", "column"),
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-basis", "0px"),
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "min-height", "min-content"),
                    A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightExact), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-basis", "auto")
                    ]))
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-grow", "100000")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "width", "100%")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "width", "100%")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-self", "flex-start")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, "u:first-of-type." + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom, _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-grow", "1")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, "s:first-of-type." + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY, _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-grow", "1"),
                    A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin-top", "auto !important"),
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin-bottom", "0 !important")
                    ]))
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, "s:last-of-type." + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY, _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-grow", "1"),
                    A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin-bottom", "auto !important"),
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin-top", "0 !important")
                    ]))
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, "s:only-of-type." + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY, _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-grow", "1"),
                    A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin-top", "auto !important"),
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin-bottom", "auto !important")
                    ]))
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, "s:last-of-type." + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY + " ~ u"), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-grow", "0")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, "u:first-of-type." + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom + (" ~ s." + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY)), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-grow", "0")
                ])),
                $mdgriffith$elm_ui$Internal$Style$describeAlignment(function(alignment) {
                    switch(alignment.$){
                        case "Top":
                            return _Utils_Tuple2(_List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "justify-content", "flex-start")
                            ]), _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin-bottom", "auto")
                            ]));
                        case "Bottom":
                            return _Utils_Tuple2(_List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "justify-content", "flex-end")
                            ]), _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin-top", "auto")
                            ]));
                        case "Right":
                            return _Utils_Tuple2(_List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-items", "flex-end")
                            ]), _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-self", "flex-end")
                            ]));
                        case "Left":
                            return _Utils_Tuple2(_List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-items", "flex-start")
                            ]), _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-self", "flex-start")
                            ]));
                        case "CenterX":
                            return _Utils_Tuple2(_List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-items", "center")
                            ]), _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-self", "center")
                            ]));
                        default:
                            return _Utils_Tuple2(_List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "justify-content", "center")
                            ]), _List_Nil);
                    }
                }),
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-grow", "0"),
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-basis", "auto"),
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "width", "100%"),
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-self", "stretch !important")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "justify-content", "space-between")
                ]))
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "-ms-grid"),
                A2($mdgriffith$elm_ui$Internal$Style$Child, ".gp", _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "width", "100%")
                    ]))
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Supports, _Utils_Tuple2("display", "grid"), _List_fromArray([
                    _Utils_Tuple2("display", "grid")
                ])),
                $mdgriffith$elm_ui$Internal$Style$gridAlignments(function(alignment) {
                    switch(alignment.$){
                        case "Top":
                            return _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "justify-content", "flex-start")
                            ]);
                        case "Bottom":
                            return _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "justify-content", "flex-end")
                            ]);
                        case "Right":
                            return _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-items", "flex-end")
                            ]);
                        case "Left":
                            return _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-items", "flex-start")
                            ]);
                        case "CenterX":
                            return _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "align-items", "center")
                            ]);
                        default:
                            return _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "justify-content", "center")
                            ]);
                    }
                })
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.page), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "block"),
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any + ":first-child"), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin", "0 !important")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName($mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Left)) + (":first-child + ." + $mdgriffith$elm_ui$Internal$Style$classes.any))), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin", "0 !important")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName($mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Right)) + (":first-child + ." + $mdgriffith$elm_ui$Internal$Style$classes.any))), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "margin", "0 !important")
                ])),
                $mdgriffith$elm_ui$Internal$Style$describeAlignment(function(alignment) {
                    switch(alignment.$){
                        case "Top":
                            return _Utils_Tuple2(_List_Nil, _List_Nil);
                        case "Bottom":
                            return _Utils_Tuple2(_List_Nil, _List_Nil);
                        case "Right":
                            return _Utils_Tuple2(_List_Nil, _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "float", "right"),
                                A2($mdgriffith$elm_ui$Internal$Style$Descriptor, "::after", _List_fromArray([
                                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "content", '""'),
                                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "table"),
                                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "clear", "both")
                                ]))
                            ]));
                        case "Left":
                            return _Utils_Tuple2(_List_Nil, _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "float", "left"),
                                A2($mdgriffith$elm_ui$Internal$Style$Descriptor, "::after", _List_fromArray([
                                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "content", '""'),
                                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "table"),
                                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "clear", "both")
                                ]))
                            ]));
                        case "CenterX":
                            return _Utils_Tuple2(_List_Nil, _List_Nil);
                        default:
                            return _Utils_Tuple2(_List_Nil, _List_Nil);
                    }
                })
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "white-space", "pre-wrap !important"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "height", "100%"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "width", "100%"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "background-color", "transparent")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "flex-basis", "auto")
                ]))
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "white-space", "pre-wrap !important"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "cursor", "text"),
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "white-space", "pre-wrap !important"),
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "color", "transparent")
                ]))
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "block"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "white-space", "normal"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "overflow-wrap", "break-word"),
                A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "z-index", "0"),
                    A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "z-index", "-1")
                    ]))
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$AllChildren, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "inline"),
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "white-space", "normal")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$AllChildren, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "inline"),
                    A2($mdgriffith$elm_ui$Internal$Style$Descriptor, "::after", _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "content", "none")
                    ])),
                    A2($mdgriffith$elm_ui$Internal$Style$Descriptor, "::before", _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "content", "none")
                    ]))
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$AllChildren, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "inline"),
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "white-space", "normal"),
                    A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "inline-block")
                    ])),
                    A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "flex")
                    ])),
                    A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "flex")
                    ])),
                    A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "flex")
                    ])),
                    A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "flex")
                    ])),
                    A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "flex")
                    ])),
                    A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "flex")
                    ])),
                    A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "inline"),
                        A2($mdgriffith$elm_ui$Internal$Style$Prop, "white-space", "normal")
                    ]))
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "inline")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "inline-flex")
                ])),
                A2($mdgriffith$elm_ui$Internal$Style$Child, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "inline-grid")
                ])),
                $mdgriffith$elm_ui$Internal$Style$describeAlignment(function(alignment) {
                    switch(alignment.$){
                        case "Top":
                            return _Utils_Tuple2(_List_Nil, _List_Nil);
                        case "Bottom":
                            return _Utils_Tuple2(_List_Nil, _List_Nil);
                        case "Right":
                            return _Utils_Tuple2(_List_Nil, _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "float", "right")
                            ]));
                        case "Left":
                            return _Utils_Tuple2(_List_Nil, _List_fromArray([
                                A2($mdgriffith$elm_ui$Internal$Style$Prop, "float", "left")
                            ]));
                        case "CenterX":
                            return _Utils_Tuple2(_List_Nil, _List_Nil);
                        default:
                            return _Utils_Tuple2(_List_Nil, _List_Nil);
                    }
                })
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, ".hidden", _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "display", "none")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textThin), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-weight", "100")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraLight), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-weight", "200")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLight), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-weight", "300")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textNormalWeight), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-weight", "400")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textMedium), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-weight", "500")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textSemiBold), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-weight", "600")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bold), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-weight", "700")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraBold), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-weight", "800")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textHeavy), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-weight", "900")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.italic), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-style", "italic")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "text-decoration", "line-through")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "text-decoration", "underline"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "text-decoration-skip-ink", "auto"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "text-decoration-skip", "ink")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, _Utils_ap($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline), $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike)), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "text-decoration", "line-through underline"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "text-decoration-skip-ink", "auto"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "text-decoration-skip", "ink")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textUnitalicized), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-style", "normal")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustify), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "text-align", "justify")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustifyAll), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "text-align", "justify-all")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textCenter), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "text-align", "center")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textRight), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "text-align", "right")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLeft), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "text-align", "left")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Descriptor, ".modal", _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "position", "fixed"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "left", "0"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "top", "0"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "width", "100%"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "height", "100%"),
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "pointer-events", "none")
            ]))
        ]))
    ]);
    var $mdgriffith$elm_ui$Internal$Style$fontVariant = function(_var) {
        return _List_fromArray([
            A2($mdgriffith$elm_ui$Internal$Style$Class, ".v-" + _var, _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-feature-settings", '"' + (_var + '"'))
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Class, ".v-" + (_var + "-off"), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-feature-settings", '"' + (_var + '" 0'))
            ]))
        ]);
    };
    var $mdgriffith$elm_ui$Internal$Style$commonValues = $elm$core$List$concat(_List_fromArray([
        A2($elm$core$List$map, function(x) {
            return A2($mdgriffith$elm_ui$Internal$Style$Class, ".border-" + $elm$core$String$fromInt(x), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "border-width", $elm$core$String$fromInt(x) + "px")
            ]));
        }, A2($elm$core$List$range, 0, 6)),
        A2($elm$core$List$map, function(i) {
            return A2($mdgriffith$elm_ui$Internal$Style$Class, ".font-size-" + $elm$core$String$fromInt(i), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-size", $elm$core$String$fromInt(i) + "px")
            ]));
        }, A2($elm$core$List$range, 8, 32)),
        A2($elm$core$List$map, function(i) {
            return A2($mdgriffith$elm_ui$Internal$Style$Class, ".p-" + $elm$core$String$fromInt(i), _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "padding", $elm$core$String$fromInt(i) + "px")
            ]));
        }, A2($elm$core$List$range, 0, 24)),
        _List_fromArray([
            A2($mdgriffith$elm_ui$Internal$Style$Class, ".v-smcp", _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-variant", "small-caps")
            ])),
            A2($mdgriffith$elm_ui$Internal$Style$Class, ".v-smcp-off", _List_fromArray([
                A2($mdgriffith$elm_ui$Internal$Style$Prop, "font-variant", "normal")
            ]))
        ]),
        $mdgriffith$elm_ui$Internal$Style$fontVariant("zero"),
        $mdgriffith$elm_ui$Internal$Style$fontVariant("onum"),
        $mdgriffith$elm_ui$Internal$Style$fontVariant("liga"),
        $mdgriffith$elm_ui$Internal$Style$fontVariant("dlig"),
        $mdgriffith$elm_ui$Internal$Style$fontVariant("ordn"),
        $mdgriffith$elm_ui$Internal$Style$fontVariant("tnum"),
        $mdgriffith$elm_ui$Internal$Style$fontVariant("afrc"),
        $mdgriffith$elm_ui$Internal$Style$fontVariant("frac")
    ]));
    var $mdgriffith$elm_ui$Internal$Style$explainer = "\n.explain {\n    border: 6px solid rgb(174, 121, 15) !important;\n}\n.explain > ." + ($mdgriffith$elm_ui$Internal$Style$classes.any + (" {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n.ctr {\n    border: none !important;\n}\n.explain > .ctr > ." + ($mdgriffith$elm_ui$Internal$Style$classes.any + " {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n")));
    var $mdgriffith$elm_ui$Internal$Style$inputTextReset = '\ninput[type="search"],\ninput[type="search"]::-webkit-search-decoration,\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-results-button,\ninput[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance:none;\n}\n';
    var $mdgriffith$elm_ui$Internal$Style$sliderReset = "\ninput[type=range] {\n  -webkit-appearance: none; \n  background: transparent;\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:10;\n  width: 100%;\n  outline: dashed 1px;\n  height: 100%;\n  opacity: 0;\n}\n";
    var $mdgriffith$elm_ui$Internal$Style$thumbReset = "\ninput[type=range]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-moz-range-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-ms-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range][orient=vertical]{\n    writing-mode: bt-lr; /* IE */\n    -webkit-appearance: slider-vertical;  /* WebKit */\n}\n";
    var $mdgriffith$elm_ui$Internal$Style$trackReset = "\ninput[type=range]::-moz-range-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-ms-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n    background: transparent;\n    cursor: pointer;\n}\n";
    var $mdgriffith$elm_ui$Internal$Style$overrides = "@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {" + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (" > " + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (" { flex-basis: auto !important; } " + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (" > " + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container) + (" { flex-basis: auto !important; }}" + ($mdgriffith$elm_ui$Internal$Style$inputTextReset + ($mdgriffith$elm_ui$Internal$Style$sliderReset + ($mdgriffith$elm_ui$Internal$Style$trackReset + ($mdgriffith$elm_ui$Internal$Style$thumbReset + $mdgriffith$elm_ui$Internal$Style$explainer)))))))))))))));
    var $elm$core$String$concat = function(strings) {
        return A2($elm$core$String$join, "", strings);
    };
    var $mdgriffith$elm_ui$Internal$Style$Intermediate = function(a) {
        return {
            $: "Intermediate",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Style$emptyIntermediate = F2(function(selector, closing) {
        return $mdgriffith$elm_ui$Internal$Style$Intermediate({
            closing: closing,
            others: _List_Nil,
            props: _List_Nil,
            selector: selector
        });
    });
    var $mdgriffith$elm_ui$Internal$Style$renderRules = F2(function(_v0, rulesToRender) {
        var parent = _v0.a;
        var generateIntermediates = F2(function(rule, rendered) {
            switch(rule.$){
                case "Prop":
                    var name = rule.a;
                    var val = rule.b;
                    return _Utils_update(rendered, {
                        props: A2($elm$core$List$cons, _Utils_Tuple2(name, val), rendered.props)
                    });
                case "Supports":
                    var _v2 = rule.a;
                    var prop = _v2.a;
                    var value = _v2.b;
                    var props = rule.b;
                    return _Utils_update(rendered, {
                        others: A2($elm$core$List$cons, $mdgriffith$elm_ui$Internal$Style$Intermediate({
                            closing: "\n}",
                            others: _List_Nil,
                            props: props,
                            selector: "@supports (" + (prop + (":" + (value + (") {" + parent.selector))))
                        }), rendered.others)
                    });
                case "Adjacent":
                    var selector = rule.a;
                    var adjRules = rule.b;
                    return _Utils_update(rendered, {
                        others: A2($elm$core$List$cons, A2($mdgriffith$elm_ui$Internal$Style$renderRules, A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (" + " + selector), ""), adjRules), rendered.others)
                    });
                case "Child":
                    var child = rule.a;
                    var childRules = rule.b;
                    return _Utils_update(rendered, {
                        others: A2($elm$core$List$cons, A2($mdgriffith$elm_ui$Internal$Style$renderRules, A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (" > " + child), ""), childRules), rendered.others)
                    });
                case "AllChildren":
                    var child = rule.a;
                    var childRules = rule.b;
                    return _Utils_update(rendered, {
                        others: A2($elm$core$List$cons, A2($mdgriffith$elm_ui$Internal$Style$renderRules, A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (" " + child), ""), childRules), rendered.others)
                    });
                case "Descriptor":
                    var descriptor = rule.a;
                    var descriptorRules = rule.b;
                    return _Utils_update(rendered, {
                        others: A2($elm$core$List$cons, A2($mdgriffith$elm_ui$Internal$Style$renderRules, A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, _Utils_ap(parent.selector, descriptor), ""), descriptorRules), rendered.others)
                    });
                default:
                    var batched = rule.a;
                    return _Utils_update(rendered, {
                        others: A2($elm$core$List$cons, A2($mdgriffith$elm_ui$Internal$Style$renderRules, A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector, ""), batched), rendered.others)
                    });
            }
        });
        return $mdgriffith$elm_ui$Internal$Style$Intermediate(A3($elm$core$List$foldr, generateIntermediates, parent, rulesToRender));
    });
    var $mdgriffith$elm_ui$Internal$Style$renderCompact = function(styleClasses) {
        var renderValues = function(values) {
            return $elm$core$String$concat(A2($elm$core$List$map, function(_v3) {
                var x = _v3.a;
                var y = _v3.b;
                return x + (":" + (y + ";"));
            }, values));
        };
        var renderClass = function(rule) {
            var _v2 = rule.props;
            if (!_v2.b) return "";
            else return rule.selector + ("{" + (renderValues(rule.props) + (rule.closing + "}")));
        };
        var renderIntermediate = function(_v0) {
            var rule = _v0.a;
            return _Utils_ap(renderClass(rule), $elm$core$String$concat(A2($elm$core$List$map, renderIntermediate, rule.others)));
        };
        return $elm$core$String$concat(A2($elm$core$List$map, renderIntermediate, A3($elm$core$List$foldr, F2(function(_v1, existing) {
            var name = _v1.a;
            var styleRules = _v1.b;
            return A2($elm$core$List$cons, A2($mdgriffith$elm_ui$Internal$Style$renderRules, A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, name, ""), styleRules), existing);
        }), _List_Nil, styleClasses)));
    };
    var $mdgriffith$elm_ui$Internal$Style$rules = _Utils_ap($mdgriffith$elm_ui$Internal$Style$overrides, $mdgriffith$elm_ui$Internal$Style$renderCompact(_Utils_ap($mdgriffith$elm_ui$Internal$Style$baseSheet, $mdgriffith$elm_ui$Internal$Style$commonValues)));
    var $mdgriffith$elm_ui$Internal$Model$staticRoot = function(opts) {
        var _v0 = opts.mode;
        switch(_v0.$){
            case "Layout":
                return A3($elm$virtual_dom$VirtualDom$node, "div", _List_Nil, _List_fromArray([
                    A3($elm$virtual_dom$VirtualDom$node, "style", _List_Nil, _List_fromArray([
                        $elm$virtual_dom$VirtualDom$text($mdgriffith$elm_ui$Internal$Style$rules)
                    ]))
                ]));
            case "NoStaticStyleSheet":
                return $elm$virtual_dom$VirtualDom$text("");
            default:
                return A3($elm$virtual_dom$VirtualDom$node, "elm-ui-static-rules", _List_fromArray([
                    A2($elm$virtual_dom$VirtualDom$property, "rules", $elm$json$Json$Encode$string($mdgriffith$elm_ui$Internal$Style$rules))
                ]), _List_Nil);
        }
    };
    var $elm$core$List$any = F2(function(isOkay, list) {
        any: while(true){
            if (!list.b) return false;
            else {
                var x = list.a;
                var xs = list.b;
                if (isOkay(x)) return true;
                else {
                    var $temp$isOkay = isOkay, $temp$list = xs;
                    isOkay = $temp$isOkay;
                    list = $temp$list;
                    continue any;
                }
            }
        }
    });
    var $mdgriffith$elm_ui$Internal$Model$fontName = function(font) {
        switch(font.$){
            case "Serif":
                return "serif";
            case "SansSerif":
                return "sans-serif";
            case "Monospace":
                return "monospace";
            case "Typeface":
                var name = font.a;
                return '"' + (name + '"');
            case "ImportFont":
                var name = font.a;
                var url = font.b;
                return '"' + (name + '"');
            default:
                var name = font.a.name;
                return '"' + (name + '"');
        }
    };
    var $mdgriffith$elm_ui$Internal$Model$isSmallCaps = function(_var) {
        switch(_var.$){
            case "VariantActive":
                var name = _var.a;
                return name === "smcp";
            case "VariantOff":
                var name = _var.a;
                return false;
            default:
                var name = _var.a;
                var index = _var.b;
                return name === "smcp" && index === 1;
        }
    };
    var $mdgriffith$elm_ui$Internal$Model$hasSmallCaps = function(typeface) {
        if (typeface.$ === "FontWith") {
            var font = typeface.a;
            return A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$isSmallCaps, font.variants);
        } else return false;
    };
    var $elm$core$Basics$min = F2(function(x, y) {
        return _Utils_cmp(x, y) < 0 ? x : y;
    });
    var $mdgriffith$elm_ui$Internal$Model$renderProps = F3(function(force, _v0, existing) {
        var key = _v0.a;
        var val = _v0.b;
        return force ? existing + ("\n  " + (key + (": " + (val + " !important;")))) : existing + ("\n  " + (key + (": " + (val + ";"))));
    });
    var $mdgriffith$elm_ui$Internal$Model$renderStyle = F4(function(options, maybePseudo, selector, props) {
        if (maybePseudo.$ === "Nothing") return _List_fromArray([
            selector + ("{" + (A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderProps(false), "", props) + "\n}"))
        ]);
        else {
            var pseudo = maybePseudo.a;
            switch(pseudo.$){
                case "Hover":
                    var _v2 = options.hover;
                    switch(_v2.$){
                        case "NoHover":
                            return _List_Nil;
                        case "ForceHover":
                            return _List_fromArray([
                                selector + ("-hv {" + (A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderProps(true), "", props) + "\n}"))
                            ]);
                        default:
                            return _List_fromArray([
                                selector + ("-hv:hover {" + (A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderProps(false), "", props) + "\n}"))
                            ]);
                    }
                case "Focus":
                    var renderedProps = A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderProps(false), "", props);
                    return _List_fromArray([
                        selector + ("-fs:focus {" + (renderedProps + "\n}")),
                        "." + ($mdgriffith$elm_ui$Internal$Style$classes.any + (":focus " + (selector + "-fs  {"))) + (renderedProps + "\n}"),
                        selector + "-fs:focus-within {" + (renderedProps + "\n}"),
                        ".ui-slide-bar:focus + " + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (" .focusable-thumb" + (selector + "-fs {"))) + (renderedProps + "\n}")
                    ]);
                default:
                    return _List_fromArray([
                        selector + ("-act:active {" + (A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderProps(false), "", props) + "\n}"))
                    ]);
            }
        }
    });
    var $mdgriffith$elm_ui$Internal$Model$renderVariant = function(_var) {
        switch(_var.$){
            case "VariantActive":
                var name = _var.a;
                return '"' + (name + '"');
            case "VariantOff":
                var name = _var.a;
                return '"' + (name + '" 0');
            default:
                var name = _var.a;
                var index = _var.b;
                return '"' + (name + ('" ' + $elm$core$String$fromInt(index)));
        }
    };
    var $mdgriffith$elm_ui$Internal$Model$renderVariants = function(typeface) {
        if (typeface.$ === "FontWith") {
            var font = typeface.a;
            return $elm$core$Maybe$Just(A2($elm$core$String$join, ", ", A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$renderVariant, font.variants)));
        } else return $elm$core$Maybe$Nothing;
    };
    var $mdgriffith$elm_ui$Internal$Model$transformValue = function(transform) {
        switch(transform.$){
            case "Untransformed":
                return $elm$core$Maybe$Nothing;
            case "Moved":
                var _v1 = transform.a;
                var x = _v1.a;
                var y = _v1.b;
                var z = _v1.c;
                return $elm$core$Maybe$Just("translate3d(" + ($elm$core$String$fromFloat(x) + ("px, " + ($elm$core$String$fromFloat(y) + ("px, " + ($elm$core$String$fromFloat(z) + "px)"))))));
            default:
                var _v2 = transform.a;
                var tx = _v2.a;
                var ty = _v2.b;
                var tz = _v2.c;
                var _v3 = transform.b;
                var sx = _v3.a;
                var sy = _v3.b;
                var sz = _v3.c;
                var _v4 = transform.c;
                var ox = _v4.a;
                var oy = _v4.b;
                var oz = _v4.c;
                var angle = transform.d;
                var translate = "translate3d(" + ($elm$core$String$fromFloat(tx) + ("px, " + ($elm$core$String$fromFloat(ty) + ("px, " + ($elm$core$String$fromFloat(tz) + "px)")))));
                var scale = "scale3d(" + ($elm$core$String$fromFloat(sx) + (", " + ($elm$core$String$fromFloat(sy) + (", " + ($elm$core$String$fromFloat(sz) + ")")))));
                var rotate = "rotate3d(" + ($elm$core$String$fromFloat(ox) + (", " + ($elm$core$String$fromFloat(oy) + (", " + ($elm$core$String$fromFloat(oz) + (", " + ($elm$core$String$fromFloat(angle) + "rad)")))))));
                return $elm$core$Maybe$Just(translate + (" " + (scale + (" " + rotate))));
        }
    };
    var $mdgriffith$elm_ui$Internal$Model$renderStyleRule = F3(function(options, rule, maybePseudo) {
        switch(rule.$){
            case "Style":
                var selector = rule.a;
                var props = rule.b;
                return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, selector, props);
            case "Shadows":
                var name = rule.a;
                var prop = rule.b;
                return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, "." + name, _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Model$Property, "box-shadow", prop)
                ]));
            case "Transparency":
                var name = rule.a;
                var transparency = rule.b;
                var opacity = A2($elm$core$Basics$max, 0, A2($elm$core$Basics$min, 1, 1 - transparency));
                return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, "." + name, _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Model$Property, "opacity", $elm$core$String$fromFloat(opacity))
                ]));
            case "FontSize":
                var i = rule.a;
                return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, ".font-size-" + $elm$core$String$fromInt(i), _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Model$Property, "font-size", $elm$core$String$fromInt(i) + "px")
                ]));
            case "FontFamily":
                var name = rule.a;
                var typefaces = rule.b;
                var features = A2($elm$core$String$join, ", ", A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Internal$Model$renderVariants, typefaces));
                var families = _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Model$Property, "font-family", A2($elm$core$String$join, ", ", A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$fontName, typefaces))),
                    A2($mdgriffith$elm_ui$Internal$Model$Property, "font-feature-settings", features),
                    A2($mdgriffith$elm_ui$Internal$Model$Property, "font-variant", A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$hasSmallCaps, typefaces) ? "small-caps" : "normal")
                ]);
                return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, "." + name, families);
            case "Single":
                var _class = rule.a;
                var prop = rule.b;
                var val = rule.c;
                return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, "." + _class, _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Model$Property, prop, val)
                ]));
            case "Colored":
                var _class = rule.a;
                var prop = rule.b;
                var color = rule.c;
                return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, "." + _class, _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Model$Property, prop, $mdgriffith$elm_ui$Internal$Model$formatColor(color))
                ]));
            case "SpacingStyle":
                var cls = rule.a;
                var x = rule.b;
                var y = rule.c;
                var yPx = $elm$core$String$fromInt(y) + "px";
                var xPx = $elm$core$String$fromInt(x) + "px";
                var single = "." + $mdgriffith$elm_ui$Internal$Style$classes.single;
                var row = "." + $mdgriffith$elm_ui$Internal$Style$classes.row;
                var wrappedRow = "." + ($mdgriffith$elm_ui$Internal$Style$classes.wrapped + row);
                var right = "." + $mdgriffith$elm_ui$Internal$Style$classes.alignRight;
                var paragraph = "." + $mdgriffith$elm_ui$Internal$Style$classes.paragraph;
                var page = "." + $mdgriffith$elm_ui$Internal$Style$classes.page;
                var left = "." + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft;
                var halfY = $elm$core$String$fromFloat(y / 2) + "px";
                var halfX = $elm$core$String$fromFloat(x / 2) + "px";
                var column = "." + $mdgriffith$elm_ui$Internal$Style$classes.column;
                var _class = "." + cls;
                var any = "." + $mdgriffith$elm_ui$Internal$Style$classes.any;
                return $elm$core$List$concat(_List_fromArray([
                    A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, _class + (row + (" > " + (any + (" + " + any)))), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "margin-left", xPx)
                    ])),
                    A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, _class + (wrappedRow + (" > " + any)), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "margin", halfY + (" " + halfX))
                    ])),
                    A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, _class + (column + (" > " + (any + (" + " + any)))), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "margin-top", yPx)
                    ])),
                    A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, _class + (page + (" > " + (any + (" + " + any)))), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "margin-top", yPx)
                    ])),
                    A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, _class + (page + (" > " + left)), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "margin-right", xPx)
                    ])),
                    A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, _class + (page + (" > " + right)), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "margin-left", xPx)
                    ])),
                    A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, _Utils_ap(_class, paragraph), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "line-height", "calc(1em + " + ($elm$core$String$fromInt(y) + "px)"))
                    ])),
                    A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, "textarea" + (any + _class), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "line-height", "calc(1em + " + ($elm$core$String$fromInt(y) + "px)")),
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "height", "calc(100% + " + ($elm$core$String$fromInt(y) + "px)"))
                    ])),
                    A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, _class + (paragraph + (" > " + left)), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "margin-right", xPx)
                    ])),
                    A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, _class + (paragraph + (" > " + right)), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "margin-left", xPx)
                    ])),
                    A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, _class + (paragraph + "::after"), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "content", "''"),
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "display", "block"),
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "height", "0"),
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "width", "0"),
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "margin-top", $elm$core$String$fromInt(-1 * (y / 2 | 0)) + "px")
                    ])),
                    A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, _class + (paragraph + "::before"), _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "content", "''"),
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "display", "block"),
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "height", "0"),
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "width", "0"),
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "margin-bottom", $elm$core$String$fromInt(-1 * (y / 2 | 0)) + "px")
                    ]))
                ]));
            case "PaddingStyle":
                var cls = rule.a;
                var top = rule.b;
                var right = rule.c;
                var bottom = rule.d;
                var left = rule.e;
                var _class = "." + cls;
                return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, _class, _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Model$Property, "padding", $elm$core$String$fromFloat(top) + ("px " + ($elm$core$String$fromFloat(right) + ("px " + ($elm$core$String$fromFloat(bottom) + ("px " + ($elm$core$String$fromFloat(left) + "px")))))))
                ]));
            case "BorderWidth":
                var cls = rule.a;
                var top = rule.b;
                var right = rule.c;
                var bottom = rule.d;
                var left = rule.e;
                var _class = "." + cls;
                return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, _class, _List_fromArray([
                    A2($mdgriffith$elm_ui$Internal$Model$Property, "border-width", $elm$core$String$fromInt(top) + ("px " + ($elm$core$String$fromInt(right) + ("px " + ($elm$core$String$fromInt(bottom) + ("px " + ($elm$core$String$fromInt(left) + "px")))))))
                ]));
            case "GridTemplateStyle":
                var template = rule.a;
                var toGridLengthHelper = F3(function(minimum, maximum, x) {
                    toGridLengthHelper: while(true)switch(x.$){
                        case "Px":
                            var px = x.a;
                            return $elm$core$String$fromInt(px) + "px";
                        case "Content":
                            var _v2 = _Utils_Tuple2(minimum, maximum);
                            if (_v2.a.$ === "Nothing") {
                                if (_v2.b.$ === "Nothing") {
                                    var _v3 = _v2.a;
                                    var _v4 = _v2.b;
                                    return "max-content";
                                } else {
                                    var _v6 = _v2.a;
                                    var maxSize = _v2.b.a;
                                    return "minmax(max-content, " + ($elm$core$String$fromInt(maxSize) + "px)");
                                }
                            } else if (_v2.b.$ === "Nothing") {
                                var minSize = _v2.a.a;
                                var _v5 = _v2.b;
                                return "minmax(" + ($elm$core$String$fromInt(minSize) + "px, max-content)");
                            } else {
                                var minSize = _v2.a.a;
                                var maxSize = _v2.b.a;
                                return "minmax(" + ($elm$core$String$fromInt(minSize) + ("px, " + ($elm$core$String$fromInt(maxSize) + "px)")));
                            }
                        case "Fill":
                            var i = x.a;
                            var _v7 = _Utils_Tuple2(minimum, maximum);
                            if (_v7.a.$ === "Nothing") {
                                if (_v7.b.$ === "Nothing") {
                                    var _v8 = _v7.a;
                                    var _v9 = _v7.b;
                                    return $elm$core$String$fromInt(i) + "fr";
                                } else {
                                    var _v11 = _v7.a;
                                    var maxSize = _v7.b.a;
                                    return "minmax(max-content, " + ($elm$core$String$fromInt(maxSize) + "px)");
                                }
                            } else if (_v7.b.$ === "Nothing") {
                                var minSize = _v7.a.a;
                                var _v10 = _v7.b;
                                return "minmax(" + ($elm$core$String$fromInt(minSize) + ("px, " + ($elm$core$String$fromInt(i) + "frfr)")));
                            } else {
                                var minSize = _v7.a.a;
                                var maxSize = _v7.b.a;
                                return "minmax(" + ($elm$core$String$fromInt(minSize) + ("px, " + ($elm$core$String$fromInt(maxSize) + "px)")));
                            }
                        case "Min":
                            var m = x.a;
                            var len = x.b;
                            var $temp$minimum = $elm$core$Maybe$Just(m), $temp$maximum = maximum, $temp$x = len;
                            minimum = $temp$minimum;
                            maximum = $temp$maximum;
                            x = $temp$x;
                            continue toGridLengthHelper;
                        default:
                            var m = x.a;
                            var len = x.b;
                            var $temp$minimum = minimum, $temp$maximum = $elm$core$Maybe$Just(m), $temp$x = len;
                            minimum = $temp$minimum;
                            maximum = $temp$maximum;
                            x = $temp$x;
                            continue toGridLengthHelper;
                    }
                });
                var toGridLength = function(x) {
                    return A3(toGridLengthHelper, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, x);
                };
                var xSpacing = toGridLength(template.spacing.a);
                var ySpacing = toGridLength(template.spacing.b);
                var rows = function(x) {
                    return "grid-template-rows: " + (x + ";");
                }(A2($elm$core$String$join, " ", A2($elm$core$List$map, toGridLength, template.rows)));
                var msRows = function(x) {
                    return "-ms-grid-rows: " + (x + ";");
                }(A2($elm$core$String$join, ySpacing, A2($elm$core$List$map, toGridLength, template.columns)));
                var msColumns = function(x) {
                    return "-ms-grid-columns: " + (x + ";");
                }(A2($elm$core$String$join, ySpacing, A2($elm$core$List$map, toGridLength, template.columns)));
                var gapY = "grid-row-gap:" + (toGridLength(template.spacing.b) + ";");
                var gapX = "grid-column-gap:" + (toGridLength(template.spacing.a) + ";");
                var columns = function(x) {
                    return "grid-template-columns: " + (x + ";");
                }(A2($elm$core$String$join, " ", A2($elm$core$List$map, toGridLength, template.columns)));
                var _class = ".grid-rows-" + (A2($elm$core$String$join, "-", A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ("-cols-" + (A2($elm$core$String$join, "-", A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ("-space-x-" + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ("-space-y-" + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
                var modernGrid = _class + ("{" + (columns + (rows + (gapX + (gapY + "}")))));
                var supports = "@supports (display:grid) {" + (modernGrid + "}");
                var base = _class + ("{" + (msColumns + (msRows + "}")));
                return _List_fromArray([
                    base,
                    supports
                ]);
            case "GridPosition":
                var position = rule.a;
                var msPosition = A2($elm$core$String$join, " ", _List_fromArray([
                    "-ms-grid-row: " + ($elm$core$String$fromInt(position.row) + ";"),
                    "-ms-grid-row-span: " + ($elm$core$String$fromInt(position.height) + ";"),
                    "-ms-grid-column: " + ($elm$core$String$fromInt(position.col) + ";"),
                    "-ms-grid-column-span: " + ($elm$core$String$fromInt(position.width) + ";")
                ]));
                var modernPosition = A2($elm$core$String$join, " ", _List_fromArray([
                    "grid-row: " + ($elm$core$String$fromInt(position.row) + (" / " + ($elm$core$String$fromInt(position.row + position.height) + ";"))),
                    "grid-column: " + ($elm$core$String$fromInt(position.col) + (" / " + ($elm$core$String$fromInt(position.col + position.width) + ";")))
                ]));
                var _class = ".grid-pos-" + ($elm$core$String$fromInt(position.row) + ("-" + ($elm$core$String$fromInt(position.col) + ("-" + ($elm$core$String$fromInt(position.width) + ("-" + $elm$core$String$fromInt(position.height)))))));
                var modernGrid = _class + ("{" + (modernPosition + "}"));
                var supports = "@supports (display:grid) {" + (modernGrid + "}");
                var base = _class + ("{" + (msPosition + "}"));
                return _List_fromArray([
                    base,
                    supports
                ]);
            case "PseudoSelector":
                var _class = rule.a;
                var styles = rule.b;
                var renderPseudoRule = function(style) {
                    return A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Just(_class));
                };
                return A2($elm$core$List$concatMap, renderPseudoRule, styles);
            default:
                var transform = rule.a;
                var val = $mdgriffith$elm_ui$Internal$Model$transformValue(transform);
                var _class = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
                var _v12 = _Utils_Tuple2(_class, val);
                if (_v12.a.$ === "Just" && _v12.b.$ === "Just") {
                    var cls = _v12.a.a;
                    var v = _v12.b.a;
                    return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, "." + cls, _List_fromArray([
                        A2($mdgriffith$elm_ui$Internal$Model$Property, "transform", v)
                    ]));
                } else return _List_Nil;
        }
    });
    var $mdgriffith$elm_ui$Internal$Model$encodeStyles = F2(function(options, stylesheet) {
        return $elm$json$Json$Encode$object(A2($elm$core$List$map, function(style) {
            var styled = A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing);
            return _Utils_Tuple2($mdgriffith$elm_ui$Internal$Model$getStyleName(style), A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, styled));
        }, stylesheet));
    });
    var $mdgriffith$elm_ui$Internal$Model$bracket = F2(function(selector, rules) {
        var renderPair = function(_v0) {
            var name = _v0.a;
            var val = _v0.b;
            return name + (": " + (val + ";"));
        };
        return selector + (" {" + (A2($elm$core$String$join, "", A2($elm$core$List$map, renderPair, rules)) + "}"));
    });
    var $mdgriffith$elm_ui$Internal$Model$fontRule = F3(function(name, modifier, _v0) {
        var parentAdj = _v0.a;
        var textAdjustment = _v0.b;
        return _List_fromArray([
            A2($mdgriffith$elm_ui$Internal$Model$bracket, "." + (name + ("." + (modifier + (", " + ("." + (name + (" ." + modifier))))))), parentAdj),
            A2($mdgriffith$elm_ui$Internal$Model$bracket, "." + (name + ("." + (modifier + ("> ." + ($mdgriffith$elm_ui$Internal$Style$classes.text + (", ." + (name + (" ." + (modifier + (" > ." + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))), textAdjustment)
        ]);
    });
    var $mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule = F3(function(fontToAdjust, _v0, otherFontName) {
        var full = _v0.a;
        var capital = _v0.b;
        var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : otherFontName + (" ." + fontToAdjust);
        return A2($elm$core$String$join, " ", _Utils_ap(A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital, capital), A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.fullSize, full)));
    });
    var $mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule = F2(function(fontToAdjust, otherFontName) {
        var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : otherFontName + (" ." + fontToAdjust);
        return A2($elm$core$String$join, " ", _List_fromArray([
            A2($mdgriffith$elm_ui$Internal$Model$bracket, "." + (name + ("." + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (", " + ("." + (name + (" ." + $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital))))))), _List_fromArray([
                _Utils_Tuple2("line-height", "1")
            ])),
            A2($mdgriffith$elm_ui$Internal$Model$bracket, "." + (name + ("." + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + ("> ." + ($mdgriffith$elm_ui$Internal$Style$classes.text + (", ." + (name + (" ." + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (" > ." + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))), _List_fromArray([
                _Utils_Tuple2("vertical-align", "0"),
                _Utils_Tuple2("line-height", "1")
            ]))
        ]));
    });
    var $mdgriffith$elm_ui$Internal$Model$adjust = F3(function(size, height, vertical) {
        return {
            height: height / size,
            size: size,
            vertical: vertical
        };
    });
    var $elm$core$List$maximum = function(list) {
        if (list.b) {
            var x = list.a;
            var xs = list.b;
            return $elm$core$Maybe$Just(A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
        } else return $elm$core$Maybe$Nothing;
    };
    var $elm$core$List$minimum = function(list) {
        if (list.b) {
            var x = list.a;
            var xs = list.b;
            return $elm$core$Maybe$Just(A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
        } else return $elm$core$Maybe$Nothing;
    };
    var $mdgriffith$elm_ui$Internal$Model$convertAdjustment = function(adjustment) {
        var lines = _List_fromArray([
            adjustment.capital,
            adjustment.baseline,
            adjustment.descender,
            adjustment.lowercase
        ]);
        var lineHeight = 1.5;
        var normalDescender = (lineHeight - 1) / 2;
        var oldMiddle = lineHeight / 2;
        var descender = A2($elm$core$Maybe$withDefault, adjustment.descender, $elm$core$List$minimum(lines));
        var newBaseline = A2($elm$core$Maybe$withDefault, adjustment.baseline, $elm$core$List$minimum(A2($elm$core$List$filter, function(x) {
            return !_Utils_eq(x, descender);
        }, lines)));
        var base = lineHeight;
        var ascender = A2($elm$core$Maybe$withDefault, adjustment.capital, $elm$core$List$maximum(lines));
        var capitalSize = 1 / (ascender - newBaseline);
        var capitalVertical = 1 - ascender;
        var fullSize = 1 / (ascender - descender);
        var fullVertical = 1 - ascender;
        var newCapitalMiddle = (ascender - newBaseline) / 2 + newBaseline;
        var newFullMiddle = (ascender - descender) / 2 + descender;
        return {
            capital: A3($mdgriffith$elm_ui$Internal$Model$adjust, capitalSize, ascender - newBaseline, capitalVertical),
            full: A3($mdgriffith$elm_ui$Internal$Model$adjust, fullSize, ascender - descender, fullVertical)
        };
    };
    var $mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules = function(converted) {
        return _Utils_Tuple2(_List_fromArray([
            _Utils_Tuple2("display", "block")
        ]), _List_fromArray([
            _Utils_Tuple2("display", "inline-block"),
            _Utils_Tuple2("line-height", $elm$core$String$fromFloat(converted.height)),
            _Utils_Tuple2("vertical-align", $elm$core$String$fromFloat(converted.vertical) + "em"),
            _Utils_Tuple2("font-size", $elm$core$String$fromFloat(converted.size) + "em")
        ]));
    };
    var $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment = function(typefaces) {
        return A3($elm$core$List$foldl, F2(function(face, found) {
            if (found.$ === "Nothing") {
                if (face.$ === "FontWith") {
                    var _with = face.a;
                    var _v2 = _with.adjustment;
                    if (_v2.$ === "Nothing") return found;
                    else {
                        var adjustment = _v2.a;
                        return $elm$core$Maybe$Just(_Utils_Tuple2($mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(function($) {
                            return $.full;
                        }($mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment))), $mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(function($) {
                            return $.capital;
                        }($mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment)))));
                    }
                } else return found;
            } else return found;
        }), $elm$core$Maybe$Nothing, typefaces);
    };
    var $mdgriffith$elm_ui$Internal$Model$renderTopLevelValues = function(rules) {
        var withImport = function(font) {
            if (font.$ === "ImportFont") {
                var url = font.b;
                return $elm$core$Maybe$Just("@import url('" + (url + "');"));
            } else return $elm$core$Maybe$Nothing;
        };
        var fontImports = function(_v2) {
            var name = _v2.a;
            var typefaces = _v2.b;
            var imports = A2($elm$core$String$join, "\n", A2($elm$core$List$filterMap, withImport, typefaces));
            return imports;
        };
        var allNames = A2($elm$core$List$map, $elm$core$Tuple$first, rules);
        var fontAdjustments = function(_v1) {
            var name = _v1.a;
            var typefaces = _v1.b;
            var _v0 = $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment(typefaces);
            if (_v0.$ === "Nothing") return A2($elm$core$String$join, "", A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule(name), allNames));
            else {
                var adjustment = _v0.a;
                return A2($elm$core$String$join, "", A2($elm$core$List$map, A2($mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule, name, adjustment), allNames));
            }
        };
        return _Utils_ap(A2($elm$core$String$join, "\n", A2($elm$core$List$map, fontImports, rules)), A2($elm$core$String$join, "\n", A2($elm$core$List$map, fontAdjustments, rules)));
    };
    var $mdgriffith$elm_ui$Internal$Model$topLevelValue = function(rule) {
        if (rule.$ === "FontFamily") {
            var name = rule.a;
            var typefaces = rule.b;
            return $elm$core$Maybe$Just(_Utils_Tuple2(name, typefaces));
        } else return $elm$core$Maybe$Nothing;
    };
    var $mdgriffith$elm_ui$Internal$Model$toStyleSheetString = F2(function(options, stylesheet) {
        var combine = F2(function(style, rendered) {
            return {
                rules: _Utils_ap(rendered.rules, A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing)),
                topLevel: function() {
                    var _v1 = $mdgriffith$elm_ui$Internal$Model$topLevelValue(style);
                    if (_v1.$ === "Nothing") return rendered.topLevel;
                    else {
                        var topLevel = _v1.a;
                        return A2($elm$core$List$cons, topLevel, rendered.topLevel);
                    }
                }()
            };
        });
        var _v0 = A3($elm$core$List$foldl, combine, {
            rules: _List_Nil,
            topLevel: _List_Nil
        }, stylesheet);
        var topLevel = _v0.topLevel;
        var rules = _v0.rules;
        return _Utils_ap($mdgriffith$elm_ui$Internal$Model$renderTopLevelValues(topLevel), $elm$core$String$concat(rules));
    });
    var $mdgriffith$elm_ui$Internal$Model$toStyleSheet = F2(function(options, styleSheet) {
        var _v0 = options.mode;
        switch(_v0.$){
            case "Layout":
                return A3($elm$virtual_dom$VirtualDom$node, "div", _List_Nil, _List_fromArray([
                    A3($elm$virtual_dom$VirtualDom$node, "style", _List_Nil, _List_fromArray([
                        $elm$virtual_dom$VirtualDom$text(A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
                    ]))
                ]));
            case "NoStaticStyleSheet":
                return A3($elm$virtual_dom$VirtualDom$node, "div", _List_Nil, _List_fromArray([
                    A3($elm$virtual_dom$VirtualDom$node, "style", _List_Nil, _List_fromArray([
                        $elm$virtual_dom$VirtualDom$text(A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
                    ]))
                ]));
            default:
                return A3($elm$virtual_dom$VirtualDom$node, "elm-ui-rules", _List_fromArray([
                    A2($elm$virtual_dom$VirtualDom$property, "rules", A2($mdgriffith$elm_ui$Internal$Model$encodeStyles, options, styleSheet))
                ]), _List_Nil);
        }
    });
    var $mdgriffith$elm_ui$Internal$Model$embedKeyed = F4(function(_static, opts, styles, children) {
        var dynamicStyleSheet = A2($mdgriffith$elm_ui$Internal$Model$toStyleSheet, opts, A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$reduceStyles, _Utils_Tuple2($elm$core$Set$empty, $mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)), styles).b);
        return _static ? A2($elm$core$List$cons, _Utils_Tuple2("static-stylesheet", $mdgriffith$elm_ui$Internal$Model$staticRoot(opts)), A2($elm$core$List$cons, _Utils_Tuple2("dynamic-stylesheet", dynamicStyleSheet), children)) : A2($elm$core$List$cons, _Utils_Tuple2("dynamic-stylesheet", dynamicStyleSheet), children);
    });
    var $mdgriffith$elm_ui$Internal$Model$embedWith = F4(function(_static, opts, styles, children) {
        var dynamicStyleSheet = A2($mdgriffith$elm_ui$Internal$Model$toStyleSheet, opts, A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$reduceStyles, _Utils_Tuple2($elm$core$Set$empty, $mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)), styles).b);
        return _static ? A2($elm$core$List$cons, $mdgriffith$elm_ui$Internal$Model$staticRoot(opts), A2($elm$core$List$cons, dynamicStyleSheet, children)) : A2($elm$core$List$cons, dynamicStyleSheet, children);
    });
    var $mdgriffith$elm_ui$Internal$Flag$heightBetween = $mdgriffith$elm_ui$Internal$Flag$flag(45);
    var $mdgriffith$elm_ui$Internal$Flag$heightFill = $mdgriffith$elm_ui$Internal$Flag$flag(37);
    var $mdgriffith$elm_ui$Internal$Flag$present = F2(function(myFlag, _v0) {
        var fieldOne = _v0.a;
        var fieldTwo = _v0.b;
        if (myFlag.$ === "Flag") {
            var first = myFlag.a;
            return _Utils_eq(first & fieldOne, first);
        } else {
            var second = myFlag.a;
            return _Utils_eq(second & fieldTwo, second);
        }
    });
    var $elm$html$Html$s = _VirtualDom_node("s");
    var $elm$html$Html$u = _VirtualDom_node("u");
    var $mdgriffith$elm_ui$Internal$Flag$widthBetween = $mdgriffith$elm_ui$Internal$Flag$flag(44);
    var $mdgriffith$elm_ui$Internal$Flag$widthFill = $mdgriffith$elm_ui$Internal$Flag$flag(39);
    var $mdgriffith$elm_ui$Internal$Model$finalizeNode = F6(function(has, node, attributes, children, embedMode, parentContext) {
        var createNode = F2(function(nodeName, attrs) {
            if (children.$ === "Keyed") {
                var keyed = children.a;
                return A3($elm$virtual_dom$VirtualDom$keyedNode, nodeName, attrs, function() {
                    switch(embedMode.$){
                        case "NoStyleSheet":
                            return keyed;
                        case "OnlyDynamic":
                            var opts = embedMode.a;
                            var styles = embedMode.b;
                            return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, false, opts, styles, keyed);
                        default:
                            var opts = embedMode.a;
                            var styles = embedMode.b;
                            return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, true, opts, styles, keyed);
                    }
                }());
            } else {
                var unkeyed = children.a;
                return A2(function() {
                    switch(nodeName){
                        case "div":
                            return $elm$html$Html$div;
                        case "p":
                            return $elm$html$Html$p;
                        default:
                            return $elm$virtual_dom$VirtualDom$node(nodeName);
                    }
                }(), attrs, function() {
                    switch(embedMode.$){
                        case "NoStyleSheet":
                            return unkeyed;
                        case "OnlyDynamic":
                            var opts = embedMode.a;
                            var styles = embedMode.b;
                            return A4($mdgriffith$elm_ui$Internal$Model$embedWith, false, opts, styles, unkeyed);
                        default:
                            var opts = embedMode.a;
                            var styles = embedMode.b;
                            return A4($mdgriffith$elm_ui$Internal$Model$embedWith, true, opts, styles, unkeyed);
                    }
                }());
            }
        });
        var html = function() {
            switch(node.$){
                case "Generic":
                    return A2(createNode, "div", attributes);
                case "NodeName":
                    var nodeName = node.a;
                    return A2(createNode, nodeName, attributes);
                default:
                    var nodeName = node.a;
                    var internal = node.b;
                    return A3($elm$virtual_dom$VirtualDom$node, nodeName, attributes, _List_fromArray([
                        A2(createNode, internal, _List_fromArray([
                            $elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.any + (" " + $mdgriffith$elm_ui$Internal$Style$classes.single))
                        ]))
                    ]));
            }
        }();
        switch(parentContext.$){
            case "AsRow":
                return A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthFill, has) && !A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthBetween, has) ? html : A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignRight, has) ? A2($elm$html$Html$u, _List_fromArray([
                    $elm$html$Html$Attributes$class(A2($elm$core$String$join, " ", _List_fromArray([
                        $mdgriffith$elm_ui$Internal$Style$classes.any,
                        $mdgriffith$elm_ui$Internal$Style$classes.single,
                        $mdgriffith$elm_ui$Internal$Style$classes.container,
                        $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY,
                        $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight
                    ])))
                ]), _List_fromArray([
                    html
                ])) : A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerX, has) ? A2($elm$html$Html$s, _List_fromArray([
                    $elm$html$Html$Attributes$class(A2($elm$core$String$join, " ", _List_fromArray([
                        $mdgriffith$elm_ui$Internal$Style$classes.any,
                        $mdgriffith$elm_ui$Internal$Style$classes.single,
                        $mdgriffith$elm_ui$Internal$Style$classes.container,
                        $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY,
                        $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX
                    ])))
                ]), _List_fromArray([
                    html
                ])) : html;
            case "AsColumn":
                return A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightFill, has) && !A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightBetween, has) ? html : A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerY, has) ? A2($elm$html$Html$s, _List_fromArray([
                    $elm$html$Html$Attributes$class(A2($elm$core$String$join, " ", _List_fromArray([
                        $mdgriffith$elm_ui$Internal$Style$classes.any,
                        $mdgriffith$elm_ui$Internal$Style$classes.single,
                        $mdgriffith$elm_ui$Internal$Style$classes.container,
                        $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY
                    ])))
                ]), _List_fromArray([
                    html
                ])) : A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignBottom, has) ? A2($elm$html$Html$u, _List_fromArray([
                    $elm$html$Html$Attributes$class(A2($elm$core$String$join, " ", _List_fromArray([
                        $mdgriffith$elm_ui$Internal$Style$classes.any,
                        $mdgriffith$elm_ui$Internal$Style$classes.single,
                        $mdgriffith$elm_ui$Internal$Style$classes.container,
                        $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom
                    ])))
                ]), _List_fromArray([
                    html
                ])) : html;
            default:
                return html;
        }
    });
    var $mdgriffith$elm_ui$Internal$Model$textElementClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (" " + ($mdgriffith$elm_ui$Internal$Style$classes.text + (" " + ($mdgriffith$elm_ui$Internal$Style$classes.widthContent + (" " + $mdgriffith$elm_ui$Internal$Style$classes.heightContent)))));
    var $mdgriffith$elm_ui$Internal$Model$textElement = function(str) {
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementClasses)
        ]), _List_fromArray([
            $elm$html$Html$text(str)
        ]));
    };
    var $mdgriffith$elm_ui$Internal$Model$textElementFillClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (" " + ($mdgriffith$elm_ui$Internal$Style$classes.text + (" " + ($mdgriffith$elm_ui$Internal$Style$classes.widthFill + (" " + $mdgriffith$elm_ui$Internal$Style$classes.heightFill)))));
    var $mdgriffith$elm_ui$Internal$Model$textElementFill = function(str) {
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementFillClasses)
        ]), _List_fromArray([
            $elm$html$Html$text(str)
        ]));
    };
    var $mdgriffith$elm_ui$Internal$Model$createElement = F3(function(context, children, rendered) {
        var gatherKeyed = F2(function(_v8, _v9) {
            var key = _v8.a;
            var child = _v8.b;
            var htmls = _v9.a;
            var existingStyles = _v9.b;
            switch(child.$){
                case "Unstyled":
                    var html = child.a;
                    return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(A2($elm$core$List$cons, _Utils_Tuple2(key, html(context)), htmls), existingStyles) : _Utils_Tuple2(A2($elm$core$List$cons, _Utils_Tuple2(key, html(context)), htmls), existingStyles);
                case "Styled":
                    var styled = child.a;
                    return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(A2($elm$core$List$cons, _Utils_Tuple2(key, A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)), htmls), $elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(A2($elm$core$List$cons, _Utils_Tuple2(key, A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)), htmls), $elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
                case "Text":
                    var str = child.a;
                    return _Utils_Tuple2(A2($elm$core$List$cons, _Utils_Tuple2(key, _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str)), htmls), existingStyles);
                default:
                    return _Utils_Tuple2(htmls, existingStyles);
            }
        });
        var gather = F2(function(child, _v6) {
            var htmls = _v6.a;
            var existingStyles = _v6.b;
            switch(child.$){
                case "Unstyled":
                    var html = child.a;
                    return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(A2($elm$core$List$cons, html(context), htmls), existingStyles) : _Utils_Tuple2(A2($elm$core$List$cons, html(context), htmls), existingStyles);
                case "Styled":
                    var styled = child.a;
                    return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(A2($elm$core$List$cons, A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context), htmls), $elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(A2($elm$core$List$cons, A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context), htmls), $elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
                case "Text":
                    var str = child.a;
                    return _Utils_Tuple2(A2($elm$core$List$cons, _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str), htmls), existingStyles);
                default:
                    return _Utils_Tuple2(htmls, existingStyles);
            }
        });
        if (children.$ === "Keyed") {
            var keyedChildren = children.a;
            var _v1 = A3($elm$core$List$foldr, gatherKeyed, _Utils_Tuple2(_List_Nil, _List_Nil), keyedChildren);
            var keyed = _v1.a;
            var styles = _v1.b;
            var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
            if (!newStyles.b) return $mdgriffith$elm_ui$Internal$Model$Unstyled(A5($mdgriffith$elm_ui$Internal$Model$finalizeNode, rendered.has, rendered.node, rendered.attributes, $mdgriffith$elm_ui$Internal$Model$Keyed(A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, "nearby-element-pls", keyed, rendered.children)), $mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
            else {
                var allStyles = newStyles;
                return $mdgriffith$elm_ui$Internal$Model$Styled({
                    html: A4($mdgriffith$elm_ui$Internal$Model$finalizeNode, rendered.has, rendered.node, rendered.attributes, $mdgriffith$elm_ui$Internal$Model$Keyed(A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, "nearby-element-pls", keyed, rendered.children))),
                    styles: allStyles
                });
            }
        } else {
            var unkeyedChildren = children.a;
            var _v3 = A3($elm$core$List$foldr, gather, _Utils_Tuple2(_List_Nil, _List_Nil), unkeyedChildren);
            var unkeyed = _v3.a;
            var styles = _v3.b;
            var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
            if (!newStyles.b) return $mdgriffith$elm_ui$Internal$Model$Unstyled(A5($mdgriffith$elm_ui$Internal$Model$finalizeNode, rendered.has, rendered.node, rendered.attributes, $mdgriffith$elm_ui$Internal$Model$Unkeyed(A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children)), $mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
            else {
                var allStyles = newStyles;
                return $mdgriffith$elm_ui$Internal$Model$Styled({
                    html: A4($mdgriffith$elm_ui$Internal$Model$finalizeNode, rendered.has, rendered.node, rendered.attributes, $mdgriffith$elm_ui$Internal$Model$Unkeyed(A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children))),
                    styles: allStyles
                });
            }
        }
    });
    var $mdgriffith$elm_ui$Internal$Model$Single = F3(function(a, b, c) {
        return {
            $: "Single",
            a: a,
            b: b,
            c: c
        };
    });
    var $mdgriffith$elm_ui$Internal$Model$Transform = function(a) {
        return {
            $: "Transform",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Flag$Field = F2(function(a, b) {
        return {
            $: "Field",
            a: a,
            b: b
        };
    });
    var $mdgriffith$elm_ui$Internal$Flag$add = F2(function(myFlag, _v0) {
        var one = _v0.a;
        var two = _v0.b;
        if (myFlag.$ === "Flag") {
            var first = myFlag.a;
            return A2($mdgriffith$elm_ui$Internal$Flag$Field, first | one, two);
        } else {
            var second = myFlag.a;
            return A2($mdgriffith$elm_ui$Internal$Flag$Field, one, second | two);
        }
    });
    var $mdgriffith$elm_ui$Internal$Model$ChildrenBehind = function(a) {
        return {
            $: "ChildrenBehind",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront = F2(function(a, b) {
        return {
            $: "ChildrenBehindAndInFront",
            a: a,
            b: b
        };
    });
    var $mdgriffith$elm_ui$Internal$Model$ChildrenInFront = function(a) {
        return {
            $: "ChildrenInFront",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Model$nearbyElement = F2(function(location, elem) {
        return A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class(function() {
                switch(location.$){
                    case "Above":
                        return A2($elm$core$String$join, " ", _List_fromArray([
                            $mdgriffith$elm_ui$Internal$Style$classes.nearby,
                            $mdgriffith$elm_ui$Internal$Style$classes.single,
                            $mdgriffith$elm_ui$Internal$Style$classes.above
                        ]));
                    case "Below":
                        return A2($elm$core$String$join, " ", _List_fromArray([
                            $mdgriffith$elm_ui$Internal$Style$classes.nearby,
                            $mdgriffith$elm_ui$Internal$Style$classes.single,
                            $mdgriffith$elm_ui$Internal$Style$classes.below
                        ]));
                    case "OnRight":
                        return A2($elm$core$String$join, " ", _List_fromArray([
                            $mdgriffith$elm_ui$Internal$Style$classes.nearby,
                            $mdgriffith$elm_ui$Internal$Style$classes.single,
                            $mdgriffith$elm_ui$Internal$Style$classes.onRight
                        ]));
                    case "OnLeft":
                        return A2($elm$core$String$join, " ", _List_fromArray([
                            $mdgriffith$elm_ui$Internal$Style$classes.nearby,
                            $mdgriffith$elm_ui$Internal$Style$classes.single,
                            $mdgriffith$elm_ui$Internal$Style$classes.onLeft
                        ]));
                    case "InFront":
                        return A2($elm$core$String$join, " ", _List_fromArray([
                            $mdgriffith$elm_ui$Internal$Style$classes.nearby,
                            $mdgriffith$elm_ui$Internal$Style$classes.single,
                            $mdgriffith$elm_ui$Internal$Style$classes.inFront
                        ]));
                    default:
                        return A2($elm$core$String$join, " ", _List_fromArray([
                            $mdgriffith$elm_ui$Internal$Style$classes.nearby,
                            $mdgriffith$elm_ui$Internal$Style$classes.single,
                            $mdgriffith$elm_ui$Internal$Style$classes.behind
                        ]));
                }
            }())
        ]), _List_fromArray([
            function() {
                switch(elem.$){
                    case "Empty":
                        return $elm$virtual_dom$VirtualDom$text("");
                    case "Text":
                        var str = elem.a;
                        return $mdgriffith$elm_ui$Internal$Model$textElement(str);
                    case "Unstyled":
                        var html = elem.a;
                        return html($mdgriffith$elm_ui$Internal$Model$asEl);
                    default:
                        var styled = elem.a;
                        return A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, $mdgriffith$elm_ui$Internal$Model$asEl);
                }
            }()
        ]));
    });
    var $mdgriffith$elm_ui$Internal$Model$addNearbyElement = F3(function(location, elem, existing) {
        var nearby = A2($mdgriffith$elm_ui$Internal$Model$nearbyElement, location, elem);
        switch(existing.$){
            case "NoNearbyChildren":
                if (location.$ === "Behind") return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(_List_fromArray([
                    nearby
                ]));
                else return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(_List_fromArray([
                    nearby
                ]));
            case "ChildrenBehind":
                var existingBehind = existing.a;
                if (location.$ === "Behind") return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(A2($elm$core$List$cons, nearby, existingBehind));
                else return A2($mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront, existingBehind, _List_fromArray([
                    nearby
                ]));
            case "ChildrenInFront":
                var existingInFront = existing.a;
                if (location.$ === "Behind") return A2($mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront, _List_fromArray([
                    nearby
                ]), existingInFront);
                else return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(A2($elm$core$List$cons, nearby, existingInFront));
            default:
                var existingBehind = existing.a;
                var existingInFront = existing.b;
                if (location.$ === "Behind") return A2($mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront, A2($elm$core$List$cons, nearby, existingBehind), existingInFront);
                else return A2($mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront, existingBehind, A2($elm$core$List$cons, nearby, existingInFront));
        }
    });
    var $mdgriffith$elm_ui$Internal$Model$Embedded = F2(function(a, b) {
        return {
            $: "Embedded",
            a: a,
            b: b
        };
    });
    var $mdgriffith$elm_ui$Internal$Model$NodeName = function(a) {
        return {
            $: "NodeName",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Model$addNodeName = F2(function(newNode, old) {
        switch(old.$){
            case "Generic":
                return $mdgriffith$elm_ui$Internal$Model$NodeName(newNode);
            case "NodeName":
                var name = old.a;
                return A2($mdgriffith$elm_ui$Internal$Model$Embedded, name, newNode);
            default:
                var x = old.a;
                var y = old.b;
                return A2($mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
        }
    });
    var $mdgriffith$elm_ui$Internal$Model$alignXName = function(align) {
        switch(align.$){
            case "Left":
                return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (" " + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
            case "Right":
                return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (" " + $mdgriffith$elm_ui$Internal$Style$classes.alignRight);
            default:
                return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (" " + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
        }
    };
    var $mdgriffith$elm_ui$Internal$Model$alignYName = function(align) {
        switch(align.$){
            case "Top":
                return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (" " + $mdgriffith$elm_ui$Internal$Style$classes.alignTop);
            case "Bottom":
                return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (" " + $mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
            default:
                return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (" " + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
        }
    };
    var $mdgriffith$elm_ui$Internal$Model$FullTransform = F4(function(a, b, c, d) {
        return {
            $: "FullTransform",
            a: a,
            b: b,
            c: c,
            d: d
        };
    });
    var $mdgriffith$elm_ui$Internal$Model$Moved = function(a) {
        return {
            $: "Moved",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Model$composeTransformation = F2(function(transform, component) {
        switch(transform.$){
            case "Untransformed":
                switch(component.$){
                    case "MoveX":
                        var x = component.a;
                        return $mdgriffith$elm_ui$Internal$Model$Moved(_Utils_Tuple3(x, 0, 0));
                    case "MoveY":
                        var y = component.a;
                        return $mdgriffith$elm_ui$Internal$Model$Moved(_Utils_Tuple3(0, y, 0));
                    case "MoveZ":
                        var z = component.a;
                        return $mdgriffith$elm_ui$Internal$Model$Moved(_Utils_Tuple3(0, 0, z));
                    case "MoveXYZ":
                        var xyz = component.a;
                        return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
                    case "Rotate":
                        var xyz = component.a;
                        var angle = component.b;
                        return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, _Utils_Tuple3(0, 0, 0), _Utils_Tuple3(1, 1, 1), xyz, angle);
                    default:
                        var xyz = component.a;
                        return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, _Utils_Tuple3(0, 0, 0), xyz, _Utils_Tuple3(0, 0, 1), 0);
                }
            case "Moved":
                var moved = transform.a;
                var x = moved.a;
                var y = moved.b;
                var z = moved.c;
                switch(component.$){
                    case "MoveX":
                        var newX = component.a;
                        return $mdgriffith$elm_ui$Internal$Model$Moved(_Utils_Tuple3(newX, y, z));
                    case "MoveY":
                        var newY = component.a;
                        return $mdgriffith$elm_ui$Internal$Model$Moved(_Utils_Tuple3(x, newY, z));
                    case "MoveZ":
                        var newZ = component.a;
                        return $mdgriffith$elm_ui$Internal$Model$Moved(_Utils_Tuple3(x, y, newZ));
                    case "MoveXYZ":
                        var xyz = component.a;
                        return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
                    case "Rotate":
                        var xyz = component.a;
                        var angle = component.b;
                        return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, _Utils_Tuple3(1, 1, 1), xyz, angle);
                    default:
                        var scale = component.a;
                        return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scale, _Utils_Tuple3(0, 0, 1), 0);
                }
            default:
                var moved = transform.a;
                var x = moved.a;
                var y = moved.b;
                var z = moved.c;
                var scaled = transform.b;
                var origin = transform.c;
                var angle = transform.d;
                switch(component.$){
                    case "MoveX":
                        var newX = component.a;
                        return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, _Utils_Tuple3(newX, y, z), scaled, origin, angle);
                    case "MoveY":
                        var newY = component.a;
                        return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, _Utils_Tuple3(x, newY, z), scaled, origin, angle);
                    case "MoveZ":
                        var newZ = component.a;
                        return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, _Utils_Tuple3(x, y, newZ), scaled, origin, angle);
                    case "MoveXYZ":
                        var newMove = component.a;
                        return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, newMove, scaled, origin, angle);
                    case "Rotate":
                        var newOrigin = component.a;
                        var newAngle = component.b;
                        return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scaled, newOrigin, newAngle);
                    default:
                        var newScale = component.a;
                        return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, newScale, origin, angle);
                }
        }
    });
    var $mdgriffith$elm_ui$Internal$Flag$height = $mdgriffith$elm_ui$Internal$Flag$flag(7);
    var $mdgriffith$elm_ui$Internal$Flag$heightContent = $mdgriffith$elm_ui$Internal$Flag$flag(36);
    var $mdgriffith$elm_ui$Internal$Flag$merge = F2(function(_v0, _v1) {
        var one = _v0.a;
        var two = _v0.b;
        var three = _v1.a;
        var four = _v1.b;
        return A2($mdgriffith$elm_ui$Internal$Flag$Field, one | three, two | four);
    });
    var $mdgriffith$elm_ui$Internal$Flag$none = A2($mdgriffith$elm_ui$Internal$Flag$Field, 0, 0);
    var $mdgriffith$elm_ui$Internal$Model$renderHeight = function(h) {
        switch(h.$){
            case "Px":
                var px = h.a;
                var val = $elm$core$String$fromInt(px);
                var name = "height-px-" + val;
                return _Utils_Tuple3($mdgriffith$elm_ui$Internal$Flag$none, $mdgriffith$elm_ui$Internal$Style$classes.heightExact + (" " + name), _List_fromArray([
                    A3($mdgriffith$elm_ui$Internal$Model$Single, name, "height", val + "px")
                ]));
            case "Content":
                return _Utils_Tuple3(A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightContent, $mdgriffith$elm_ui$Internal$Flag$none), $mdgriffith$elm_ui$Internal$Style$classes.heightContent, _List_Nil);
            case "Fill":
                var portion = h.a;
                return portion === 1 ? _Utils_Tuple3(A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none), $mdgriffith$elm_ui$Internal$Style$classes.heightFill, _List_Nil) : _Utils_Tuple3(A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none), $mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (" height-fill-" + $elm$core$String$fromInt(portion)), _List_fromArray([
                    A3($mdgriffith$elm_ui$Internal$Model$Single, $mdgriffith$elm_ui$Internal$Style$classes.any + ("." + ($mdgriffith$elm_ui$Internal$Style$classes.column + (" > " + $mdgriffith$elm_ui$Internal$Style$dot("height-fill-" + $elm$core$String$fromInt(portion))))), "flex-grow", $elm$core$String$fromInt(portion * 100000))
                ]));
            case "Min":
                var minSize = h.a;
                var len = h.b;
                var cls = "min-height-" + $elm$core$String$fromInt(minSize);
                var style = A3($mdgriffith$elm_ui$Internal$Model$Single, cls, "min-height", $elm$core$String$fromInt(minSize) + "px !important");
                var _v1 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
                var newFlag = _v1.a;
                var newAttrs = _v1.b;
                var newStyle = _v1.c;
                return _Utils_Tuple3(A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag), cls + (" " + newAttrs), A2($elm$core$List$cons, style, newStyle));
            default:
                var maxSize = h.a;
                var len = h.b;
                var cls = "max-height-" + $elm$core$String$fromInt(maxSize);
                var style = A3($mdgriffith$elm_ui$Internal$Model$Single, cls, "max-height", $elm$core$String$fromInt(maxSize) + "px");
                var _v2 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
                var newFlag = _v2.a;
                var newAttrs = _v2.b;
                var newStyle = _v2.c;
                return _Utils_Tuple3(A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag), cls + (" " + newAttrs), A2($elm$core$List$cons, style, newStyle));
        }
    };
    var $mdgriffith$elm_ui$Internal$Flag$widthContent = $mdgriffith$elm_ui$Internal$Flag$flag(38);
    var $mdgriffith$elm_ui$Internal$Model$renderWidth = function(w) {
        switch(w.$){
            case "Px":
                var px = w.a;
                return _Utils_Tuple3($mdgriffith$elm_ui$Internal$Flag$none, $mdgriffith$elm_ui$Internal$Style$classes.widthExact + (" width-px-" + $elm$core$String$fromInt(px)), _List_fromArray([
                    A3($mdgriffith$elm_ui$Internal$Model$Single, "width-px-" + $elm$core$String$fromInt(px), "width", $elm$core$String$fromInt(px) + "px")
                ]));
            case "Content":
                return _Utils_Tuple3(A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthContent, $mdgriffith$elm_ui$Internal$Flag$none), $mdgriffith$elm_ui$Internal$Style$classes.widthContent, _List_Nil);
            case "Fill":
                var portion = w.a;
                return portion === 1 ? _Utils_Tuple3(A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none), $mdgriffith$elm_ui$Internal$Style$classes.widthFill, _List_Nil) : _Utils_Tuple3(A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none), $mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (" width-fill-" + $elm$core$String$fromInt(portion)), _List_fromArray([
                    A3($mdgriffith$elm_ui$Internal$Model$Single, $mdgriffith$elm_ui$Internal$Style$classes.any + ("." + ($mdgriffith$elm_ui$Internal$Style$classes.row + (" > " + $mdgriffith$elm_ui$Internal$Style$dot("width-fill-" + $elm$core$String$fromInt(portion))))), "flex-grow", $elm$core$String$fromInt(portion * 100000))
                ]));
            case "Min":
                var minSize = w.a;
                var len = w.b;
                var cls = "min-width-" + $elm$core$String$fromInt(minSize);
                var style = A3($mdgriffith$elm_ui$Internal$Model$Single, cls, "min-width", $elm$core$String$fromInt(minSize) + "px");
                var _v1 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
                var newFlag = _v1.a;
                var newAttrs = _v1.b;
                var newStyle = _v1.c;
                return _Utils_Tuple3(A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag), cls + (" " + newAttrs), A2($elm$core$List$cons, style, newStyle));
            default:
                var maxSize = w.a;
                var len = w.b;
                var cls = "max-width-" + $elm$core$String$fromInt(maxSize);
                var style = A3($mdgriffith$elm_ui$Internal$Model$Single, cls, "max-width", $elm$core$String$fromInt(maxSize) + "px");
                var _v2 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
                var newFlag = _v2.a;
                var newAttrs = _v2.b;
                var newStyle = _v2.c;
                return _Utils_Tuple3(A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag), cls + (" " + newAttrs), A2($elm$core$List$cons, style, newStyle));
        }
    };
    var $mdgriffith$elm_ui$Internal$Flag$borderWidth = $mdgriffith$elm_ui$Internal$Flag$flag(27);
    var $mdgriffith$elm_ui$Internal$Model$skippable = F2(function(flag, style) {
        if (_Utils_eq(flag, $mdgriffith$elm_ui$Internal$Flag$borderWidth)) {
            if (style.$ === "Single") {
                var val = style.c;
                switch(val){
                    case "0px":
                        return true;
                    case "1px":
                        return true;
                    case "2px":
                        return true;
                    case "3px":
                        return true;
                    case "4px":
                        return true;
                    case "5px":
                        return true;
                    case "6px":
                        return true;
                    default:
                        return false;
                }
            } else return false;
        } else switch(style.$){
            case "FontSize":
                var i = style.a;
                return i >= 8 && i <= 32;
            case "PaddingStyle":
                var name = style.a;
                var t = style.b;
                var r = style.c;
                var b = style.d;
                var l = style.e;
                return _Utils_eq(t, b) && _Utils_eq(t, r) && _Utils_eq(t, l) && t >= 0 && t <= 24;
            default:
                return false;
        }
    });
    var $mdgriffith$elm_ui$Internal$Flag$width = $mdgriffith$elm_ui$Internal$Flag$flag(6);
    var $mdgriffith$elm_ui$Internal$Flag$xAlign = $mdgriffith$elm_ui$Internal$Flag$flag(30);
    var $mdgriffith$elm_ui$Internal$Flag$yAlign = $mdgriffith$elm_ui$Internal$Flag$flag(29);
    var $mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive = F8(function(classes, node, has, transform, styles, attrs, children, elementAttrs) {
        gatherAttrRecursive: while(true)if (!elementAttrs.b) {
            var _v1 = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
            if (_v1.$ === "Nothing") return {
                attributes: A2($elm$core$List$cons, $elm$html$Html$Attributes$class(classes), attrs),
                children: children,
                has: has,
                node: node,
                styles: styles
            };
            else {
                var _class = _v1.a;
                return {
                    attributes: A2($elm$core$List$cons, $elm$html$Html$Attributes$class(classes + (" " + _class)), attrs),
                    children: children,
                    has: has,
                    node: node,
                    styles: A2($elm$core$List$cons, $mdgriffith$elm_ui$Internal$Model$Transform(transform), styles)
                };
            }
        } else {
            var attribute = elementAttrs.a;
            var remaining = elementAttrs.b;
            switch(attribute.$){
                case "NoAttribute":
                    var $temp$classes = classes, $temp$node = node, $temp$has = has, $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                    classes = $temp$classes;
                    node = $temp$node;
                    has = $temp$has;
                    transform = $temp$transform;
                    styles = $temp$styles;
                    attrs = $temp$attrs;
                    children = $temp$children;
                    elementAttrs = $temp$elementAttrs;
                    continue gatherAttrRecursive;
                case "Class":
                    var flag = attribute.a;
                    var exactClassName = attribute.b;
                    if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
                        var $temp$classes = classes, $temp$node = node, $temp$has = has, $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                        classes = $temp$classes;
                        node = $temp$node;
                        has = $temp$has;
                        transform = $temp$transform;
                        styles = $temp$styles;
                        attrs = $temp$attrs;
                        children = $temp$children;
                        elementAttrs = $temp$elementAttrs;
                        continue gatherAttrRecursive;
                    } else {
                        var $temp$classes = exactClassName + (" " + classes), $temp$node = node, $temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has), $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                        classes = $temp$classes;
                        node = $temp$node;
                        has = $temp$has;
                        transform = $temp$transform;
                        styles = $temp$styles;
                        attrs = $temp$attrs;
                        children = $temp$children;
                        elementAttrs = $temp$elementAttrs;
                        continue gatherAttrRecursive;
                    }
                case "Attr":
                    var actualAttribute = attribute.a;
                    var $temp$classes = classes, $temp$node = node, $temp$has = has, $temp$transform = transform, $temp$styles = styles, $temp$attrs = A2($elm$core$List$cons, actualAttribute, attrs), $temp$children = children, $temp$elementAttrs = remaining;
                    classes = $temp$classes;
                    node = $temp$node;
                    has = $temp$has;
                    transform = $temp$transform;
                    styles = $temp$styles;
                    attrs = $temp$attrs;
                    children = $temp$children;
                    elementAttrs = $temp$elementAttrs;
                    continue gatherAttrRecursive;
                case "StyleClass":
                    var flag = attribute.a;
                    var style = attribute.b;
                    if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
                        var $temp$classes = classes, $temp$node = node, $temp$has = has, $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                        classes = $temp$classes;
                        node = $temp$node;
                        has = $temp$has;
                        transform = $temp$transform;
                        styles = $temp$styles;
                        attrs = $temp$attrs;
                        children = $temp$children;
                        elementAttrs = $temp$elementAttrs;
                        continue gatherAttrRecursive;
                    } else if (A2($mdgriffith$elm_ui$Internal$Model$skippable, flag, style)) {
                        var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (" " + classes), $temp$node = node, $temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has), $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                        classes = $temp$classes;
                        node = $temp$node;
                        has = $temp$has;
                        transform = $temp$transform;
                        styles = $temp$styles;
                        attrs = $temp$attrs;
                        children = $temp$children;
                        elementAttrs = $temp$elementAttrs;
                        continue gatherAttrRecursive;
                    } else {
                        var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (" " + classes), $temp$node = node, $temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has), $temp$transform = transform, $temp$styles = A2($elm$core$List$cons, style, styles), $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                        classes = $temp$classes;
                        node = $temp$node;
                        has = $temp$has;
                        transform = $temp$transform;
                        styles = $temp$styles;
                        attrs = $temp$attrs;
                        children = $temp$children;
                        elementAttrs = $temp$elementAttrs;
                        continue gatherAttrRecursive;
                    }
                case "TransformComponent":
                    var flag = attribute.a;
                    var component = attribute.b;
                    var $temp$classes = classes, $temp$node = node, $temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has), $temp$transform = A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, transform, component), $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                    classes = $temp$classes;
                    node = $temp$node;
                    has = $temp$has;
                    transform = $temp$transform;
                    styles = $temp$styles;
                    attrs = $temp$attrs;
                    children = $temp$children;
                    elementAttrs = $temp$elementAttrs;
                    continue gatherAttrRecursive;
                case "Width":
                    var width = attribute.a;
                    if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$width, has)) {
                        var $temp$classes = classes, $temp$node = node, $temp$has = has, $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                        classes = $temp$classes;
                        node = $temp$node;
                        has = $temp$has;
                        transform = $temp$transform;
                        styles = $temp$styles;
                        attrs = $temp$attrs;
                        children = $temp$children;
                        elementAttrs = $temp$elementAttrs;
                        continue gatherAttrRecursive;
                    } else switch(width.$){
                        case "Px":
                            var px = width.a;
                            var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.widthExact + (" width-px-" + $elm$core$String$fromInt(px)) + (" " + classes), $temp$node = node, $temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has), $temp$transform = transform, $temp$styles = A2($elm$core$List$cons, A3($mdgriffith$elm_ui$Internal$Model$Single, "width-px-" + $elm$core$String$fromInt(px), "width", $elm$core$String$fromInt(px) + "px"), styles), $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                            classes = $temp$classes;
                            node = $temp$node;
                            has = $temp$has;
                            transform = $temp$transform;
                            styles = $temp$styles;
                            attrs = $temp$attrs;
                            children = $temp$children;
                            elementAttrs = $temp$elementAttrs;
                            continue gatherAttrRecursive;
                        case "Content":
                            var $temp$classes = classes + (" " + $mdgriffith$elm_ui$Internal$Style$classes.widthContent), $temp$node = node, $temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthContent, A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)), $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                            classes = $temp$classes;
                            node = $temp$node;
                            has = $temp$has;
                            transform = $temp$transform;
                            styles = $temp$styles;
                            attrs = $temp$attrs;
                            children = $temp$children;
                            elementAttrs = $temp$elementAttrs;
                            continue gatherAttrRecursive;
                        case "Fill":
                            var portion = width.a;
                            if (portion === 1) {
                                var $temp$classes = classes + (" " + $mdgriffith$elm_ui$Internal$Style$classes.widthFill), $temp$node = node, $temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)), $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                                classes = $temp$classes;
                                node = $temp$node;
                                has = $temp$has;
                                transform = $temp$transform;
                                styles = $temp$styles;
                                attrs = $temp$attrs;
                                children = $temp$children;
                                elementAttrs = $temp$elementAttrs;
                                continue gatherAttrRecursive;
                            } else {
                                var $temp$classes = classes + (" " + ($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (" width-fill-" + $elm$core$String$fromInt(portion)))), $temp$node = node, $temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)), $temp$transform = transform, $temp$styles = A2($elm$core$List$cons, A3($mdgriffith$elm_ui$Internal$Model$Single, $mdgriffith$elm_ui$Internal$Style$classes.any + ("." + ($mdgriffith$elm_ui$Internal$Style$classes.row + (" > " + $mdgriffith$elm_ui$Internal$Style$dot("width-fill-" + $elm$core$String$fromInt(portion))))), "flex-grow", $elm$core$String$fromInt(portion * 100000)), styles), $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                                classes = $temp$classes;
                                node = $temp$node;
                                has = $temp$has;
                                transform = $temp$transform;
                                styles = $temp$styles;
                                attrs = $temp$attrs;
                                children = $temp$children;
                                elementAttrs = $temp$elementAttrs;
                                continue gatherAttrRecursive;
                            }
                        default:
                            var _v4 = $mdgriffith$elm_ui$Internal$Model$renderWidth(width);
                            var addToFlags = _v4.a;
                            var newClass = _v4.b;
                            var newStyles = _v4.c;
                            var $temp$classes = classes + (" " + newClass), $temp$node = node, $temp$has = A2($mdgriffith$elm_ui$Internal$Flag$merge, addToFlags, A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)), $temp$transform = transform, $temp$styles = _Utils_ap(newStyles, styles), $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                            classes = $temp$classes;
                            node = $temp$node;
                            has = $temp$has;
                            transform = $temp$transform;
                            styles = $temp$styles;
                            attrs = $temp$attrs;
                            children = $temp$children;
                            elementAttrs = $temp$elementAttrs;
                            continue gatherAttrRecursive;
                    }
                case "Height":
                    var height = attribute.a;
                    if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$height, has)) {
                        var $temp$classes = classes, $temp$node = node, $temp$has = has, $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                        classes = $temp$classes;
                        node = $temp$node;
                        has = $temp$has;
                        transform = $temp$transform;
                        styles = $temp$styles;
                        attrs = $temp$attrs;
                        children = $temp$children;
                        elementAttrs = $temp$elementAttrs;
                        continue gatherAttrRecursive;
                    } else switch(height.$){
                        case "Px":
                            var px = height.a;
                            var val = $elm$core$String$fromInt(px) + "px";
                            var name = "height-px-" + val;
                            var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightExact + (" " + (name + (" " + classes))), $temp$node = node, $temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has), $temp$transform = transform, $temp$styles = A2($elm$core$List$cons, A3($mdgriffith$elm_ui$Internal$Model$Single, name, "height ", val), styles), $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                            classes = $temp$classes;
                            node = $temp$node;
                            has = $temp$has;
                            transform = $temp$transform;
                            styles = $temp$styles;
                            attrs = $temp$attrs;
                            children = $temp$children;
                            elementAttrs = $temp$elementAttrs;
                            continue gatherAttrRecursive;
                        case "Content":
                            var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightContent + (" " + classes), $temp$node = node, $temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightContent, A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)), $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                            classes = $temp$classes;
                            node = $temp$node;
                            has = $temp$has;
                            transform = $temp$transform;
                            styles = $temp$styles;
                            attrs = $temp$attrs;
                            children = $temp$children;
                            elementAttrs = $temp$elementAttrs;
                            continue gatherAttrRecursive;
                        case "Fill":
                            var portion = height.a;
                            if (portion === 1) {
                                var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightFill + (" " + classes), $temp$node = node, $temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)), $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                                classes = $temp$classes;
                                node = $temp$node;
                                has = $temp$has;
                                transform = $temp$transform;
                                styles = $temp$styles;
                                attrs = $temp$attrs;
                                children = $temp$children;
                                elementAttrs = $temp$elementAttrs;
                                continue gatherAttrRecursive;
                            } else {
                                var $temp$classes = classes + (" " + ($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (" height-fill-" + $elm$core$String$fromInt(portion)))), $temp$node = node, $temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)), $temp$transform = transform, $temp$styles = A2($elm$core$List$cons, A3($mdgriffith$elm_ui$Internal$Model$Single, $mdgriffith$elm_ui$Internal$Style$classes.any + ("." + ($mdgriffith$elm_ui$Internal$Style$classes.column + (" > " + $mdgriffith$elm_ui$Internal$Style$dot("height-fill-" + $elm$core$String$fromInt(portion))))), "flex-grow", $elm$core$String$fromInt(portion * 100000)), styles), $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                                classes = $temp$classes;
                                node = $temp$node;
                                has = $temp$has;
                                transform = $temp$transform;
                                styles = $temp$styles;
                                attrs = $temp$attrs;
                                children = $temp$children;
                                elementAttrs = $temp$elementAttrs;
                                continue gatherAttrRecursive;
                            }
                        default:
                            var _v6 = $mdgriffith$elm_ui$Internal$Model$renderHeight(height);
                            var addToFlags = _v6.a;
                            var newClass = _v6.b;
                            var newStyles = _v6.c;
                            var $temp$classes = classes + (" " + newClass), $temp$node = node, $temp$has = A2($mdgriffith$elm_ui$Internal$Flag$merge, addToFlags, A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)), $temp$transform = transform, $temp$styles = _Utils_ap(newStyles, styles), $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                            classes = $temp$classes;
                            node = $temp$node;
                            has = $temp$has;
                            transform = $temp$transform;
                            styles = $temp$styles;
                            attrs = $temp$attrs;
                            children = $temp$children;
                            elementAttrs = $temp$elementAttrs;
                            continue gatherAttrRecursive;
                    }
                case "Describe":
                    var description = attribute.a;
                    switch(description.$){
                        case "Main":
                            var $temp$classes = classes, $temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, "main", node), $temp$has = has, $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                            classes = $temp$classes;
                            node = $temp$node;
                            has = $temp$has;
                            transform = $temp$transform;
                            styles = $temp$styles;
                            attrs = $temp$attrs;
                            children = $temp$children;
                            elementAttrs = $temp$elementAttrs;
                            continue gatherAttrRecursive;
                        case "Navigation":
                            var $temp$classes = classes, $temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, "nav", node), $temp$has = has, $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                            classes = $temp$classes;
                            node = $temp$node;
                            has = $temp$has;
                            transform = $temp$transform;
                            styles = $temp$styles;
                            attrs = $temp$attrs;
                            children = $temp$children;
                            elementAttrs = $temp$elementAttrs;
                            continue gatherAttrRecursive;
                        case "ContentInfo":
                            var $temp$classes = classes, $temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, "footer", node), $temp$has = has, $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                            classes = $temp$classes;
                            node = $temp$node;
                            has = $temp$has;
                            transform = $temp$transform;
                            styles = $temp$styles;
                            attrs = $temp$attrs;
                            children = $temp$children;
                            elementAttrs = $temp$elementAttrs;
                            continue gatherAttrRecursive;
                        case "Complementary":
                            var $temp$classes = classes, $temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, "aside", node), $temp$has = has, $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                            classes = $temp$classes;
                            node = $temp$node;
                            has = $temp$has;
                            transform = $temp$transform;
                            styles = $temp$styles;
                            attrs = $temp$attrs;
                            children = $temp$children;
                            elementAttrs = $temp$elementAttrs;
                            continue gatherAttrRecursive;
                        case "Heading":
                            var i = description.a;
                            if (i <= 1) {
                                var $temp$classes = classes, $temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, "h1", node), $temp$has = has, $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                                classes = $temp$classes;
                                node = $temp$node;
                                has = $temp$has;
                                transform = $temp$transform;
                                styles = $temp$styles;
                                attrs = $temp$attrs;
                                children = $temp$children;
                                elementAttrs = $temp$elementAttrs;
                                continue gatherAttrRecursive;
                            } else if (i < 7) {
                                var $temp$classes = classes, $temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, "h" + $elm$core$String$fromInt(i), node), $temp$has = has, $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                                classes = $temp$classes;
                                node = $temp$node;
                                has = $temp$has;
                                transform = $temp$transform;
                                styles = $temp$styles;
                                attrs = $temp$attrs;
                                children = $temp$children;
                                elementAttrs = $temp$elementAttrs;
                                continue gatherAttrRecursive;
                            } else {
                                var $temp$classes = classes, $temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, "h6", node), $temp$has = has, $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                                classes = $temp$classes;
                                node = $temp$node;
                                has = $temp$has;
                                transform = $temp$transform;
                                styles = $temp$styles;
                                attrs = $temp$attrs;
                                children = $temp$children;
                                elementAttrs = $temp$elementAttrs;
                                continue gatherAttrRecursive;
                            }
                        case "Paragraph":
                            var $temp$classes = classes, $temp$node = node, $temp$has = has, $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                            classes = $temp$classes;
                            node = $temp$node;
                            has = $temp$has;
                            transform = $temp$transform;
                            styles = $temp$styles;
                            attrs = $temp$attrs;
                            children = $temp$children;
                            elementAttrs = $temp$elementAttrs;
                            continue gatherAttrRecursive;
                        case "Button":
                            var $temp$classes = classes, $temp$node = node, $temp$has = has, $temp$transform = transform, $temp$styles = styles, $temp$attrs = A2($elm$core$List$cons, A2($elm$virtual_dom$VirtualDom$attribute, "role", "button"), attrs), $temp$children = children, $temp$elementAttrs = remaining;
                            classes = $temp$classes;
                            node = $temp$node;
                            has = $temp$has;
                            transform = $temp$transform;
                            styles = $temp$styles;
                            attrs = $temp$attrs;
                            children = $temp$children;
                            elementAttrs = $temp$elementAttrs;
                            continue gatherAttrRecursive;
                        case "Label":
                            var label = description.a;
                            var $temp$classes = classes, $temp$node = node, $temp$has = has, $temp$transform = transform, $temp$styles = styles, $temp$attrs = A2($elm$core$List$cons, A2($elm$virtual_dom$VirtualDom$attribute, "aria-label", label), attrs), $temp$children = children, $temp$elementAttrs = remaining;
                            classes = $temp$classes;
                            node = $temp$node;
                            has = $temp$has;
                            transform = $temp$transform;
                            styles = $temp$styles;
                            attrs = $temp$attrs;
                            children = $temp$children;
                            elementAttrs = $temp$elementAttrs;
                            continue gatherAttrRecursive;
                        case "LivePolite":
                            var $temp$classes = classes, $temp$node = node, $temp$has = has, $temp$transform = transform, $temp$styles = styles, $temp$attrs = A2($elm$core$List$cons, A2($elm$virtual_dom$VirtualDom$attribute, "aria-live", "polite"), attrs), $temp$children = children, $temp$elementAttrs = remaining;
                            classes = $temp$classes;
                            node = $temp$node;
                            has = $temp$has;
                            transform = $temp$transform;
                            styles = $temp$styles;
                            attrs = $temp$attrs;
                            children = $temp$children;
                            elementAttrs = $temp$elementAttrs;
                            continue gatherAttrRecursive;
                        default:
                            var $temp$classes = classes, $temp$node = node, $temp$has = has, $temp$transform = transform, $temp$styles = styles, $temp$attrs = A2($elm$core$List$cons, A2($elm$virtual_dom$VirtualDom$attribute, "aria-live", "assertive"), attrs), $temp$children = children, $temp$elementAttrs = remaining;
                            classes = $temp$classes;
                            node = $temp$node;
                            has = $temp$has;
                            transform = $temp$transform;
                            styles = $temp$styles;
                            attrs = $temp$attrs;
                            children = $temp$children;
                            elementAttrs = $temp$elementAttrs;
                            continue gatherAttrRecursive;
                    }
                case "Nearby":
                    var location = attribute.a;
                    var elem = attribute.b;
                    var newStyles = function() {
                        switch(elem.$){
                            case "Empty":
                                return styles;
                            case "Text":
                                var str = elem.a;
                                return styles;
                            case "Unstyled":
                                var html = elem.a;
                                return styles;
                            default:
                                var styled = elem.a;
                                return _Utils_ap(styles, styled.styles);
                        }
                    }();
                    var $temp$classes = classes, $temp$node = node, $temp$has = has, $temp$transform = transform, $temp$styles = newStyles, $temp$attrs = attrs, $temp$children = A3($mdgriffith$elm_ui$Internal$Model$addNearbyElement, location, elem, children), $temp$elementAttrs = remaining;
                    classes = $temp$classes;
                    node = $temp$node;
                    has = $temp$has;
                    transform = $temp$transform;
                    styles = $temp$styles;
                    attrs = $temp$attrs;
                    children = $temp$children;
                    elementAttrs = $temp$elementAttrs;
                    continue gatherAttrRecursive;
                case "AlignX":
                    var x = attribute.a;
                    if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)) {
                        var $temp$classes = classes, $temp$node = node, $temp$has = has, $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                        classes = $temp$classes;
                        node = $temp$node;
                        has = $temp$has;
                        transform = $temp$transform;
                        styles = $temp$styles;
                        attrs = $temp$attrs;
                        children = $temp$children;
                        elementAttrs = $temp$elementAttrs;
                        continue gatherAttrRecursive;
                    } else {
                        var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignXName(x) + (" " + classes), $temp$node = node, $temp$has = function(flags) {
                            switch(x.$){
                                case "CenterX":
                                    return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerX, flags);
                                case "Right":
                                    return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignRight, flags);
                                default:
                                    return flags;
                            }
                        }(A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)), $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                        classes = $temp$classes;
                        node = $temp$node;
                        has = $temp$has;
                        transform = $temp$transform;
                        styles = $temp$styles;
                        attrs = $temp$attrs;
                        children = $temp$children;
                        elementAttrs = $temp$elementAttrs;
                        continue gatherAttrRecursive;
                    }
                default:
                    var y = attribute.a;
                    if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)) {
                        var $temp$classes = classes, $temp$node = node, $temp$has = has, $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                        classes = $temp$classes;
                        node = $temp$node;
                        has = $temp$has;
                        transform = $temp$transform;
                        styles = $temp$styles;
                        attrs = $temp$attrs;
                        children = $temp$children;
                        elementAttrs = $temp$elementAttrs;
                        continue gatherAttrRecursive;
                    } else {
                        var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignYName(y) + (" " + classes), $temp$node = node, $temp$has = function(flags) {
                            switch(y.$){
                                case "CenterY":
                                    return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerY, flags);
                                case "Bottom":
                                    return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignBottom, flags);
                                default:
                                    return flags;
                            }
                        }(A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)), $temp$transform = transform, $temp$styles = styles, $temp$attrs = attrs, $temp$children = children, $temp$elementAttrs = remaining;
                        classes = $temp$classes;
                        node = $temp$node;
                        has = $temp$has;
                        transform = $temp$transform;
                        styles = $temp$styles;
                        attrs = $temp$attrs;
                        children = $temp$children;
                        elementAttrs = $temp$elementAttrs;
                        continue gatherAttrRecursive;
                    }
            }
        }
    });
    var $mdgriffith$elm_ui$Internal$Model$Untransformed = {
        $: "Untransformed"
    };
    var $mdgriffith$elm_ui$Internal$Model$untransformed = $mdgriffith$elm_ui$Internal$Model$Untransformed;
    var $mdgriffith$elm_ui$Internal$Model$element = F4(function(context, node, attributes, children) {
        return A3($mdgriffith$elm_ui$Internal$Model$createElement, context, children, A8($mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive, $mdgriffith$elm_ui$Internal$Model$contextClasses(context), node, $mdgriffith$elm_ui$Internal$Flag$none, $mdgriffith$elm_ui$Internal$Model$untransformed, _List_Nil, _List_Nil, $mdgriffith$elm_ui$Internal$Model$NoNearbyChildren, $elm$core$List$reverse(attributes)));
    });
    var $mdgriffith$elm_ui$Internal$Model$Height = function(a) {
        return {
            $: "Height",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Element$height = $mdgriffith$elm_ui$Internal$Model$Height;
    var $mdgriffith$elm_ui$Internal$Model$Attr = function(a) {
        return {
            $: "Attr",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Model$htmlClass = function(cls) {
        return $mdgriffith$elm_ui$Internal$Model$Attr($elm$html$Html$Attributes$class(cls));
    };
    var $mdgriffith$elm_ui$Internal$Model$Content = {
        $: "Content"
    };
    var $mdgriffith$elm_ui$Element$shrink = $mdgriffith$elm_ui$Internal$Model$Content;
    var $mdgriffith$elm_ui$Internal$Model$Width = function(a) {
        return {
            $: "Width",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Element$width = $mdgriffith$elm_ui$Internal$Model$Width;
    var $mdgriffith$elm_ui$Element$column = F2(function(attrs, children) {
        return A4($mdgriffith$elm_ui$Internal$Model$element, $mdgriffith$elm_ui$Internal$Model$asColumn, $mdgriffith$elm_ui$Internal$Model$div, A2($elm$core$List$cons, $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentTop + (" " + $mdgriffith$elm_ui$Internal$Style$classes.contentLeft)), A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink), A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink), attrs))), $mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
    });
    var $mdgriffith$elm_ui$Internal$Model$AlignX = function(a) {
        return {
            $: "AlignX",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Model$CenterX = {
        $: "CenterX"
    };
    var $mdgriffith$elm_ui$Element$centerX = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$CenterX);
    var $mdgriffith$elm_ui$Internal$Model$AlignY = function(a) {
        return {
            $: "AlignY",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Model$CenterY = {
        $: "CenterY"
    };
    var $mdgriffith$elm_ui$Element$centerY = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$CenterY);
    var $mdgriffith$elm_ui$Internal$Model$Colored = F3(function(a, b, c) {
        return {
            $: "Colored",
            a: a,
            b: b,
            c: c
        };
    });
    var $mdgriffith$elm_ui$Internal$Model$StyleClass = F2(function(a, b) {
        return {
            $: "StyleClass",
            a: a,
            b: b
        };
    });
    var $mdgriffith$elm_ui$Internal$Flag$bgColor = $mdgriffith$elm_ui$Internal$Flag$flag(8);
    var $mdgriffith$elm_ui$Internal$Model$formatColorClass = function(_v0) {
        var red = _v0.a;
        var green = _v0.b;
        var blue = _v0.c;
        var alpha = _v0.d;
        return $mdgriffith$elm_ui$Internal$Model$floatClass(red) + ("-" + ($mdgriffith$elm_ui$Internal$Model$floatClass(green) + ("-" + ($mdgriffith$elm_ui$Internal$Model$floatClass(blue) + ("-" + $mdgriffith$elm_ui$Internal$Model$floatClass(alpha))))));
    };
    var $mdgriffith$elm_ui$Element$Background$color = function(clr) {
        return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, $mdgriffith$elm_ui$Internal$Flag$bgColor, A3($mdgriffith$elm_ui$Internal$Model$Colored, "bg-" + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr), "background-color", clr));
    };
    var $mdgriffith$elm_ui$Internal$Model$Fill = function(a) {
        return {
            $: "Fill",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Element$fill = $mdgriffith$elm_ui$Internal$Model$Fill(1);
    var $mdgriffith$elm_ui$Internal$Model$Describe = function(a) {
        return {
            $: "Describe",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Model$Main = {
        $: "Main"
    };
    var $mdgriffith$elm_ui$Element$Region$mainContent = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Main);
    var $mdgriffith$elm_ui$Internal$Model$Max = F2(function(a, b) {
        return {
            $: "Max",
            a: a,
            b: b
        };
    });
    var $mdgriffith$elm_ui$Element$maximum = F2(function(i, l) {
        return A2($mdgriffith$elm_ui$Internal$Model$Max, i, l);
    });
    var $mdgriffith$elm_ui$Internal$Model$PaddingStyle = F5(function(a, b, c, d, e) {
        return {
            $: "PaddingStyle",
            a: a,
            b: b,
            c: c,
            d: d,
            e: e
        };
    });
    var $mdgriffith$elm_ui$Internal$Flag$padding = $mdgriffith$elm_ui$Internal$Flag$flag(2);
    var $mdgriffith$elm_ui$Element$padding = function(x) {
        var f = x;
        return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, $mdgriffith$elm_ui$Internal$Flag$padding, A5($mdgriffith$elm_ui$Internal$Model$PaddingStyle, "p-" + $elm$core$String$fromInt(x), f, f, f, f));
    };
    var $mdgriffith$elm_ui$Internal$Model$Rgba = F4(function(a, b, c, d) {
        return {
            $: "Rgba",
            a: a,
            b: b,
            c: c,
            d: d
        };
    });
    var $mdgriffith$elm_ui$Element$rgb255 = F3(function(red, green, blue) {
        return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, 1);
    });
    var $Orasund$elm_ui_framework$Framework$container = _List_fromArray([
        $mdgriffith$elm_ui$Element$centerX,
        $mdgriffith$elm_ui$Element$centerY,
        $mdgriffith$elm_ui$Element$width(A2($mdgriffith$elm_ui$Element$maximum, 1200, $mdgriffith$elm_ui$Element$fill)),
        $mdgriffith$elm_ui$Element$padding(20),
        $mdgriffith$elm_ui$Element$Region$mainContent,
        $mdgriffith$elm_ui$Element$Background$color(A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 255))
    ]);
    var $mdgriffith$elm_ui$Element$el = F2(function(attrs, child) {
        return A4($mdgriffith$elm_ui$Internal$Model$element, $mdgriffith$elm_ui$Internal$Model$asEl, $mdgriffith$elm_ui$Internal$Model$div, A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink), A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink), attrs)), $mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_fromArray([
            child
        ])));
    });
    var $mdgriffith$elm_ui$Internal$Model$Left = {
        $: "Left"
    };
    var $mdgriffith$elm_ui$Element$alignLeft = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Left);
    var $mdgriffith$elm_ui$Internal$Model$Class = F2(function(a, b) {
        return {
            $: "Class",
            a: a,
            b: b
        };
    });
    var $mdgriffith$elm_ui$Internal$Flag$fontWeight = $mdgriffith$elm_ui$Internal$Flag$flag(13);
    var $mdgriffith$elm_ui$Element$Font$bold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.bold);
    var $elm$core$Basics$clamp = F3(function(low, high, number) {
        return _Utils_cmp(number, low) < 0 ? low : _Utils_cmp(number, high) > 0 ? high : number;
    });
    var $mdgriffith$elm_ui$Internal$Model$Heading = function(a) {
        return {
            $: "Heading",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Element$Region$heading = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Describe, $mdgriffith$elm_ui$Internal$Model$Heading);
    var $mdgriffith$elm_ui$Internal$Model$paddingName = F4(function(top, right, bottom, left) {
        return "pad-" + ($elm$core$String$fromInt(top) + ("-" + ($elm$core$String$fromInt(right) + ("-" + ($elm$core$String$fromInt(bottom) + ("-" + $elm$core$String$fromInt(left)))))));
    });
    var $mdgriffith$elm_ui$Element$paddingEach = function(_v0) {
        var top = _v0.top;
        var right = _v0.right;
        var bottom = _v0.bottom;
        var left = _v0.left;
        if (_Utils_eq(top, right) && _Utils_eq(top, bottom) && _Utils_eq(top, left)) {
            var topFloat = top;
            return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, $mdgriffith$elm_ui$Internal$Flag$padding, A5($mdgriffith$elm_ui$Internal$Model$PaddingStyle, "p-" + $elm$core$String$fromInt(top), topFloat, topFloat, topFloat, topFloat));
        } else return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, $mdgriffith$elm_ui$Internal$Flag$padding, A5($mdgriffith$elm_ui$Internal$Model$PaddingStyle, A4($mdgriffith$elm_ui$Internal$Model$paddingName, top, right, bottom, left), top, right, bottom, left));
    };
    var $mdgriffith$elm_ui$Internal$Model$FontSize = function(a) {
        return {
            $: "FontSize",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Flag$fontSize = $mdgriffith$elm_ui$Internal$Flag$flag(4);
    var $mdgriffith$elm_ui$Element$Font$size = function(i) {
        return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, $mdgriffith$elm_ui$Internal$Flag$fontSize, $mdgriffith$elm_ui$Internal$Model$FontSize(i));
    };
    var $Orasund$elm_ui_framework$Framework$Heading$h = function(inputLevel) {
        var level = A3($elm$core$Basics$clamp, 1, 6, inputLevel);
        var size = level === 6 ? 14 : 32 - (level - 1) * 4;
        return _List_fromArray([
            $mdgriffith$elm_ui$Element$Region$heading(level),
            $mdgriffith$elm_ui$Element$Font$size(size),
            $mdgriffith$elm_ui$Element$paddingEach({
                bottom: 2,
                left: 0,
                right: 0,
                top: 2
            }),
            $mdgriffith$elm_ui$Element$alignLeft,
            $mdgriffith$elm_ui$Element$Font$bold
        ]);
    };
    var $Orasund$elm_ui_framework$Framework$Heading$h1 = $Orasund$elm_ui_framework$Framework$Heading$h(1);
    var $Orasund$elm_ui_framework$Framework$Heading$h4 = $Orasund$elm_ui_framework$Framework$Heading$h(4);
    var $Orasund$elm_ui_framework$Framework$Heading$h6 = $Orasund$elm_ui_framework$Framework$Heading$h(6);
    var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
    var $mdgriffith$elm_ui$Internal$Flag$fontColor = $mdgriffith$elm_ui$Internal$Flag$flag(14);
    var $mdgriffith$elm_ui$Element$Font$color = function(fontColor) {
        return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, $mdgriffith$elm_ui$Internal$Flag$fontColor, A3($mdgriffith$elm_ui$Internal$Model$Colored, "fc-" + $mdgriffith$elm_ui$Internal$Model$formatColorClass(fontColor), "color", fontColor));
    };
    var $Orasund$elm_ui_framework$Framework$Color$darkerGrey = A3($mdgriffith$elm_ui$Element$rgb255, 18, 18, 18);
    var $mdgriffith$elm_ui$Internal$Flag$borderColor = $mdgriffith$elm_ui$Internal$Flag$flag(28);
    var $mdgriffith$elm_ui$Element$Border$color = function(clr) {
        return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, $mdgriffith$elm_ui$Internal$Flag$borderColor, A3($mdgriffith$elm_ui$Internal$Model$Colored, "bc-" + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr), "border-color", clr));
    };
    var $Orasund$elm_ui_framework$Framework$Color$lighterGrey = A3($mdgriffith$elm_ui$Element$rgb255, 245, 245, 245);
    var $Orasund$elm_ui_framework$Framework$Color$light = _List_fromArray([
        $mdgriffith$elm_ui$Element$Background$color($Orasund$elm_ui_framework$Framework$Color$lighterGrey),
        $mdgriffith$elm_ui$Element$Border$color($Orasund$elm_ui_framework$Framework$Color$lighterGrey)
    ]);
    var $Orasund$elm_ui_framework$Framework$layoutAttributes = _Utils_ap(_List_fromArray([
        $mdgriffith$elm_ui$Element$Font$size(16),
        $mdgriffith$elm_ui$Element$Font$color($Orasund$elm_ui_framework$Framework$Color$darkerGrey)
    ]), $Orasund$elm_ui_framework$Framework$Color$light);
    var $mdgriffith$elm_ui$Internal$Model$FocusStyleOption = function(a) {
        return {
            $: "FocusStyleOption",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Element$focusStyle = $mdgriffith$elm_ui$Internal$Model$FocusStyleOption;
    var $elm$core$List$singleton = function(value) {
        return _List_fromArray([
            value
        ]);
    };
    var $Orasund$elm_ui_framework$Framework$Color$turquoise = A3($mdgriffith$elm_ui$Element$rgb255, 0, 209, 178);
    var $Orasund$elm_ui_framework$Framework$layoutOptions = $elm$core$List$singleton($mdgriffith$elm_ui$Element$focusStyle({
        backgroundColor: $elm$core$Maybe$Nothing,
        borderColor: $elm$core$Maybe$Just($Orasund$elm_ui_framework$Framework$Color$turquoise),
        shadow: $elm$core$Maybe$Just({
            blur: 10,
            color: $Orasund$elm_ui_framework$Framework$Color$turquoise,
            offset: _Utils_Tuple2(0, 0),
            size: 1
        })
    }));
    var $mdgriffith$elm_ui$Internal$Model$OnlyDynamic = F2(function(a, b) {
        return {
            $: "OnlyDynamic",
            a: a,
            b: b
        };
    });
    var $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic = F2(function(a, b) {
        return {
            $: "StaticRootAndDynamic",
            a: a,
            b: b
        };
    });
    var $mdgriffith$elm_ui$Internal$Model$AllowHover = {
        $: "AllowHover"
    };
    var $mdgriffith$elm_ui$Internal$Model$Layout = {
        $: "Layout"
    };
    var $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle = {
        backgroundColor: $elm$core$Maybe$Nothing,
        borderColor: $elm$core$Maybe$Nothing,
        shadow: $elm$core$Maybe$Just({
            blur: 0,
            color: A4($mdgriffith$elm_ui$Internal$Model$Rgba, 155 / 255, 203 / 255, 1, 1),
            offset: _Utils_Tuple2(0, 0),
            size: 3
        })
    };
    var $mdgriffith$elm_ui$Internal$Model$optionsToRecord = function(options) {
        var combine = F2(function(opt, record) {
            switch(opt.$){
                case "HoverOption":
                    var hoverable = opt.a;
                    var _v4 = record.hover;
                    if (_v4.$ === "Nothing") return _Utils_update(record, {
                        hover: $elm$core$Maybe$Just(hoverable)
                    });
                    else return record;
                case "FocusStyleOption":
                    var focusStyle = opt.a;
                    var _v5 = record.focus;
                    if (_v5.$ === "Nothing") return _Utils_update(record, {
                        focus: $elm$core$Maybe$Just(focusStyle)
                    });
                    else return record;
                default:
                    var renderMode = opt.a;
                    var _v6 = record.mode;
                    if (_v6.$ === "Nothing") return _Utils_update(record, {
                        mode: $elm$core$Maybe$Just(renderMode)
                    });
                    else return record;
            }
        });
        var andFinally = function(record) {
            return {
                focus: function() {
                    var _v0 = record.focus;
                    if (_v0.$ === "Nothing") return $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle;
                    else {
                        var focusable = _v0.a;
                        return focusable;
                    }
                }(),
                hover: function() {
                    var _v1 = record.hover;
                    if (_v1.$ === "Nothing") return $mdgriffith$elm_ui$Internal$Model$AllowHover;
                    else {
                        var hoverable = _v1.a;
                        return hoverable;
                    }
                }(),
                mode: function() {
                    var _v2 = record.mode;
                    if (_v2.$ === "Nothing") return $mdgriffith$elm_ui$Internal$Model$Layout;
                    else {
                        var actualMode = _v2.a;
                        return actualMode;
                    }
                }()
            };
        };
        return andFinally(A3($elm$core$List$foldr, combine, {
            focus: $elm$core$Maybe$Nothing,
            hover: $elm$core$Maybe$Nothing,
            mode: $elm$core$Maybe$Nothing
        }, options));
    };
    var $mdgriffith$elm_ui$Internal$Model$toHtml = F2(function(mode, el) {
        switch(el.$){
            case "Unstyled":
                var html = el.a;
                return html($mdgriffith$elm_ui$Internal$Model$asEl);
            case "Styled":
                var styles = el.a.styles;
                var html = el.a.html;
                return A2(html, mode(styles), $mdgriffith$elm_ui$Internal$Model$asEl);
            case "Text":
                var text = el.a;
                return $mdgriffith$elm_ui$Internal$Model$textElement(text);
            default:
                return $mdgriffith$elm_ui$Internal$Model$textElement("");
        }
    });
    var $mdgriffith$elm_ui$Internal$Model$renderRoot = F3(function(optionList, attributes, child) {
        var options = $mdgriffith$elm_ui$Internal$Model$optionsToRecord(optionList);
        var embedStyle = function() {
            var _v0 = options.mode;
            if (_v0.$ === "NoStaticStyleSheet") return $mdgriffith$elm_ui$Internal$Model$OnlyDynamic(options);
            else return $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic(options);
        }();
        return A2($mdgriffith$elm_ui$Internal$Model$toHtml, embedStyle, A4($mdgriffith$elm_ui$Internal$Model$element, $mdgriffith$elm_ui$Internal$Model$asEl, $mdgriffith$elm_ui$Internal$Model$div, attributes, $mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_fromArray([
            child
        ]))));
    });
    var $mdgriffith$elm_ui$Internal$Model$FontFamily = F2(function(a, b) {
        return {
            $: "FontFamily",
            a: a,
            b: b
        };
    });
    var $mdgriffith$elm_ui$Internal$Model$SansSerif = {
        $: "SansSerif"
    };
    var $mdgriffith$elm_ui$Internal$Model$Typeface = function(a) {
        return {
            $: "Typeface",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Internal$Flag$fontFamily = $mdgriffith$elm_ui$Internal$Flag$flag(5);
    var $elm$core$String$toLower = _String_toLower;
    var $elm$core$String$words = _String_words;
    var $mdgriffith$elm_ui$Internal$Model$renderFontClassName = F2(function(font, current) {
        return _Utils_ap(current, function() {
            switch(font.$){
                case "Serif":
                    return "serif";
                case "SansSerif":
                    return "sans-serif";
                case "Monospace":
                    return "monospace";
                case "Typeface":
                    var name = font.a;
                    return A2($elm$core$String$join, "-", $elm$core$String$words($elm$core$String$toLower(name)));
                case "ImportFont":
                    var name = font.a;
                    var url = font.b;
                    return A2($elm$core$String$join, "-", $elm$core$String$words($elm$core$String$toLower(name)));
                default:
                    var name = font.a.name;
                    return A2($elm$core$String$join, "-", $elm$core$String$words($elm$core$String$toLower(name)));
            }
        }());
    });
    var $mdgriffith$elm_ui$Internal$Model$rootStyle = function() {
        var families = _List_fromArray([
            $mdgriffith$elm_ui$Internal$Model$Typeface("Open Sans"),
            $mdgriffith$elm_ui$Internal$Model$Typeface("Helvetica"),
            $mdgriffith$elm_ui$Internal$Model$Typeface("Verdana"),
            $mdgriffith$elm_ui$Internal$Model$SansSerif
        ]);
        return _List_fromArray([
            A2($mdgriffith$elm_ui$Internal$Model$StyleClass, $mdgriffith$elm_ui$Internal$Flag$bgColor, A3($mdgriffith$elm_ui$Internal$Model$Colored, "bg-" + $mdgriffith$elm_ui$Internal$Model$formatColorClass(A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0)), "background-color", A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0))),
            A2($mdgriffith$elm_ui$Internal$Model$StyleClass, $mdgriffith$elm_ui$Internal$Flag$fontColor, A3($mdgriffith$elm_ui$Internal$Model$Colored, "fc-" + $mdgriffith$elm_ui$Internal$Model$formatColorClass(A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1)), "color", A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1))),
            A2($mdgriffith$elm_ui$Internal$Model$StyleClass, $mdgriffith$elm_ui$Internal$Flag$fontSize, $mdgriffith$elm_ui$Internal$Model$FontSize(20)),
            A2($mdgriffith$elm_ui$Internal$Model$StyleClass, $mdgriffith$elm_ui$Internal$Flag$fontFamily, A2($mdgriffith$elm_ui$Internal$Model$FontFamily, A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, "font-", families), families))
        ]);
    }();
    var $mdgriffith$elm_ui$Element$layoutWith = F3(function(_v0, attrs, child) {
        var options = _v0.options;
        return A3($mdgriffith$elm_ui$Internal$Model$renderRoot, options, A2($elm$core$List$cons, $mdgriffith$elm_ui$Internal$Model$htmlClass(A2($elm$core$String$join, " ", _List_fromArray([
            $mdgriffith$elm_ui$Internal$Style$classes.root,
            $mdgriffith$elm_ui$Internal$Style$classes.any,
            $mdgriffith$elm_ui$Internal$Style$classes.single
        ]))), _Utils_ap($mdgriffith$elm_ui$Internal$Model$rootStyle, attrs)), child);
    });
    var $Orasund$elm_ui_framework$Framework$layout = function(attributes) {
        return A2($mdgriffith$elm_ui$Element$layoutWith, {
            options: $Orasund$elm_ui_framework$Framework$layoutOptions
        }, _Utils_ap($Orasund$elm_ui_framework$Framework$layoutAttributes, attributes));
    };
    var $Orasund$elm_ui_framework$Framework$responsiveLayout = F2(function(attributes, view) {
        return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
            A3($elm$html$Html$node, "meta", _List_fromArray([
                A2($elm$html$Html$Attributes$attribute, "name", "viewport"),
                A2($elm$html$Html$Attributes$attribute, "content", "width=device-width, initial-scale=1.0")
            ]), _List_Nil),
            A2($Orasund$elm_ui_framework$Framework$layout, attributes, view)
        ]));
    });
    var $Orasund$elm_ui_framework$Framework$Color$lightGrey = A3($mdgriffith$elm_ui$Element$rgb255, 219, 219, 219);
    var $mdgriffith$elm_ui$Internal$Model$Top = {
        $: "Top"
    };
    var $mdgriffith$elm_ui$Element$alignTop = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$Top);
    var $mdgriffith$elm_ui$Internal$Model$SpacingStyle = F3(function(a, b, c) {
        return {
            $: "SpacingStyle",
            a: a,
            b: b,
            c: c
        };
    });
    var $mdgriffith$elm_ui$Internal$Flag$spacing = $mdgriffith$elm_ui$Internal$Flag$flag(3);
    var $mdgriffith$elm_ui$Internal$Model$spacingName = F2(function(x, y) {
        return "spacing-" + ($elm$core$String$fromInt(x) + ("-" + $elm$core$String$fromInt(y)));
    });
    var $mdgriffith$elm_ui$Element$spacing = function(x) {
        return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, $mdgriffith$elm_ui$Internal$Flag$spacing, A3($mdgriffith$elm_ui$Internal$Model$SpacingStyle, A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, x), x, x));
    };
    var $Orasund$elm_ui_framework$Framework$Grid$simple = _List_fromArray([
        $mdgriffith$elm_ui$Element$spacing(10),
        $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
        $mdgriffith$elm_ui$Element$alignTop
    ]);
    var $mdgriffith$elm_ui$Internal$Model$BorderWidth = F5(function(a, b, c, d, e) {
        return {
            $: "BorderWidth",
            a: a,
            b: b,
            c: c,
            d: d,
            e: e
        };
    });
    var $mdgriffith$elm_ui$Element$Border$width = function(v) {
        return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, $mdgriffith$elm_ui$Internal$Flag$borderWidth, A5($mdgriffith$elm_ui$Internal$Model$BorderWidth, "b-" + $elm$core$String$fromInt(v), v, v, v, v));
    };
    var $mdgriffith$elm_ui$Element$Border$widthXY = F2(function(x, y) {
        return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, $mdgriffith$elm_ui$Internal$Flag$borderWidth, A5($mdgriffith$elm_ui$Internal$Model$BorderWidth, "b-" + ($elm$core$String$fromInt(x) + ("-" + $elm$core$String$fromInt(y))), y, x, y, x));
    });
    var $mdgriffith$elm_ui$Element$Border$widthEach = function(_v0) {
        var bottom = _v0.bottom;
        var top = _v0.top;
        var left = _v0.left;
        var right = _v0.right;
        return _Utils_eq(top, bottom) && _Utils_eq(left, right) ? _Utils_eq(top, right) ? $mdgriffith$elm_ui$Element$Border$width(top) : A2($mdgriffith$elm_ui$Element$Border$widthXY, left, top) : A2($mdgriffith$elm_ui$Internal$Model$StyleClass, $mdgriffith$elm_ui$Internal$Flag$borderWidth, A5($mdgriffith$elm_ui$Internal$Model$BorderWidth, "b-" + ($elm$core$String$fromInt(top) + ("-" + ($elm$core$String$fromInt(right) + ("-" + ($elm$core$String$fromInt(bottom) + ("-" + $elm$core$String$fromInt(left))))))), top, right, bottom, left));
    };
    var $Orasund$elm_ui_framework$Framework$Grid$section = _Utils_ap($Orasund$elm_ui_framework$Framework$Grid$simple, _List_fromArray([
        $mdgriffith$elm_ui$Element$Border$widthEach({
            bottom: 0,
            left: 0,
            right: 0,
            top: 2
        }),
        $mdgriffith$elm_ui$Element$Border$color($Orasund$elm_ui_framework$Framework$Color$lightGrey),
        $mdgriffith$elm_ui$Element$paddingEach({
            bottom: 30,
            left: 0,
            right: 0,
            top: 10
        })
    ]));
    var $mdgriffith$elm_ui$Internal$Model$Text = function(a) {
        return {
            $: "Text",
            a: a
        };
    };
    var $mdgriffith$elm_ui$Element$text = function(content) {
        return $mdgriffith$elm_ui$Internal$Model$Text(content);
    };
    var $author$project$Pages$Dashboard$view = function(model) {
        return A2($Orasund$elm_ui_framework$Framework$responsiveLayout, _List_Nil, A2($mdgriffith$elm_ui$Element$column, $Orasund$elm_ui_framework$Framework$container, _List_fromArray([
            A2($mdgriffith$elm_ui$Element$el, $Orasund$elm_ui_framework$Framework$Heading$h1, $mdgriffith$elm_ui$Element$text("Haveno Web - Dashboard")),
            $mdgriffith$elm_ui$Element$text("\n"),
            $mdgriffith$elm_ui$Element$text("Your version is:"),
            A2($mdgriffith$elm_ui$Element$el, $Orasund$elm_ui_framework$Framework$Heading$h4, $mdgriffith$elm_ui$Element$text(A2($elm$core$Maybe$withDefault, "", A2($elm$core$Maybe$map, function($) {
                return $.version;
            }, model.version)))),
            $mdgriffith$elm_ui$Element$text("\n"),
            function() {
                var _v0 = model.errors;
                if (!_v0.b) return $mdgriffith$elm_ui$Element$text("");
                else return A2($mdgriffith$elm_ui$Element$column, $Orasund$elm_ui_framework$Framework$Grid$section, A2($elm$core$List$map, function(error) {
                    return A2($mdgriffith$elm_ui$Element$el, $Orasund$elm_ui_framework$Framework$Heading$h6, $mdgriffith$elm_ui$Element$text(error));
                }, model.errors));
            }()
        ])));
    };
    var $author$project$Pages$Funds$htmlContent = A2($elm$html$Html$section, _List_fromArray([
        $elm$html$Html$Attributes$id("page"),
        $elm$html$Html$Attributes$class("section-background"),
        $elm$html$Html$Attributes$class("text-center"),
        $elm$html$Html$Attributes$class("split")
    ]), _List_fromArray([
        A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("split-col")
        ]), _List_fromArray([
            A2($elm$html$Html$h1, _List_Nil, _List_fromArray([
                $elm$html$Html$text("")
            ]))
        ])),
        A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("split-col")
        ]), _List_fromArray([
            A2($elm$html$Html$h1, _List_Nil, _List_fromArray([
                $elm$html$Html$text("Funds")
            ])),
            $author$project$Buttons$Default$defaultButton("hardware")
        ])),
        A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("split-col")
        ]), _List_fromArray([
            A2($elm$html$Html$h1, _List_Nil, _List_fromArray([
                $elm$html$Html$text("")
            ]))
        ]))
    ]));
    var $author$project$Pages$Funds$content = A2($elm$html$Html$div, _List_fromArray([
        $elm$html$Html$Attributes$id("page")
    ]), _List_fromArray([
        A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$id("content"),
            $elm$html$Html$Attributes$class("col3-column")
        ]), _List_fromArray([
            $author$project$Pages$Funds$htmlContent
        ]))
    ]));
    var $author$project$Pages$Funds$view = function(_v0) {
        return $author$project$Pages$Funds$content;
    };
    var $author$project$Pages$Hardware$ClickedHardwareDeviceConnect = {
        $: "ClickedHardwareDeviceConnect"
    };
    var $author$project$Pages$Hardware$ClickedXMRInitiateTransaction = function(a) {
        return {
            $: "ClickedXMRInitiateTransaction",
            a: a
        };
    };
    var $author$project$Pages$Hardware$ClickedXMRWalletConnect = {
        $: "ClickedXMRWalletConnect"
    };
    var $Orasund$elm_ui_framework$Framework$Heading$h5 = $Orasund$elm_ui_framework$Framework$Heading$h(5);
    var $mdgriffith$elm_ui$Internal$Model$Button = {
        $: "Button"
    };
    var $elm$json$Json$Encode$bool = _Json_wrap;
    var $elm$html$Html$Attributes$boolProperty = F2(function(key, bool) {
        return A2(_VirtualDom_property, key, $elm$json$Json$Encode$bool(bool));
    });
    var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty("disabled");
    var $mdgriffith$elm_ui$Element$Input$enter = "Enter";
    var $mdgriffith$elm_ui$Internal$Model$NoAttribute = {
        $: "NoAttribute"
    };
    var $mdgriffith$elm_ui$Element$Input$hasFocusStyle = function(attr) {
        if (attr.$ === "StyleClass" && attr.b.$ === "PseudoSelector" && attr.b.a.$ === "Focus") {
            var _v1 = attr.b;
            var _v2 = _v1.a;
            return true;
        } else return false;
    };
    var $mdgriffith$elm_ui$Element$Input$focusDefault = function(attrs) {
        return A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, attrs) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass("focusable");
    };
    var $mdgriffith$elm_ui$Element$Events$onClick = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onClick);
    var $elm$virtual_dom$VirtualDom$MayPreventDefault = function(a) {
        return {
            $: "MayPreventDefault",
            a: a
        };
    };
    var $elm$html$Html$Events$preventDefaultOn = F2(function(event, decoder) {
        return A2($elm$virtual_dom$VirtualDom$on, event, $elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
    });
    var $mdgriffith$elm_ui$Element$Input$onKeyLookup = function(lookup) {
        var decode = function(code) {
            var _v0 = lookup(code);
            if (_v0.$ === "Nothing") return $elm$json$Json$Decode$fail("No key matched");
            else {
                var msg = _v0.a;
                return $elm$json$Json$Decode$succeed(msg);
            }
        };
        var isKey = A2($elm$json$Json$Decode$andThen, decode, A2($elm$json$Json$Decode$field, "key", $elm$json$Json$Decode$string));
        return $mdgriffith$elm_ui$Internal$Model$Attr(A2($elm$html$Html$Events$preventDefaultOn, "keydown", A2($elm$json$Json$Decode$map, function(fired) {
            return _Utils_Tuple2(fired, true);
        }, isKey)));
    };
    var $mdgriffith$elm_ui$Internal$Flag$cursor = $mdgriffith$elm_ui$Internal$Flag$flag(21);
    var $mdgriffith$elm_ui$Element$pointer = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorPointer);
    var $mdgriffith$elm_ui$Element$Input$space = " ";
    var $elm$html$Html$Attributes$tabindex = function(n) {
        return A2(_VirtualDom_attribute, "tabIndex", $elm$core$String$fromInt(n));
    };
    var $mdgriffith$elm_ui$Element$Input$button = F2(function(attrs, _v0) {
        var onPress = _v0.onPress;
        var label = _v0.label;
        return A4($mdgriffith$elm_ui$Internal$Model$element, $mdgriffith$elm_ui$Internal$Model$asEl, $mdgriffith$elm_ui$Internal$Model$div, A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink), A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink), A2($elm$core$List$cons, $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (" " + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (" " + ($mdgriffith$elm_ui$Internal$Style$classes.seButton + (" " + $mdgriffith$elm_ui$Internal$Style$classes.noTextSelection)))))), A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$pointer, A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$Input$focusDefault(attrs), A2($elm$core$List$cons, $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Button), A2($elm$core$List$cons, $mdgriffith$elm_ui$Internal$Model$Attr($elm$html$Html$Attributes$tabindex(0)), function() {
            if (onPress.$ === "Nothing") return A2($elm$core$List$cons, $mdgriffith$elm_ui$Internal$Model$Attr($elm$html$Html$Attributes$disabled(true)), attrs);
            else {
                var msg = onPress.a;
                return A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$Events$onClick(msg), A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$Input$onKeyLookup(function(code) {
                    return _Utils_eq(code, $mdgriffith$elm_ui$Element$Input$enter) ? $elm$core$Maybe$Just(msg) : _Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space) ? $elm$core$Maybe$Just(msg) : $elm$core$Maybe$Nothing;
                }), attrs));
            }
        }()))))))), $mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_fromArray([
            label
        ])));
    });
    var $mdgriffith$elm_ui$Internal$Flag$fontAlignment = $mdgriffith$elm_ui$Internal$Flag$flag(12);
    var $mdgriffith$elm_ui$Element$Font$center = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.textCenter);
    var $Orasund$elm_ui_framework$Framework$Color$grey = A3($mdgriffith$elm_ui$Element$rgb255, 122, 122, 122);
    var $mdgriffith$elm_ui$Internal$Model$Hover = {
        $: "Hover"
    };
    var $mdgriffith$elm_ui$Internal$Model$PseudoSelector = F2(function(a, b) {
        return {
            $: "PseudoSelector",
            a: a,
            b: b
        };
    });
    var $mdgriffith$elm_ui$Internal$Flag$hover = $mdgriffith$elm_ui$Internal$Flag$flag(33);
    var $mdgriffith$elm_ui$Internal$Model$Nearby = F2(function(a, b) {
        return {
            $: "Nearby",
            a: a,
            b: b
        };
    });
    var $mdgriffith$elm_ui$Internal$Model$TransformComponent = F2(function(a, b) {
        return {
            $: "TransformComponent",
            a: a,
            b: b
        };
    });
    var $mdgriffith$elm_ui$Internal$Model$Empty = {
        $: "Empty"
    };
    var $mdgriffith$elm_ui$Internal$Model$map = F2(function(fn, el) {
        switch(el.$){
            case "Styled":
                var styled = el.a;
                return $mdgriffith$elm_ui$Internal$Model$Styled({
                    html: F2(function(add, context) {
                        return A2($elm$virtual_dom$VirtualDom$map, fn, A2(styled.html, add, context));
                    }),
                    styles: styled.styles
                });
            case "Unstyled":
                var html = el.a;
                return $mdgriffith$elm_ui$Internal$Model$Unstyled(A2($elm$core$Basics$composeL, $elm$virtual_dom$VirtualDom$map(fn), html));
            case "Text":
                var str = el.a;
                return $mdgriffith$elm_ui$Internal$Model$Text(str);
            default:
                return $mdgriffith$elm_ui$Internal$Model$Empty;
        }
    });
    var $elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
    var $mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle = F2(function(fn, attr) {
        switch(attr.$){
            case "NoAttribute":
                return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
            case "Describe":
                var description = attr.a;
                return $mdgriffith$elm_ui$Internal$Model$Describe(description);
            case "AlignX":
                var x = attr.a;
                return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
            case "AlignY":
                var y = attr.a;
                return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
            case "Width":
                var x = attr.a;
                return $mdgriffith$elm_ui$Internal$Model$Width(x);
            case "Height":
                var x = attr.a;
                return $mdgriffith$elm_ui$Internal$Model$Height(x);
            case "Class":
                var x = attr.a;
                var y = attr.b;
                return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
            case "StyleClass":
                var flag = attr.a;
                var style = attr.b;
                return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
            case "Nearby":
                var location = attr.a;
                var elem = attr.b;
                return A2($mdgriffith$elm_ui$Internal$Model$Nearby, location, A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
            case "Attr":
                var htmlAttr = attr.a;
                return $mdgriffith$elm_ui$Internal$Model$Attr(A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
            default:
                var fl = attr.a;
                var trans = attr.b;
                return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
        }
    });
    var $mdgriffith$elm_ui$Internal$Model$removeNever = function(style) {
        return A2($mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle, $elm$core$Basics$never, style);
    };
    var $mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper = F2(function(attr, _v0) {
        var styles = _v0.a;
        var trans = _v0.b;
        var _v1 = $mdgriffith$elm_ui$Internal$Model$removeNever(attr);
        switch(_v1.$){
            case "StyleClass":
                var style = _v1.b;
                return _Utils_Tuple2(A2($elm$core$List$cons, style, styles), trans);
            case "TransformComponent":
                var flag = _v1.a;
                var component = _v1.b;
                return _Utils_Tuple2(styles, A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, trans, component));
            default:
                return _Utils_Tuple2(styles, trans);
        }
    });
    var $mdgriffith$elm_ui$Internal$Model$unwrapDecorations = function(attrs) {
        var _v0 = A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper, _Utils_Tuple2(_List_Nil, $mdgriffith$elm_ui$Internal$Model$Untransformed), attrs);
        var styles = _v0.a;
        var transform = _v0.b;
        return A2($elm$core$List$cons, $mdgriffith$elm_ui$Internal$Model$Transform(transform), styles);
    };
    var $mdgriffith$elm_ui$Element$mouseOver = function(decs) {
        return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, $mdgriffith$elm_ui$Internal$Flag$hover, A2($mdgriffith$elm_ui$Internal$Model$PseudoSelector, $mdgriffith$elm_ui$Internal$Model$Hover, $mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
    };
    var $mdgriffith$elm_ui$Element$paddingXY = F2(function(x, y) {
        if (_Utils_eq(x, y)) {
            var f = x;
            return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, $mdgriffith$elm_ui$Internal$Flag$padding, A5($mdgriffith$elm_ui$Internal$Model$PaddingStyle, "p-" + $elm$core$String$fromInt(x), f, f, f, f));
        } else {
            var yFloat = y;
            var xFloat = x;
            return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, $mdgriffith$elm_ui$Internal$Flag$padding, A5($mdgriffith$elm_ui$Internal$Model$PaddingStyle, "p-" + ($elm$core$String$fromInt(x) + ("-" + $elm$core$String$fromInt(y))), yFloat, xFloat, yFloat, xFloat));
        }
    });
    var $mdgriffith$elm_ui$Element$rgba = $mdgriffith$elm_ui$Internal$Model$Rgba;
    var $mdgriffith$elm_ui$Internal$Model$boxShadowClass = function(shadow) {
        return $elm$core$String$concat(_List_fromArray([
            shadow.inset ? "box-inset" : "box-",
            $mdgriffith$elm_ui$Internal$Model$floatClass(shadow.offset.a) + "px",
            $mdgriffith$elm_ui$Internal$Model$floatClass(shadow.offset.b) + "px",
            $mdgriffith$elm_ui$Internal$Model$floatClass(shadow.blur) + "px",
            $mdgriffith$elm_ui$Internal$Model$floatClass(shadow.size) + "px",
            $mdgriffith$elm_ui$Internal$Model$formatColorClass(shadow.color)
        ]));
    };
    var $mdgriffith$elm_ui$Internal$Flag$shadows = $mdgriffith$elm_ui$Internal$Flag$flag(19);
    var $mdgriffith$elm_ui$Element$Border$shadow = function(almostShade) {
        var shade = {
            blur: almostShade.blur,
            color: almostShade.color,
            inset: false,
            offset: almostShade.offset,
            size: almostShade.size
        };
        return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, $mdgriffith$elm_ui$Internal$Flag$shadows, A3($mdgriffith$elm_ui$Internal$Model$Single, $mdgriffith$elm_ui$Internal$Model$boxShadowClass(shade), "box-shadow", $mdgriffith$elm_ui$Internal$Model$formatBoxShadow(shade)));
    };
    var $mdgriffith$elm_ui$Internal$Flag$borderRound = $mdgriffith$elm_ui$Internal$Flag$flag(17);
    var $mdgriffith$elm_ui$Element$Border$rounded = function(radius) {
        return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, $mdgriffith$elm_ui$Internal$Flag$borderRound, A3($mdgriffith$elm_ui$Internal$Model$Single, "br-" + $elm$core$String$fromInt(radius), "border-radius", $elm$core$String$fromInt(radius) + "px"));
    };
    var $Orasund$elm_ui_framework$Framework$Color$simple = _List_fromArray([
        $mdgriffith$elm_ui$Element$Background$color($Orasund$elm_ui_framework$Framework$Color$lightGrey),
        $mdgriffith$elm_ui$Element$Border$color($Orasund$elm_ui_framework$Framework$Color$lightGrey)
    ]);
    var $Orasund$elm_ui_framework$Framework$Tag$simple = _Utils_ap($Orasund$elm_ui_framework$Framework$Color$simple, _List_fromArray([
        $mdgriffith$elm_ui$Element$Border$rounded(4),
        A2($mdgriffith$elm_ui$Element$paddingXY, 7, 4)
    ]));
    var $Orasund$elm_ui_framework$Framework$Card$simple = _Utils_ap($Orasund$elm_ui_framework$Framework$Tag$simple, _Utils_ap($Orasund$elm_ui_framework$Framework$Color$light, _List_fromArray([
        $mdgriffith$elm_ui$Element$Border$shadow({
            blur: 10,
            color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.05),
            offset: _Utils_Tuple2(0, 2),
            size: 1
        }),
        $mdgriffith$elm_ui$Element$Border$width(1),
        $mdgriffith$elm_ui$Element$Border$color($Orasund$elm_ui_framework$Framework$Color$lightGrey),
        $mdgriffith$elm_ui$Element$alignTop,
        $mdgriffith$elm_ui$Element$padding(20),
        $mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
    ])));
    var $Orasund$elm_ui_framework$Framework$Button$simple = _Utils_ap($Orasund$elm_ui_framework$Framework$Card$simple, _Utils_ap($Orasund$elm_ui_framework$Framework$Color$simple, _List_fromArray([
        $mdgriffith$elm_ui$Element$Font$center,
        $mdgriffith$elm_ui$Element$mouseOver(_List_fromArray([
            $mdgriffith$elm_ui$Element$Border$color($Orasund$elm_ui_framework$Framework$Color$grey)
        ])),
        A2($mdgriffith$elm_ui$Element$paddingXY, 16, 12)
    ])));
    var $Orasund$elm_ui_framework$Framework$Button$fill = _Utils_ap($Orasund$elm_ui_framework$Framework$Button$simple, _List_fromArray([
        $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
    ]));
    var $Orasund$elm_ui_framework$Framework$Color$cyan = A3($mdgriffith$elm_ui$Element$rgb255, 32, 156, 238);
    var $Orasund$elm_ui_framework$Framework$Color$info = _List_fromArray([
        $mdgriffith$elm_ui$Element$Background$color($Orasund$elm_ui_framework$Framework$Color$cyan),
        $mdgriffith$elm_ui$Element$Border$color($Orasund$elm_ui_framework$Framework$Color$cyan)
    ]);
    var $author$project$Pages$Hardware$infoBtn = F2(function(label, msg) {
        return A2($mdgriffith$elm_ui$Element$Input$button, _Utils_ap($Orasund$elm_ui_framework$Framework$Button$simple, _Utils_ap($Orasund$elm_ui_framework$Framework$Button$fill, $Orasund$elm_ui_framework$Framework$Color$info)), {
            label: $mdgriffith$elm_ui$Element$text(label),
            onPress: $elm$core$Maybe$Just(msg)
        });
    });
    var $author$project$Pages$Hardware$hardwareWalletView = function(model) {
        return A2($Orasund$elm_ui_framework$Framework$responsiveLayout, _List_Nil, A2($mdgriffith$elm_ui$Element$column, $Orasund$elm_ui_framework$Framework$container, _List_fromArray([
            A2($mdgriffith$elm_ui$Element$el, $Orasund$elm_ui_framework$Framework$Heading$h5, $mdgriffith$elm_ui$Element$text("Welcome - Unconnected User")),
            $mdgriffith$elm_ui$Element$text("\n"),
            A2($author$project$Pages$Hardware$infoBtn, "Connect Hardware Device", $author$project$Pages$Hardware$ClickedHardwareDeviceConnect),
            $mdgriffith$elm_ui$Element$text("Connect XMR Wallet\n"),
            A2($author$project$Pages$Hardware$infoBtn, "Connect XMR Wallet", $author$project$Pages$Hardware$ClickedXMRWalletConnect),
            $mdgriffith$elm_ui$Element$text("\n"),
            A2($mdgriffith$elm_ui$Element$el, $Orasund$elm_ui_framework$Framework$Heading$h6, $mdgriffith$elm_ui$Element$text(model.isHardwareLNSConnected ? "Nano S Connected" : model.isHardwareLNXConnected ? "Nano X Connected" : model.isXMRWalletConnected ? "XMR Wallet Connected with Address: " + model.xmrWalletAddress : "No hardware device connected")),
            $mdgriffith$elm_ui$Element$text("\n"),
            A2($author$project$Pages$Hardware$infoBtn, "Initiate Transaction", $author$project$Pages$Hardware$ClickedXMRInitiateTransaction("0.01")),
            function() {
                var _v0 = model.errors;
                if (!_v0.b) return $mdgriffith$elm_ui$Element$text("");
                else return A2($mdgriffith$elm_ui$Element$column, $Orasund$elm_ui_framework$Framework$Grid$section, A2($elm$core$List$map, function(error) {
                    return A2($mdgriffith$elm_ui$Element$el, $Orasund$elm_ui_framework$Framework$Heading$h6, $mdgriffith$elm_ui$Element$text(error));
                }, model.errors));
            }()
        ])));
    };
    var $author$project$Pages$Hardware$view = function(model) {
        return A2($elm$html$Html$section, _List_fromArray([
            $elm$html$Html$Attributes$id("page"),
            $elm$html$Html$Attributes$class("section-background"),
            $elm$html$Html$Attributes$class("text-center")
        ]), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("split")
            ]), _List_fromArray([
                A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$class("split-col")
                ]), _List_Nil),
                function() {
                    var _v0 = model.status;
                    switch(_v0.$){
                        case "Loading":
                            return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
                                A2($elm$html$Html$div, _List_fromArray([
                                    $elm$html$Html$Attributes$class("spinner")
                                ]), _List_fromArray([
                                    $elm$html$Html$text("Loading ...")
                                ]))
                            ]));
                        case "Errored":
                            return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
                                $elm$html$Html$text("error")
                            ]));
                        default:
                            return A2($elm$html$Html$div, _List_fromArray([
                                $elm$html$Html$Attributes$class("split-col")
                            ]), _List_fromArray([
                                $author$project$Pages$Hardware$hardwareWalletView(model)
                            ]));
                    }
                }(),
                A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$class("split-col")
                ]), _List_Nil)
            ]))
        ]));
    };
    var $author$project$Pages$Market$content = A2($elm$html$Html$section, _List_fromArray([
        $elm$html$Html$Attributes$id("page"),
        $elm$html$Html$Attributes$class("section-background")
    ]), _List_fromArray([
        A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("split")
        ]), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("split-col")
            ]), _List_fromArray([
                A2($elm$html$Html$h6, _List_Nil, _List_fromArray([
                    $elm$html$Html$text("")
                ]))
            ])),
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("split-col")
            ]), _List_fromArray([
                A2($elm$html$Html$h1, _List_fromArray([
                    $elm$html$Html$Attributes$class("text-center")
                ]), _List_fromArray([
                    $elm$html$Html$text("Market")
                ])),
                A2($elm$html$Html$h3, _List_fromArray([
                    $elm$html$Html$Attributes$class("text-center")
                ]), _List_fromArray([
                    $elm$html$Html$text("")
                ])),
                $author$project$Buttons$Default$defaultButton("hardware")
            ])),
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("split-col")
            ]), _List_fromArray([
                A2($elm$html$Html$h6, _List_Nil, _List_fromArray([
                    $elm$html$Html$text("")
                ]))
            ]))
        ]))
    ]));
    var $author$project$Pages$Market$view = function(_v0) {
        return $author$project$Pages$Market$content;
    };
    var $author$project$Pages$Portfolio$htmlContent = A2($elm$html$Html$section, _List_fromArray([
        $elm$html$Html$Attributes$id("page"),
        $elm$html$Html$Attributes$class("section-background"),
        $elm$html$Html$Attributes$class("text-center"),
        $elm$html$Html$Attributes$class("split")
    ]), _List_fromArray([
        A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("split-col")
        ]), _List_fromArray([
            A2($elm$html$Html$h1, _List_Nil, _List_fromArray([
                $elm$html$Html$text("")
            ]))
        ])),
        A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("split-col")
        ]), _List_fromArray([
            A2($elm$html$Html$h1, _List_Nil, _List_fromArray([
                $elm$html$Html$text("Portfolio")
            ])),
            A2($elm$html$Html$h3, _List_Nil, _List_fromArray([
                $elm$html$Html$text("Info ")
            ])),
            $author$project$Buttons$Default$defaultButton("hardware"),
            A2($elm$html$Html$p, _List_Nil, _List_fromArray([
                $elm$html$Html$text("Any text              ")
            ]))
        ])),
        A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("split-col")
        ]), _List_fromArray([
            A2($elm$html$Html$h1, _List_Nil, _List_fromArray([
                $elm$html$Html$text("")
            ]))
        ]))
    ]));
    var $author$project$Pages$Portfolio$content = A2($elm$html$Html$div, _List_fromArray([
        $elm$html$Html$Attributes$id("page")
    ]), _List_fromArray([
        A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$id("content"),
            $elm$html$Html$Attributes$class("col3-column")
        ]), _List_fromArray([
            $author$project$Pages$Portfolio$htmlContent
        ]))
    ]));
    var $author$project$Pages$Portfolio$view = function(_v0) {
        return $author$project$Pages$Portfolio$content;
    };
    var $elm$html$Html$h4 = _VirtualDom_node("h4");
    var $author$project$Pages$Sell$content = A2($elm$html$Html$section, _List_fromArray([
        $elm$html$Html$Attributes$class("section-background"),
        $elm$html$Html$Attributes$id("page")
    ]), _List_fromArray([
        A2($elm$html$Html$h1, _List_fromArray([
            $elm$html$Html$Attributes$classList(_List_fromArray([
                _Utils_Tuple2("text-center", true),
                _Utils_Tuple2("testimonial", true)
            ]))
        ]), _List_fromArray([
            $elm$html$Html$text("Sell")
        ])),
        A2($elm$html$Html$h4, _List_fromArray([
            $elm$html$Html$Attributes$class("text-center")
        ]), _List_fromArray([
            $elm$html$Html$text("Sell your crypto here"),
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("text-center"),
                A2($elm$html$Html$Attributes$style, "margin-top", "1rem")
            ]), _List_fromArray([
                $author$project$Buttons$Default$defaultButton("hardware")
            ]))
        ]))
    ]));
    var $author$project$Pages$Sell$view = function(_v0) {
        return $author$project$Pages$Sell$content;
    };
    var $author$project$Pages$Support$content = A2($elm$html$Html$section, _List_fromArray([
        $elm$html$Html$Attributes$class("section-background"),
        $elm$html$Html$Attributes$id("page")
    ]), _List_fromArray([
        A2($elm$html$Html$div, _List_fromArray([
            $elm$html$Html$Attributes$class("split")
        ]), _List_fromArray([
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("split-col")
            ]), _List_Nil),
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("split-col")
            ]), _List_fromArray([
                A2($elm$html$Html$h1, _List_fromArray([
                    $elm$html$Html$Attributes$class("text-center")
                ]), _List_fromArray([
                    $elm$html$Html$text("Support")
                ])),
                A2($elm$html$Html$p, _List_fromArray([
                    $elm$html$Html$Attributes$class("text-center")
                ]), _List_fromArray([
                    $elm$html$Html$text("We're here to help you with any issues you may have.")
                ])),
                $author$project$Buttons$Default$defaultButton("hardware")
            ])),
            A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("split-col")
            ]), _List_Nil)
        ]))
    ]));
    var $author$project$Pages$Support$view = function(_v0) {
        return $author$project$Pages$Support$content;
    };
    var $author$project$Main$HidePopUp = {
        $: "HidePopUp"
    };
    var $elm$html$Html$h2 = _VirtualDom_node("h2");
    var $author$project$Main$viewPopUp = function(model) {
        return A2($elm$html$Html$div, _List_Nil, _List_fromArray([
            model.isPopUpVisible ? A2($elm$html$Html$div, _List_fromArray([
                $elm$html$Html$Attributes$class("modal")
            ]), _List_fromArray([
                A2($elm$html$Html$div, _List_fromArray([
                    $elm$html$Html$Attributes$class("modal-content")
                ]), _List_fromArray([
                    A2($elm$html$Html$h2, _List_Nil, _List_fromArray([
                        $elm$html$Html$text("Haveno Web App")
                    ])),
                    A2($elm$html$Html$p, _List_Nil, _List_fromArray([
                        $elm$html$Html$text("No Hardware Device Detected!")
                    ])),
                    A2($elm$html$Html$p, _List_Nil, _List_fromArray([
                        $elm$html$Html$text("Please connect your hardware device to continue")
                    ])),
                    A2($elm$html$Html$button, _List_fromArray([
                        $elm$html$Html$Events$onClick($author$project$Main$HidePopUp)
                    ]), _List_fromArray([
                        $elm$html$Html$text("Connect Hardware")
                    ]))
                ]))
            ])) : model.isHardwareLNSConnected ? A2($elm$html$Html$div, _List_Nil, _List_fromArray([
                $elm$html$Html$text("Nano S Connected")
            ])) : model.isHardwareLNXConnected ? A2($elm$html$Html$div, _List_Nil, _List_fromArray([
                $elm$html$Html$text("Nano X Connected")
            ])) : A2($elm$html$Html$div, _List_Nil, _List_Nil)
        ]));
    };
    var $author$project$Main$view = function(model) {
        var isConnected = model.isHardwareLNSConnected || model.isHardwareLNXConnected ? true : false;
        var contentByPage = function() {
            var _v0 = model.page;
            switch(_v0.$){
                case "DashboardPage":
                    var dashboard = _v0.a;
                    return A2($elm$html$Html$map, $author$project$Main$GotDashboardMsg, $author$project$Pages$Dashboard$view(dashboard));
                case "BlankPage":
                    var dashboard = _v0.a;
                    return A2($elm$html$Html$map, $author$project$Main$GotBlankMsg, $author$project$Pages$Blank$view(dashboard));
                case "SellPage":
                    var dashboard = _v0.a;
                    return A2($elm$html$Html$map, $author$project$Main$GotSellMsg, $author$project$Pages$Sell$view(dashboard));
                case "PortfolioPage":
                    var terms = _v0.a;
                    return A2($elm$html$Html$map, $author$project$Main$GotPortfolioMsg, $author$project$Pages$Portfolio$view(terms));
                case "FundsPage":
                    var privacy = _v0.a;
                    return A2($elm$html$Html$map, $author$project$Main$GotFundsMsg, $author$project$Pages$Funds$view(privacy));
                case "SupportPage":
                    var support = _v0.a;
                    return A2($elm$html$Html$map, $author$project$Main$GotSupportMsg, $author$project$Pages$Support$view(support));
                case "BuyPage":
                    var buy = _v0.a;
                    return A2($elm$html$Html$map, $author$project$Main$GotBuyMsg, $author$project$Pages$Buy$view(buy));
                case "MarketPage":
                    var market = _v0.a;
                    return A2($elm$html$Html$map, $author$project$Main$GotMarketMsg, $author$project$Pages$Market$view(market));
                default:
                    var hardware = _v0.a;
                    return A2($elm$html$Html$map, $author$project$Main$GotHardwareMsg, $author$project$Pages$Hardware$view(hardware));
            }
        }();
        return {
            body: _List_fromArray([
                $author$project$Main$pageHeader(model.page),
                $author$project$Main$showVideoOrBanner(model.page),
                $author$project$Main$viewPopUp(model),
                contentByPage,
                A2($author$project$Main$isHWConnectedIndicator, model, isConnected),
                $author$project$Main$isXMRWalletConnectedIndicator(model),
                $author$project$Main$footerContent(model)
            ]),
            title: "Haveno-Web"
        };
    };
    var $author$project$Main$main = $elm$browser$Browser$application({
        init: $author$project$Main$init,
        onUrlChange: $author$project$Main$ChangedUrl,
        onUrlRequest: $author$project$Main$ClickedLink,
        subscriptions: $author$project$Main$subscriptions,
        update: $author$project$Main$update,
        view: $author$project$Main$view
    });
    _Platform_export({
        "Main": {
            "init": $author$project$Main$main($elm$json$Json$Decode$string)({
                "versions": {
                    "elm": "0.19.1"
                },
                "types": {
                    "message": "Main.Msg",
                    "aliases": {
                        "Proto.Io.Haveno.Protobuffer.GetVersionReply": {
                            "args": [],
                            "type": "Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetVersionReply"
                        },
                        "Proto.Io.Haveno.Protobuffer.Internals_.Proto__Io__Haveno__Protobuffer__GetVersionReply": {
                            "args": [],
                            "type": "{ version : String.String }"
                        },
                        "Url.Url": {
                            "args": [],
                            "type": "{ protocol : Url.Protocol, host : String.String, port_ : Maybe.Maybe Basics.Int, path : String.String, query : Maybe.Maybe String.String, fragment : Maybe.Maybe String.String }"
                        },
                        "Json.Decode.Value": {
                            "args": [],
                            "type": "Json.Encode.Value"
                        },
                        "Pages.Hardware.AdditionalDataFromJs": {
                            "args": [],
                            "type": "{ userid : String.String, nickname : String.String }"
                        },
                        "Pages.Hardware.ApiSpecifics": {
                            "args": [],
                            "type": "{ maxResults : String.String, accessToken : Maybe.Maybe String.String }"
                        },
                        "Data.Hardware.BaseAddress": {
                            "args": [],
                            "type": "{ street : String.String, city : String.String }"
                        },
                        "Data.User.Description": {
                            "args": [],
                            "type": "{ level : String.String, comment : String.String }"
                        },
                        "Time.Era": {
                            "args": [],
                            "type": "{ start : Basics.Int, offset : Basics.Int }"
                        },
                        "Pages.Dashboard.HavenoAPKHttpRequest": {
                            "args": [],
                            "type": "{ method : String.String, headers : List.List Http.Header, url : String.String, body : Http.Body, timeout : Maybe.Maybe Basics.Float, tracker : Maybe.Maybe String.String }"
                        },
                        "Pages.Hardware.Identities": {
                            "args": [],
                            "type": "{ id : String.String, provider_type : String.String, provider_id : String.String, provider_data : Pages.Hardware.ProviderData }"
                        },
                        "Pages.Hardware.JsonMsgFromJs": {
                            "args": [],
                            "type": "{ operationEventMsg : String.String, dataFromMongo : Pages.Hardware.DataFromMongo, additionalDataFromJs : Pages.Hardware.AdditionalDataFromJs }"
                        },
                        "Data.User.MemberRanking": {
                            "args": [],
                            "type": "{ id : String.String, name : String.String }"
                        },
                        "Http.Metadata": {
                            "args": [],
                            "type": "{ url : String.String, statusCode : Basics.Int, statusText : String.String, headers : Dict.Dict String.String String.String }"
                        },
                        "Pages.Blank.Model": {
                            "args": [],
                            "type": "{ status : Pages.Blank.Status, title : String.String, root : Pages.Blank.Blank }"
                        },
                        "Pages.Buy.Model": {
                            "args": [],
                            "type": "{ status : Pages.Buy.Status, title : String.String, root : Pages.Buy.Buy }"
                        },
                        "Pages.Dashboard.Model": {
                            "args": [],
                            "type": "{ status : Pages.Dashboard.Status, pagetitle : String.String, root : Pages.Dashboard.Dashboard, balance : String.String, flagUrl : Url.Url, havenoAPKHttpRequest : Maybe.Maybe Pages.Dashboard.HavenoAPKHttpRequest, version : Maybe.Maybe Proto.Io.Haveno.Protobuffer.GetVersionReply, errors : List.List String.String }"
                        },
                        "Pages.Funds.Model": {
                            "args": [],
                            "type": "{ status : Pages.Funds.Status, title : String.String, root : Pages.Funds.Funds }"
                        },
                        "Pages.Hardware.Model": {
                            "args": [],
                            "type": "{ status : Pages.Hardware.Status, title : String.String, root : Pages.Hardware.Hardware, flagUrl : Url.Url, datetimeFromMain : Maybe.Maybe Types.DateType.DateTime, apiSpecifics : Pages.Hardware.ApiSpecifics, queryType : Pages.Hardware.QueryType, isValidNewAccessToken : Basics.Bool, isHardwareLNSConnected : Basics.Bool, isHardwareLNXConnected : Basics.Bool, isXMRWalletConnected : Basics.Bool, xmrWalletAddress : String.String, errors : List.List String.String, isReturnUser : Basics.Bool, user : Data.User.User, objectJSONfromJSPort : Maybe.Maybe Pages.Hardware.JsonMsgFromJs }"
                        },
                        "Pages.Market.Model": {
                            "args": [],
                            "type": "{ status : Pages.Market.Status, title : String.String, root : Pages.Market.Market }"
                        },
                        "Pages.Portfolio.Model": {
                            "args": [],
                            "type": "{ status : Pages.Portfolio.Status, title : String.String, root : Pages.Portfolio.Portfolio }"
                        },
                        "Pages.Sell.Model": {
                            "args": [],
                            "type": "{ status : Pages.Sell.Status, title : String.String, root : Pages.Sell.Sell }"
                        },
                        "Pages.Support.Model": {
                            "args": [],
                            "type": "{ status : Pages.Support.Status, title : String.String, root : Pages.Support.Support }"
                        },
                        "Data.User.NickName": {
                            "args": [],
                            "type": "String.String"
                        },
                        "Data.User.Password": {
                            "args": [],
                            "type": "String.String"
                        },
                        "Data.Hardware.Player": {
                            "args": [],
                            "type": "{ id : String.String, nickname : String.String }"
                        },
                        "Pages.Hardware.ProviderData": {
                            "args": [],
                            "type": "{ email : String.String }"
                        },
                        "Data.Hardware.Rank": {
                            "args": [],
                            "type": "{ rank : Basics.Int, player : Data.Hardware.Player, challenger : Data.Hardware.Player }"
                        },
                        "Data.Hardware.Ranking": {
                            "args": [],
                            "type": "{ id : String.String, active : Basics.Bool, name : String.String, owner_id : String.String, baseaddress : Data.Hardware.BaseAddress, ladder : List.List Data.Hardware.Rank, player_count : Basics.Int, owner_name : String.String }"
                        },
                        "Data.Hardware.RankingSearchResult": {
                            "args": [],
                            "type": "{ id : String.String, name : String.String }"
                        },
                        "Pages.Hardware.RegisterUserDetails": {
                            "args": [],
                            "type": "{ resource_id : String.String, user_details : Data.User.User, additional_fields : String.String }"
                        },
                        "Pages.Hardware.SuccessfulLoginResult": {
                            "args": [],
                            "type": "{ access_token : String.String, refresh_token : String.String, user_id : String.String, device_id : String.String }"
                        },
                        "Pages.Dashboard.SuccessfullBalanceResult": {
                            "args": [],
                            "type": "{ deployment_model : String.String, location : String.String, hostname : String.String, ws_hostname : String.String }"
                        },
                        "Pages.Hardware.SuccessfullLNSConnectResult": {
                            "args": [],
                            "type": "{ function : String.String, date : String.String, id : String.String, message : String.String, transport_type : String.String }"
                        },
                        "Pages.Hardware.SuccessfullProfileResult": {
                            "args": [],
                            "type": "{ user_id : String.String, domain_id : String.String, identities : List.List Pages.Hardware.Identities, data : Pages.Hardware.ProviderData, typeOfData : String.String }"
                        },
                        "Data.User.Token": {
                            "args": [],
                            "type": "String.String"
                        },
                        "Data.User.UserInfo": {
                            "args": [],
                            "type": "{ userid : String.String, password : Data.User.Password, passwordValidationError : String.String, token : Maybe.Maybe Data.User.Token, nickname : Data.User.NickName, isNameInputFocused : Basics.Bool, nameValidationError : String.String, age : Basics.Int, gender : Data.User.Gender, email : Maybe.Maybe String.String, isEmailInputFocused : Basics.Bool, emailValidationError : String.String, mobile : Maybe.Maybe String.String, isMobileInputFocused : Basics.Bool, mobileValidationError : String.String, datestamp : Basics.Int, active : Basics.Bool, ownedRankings : List.List Data.Hardware.Ranking, memberRankings : List.List Data.Hardware.Ranking, updatetext : String.String, description : Data.User.Description, credits : Basics.Int, addInfo : String.String }"
                        },
                        "Pages.Hardware.EmailPasswordLogin": {
                            "args": [],
                            "type": "{ email : String.String, password : String.String }"
                        },
                        "Pages.Hardware.RefreshTokenQueryParams": {
                            "args": [],
                            "type": "{ grant_type : String.String }"
                        }
                    },
                    "unions": {
                        "Main.Msg": {
                            "args": [],
                            "tags": {
                                "ClickedLink": [
                                    "Browser.UrlRequest"
                                ],
                                "GotDashboardMsg": [
                                    "Pages.Dashboard.Msg"
                                ],
                                "GotSellMsg": [
                                    "Pages.Sell.Msg"
                                ],
                                "GotBlankMsg": [
                                    "Pages.Blank.Msg"
                                ],
                                "GotPortfolioMsg": [
                                    "Pages.Portfolio.Msg"
                                ],
                                "GotFundsMsg": [
                                    "Pages.Funds.Msg"
                                ],
                                "GotSupportMsg": [
                                    "Pages.Support.Msg"
                                ],
                                "GotBuyMsg": [
                                    "Pages.Buy.Msg"
                                ],
                                "GotMarketMsg": [
                                    "Pages.Market.Msg"
                                ],
                                "GotHardwareMsg": [
                                    "Pages.Hardware.Msg"
                                ],
                                "ChangedUrl": [
                                    "Url.Url"
                                ],
                                "Tick": [
                                    "Time.Posix"
                                ],
                                "AdjustTimeZone": [
                                    "Time.Zone"
                                ],
                                "Recv": [
                                    "Json.Decode.Value"
                                ],
                                "RecvText": [
                                    "String.String"
                                ],
                                "NoOp": [],
                                "HardwareDeviceConnect": [],
                                "ShowPopUp": [],
                                "HidePopUp": [],
                                "GotVersion": [
                                    "Result.Result Grpc.Error Proto.Io.Haveno.Protobuffer.GetVersionReply"
                                ],
                                "NavigateTo": [
                                    "Main.Page"
                                ]
                            }
                        },
                        "Grpc.Error": {
                            "args": [],
                            "tags": {
                                "BadUrl": [
                                    "String.String"
                                ],
                                "Timeout": [],
                                "NetworkError": [],
                                "BadStatus": [
                                    "{ metadata : Http.Metadata, response : Bytes.Bytes, errMessage : String.String, status : Grpc.GrpcStatus }"
                                ],
                                "BadBody": [
                                    "Bytes.Bytes"
                                ],
                                "UnknownGrpcStatus": [
                                    "String.String"
                                ]
                            }
                        },
                        "Basics.Int": {
                            "args": [],
                            "tags": {
                                "Int": []
                            }
                        },
                        "Maybe.Maybe": {
                            "args": [
                                "a"
                            ],
                            "tags": {
                                "Just": [
                                    "a"
                                ],
                                "Nothing": []
                            }
                        },
                        "Pages.Blank.Msg": {
                            "args": [],
                            "tags": {
                                "GotInitialModel": [
                                    "Pages.Blank.Model"
                                ]
                            }
                        },
                        "Pages.Buy.Msg": {
                            "args": [],
                            "tags": {
                                "GotInitialModel": [
                                    "Pages.Buy.Model"
                                ]
                            }
                        },
                        "Pages.Dashboard.Msg": {
                            "args": [],
                            "tags": {
                                "GotInitialModel": [
                                    "Pages.Dashboard.Model"
                                ],
                                "BalanceResponse": [
                                    "Result.Result Http.Error Pages.Dashboard.SuccessfullBalanceResult"
                                ],
                                "GotVersion": [
                                    "Result.Result Grpc.Error Proto.Io.Haveno.Protobuffer.GetVersionReply"
                                ]
                            }
                        },
                        "Pages.Funds.Msg": {
                            "args": [],
                            "tags": {
                                "GotInitialModel": [
                                    "Pages.Funds.Model"
                                ]
                            }
                        },
                        "Pages.Hardware.Msg": {
                            "args": [],
                            "tags": {
                                "BookingForm": [
                                    "Pages.Hardware.RegisterUserDetails"
                                ],
                                "UpdateAge": [
                                    "Basics.Int"
                                ],
                                "UpdateGender": [
                                    "String.String"
                                ],
                                "UpdateNickName": [
                                    "String.String"
                                ],
                                "UpdateLevel": [
                                    "String.String"
                                ],
                                "UpdateComment": [
                                    "String.String"
                                ],
                                "UpdateMobile": [
                                    "String.String"
                                ],
                                "UpdatePhone": [
                                    "String.String"
                                ],
                                "CondoNameInput": [
                                    "String.String"
                                ],
                                "CondoAddressInput": [
                                    "String.String"
                                ],
                                "AddInfoInput": [
                                    "String.String"
                                ],
                                "ConfirmBookingForm": [],
                                "NoOp": [],
                                "DismissErrors": [],
                                "Tick": [
                                    "Time.Posix"
                                ],
                                "InputFocused": [
                                    "String.String"
                                ],
                                "InputBlurred": [
                                    "String.String"
                                ],
                                "SelDateTime": [
                                    "String.String"
                                ],
                                "ToggleReturnUser": [],
                                "ClickedHardwareDeviceConnect": [],
                                "ClickedXMRWalletConnect": [],
                                "ClickedXMRInitiateTransaction": [
                                    "String.String"
                                ],
                                "ResponseDataFromMain": [
                                    "Json.Decode.Value"
                                ],
                                "LogOut": [],
                                "Create": [],
                                "CreateNewRanking": [
                                    "Data.User.UserInfo"
                                ],
                                "Cancel": [],
                                "CancelFetchedOwned": [
                                    "Data.User.UserInfo"
                                ],
                                "CancelFetchedMember": [],
                                "CancelFetchedSpectator": [],
                                "CancelCreateNewRanking": [],
                                "CancelRegistration": [],
                                "Confirm": [],
                                "FetchOwned": [
                                    "Data.Hardware.Ranking"
                                ],
                                "FetchMember": [
                                    "Data.Hardware.Ranking"
                                ],
                                "ListSpectator": [
                                    "Data.Hardware.RankingSearchResult"
                                ],
                                "ViewMember": [
                                    "Data.User.MemberRanking"
                                ],
                                "RegisUser": [
                                    "Data.User.UserInfo"
                                ],
                                "RankingNameChg": [
                                    "String.String"
                                ],
                                "StreetAddressChg": [
                                    "String.String"
                                ],
                                "CityAddressChg": [
                                    "String.String"
                                ],
                                "ConfirmNewRanking": [
                                    "Data.Hardware.Ranking",
                                    "Data.User.User"
                                ],
                                "DialogDeleteOwnedRanking": [],
                                "DeleteOwnedRanking": [],
                                "ViewRank": [
                                    "Data.Hardware.Rank"
                                ],
                                "ConfirmChallenge": [
                                    "Data.Hardware.Ranking",
                                    "Data.Hardware.Rank"
                                ],
                                "ConfirmResult": [
                                    "Data.Hardware.ResultOfMatch"
                                ],
                                "CancelDialoguePrepareResultView": [],
                                "FetchSpectatorRanking": [
                                    "String.String"
                                ],
                                "SpectatorRankingResponse": [
                                    "Result.Result Http.Error Data.Hardware.Ranking"
                                ],
                                "SpectatorJoin": [],
                                "RegisteredUserJoin": [],
                                "ConfirmJoin": [
                                    "Data.Hardware.Ranking",
                                    "String.String",
                                    "Basics.Int"
                                ],
                                "ConfirmLeaveMemberRanking": [
                                    "Data.Hardware.Ranking",
                                    "String.String"
                                ],
                                "DialogueConfirmJoinView": [],
                                "DialogueConfirmLeaveView": [],
                                "DialogueConfirmDeleteAccount": [],
                                "DeleteAccount": [],
                                "LoginResponse": [
                                    "Result.Result Http.Error Pages.Hardware.SuccessfulLoginResult"
                                ],
                                "LNSConnectResponse": [
                                    "Result.Result Http.Error Pages.Hardware.SuccessfullLNSConnectResult"
                                ],
                                "ProfileResponse": [
                                    "Result.Result Http.Error Pages.Hardware.SuccessfullProfileResult"
                                ]
                            }
                        },
                        "Pages.Market.Msg": {
                            "args": [],
                            "tags": {
                                "GotInitialModel": [
                                    "Pages.Market.Model"
                                ]
                            }
                        },
                        "Pages.Portfolio.Msg": {
                            "args": [],
                            "tags": {
                                "GotInitialModel": [
                                    "Pages.Portfolio.Model"
                                ]
                            }
                        },
                        "Pages.Sell.Msg": {
                            "args": [],
                            "tags": {
                                "GotInitialModel": [
                                    "Pages.Sell.Model"
                                ]
                            }
                        },
                        "Pages.Support.Msg": {
                            "args": [],
                            "tags": {
                                "GotInitialModel": [
                                    "Pages.Support.Model"
                                ]
                            }
                        },
                        "Main.Page": {
                            "args": [],
                            "tags": {
                                "DashboardPage": [
                                    "Pages.Dashboard.Model"
                                ],
                                "SellPage": [
                                    "Pages.Sell.Model"
                                ],
                                "PortfolioPage": [
                                    "Pages.Portfolio.Model"
                                ],
                                "FundsPage": [
                                    "Pages.Funds.Model"
                                ],
                                "SupportPage": [
                                    "Pages.Support.Model"
                                ],
                                "BuyPage": [
                                    "Pages.Buy.Model"
                                ],
                                "MarketPage": [
                                    "Pages.Market.Model"
                                ],
                                "HardwarePage": [
                                    "Pages.Hardware.Model"
                                ],
                                "BlankPage": [
                                    "Pages.Blank.Model"
                                ]
                            }
                        },
                        "Time.Posix": {
                            "args": [],
                            "tags": {
                                "Posix": [
                                    "Basics.Int"
                                ]
                            }
                        },
                        "Url.Protocol": {
                            "args": [],
                            "tags": {
                                "Http": [],
                                "Https": []
                            }
                        },
                        "Result.Result": {
                            "args": [
                                "error",
                                "value"
                            ],
                            "tags": {
                                "Ok": [
                                    "value"
                                ],
                                "Err": [
                                    "error"
                                ]
                            }
                        },
                        "String.String": {
                            "args": [],
                            "tags": {
                                "String": []
                            }
                        },
                        "Browser.UrlRequest": {
                            "args": [],
                            "tags": {
                                "Internal": [
                                    "Url.Url"
                                ],
                                "External": [
                                    "String.String"
                                ]
                            }
                        },
                        "Json.Encode.Value": {
                            "args": [],
                            "tags": {
                                "Value": []
                            }
                        },
                        "Time.Zone": {
                            "args": [],
                            "tags": {
                                "Zone": [
                                    "Basics.Int",
                                    "List.List Time.Era"
                                ]
                            }
                        },
                        "Pages.Blank.Blank": {
                            "args": [],
                            "tags": {
                                "Blank": [
                                    "{ name : String.String }"
                                ]
                            }
                        },
                        "Http.Body": {
                            "args": [],
                            "tags": {
                                "Body": []
                            }
                        },
                        "Basics.Bool": {
                            "args": [],
                            "tags": {
                                "True": [],
                                "False": []
                            }
                        },
                        "Pages.Buy.Buy": {
                            "args": [],
                            "tags": {
                                "Buy": [
                                    "{ name : String.String }"
                                ]
                            }
                        },
                        "Bytes.Bytes": {
                            "args": [],
                            "tags": {
                                "Bytes": []
                            }
                        },
                        "Pages.Dashboard.Dashboard": {
                            "args": [],
                            "tags": {
                                "Dashboard": [
                                    "{ name : String.String }"
                                ]
                            }
                        },
                        "Pages.Hardware.DataFromMongo": {
                            "args": [],
                            "tags": {
                                "JsonData": [
                                    "Json.Decode.Value"
                                ],
                                "StringData": [
                                    "String.String"
                                ]
                            }
                        },
                        "Types.DateType.DateTime": {
                            "args": [],
                            "tags": {
                                "CurrentDateTime": [
                                    "Time.Posix",
                                    "Time.Zone"
                                ],
                                "SelectedDateTime": [
                                    "Time.Posix",
                                    "Time.Zone"
                                ]
                            }
                        },
                        "Dict.Dict": {
                            "args": [
                                "k",
                                "v"
                            ],
                            "tags": {
                                "RBNode_elm_builtin": [
                                    "Dict.NColor",
                                    "k",
                                    "v",
                                    "Dict.Dict k v",
                                    "Dict.Dict k v"
                                ],
                                "RBEmpty_elm_builtin": []
                            }
                        },
                        "Http.Error": {
                            "args": [],
                            "tags": {
                                "BadUrl": [
                                    "String.String"
                                ],
                                "Timeout": [],
                                "NetworkError": [],
                                "BadStatus": [
                                    "Basics.Int"
                                ],
                                "BadBody": [
                                    "String.String"
                                ]
                            }
                        },
                        "Basics.Float": {
                            "args": [],
                            "tags": {
                                "Float": []
                            }
                        },
                        "Pages.Funds.Funds": {
                            "args": [],
                            "tags": {
                                "Funds": [
                                    "{ name : String.String }"
                                ]
                            }
                        },
                        "Data.User.Gender": {
                            "args": [],
                            "tags": {
                                "Male": [],
                                "Female": []
                            }
                        },
                        "Grpc.GrpcStatus": {
                            "args": [],
                            "tags": {
                                "Ok_": [],
                                "Cancelled": [],
                                "Unknown": [],
                                "InvalidArgument": [],
                                "DeadlineExceeded": [],
                                "NotFound": [],
                                "AlreadyExists": [],
                                "PermissionDenied": [],
                                "ResourceExhausted": [],
                                "FailedPrecondition": [],
                                "Aborted": [],
                                "OutOfRange": [],
                                "Unimplemented": [],
                                "Internal": [],
                                "Unavailable": [],
                                "DataLoss": [],
                                "Unauthenticated": []
                            }
                        },
                        "Pages.Hardware.Hardware": {
                            "args": [],
                            "tags": {
                                "Hardware": [
                                    "{ name : String.String }"
                                ]
                            }
                        },
                        "Http.Header": {
                            "args": [],
                            "tags": {
                                "Header": [
                                    "String.String",
                                    "String.String"
                                ]
                            }
                        },
                        "List.List": {
                            "args": [
                                "a"
                            ],
                            "tags": {}
                        },
                        "Pages.Market.Market": {
                            "args": [],
                            "tags": {
                                "Market": [
                                    "{ name : String.String }"
                                ]
                            }
                        },
                        "Pages.Portfolio.Portfolio": {
                            "args": [],
                            "tags": {
                                "Portfolio": [
                                    "{ name : String.String }"
                                ]
                            }
                        },
                        "Pages.Hardware.QueryType": {
                            "args": [],
                            "tags": {
                                "RefreshTknQP": [
                                    "Pages.Hardware.RefreshTokenQueryParams"
                                ],
                                "Login": [
                                    "Pages.Hardware.EmailPasswordLogin"
                                ],
                                "Spectator": [],
                                "RegisterUser": [
                                    "Data.User.UserInfo"
                                ],
                                "LoggedInUser": [],
                                "CreatingNewLadder": [
                                    "Data.User.UserInfo"
                                ],
                                "OwnedSelectedView": [],
                                "MemberSelectedView": [],
                                "SpectatorSelectedView": [],
                                "ConfirmDeleteOwnedRanking": [],
                                "CreateChallengeView": [
                                    "Data.Hardware.Rank",
                                    "Data.Hardware.Ranking"
                                ],
                                "ConfirmChallengeView": [
                                    "Data.Hardware.Rank",
                                    "Data.Hardware.Ranking"
                                ],
                                "PrepareResult": [],
                                "Error": [
                                    "String.String"
                                ],
                                "ConfirmJoinMemberView": [],
                                "ConfirmLeaveMemberView": [],
                                "ConfirmDeleteUserView": []
                            }
                        },
                        "Data.Hardware.ResultOfMatch": {
                            "args": [],
                            "tags": {
                                "Won": [],
                                "Lost": [],
                                "Undecided": []
                            }
                        },
                        "Pages.Sell.Sell": {
                            "args": [],
                            "tags": {
                                "Sell": [
                                    "{ name : String.String }"
                                ]
                            }
                        },
                        "Pages.Blank.Status": {
                            "args": [],
                            "tags": {
                                "Loading": []
                            }
                        },
                        "Pages.Buy.Status": {
                            "args": [],
                            "tags": {
                                "Loading": [],
                                "Loaded": [],
                                "Errored": []
                            }
                        },
                        "Pages.Dashboard.Status": {
                            "args": [],
                            "tags": {
                                "Loading": [],
                                "Loaded": [],
                                "Errored": []
                            }
                        },
                        "Pages.Funds.Status": {
                            "args": [],
                            "tags": {
                                "Loading": []
                            }
                        },
                        "Pages.Hardware.Status": {
                            "args": [],
                            "tags": {
                                "Loading": [],
                                "Loaded": [],
                                "Errored": []
                            }
                        },
                        "Pages.Market.Status": {
                            "args": [],
                            "tags": {
                                "Loading": []
                            }
                        },
                        "Pages.Portfolio.Status": {
                            "args": [],
                            "tags": {
                                "Loading": []
                            }
                        },
                        "Pages.Sell.Status": {
                            "args": [],
                            "tags": {
                                "Loading": []
                            }
                        },
                        "Pages.Support.Status": {
                            "args": [],
                            "tags": {
                                "Loading": []
                            }
                        },
                        "Pages.Support.Support": {
                            "args": [],
                            "tags": {
                                "Support": [
                                    "{ name : String.String }"
                                ]
                            }
                        },
                        "Data.User.User": {
                            "args": [],
                            "tags": {
                                "Spectator": [
                                    "Data.User.UserInfo"
                                ],
                                "Registered": [
                                    "Data.User.UserInfo"
                                ]
                            }
                        },
                        "Dict.NColor": {
                            "args": [],
                            "tags": {
                                "Red": [],
                                "Black": []
                            }
                        }
                    }
                }
            })
        }
    });
    //////////////////// HMR BEGIN ////////////////////
    /*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Original Author: Flux Xu @fluxxu
*/ /*
    A note about the environment that this code runs in...

    assumed globals:
        - `module` (from Node.js module system and webpack)

    assumed in scope after injection into the Elm IIFE:
        - `scope` (has an 'Elm' property which contains the public Elm API)
        - various functions defined by Elm which we have to hook such as `_Platform_initialize` and `_Scheduler_binding`
 */ if (module.hot) {
        (function() {
            "use strict";
            //polyfill for IE: https://github.com/fluxxu/elm-hot-loader/issues/16
            if (typeof Object.assign != "function") Object.assign = function(target) {
                "use strict";
                if (target == null) throw new TypeError("Cannot convert undefined or null to object");
                target = Object(target);
                for(var index = 1; index < arguments.length; index++){
                    var source = arguments[index];
                    if (source != null) {
                        for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
                    }
                }
                return target;
            };
            // Elm 0.19.1 introduced a '$' prefix at the beginning of the symbols it emits,
            // and we check for `Maybe.Just` because we expect it to be present in all Elm programs.
            var elmVersion;
            if (typeof elm$core$Maybe$Just !== "undefined") elmVersion = "0.19.0";
            else if (typeof $elm$core$Maybe$Just !== "undefined") elmVersion = "0.19.1";
            else throw new Error("Could not determine Elm version");
            function elmSymbol(symbol) {
                try {
                    switch(elmVersion){
                        case "0.19.0":
                            return eval(symbol);
                        case "0.19.1":
                            return eval("$" + symbol);
                        default:
                            throw new Error("Cannot resolve " + symbol + ". Elm version unknown!");
                    }
                } catch (e) {
                    if (e instanceof ReferenceError) return undefined;
                    else throw e;
                }
            }
            var instances = module.hot.data ? module.hot.data.instances || {} : {};
            var uid = module.hot.data ? module.hot.data.uid || 0 : 0;
            if (Object.keys(instances).length === 0) log("[elm-hot] Enabled");
            var cancellers = [];
            // These 2 variables act as dynamically-scoped variables which are set only when the
            // Elm module's hooked init function is called.
            var initializingInstance = null;
            var swappingInstance = null;
            module.hot.accept();
            module.hot.dispose(function(data) {
                data.instances = instances;
                data.uid = uid;
                // Cleanup pending async tasks
                // First, make sure that no new tasks can be started until we finish replacing the code
                _Scheduler_binding = function() {
                    return _Scheduler_fail(new Error("[elm-hot] Inactive Elm instance."));
                };
                // Second, kill pending tasks belonging to the old instance
                if (cancellers.length) {
                    log("[elm-hot] Killing " + cancellers.length + " running processes...");
                    try {
                        cancellers.forEach(function(cancel) {
                            cancel();
                        });
                    } catch (e) {
                        console.warn("[elm-hot] Kill process error: " + e.message);
                    }
                }
            });
            function log(message) {
                if (module.hot.verbose) console.log(message);
            }
            function getId() {
                return ++uid;
            }
            function findPublicModules(parent, path) {
                var modules = [];
                for(var key in parent){
                    var child = parent[key];
                    var currentPath = path ? path + "." + key : key;
                    if ("init" in child) modules.push({
                        path: currentPath,
                        module: child
                    });
                    else modules = modules.concat(findPublicModules(child, currentPath));
                }
                return modules;
            }
            function registerInstance(domNode, flags, path, portSubscribes, portSends) {
                var id = getId();
                var instance = {
                    id: id,
                    path: path,
                    domNode: domNode,
                    flags: flags,
                    portSubscribes: portSubscribes,
                    portSends: portSends,
                    lastState: null // last Elm app state (root model)
                };
                return instances[id] = instance;
            }
            function isFullscreenApp() {
                // Returns true if the Elm app will take over the entire DOM body.
                return typeof elmSymbol("elm$browser$Browser$application") !== "undefined" || typeof elmSymbol("elm$browser$Browser$document") !== "undefined";
            }
            function wrapDomNode(node) {
                // When embedding an Elm app into a specific DOM node, Elm will replace the provided
                // DOM node with the Elm app's content. When the Elm app is compiled normally, the
                // original DOM node is reused (its attributes and content changes, but the object
                // in memory remains the same). But when compiled using `--debug`, Elm will completely
                // destroy the original DOM node and instead replace it with 2 brand new nodes: one
                // for your Elm app's content and the other for the Elm debugger UI. In this case,
                // if you held a reference to the DOM node provided for embedding, it would be orphaned
                // after Elm module initialization.
                //
                // So in order to make both cases consistent and isolate us from changes in how Elm
                // does this, we will insert a dummy node to wrap the node for embedding and hold
                // a reference to the dummy node.
                //
                // We will also put a tag on the dummy node so that the Elm developer knows who went
                // behind their back and rudely put stuff in their DOM.
                var dummyNode = document.createElement("div");
                dummyNode.setAttribute("data-elm-hot", "true");
                dummyNode.style.height = "inherit";
                var parentNode = node.parentNode;
                parentNode.replaceChild(dummyNode, node);
                dummyNode.appendChild(node);
                return dummyNode;
            }
            function wrapPublicModule(path, module1) {
                var originalInit = module1.init;
                if (originalInit) module1.init = function(args) {
                    var elm;
                    var portSubscribes = {};
                    var portSends = {};
                    var domNode = null;
                    var flags = null;
                    if (typeof args !== "undefined") {
                        // normal case
                        domNode = args["node"] && !isFullscreenApp() ? wrapDomNode(args["node"]) : document.body;
                        flags = args["flags"];
                    } else {
                        // rare case: Elm allows init to be called without any arguments at all
                        domNode = document.body;
                        flags = undefined;
                    }
                    initializingInstance = registerInstance(domNode, flags, path, portSubscribes, portSends);
                    elm = originalInit(args);
                    wrapPorts(elm, portSubscribes, portSends);
                    initializingInstance = null;
                    return elm;
                };
                else console.error("Could not find a public module to wrap at path " + path);
            }
            function swap(Elm, instance) {
                log("[elm-hot] Hot-swapping module: " + instance.path);
                swappingInstance = instance;
                // remove from the DOM everything that had been created by the old Elm app
                var containerNode = instance.domNode;
                while(containerNode.lastChild)containerNode.removeChild(containerNode.lastChild);
                var m = getAt(instance.path.split("."), Elm);
                var elm;
                if (m) {
                    // prepare to initialize the new Elm module
                    var args = {
                        flags: instance.flags
                    };
                    if (containerNode === document.body) ;
                    else {
                        // embed case: provide a new node for Elm to use
                        var nodeForEmbed = document.createElement("div");
                        containerNode.appendChild(nodeForEmbed);
                        args["node"] = nodeForEmbed;
                    }
                    elm = m.init(args);
                    Object.keys(instance.portSubscribes).forEach(function(portName) {
                        if (portName in elm.ports && "subscribe" in elm.ports[portName]) {
                            var handlers = instance.portSubscribes[portName];
                            if (!handlers.length) return;
                            log("[elm-hot] Reconnect " + handlers.length + " handler(s) to port '" + portName + "' (" + instance.path + ").");
                            handlers.forEach(function(handler) {
                                elm.ports[portName].subscribe(handler);
                            });
                        } else {
                            delete instance.portSubscribes[portName];
                            log("[elm-hot] Port was removed: " + portName);
                        }
                    });
                    Object.keys(instance.portSends).forEach(function(portName) {
                        if (portName in elm.ports && "send" in elm.ports[portName]) {
                            log("[elm-hot] Replace old port send with the new send");
                            instance.portSends[portName] = elm.ports[portName].send;
                        } else {
                            delete instance.portSends[portName];
                            log("[elm-hot] Port was removed: " + portName);
                        }
                    });
                } else log("[elm-hot] Module was removed: " + instance.path);
                swappingInstance = null;
            }
            function wrapPorts(elm, portSubscribes, portSends) {
                var portNames = Object.keys(elm.ports || {});
                //hook ports
                if (portNames.length) {
                    // hook outgoing ports
                    portNames.filter(function(name) {
                        return "subscribe" in elm.ports[name];
                    }).forEach(function(portName) {
                        var port = elm.ports[portName];
                        var subscribe = port.subscribe;
                        var unsubscribe = port.unsubscribe;
                        elm.ports[portName] = Object.assign(port, {
                            subscribe: function(handler) {
                                log("[elm-hot] ports." + portName + ".subscribe called.");
                                if (!portSubscribes[portName]) portSubscribes[portName] = [
                                    handler
                                ];
                                else //TODO handle subscribing to single handler more than once?
                                portSubscribes[portName].push(handler);
                                return subscribe.call(port, handler);
                            },
                            unsubscribe: function(handler) {
                                log("[elm-hot] ports." + portName + ".unsubscribe called.");
                                var list = portSubscribes[portName];
                                if (list && list.indexOf(handler) !== -1) list.splice(list.lastIndexOf(handler), 1);
                                else console.warn("[elm-hot] ports." + portName + ".unsubscribe: handler not subscribed");
                                return unsubscribe.call(port, handler);
                            }
                        });
                    });
                    // hook incoming ports
                    portNames.filter(function(name) {
                        return "send" in elm.ports[name];
                    }).forEach(function(portName) {
                        var port = elm.ports[portName];
                        portSends[portName] = port.send;
                        elm.ports[portName] = Object.assign(port, {
                            send: function(val) {
                                return portSends[portName].call(port, val);
                            }
                        });
                    });
                }
                return portSubscribes;
            }
            /*
        Breadth-first search for a `Browser.Navigation.Key` in the user's app model.
        Returns the key and keypath or null if not found.
        */ function findNavKey(rootModel) {
                var queue = [];
                if (isDebuggerModel(rootModel)) /*
                 Extract the user's app model from the Elm Debugger's model. The Elm debugger
                 can hold multiple references to the user's model (e.g. in its "history"). So
                 we must be careful to only search within the "state" part of the Debugger.
                */ queue.push({
                    value: rootModel["state"],
                    keypath: [
                        "state"
                    ]
                });
                else queue.push({
                    value: rootModel,
                    keypath: []
                });
                while(queue.length !== 0){
                    var item = queue.shift();
                    if (typeof item.value === "undefined" || item.value === null) continue;
                    // The nav key is identified by a runtime tag added by the elm-hot injector.
                    if (item.value.hasOwnProperty("elm-hot-nav-key")) // found it!
                    return item;
                    if (typeof item.value !== "object") continue;
                    for(var propName in item.value){
                        if (!item.value.hasOwnProperty(propName)) continue;
                        var newKeypath = item.keypath.slice();
                        newKeypath.push(propName);
                        queue.push({
                            value: item.value[propName],
                            keypath: newKeypath
                        });
                    }
                }
                return null;
            }
            function isDebuggerModel(model) {
                // Up until elm/browser 1.0.2, the Elm debugger could be identified by a
                // property named "expando". But in version 1.0.2 that was renamed to "expandoModel"
                return model && (model.hasOwnProperty("expando") || model.hasOwnProperty("expandoModel")) && model.hasOwnProperty("state");
            }
            function getAt(keyPath, obj) {
                return keyPath.reduce(function(xs, x) {
                    return xs && xs[x] ? xs[x] : null;
                }, obj);
            }
            function removeNavKeyListeners(navKey) {
                window.removeEventListener("popstate", navKey.value);
                window.navigator.userAgent.indexOf("Trident") < 0 || window.removeEventListener("hashchange", navKey.value);
            }
            // hook program creation
            var initialize = _Platform_initialize;
            _Platform_initialize = function(flagDecoder, args, init, update, subscriptions, stepperBuilder) {
                var instance = initializingInstance || swappingInstance;
                var tryFirstRender = !!swappingInstance;
                var hookedInit = function(args) {
                    var initialStateTuple = init(args);
                    if (swappingInstance) {
                        var oldModel = swappingInstance.lastState;
                        var newModel = initialStateTuple.a;
                        if (typeof elmSymbol("elm$browser$Browser$application") !== "undefined") {
                            var oldKeyLoc = findNavKey(oldModel);
                            // attempt to find the Browser.Navigation.Key in the newly-constructed model
                            // and bring it along with the rest of the old data.
                            var newKeyLoc = findNavKey(newModel);
                            var error = null;
                            if (newKeyLoc === null) error = "could not find Browser.Navigation.Key in the new app model";
                            else if (oldKeyLoc === null) error = "could not find Browser.Navigation.Key in the old app model.";
                            else if (newKeyLoc.keypath.toString() !== oldKeyLoc.keypath.toString()) error = "the location of the Browser.Navigation.Key in the model has changed.";
                            else {
                                // remove event listeners attached to the old nav key
                                removeNavKeyListeners(oldKeyLoc.value);
                                // insert the new nav key into the old model in the exact same location
                                var parentKeyPath = oldKeyLoc.keypath.slice(0, -1);
                                var lastSegment = oldKeyLoc.keypath.slice(-1)[0];
                                var oldParent = getAt(parentKeyPath, oldModel);
                                oldParent[lastSegment] = newKeyLoc.value;
                            }
                            if (error !== null) {
                                console.error("[elm-hot] Hot-swapping " + instance.path + " not possible: " + error);
                                oldModel = newModel;
                            }
                        }
                        // the heart of the app state hot-swap
                        initialStateTuple.a = oldModel;
                        // ignore any Cmds returned by the init during hot-swap
                        initialStateTuple.b = elmSymbol("elm$core$Platform$Cmd$none");
                    } else // capture the initial state for later
                    initializingInstance.lastState = initialStateTuple.a;
                    return initialStateTuple;
                };
                var hookedStepperBuilder = function(sendToApp, model) {
                    var result;
                    // first render may fail if shape of model changed too much
                    if (tryFirstRender) {
                        tryFirstRender = false;
                        try {
                            result = stepperBuilder(sendToApp, model);
                        } catch (e) {
                            throw new Error("[elm-hot] Hot-swapping " + instance.path + " is not possible, please reload page. Error: " + e.message);
                        }
                    } else result = stepperBuilder(sendToApp, model);
                    return function(nextModel, isSync) {
                        if (instance) // capture the state after every step so that later we can restore from it during a hot-swap
                        instance.lastState = nextModel;
                        return result(nextModel, isSync);
                    };
                };
                return initialize(flagDecoder, args, hookedInit, update, subscriptions, hookedStepperBuilder);
            };
            // hook process creation
            var originalBinding = _Scheduler_binding;
            _Scheduler_binding = function(originalCallback) {
                return originalBinding(function() {
                    // start the scheduled process, which may return a cancellation function.
                    var cancel = originalCallback.apply(this, arguments);
                    if (cancel) {
                        cancellers.push(cancel);
                        return function() {
                            cancellers.splice(cancellers.indexOf(cancel), 1);
                            return cancel();
                        };
                    }
                    return cancel;
                });
            };
            scope["_elm_hot_loader_init"] = function(Elm) {
                // swap instances
                var removedInstances = [];
                for(var id in instances){
                    var instance = instances[id];
                    if (instance.domNode.parentNode) swap(Elm, instance);
                    else removedInstances.push(id);
                }
                removedInstances.forEach(function(id) {
                    delete instance[id];
                });
                // wrap all public modules
                var publicModules = findPublicModules(Elm);
                publicModules.forEach(function(m) {
                    wrapPublicModule(m.path, m.module);
                });
            };
        })();
        scope["_elm_hot_loader_init"](scope["Elm"]);
    }
//////////////////// HMR END ////////////////////
})(this);

},{}],"2AsAh":[function(require,module,exports) {
//import { setupElmPorts, connectLNS } from "./hardware/ledgerInterop.js";
//import { connectLNS } from "./hardware/ledgerInterop.js";
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// NOTE: This is the main file for communicating with Elm. It receives messages from Elm and
// then calls the relevant function in the relevant .js file to communicate with the hardware device
// NOTE: This file is imported in setupElm.mjs
// NOTE: Messages from the Elm 'sendMessageToJs' port are received and parsed here to determine
// which function (in the relevant .js file) to use to communicate with the hardware device
parcelHelpers.export(exports, "handleMessageFromElm", ()=>handleMessageFromElm);
var _checkDeviceConnectJs = require("./hardware/checkDeviceConnect.js");
var _xmrHardwareInteropJs = require("./hardware/xmrHardwareInterop.js");
async function handleMessageFromElm(message, app) {
    console.log("here in handle : ", message);
    // NOTE: Use FF debugger to view 'message'
    // HACK: This will need to be more robust. It must be something that will never appear in the json:
    const messageArr = message.split("~^&");
    //NOTE: Switch on the message label (element[0]), then handle the , separated params
    switch(messageArr[0]){
        case "connectLNS":
            try {
                //connectLNS(app);
                // Perform further actions with the device
                //console.log("about to checkDeviceConnection : ", app);
                await (0, _checkDeviceConnectJs.checkDeviceConnection)(app);
            } catch (error) {
                console.error("Device connection error:", error);
            }
            break;
        case "getMoneroAddress":
            //connectLNS(app)
            try {
                // Perform further actions with the device
                (0, _xmrHardwareInteropJs.getMoneroAddress)();
            } catch (error) {
                console.error("Device connection error:", error);
            }
            break;
        case "initiateXMRToBTCTrans":
            //connectLNS(app)
            try {
                // Perform further actions with the device
                hwinterop.initiateXMRToBTCTrans(messageArr[1]);
            } catch (error) {
                console.error("Device connection error:", error);
            }
            break;
        //NOTE: We're going to talk to mongodb via the node application
        // to do searches, so we can do them anonymously
        // We will make http requests from within Elm to the node application
        //NOTE: Adding a new function? Added it to index.html?
        default:
            console.log(`Sorry, problem:  ${message}.`);
    }
}

},{"./hardware/checkDeviceConnect.js":"2sLhv","./hardware/xmrHardwareInterop.js":"2JAI7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2sLhv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkDeviceConnection", ()=>checkDeviceConnection) //}
 //checkDeviceConnection();
;
var _hwTransportWebhid = require("@ledgerhq/hw-transport-webhid");
var _hwTransportWebhidDefault = parcelHelpers.interopDefault(_hwTransportWebhid);
async function checkDeviceConnection(app) {
    try {
        console.log("before TransportWebHID");
        // Request access to the Ledger device
        const transport = await (0, _hwTransportWebhidDefault.default).create();
        console.log("Device connected:", transport);
        console.log("Device Model:", transport.deviceModel);
        console.log("Device Model ID:", transport.deviceModel ? transport.deviceModel.id : "Not Available");
        // Define the Get Device Version APDU command
        const cla = 0x00; // Class byte
        const ins = 0x01; // Instruction byte for Get Device Version
        const p1 = 0x00; // Parameter 1
        const p2 = 0x00; // Parameter 2
        const data = new Uint8Array([]); // No data needed
        // Send the command to the Ledger device
        /* const response = await transport.send(cla, ins, p1, p2, data);

        // Process the response
        console.log("Device Response:", response.deviceModel.id);
        console.log("Device Model:", response.deviceModel);
        console.log("Device Model ID:", response.deviceModel ? response.deviceModel.id : 'Not Available'); */ //const response = "";
        //try {
        const message = {
            operationEventMsg: transport.deviceModel.id
        };
        console.log("Sending message:", message);
        app.ports.receiveMessageFromJs.send(message);
    } catch (error) {
        console.error("Error connecting to device:", error);
        app.ports.receiveMessageFromJs.send({
            Err: error.message
        });
    }
}

},{"@ledgerhq/hw-transport-webhid":"8O295","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8O295":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hwTransport = require("@ledgerhq/hw-transport");
var _hwTransportDefault = parcelHelpers.interopDefault(_hwTransport);
var _hidFraming = require("@ledgerhq/devices/hid-framing");
var _hidFramingDefault = parcelHelpers.interopDefault(_hidFraming);
var _devices = require("@ledgerhq/devices");
var _logs = require("@ledgerhq/logs");
var _errors = require("@ledgerhq/errors");
var Buffer = require("3666b9e986722ce4").Buffer;
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const ledgerDevices = [
    {
        vendorId: (0, _devices.ledgerUSBVendorId)
    }
];
const isSupported = ()=>Promise.resolve(!!(window.navigator && window.navigator.hid));
const getHID = ()=>{
    // $FlowFixMe
    const { hid } = navigator;
    if (!hid) throw new (0, _errors.TransportError)("navigator.hid is not supported", "HIDNotSupported");
    return hid;
};
function requestLedgerDevices() {
    return __awaiter(this, void 0, void 0, function*() {
        const device = yield getHID().requestDevice({
            filters: ledgerDevices
        });
        if (Array.isArray(device)) return device;
        return [
            device
        ];
    });
}
function getLedgerDevices() {
    return __awaiter(this, void 0, void 0, function*() {
        const devices = yield getHID().getDevices();
        return devices.filter((d)=>d.vendorId === (0, _devices.ledgerUSBVendorId));
    });
}
function getFirstLedgerDevice() {
    return __awaiter(this, void 0, void 0, function*() {
        const existingDevices = yield getLedgerDevices();
        if (existingDevices.length > 0) return existingDevices[0];
        const devices = yield requestLedgerDevices();
        return devices[0];
    });
}
/**
 * WebHID Transport implementation
 * @example
 * import TransportWebHID from "@ledgerhq/hw-transport-webhid";
 * ...
 * TransportWebHID.create().then(transport => ...)
 */ class TransportWebHID extends (0, _hwTransportDefault.default) {
    constructor(device){
        super();
        this.channel = Math.floor(Math.random() * 0xffff);
        this.packetSize = 64;
        this.inputs = [];
        this.read = ()=>{
            if (this.inputs.length) return Promise.resolve(this.inputs.shift());
            return new Promise((success)=>{
                this.inputCallback = success;
            });
        };
        this.onInputReport = (e)=>{
            const buffer = Buffer.from(e.data.buffer);
            if (this.inputCallback) {
                this.inputCallback(buffer);
                this.inputCallback = null;
            } else this.inputs.push(buffer);
        };
        this._disconnectEmitted = false;
        this._emitDisconnect = (e)=>{
            if (this._disconnectEmitted) return;
            this._disconnectEmitted = true;
            this.emit("disconnect", e);
        };
        /**
         * Exchange with the device using APDU protocol.
         * @param apdu
         * @returns a promise of apdu response
         */ this.exchange = (apdu)=>__awaiter(this, void 0, void 0, function*() {
                const b = yield this.exchangeAtomicImpl(()=>__awaiter(this, void 0, void 0, function*() {
                        const { channel, packetSize } = this;
                        (0, _logs.log)("apdu", "=> " + apdu.toString("hex"));
                        const framing = (0, _hidFramingDefault.default)(channel, packetSize);
                        // Write...
                        const blocks = framing.makeBlocks(apdu);
                        for(let i = 0; i < blocks.length; i++)yield this.device.sendReport(0, blocks[i]);
                        // Read...
                        let result;
                        let acc;
                        while(!(result = framing.getReducedResult(acc))){
                            const buffer = yield this.read();
                            acc = framing.reduceResponse(acc, buffer);
                        }
                        (0, _logs.log)("apdu", "<= " + result.toString("hex"));
                        return result;
                    })).catch((e)=>{
                    if (e && e.message && e.message.includes("write")) {
                        this._emitDisconnect(e);
                        throw new (0, _errors.DisconnectedDeviceDuringOperation)(e.message);
                    }
                    throw e;
                });
                return b;
            });
        this.device = device;
        this.deviceModel = typeof device.productId === "number" ? (0, _devices.identifyUSBProductId)(device.productId) : undefined;
        device.addEventListener("inputreport", this.onInputReport);
    }
    /**
     * Similar to create() except it will always display the device permission (even if some devices are already accepted).
     */ static request() {
        return __awaiter(this, void 0, void 0, function*() {
            const [device] = yield requestLedgerDevices();
            return TransportWebHID.open(device);
        });
    }
    /**
     * Similar to create() except it will never display the device permission (it returns a Promise<?Transport>, null if it fails to find a device).
     */ static openConnected() {
        return __awaiter(this, void 0, void 0, function*() {
            const devices = yield getLedgerDevices();
            if (devices.length === 0) return null;
            return TransportWebHID.open(devices[0]);
        });
    }
    /**
     * Create a Ledger transport with a HIDDevice
     */ static open(device) {
        return __awaiter(this, void 0, void 0, function*() {
            yield device.open();
            const transport = new TransportWebHID(device);
            const onDisconnect = (e)=>{
                if (device === e.device) {
                    getHID().removeEventListener("disconnect", onDisconnect);
                    transport._emitDisconnect(new (0, _errors.DisconnectedDevice)());
                }
            };
            getHID().addEventListener("disconnect", onDisconnect);
            return transport;
        });
    }
    /**
     * Release the transport device
     */ close() {
        return __awaiter(this, void 0, void 0, function*() {
            yield this.exchangeBusyPromise;
            this.device.removeEventListener("inputreport", this.onInputReport);
            yield this.device.close();
        });
    }
    setScrambleKey() {}
}
/**
 * Check if WebUSB transport is supported.
 */ TransportWebHID.isSupported = isSupported;
/**
 * List the WebUSB devices that was previously authorized by the user.
 */ TransportWebHID.list = getLedgerDevices;
/**
 * Actively listen to WebUSB devices and emit ONE device
 * that was either accepted before, if not it will trigger the native permission UI.
 *
 * Important: it must be called in the context of a UI click!
 */ TransportWebHID.listen = (observer)=>{
    let unsubscribed = false;
    getFirstLedgerDevice().then((device)=>{
        if (!device) observer.error(new (0, _errors.TransportOpenUserCancelled)("Access denied to use Ledger device"));
        else if (!unsubscribed) {
            const deviceModel = typeof device.productId === "number" ? (0, _devices.identifyUSBProductId)(device.productId) : undefined;
            observer.next({
                type: "add",
                descriptor: device,
                deviceModel
            });
            observer.complete();
        }
    }, (error)=>{
        observer.error(new (0, _errors.TransportOpenUserCancelled)(error.message));
    });
    function unsubscribe() {
        unsubscribed = true;
    }
    return {
        unsubscribe
    };
};
exports.default = TransportWebHID;

},{"3666b9e986722ce4":"fCgem","@ledgerhq/hw-transport":"59Ey9","@ledgerhq/devices/hid-framing":"3BsQA","@ledgerhq/devices":"fnHxP","@ledgerhq/logs":"i4OI0","@ledgerhq/errors":"EVZMy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fCgem":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
const base64 = require("9c62938f1dccc73c");
const ieee754 = require("aceacb6a4531a9d2");
const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
const K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === "string") return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(let i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(let i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(let i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    let str = "";
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i;
    if (dir) {
        let foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    let loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = "";
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = "";
    for(let i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset + --byteLength];
    let mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 2 ** 16 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let i = byteLength;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 2 ** 16 + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last);
});
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let i = byteLength - 1;
    let mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = byteLength - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const errors = {};
function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, "message", {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, "code", {
                configurable: true,
                enumerable: true,
                value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
E("ERR_BUFFER_OUT_OF_BOUNDS", function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return "Attempt to access memory outside buffer bounds";
}, RangeError);
E("ERR_INVALID_ARG_TYPE", function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E("ERR_OUT_OF_RANGE", function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = addNumericalSeparator(String(input));
    else if (typeof input === "bigint") {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = addNumericalSeparator(received);
        received += "n";
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function addNumericalSeparator(val) {
    let res = "";
    let i = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function checkBounds(buf, offset, byteLength) {
    validateNumber(offset, "offset");
    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) boundsError(offset, buf.length - (byteLength + 1));
}
function checkIntBI(value, min, max, buf, offset, byteLength) {
    if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    checkBounds(buf, offset, byteLength);
}
function validateNumber(value, name) {
    if (typeof value !== "number") throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
}
function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
}

},{"9c62938f1dccc73c":"eIiSV","aceacb6a4531a9d2":"cO95r"}],"eIiSV":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"cO95r":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"59Ey9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TransportError", ()=>(0, _errors.TransportError));
parcelHelpers.export(exports, "TransportStatusError", ()=>(0, _errors.TransportStatusError));
parcelHelpers.export(exports, "StatusCodes", ()=>(0, _errors.StatusCodes));
parcelHelpers.export(exports, "getAltStatusMessage", ()=>(0, _errors.getAltStatusMessage));
var _events = require("events");
var _eventsDefault = parcelHelpers.interopDefault(_events);
var _errors = require("@ledgerhq/errors");
var _logs = require("@ledgerhq/logs");
var Buffer = require("88b312045e1ca92b").Buffer;
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const DEFAULT_LOG_TYPE = "transport";
/**
 * The Transport class defines a generic interface for communicating with a Ledger hardware wallet.
 * There are different kind of transports based on the technology (channels like U2F, HID, Bluetooth, Webusb) and environment (Node, Web,...).
 * It is an abstract class that needs to be implemented.
 */ class Transport {
    constructor({ context, logType } = {}){
        this.exchangeTimeout = 30000;
        this.unresponsiveTimeout = 15000;
        this.deviceModel = null;
        this._events = new (0, _eventsDefault.default)();
        /**
         * Send data to the device using the higher level API.
         *
         * @param {number} cla - The instruction class for the command.
         * @param {number} ins - The instruction code for the command.
         * @param {number} p1 - The first parameter for the instruction.
         * @param {number} p2 - The second parameter for the instruction.
         * @param {Buffer} data - The data to be sent. Defaults to an empty buffer.
         * @param {Array<number>} statusList - A list of acceptable status codes for the response. Defaults to [StatusCodes.OK].
         * @param {Object} options - Contains optional options for the exchange function
         *  - abortTimeoutMs: stop the send after a given timeout. Another timeout exists
         *    to detect unresponsive device (see `unresponsiveTimeout`). This timeout aborts the exchange.
         * @returns {Promise<Buffer>} A promise that resolves with the response data from the device.
         */ this.send = (cla_1, ins_1, p1_1, p2_1, ...args_1)=>__awaiter(this, [
                cla_1,
                ins_1,
                p1_1,
                p2_1,
                ...args_1
            ], void 0, function*(cla, ins, p1, p2, data = Buffer.alloc(0), statusList = [
                (0, _errors.StatusCodes).OK
            ], { abortTimeoutMs } = {}) {
                const tracer = this.tracer.withUpdatedContext({
                    function: "send"
                });
                if (data.length >= 256) {
                    tracer.trace("data.length exceeded 256 bytes limit", {
                        dataLength: data.length
                    });
                    throw new (0, _errors.TransportError)("data.length exceed 256 bytes limit. Got: " + data.length, "DataLengthTooBig");
                }
                tracer.trace("Starting an exchange", {
                    abortTimeoutMs
                });
                const response = yield this.exchange(// The size of the data is added in 1 byte just before `data`
                Buffer.concat([
                    Buffer.from([
                        cla,
                        ins,
                        p1,
                        p2
                    ]),
                    Buffer.from([
                        data.length
                    ]),
                    data
                ]), {
                    abortTimeoutMs
                });
                tracer.trace("Received response from exchange");
                const sw = response.readUInt16BE(response.length - 2);
                if (!statusList.some((s)=>s === sw)) throw new (0, _errors.TransportStatusError)(sw);
                return response;
            });
        this._appAPIlock = null;
        this.tracer = new (0, _logs.LocalTracer)(logType !== null && logType !== void 0 ? logType : DEFAULT_LOG_TYPE, context);
    }
    /**
     * Send data to the device using a low level API.
     * It's recommended to use the "send" method for a higher level API.
     * @param {Buffer} apdu - The data to send.
     * @param {Object} options - Contains optional options for the exchange function
     *  - abortTimeoutMs: stop the exchange after a given timeout. Another timeout exists
     *    to detect unresponsive device (see `unresponsiveTimeout`). This timeout aborts the exchange.
     * @returns {Promise<Buffer>} A promise that resolves with the response data from the device.
     */ exchange(_apdu, { abortTimeoutMs: _abortTimeoutMs } = {}) {
        throw new Error("exchange not implemented");
    }
    /**
     * Send apdus in batch to the device using a low level API.
     * The default implementation is to call exchange for each apdu.
     * @param {Array<Buffer>} apdus - array of apdus to send.
     * @param {Observer<Buffer>} observer - an observer that will receive the response of each apdu.
     * @returns {Subscription} A Subscription object on which you can call ".unsubscribe()" to stop sending apdus.
     */ exchangeBulk(apdus, observer) {
        let unsubscribed = false;
        const unsubscribe = ()=>{
            unsubscribed = true;
        };
        const main = ()=>__awaiter(this, void 0, void 0, function*() {
                if (unsubscribed) return;
                for (const apdu of apdus){
                    const r = yield this.exchange(apdu);
                    if (unsubscribed) return;
                    const status = r.readUInt16BE(r.length - 2);
                    if (status !== (0, _errors.StatusCodes).OK) throw new (0, _errors.TransportStatusError)(status);
                    observer.next(r);
                }
            });
        main().then(()=>!unsubscribed && observer.complete(), (e)=>!unsubscribed && observer.error(e));
        return {
            unsubscribe
        };
    }
    /**
     * Set the "scramble key" for the next data exchanges with the device.
     * Each app can have a different scramble key and it is set internally during instantiation.
     * @param {string} key - The scramble key to set.
     * deprecated This method is no longer needed for modern transports and should be migrated away from.
     * no @ before deprecated as it breaks documentationjs on version 14.0.2
     * https://github.com/documentationjs/documentation/issues/1596
     */ setScrambleKey(_key) {}
    /**
     * Close the connection with the device.
     *
     * Note: for certain transports (hw-transport-node-hid-singleton for ex), once the promise resolved,
     * the transport instance is actually still cached, and the device is disconnected only after a defined timeout.
     * But for the consumer of the Transport, this does not matter and it can consider the transport to be closed.
     *
     * @returns {Promise<void>} A promise that resolves when the transport is closed.
     */ close() {
        return Promise.resolve();
    }
    /**
     * Listen for an event on the transport instance.
     * Transport implementations may have specific events. Common events include:
     * "disconnect" : triggered when the transport is disconnected.
     * @param {string} eventName - The name of the event to listen for.
     * @param {(...args: Array<any>) => any} cb - The callback function to be invoked when the event occurs.
     */ on(eventName, cb) {
        this._events.on(eventName, cb);
    }
    /**
     * Stop listening to an event on an instance of transport.
     */ off(eventName, cb) {
        this._events.removeListener(eventName, cb);
    }
    emit(event, ...args) {
        this._events.emit(event, ...args);
    }
    /**
     * Enable or not logs of the binary exchange
     */ setDebugMode() {
        console.warn("setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.");
    }
    /**
     * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)
     */ setExchangeTimeout(exchangeTimeout) {
        this.exchangeTimeout = exchangeTimeout;
    }
    /**
     * Define the delay before emitting "unresponsive" on an exchange that does not respond
     */ setExchangeUnresponsiveTimeout(unresponsiveTimeout) {
        this.unresponsiveTimeout = unresponsiveTimeout;
    }
    /**
     * create() allows to open the first descriptor available or
     * throw if there is none or if timeout is reached.
     * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)
     * @example
    TransportFoo.create().then(transport => ...)
     */ static create(openTimeout = 3000, listenTimeout) {
        return new Promise((resolve, reject)=>{
            let found = false;
            const sub = this.listen({
                next: (e)=>{
                    found = true;
                    if (sub) sub.unsubscribe();
                    if (listenTimeoutId) clearTimeout(listenTimeoutId);
                    this.open(e.descriptor, openTimeout).then(resolve, reject);
                },
                error: (e)=>{
                    if (listenTimeoutId) clearTimeout(listenTimeoutId);
                    reject(e);
                },
                complete: ()=>{
                    if (listenTimeoutId) clearTimeout(listenTimeoutId);
                    if (!found) reject(new (0, _errors.TransportError)(this.ErrorMessage_NoDeviceFound, "NoDeviceFound"));
                }
            });
            const listenTimeoutId = listenTimeout ? setTimeout(()=>{
                sub.unsubscribe();
                reject(new (0, _errors.TransportError)(this.ErrorMessage_ListenTimeout, "ListenTimeout"));
            }, listenTimeout) : null;
        });
    }
    /**
     * Wrapper to make an exchange "atomic" (blocking any other exchange)
     *
     * It also handles "unresponsiveness" by emitting "unresponsive" and "responsive" events.
     *
     * @param f The exchange job, using the transport to run
     * @returns a Promise resolving with the output of the given job
     */ exchangeAtomicImpl(f) {
        return __awaiter(this, void 0, void 0, function*() {
            const tracer = this.tracer.withUpdatedContext({
                function: "exchangeAtomicImpl",
                unresponsiveTimeout: this.unresponsiveTimeout
            });
            if (this.exchangeBusyPromise) {
                tracer.trace("Atomic exchange is already busy");
                throw new (0, _errors.TransportRaceCondition)("An action was already pending on the Ledger device. Please deny or reconnect.");
            }
            // Sets the atomic guard
            let resolveBusy;
            const busyPromise = new Promise((r)=>{
                resolveBusy = r;
            });
            this.exchangeBusyPromise = busyPromise;
            // The device unresponsiveness handler
            let unresponsiveReached = false;
            const timeout = setTimeout(()=>{
                tracer.trace(`Timeout reached, emitting Transport event "unresponsive"`, {
                    unresponsiveTimeout: this.unresponsiveTimeout
                });
                unresponsiveReached = true;
                this.emit("unresponsive");
            }, this.unresponsiveTimeout);
            try {
                const res = yield f();
                if (unresponsiveReached) {
                    tracer.trace("Device was unresponsive, emitting responsive");
                    this.emit("responsive");
                }
                return res;
            } finally{
                tracer.trace("Finalize, clearing busy guard");
                clearTimeout(timeout);
                if (resolveBusy) resolveBusy();
                this.exchangeBusyPromise = null;
            }
        });
    }
    decorateAppAPIMethods(self, methods, scrambleKey) {
        for (const methodName of methods)self[methodName] = this.decorateAppAPIMethod(methodName, self[methodName], self, scrambleKey);
    }
    decorateAppAPIMethod(methodName, f, ctx, scrambleKey) {
        return (...args)=>__awaiter(this, void 0, void 0, function*() {
                const { _appAPIlock } = this;
                if (_appAPIlock) return Promise.reject(new (0, _errors.TransportError)("Ledger Device is busy (lock " + _appAPIlock + ")", "TransportLocked"));
                try {
                    this._appAPIlock = methodName;
                    this.setScrambleKey(scrambleKey);
                    return yield f.apply(ctx, args);
                } finally{
                    this._appAPIlock = null;
                }
            });
    }
    /**
     * Sets the context used by the logging/tracing mechanism
     *
     * Useful when re-using (cached) the same Transport instance,
     * but with a new tracing context.
     *
     * @param context A TraceContext, that can undefined to reset the context
     */ setTraceContext(context) {
        this.tracer = this.tracer.withContext(context);
    }
    /**
     * Updates the context used by the logging/tracing mechanism
     *
     * The update only overrides the key-value that are already defined in the current context.
     *
     * @param contextToAdd A TraceContext that will be added to the current context
     */ updateTraceContext(contextToAdd) {
        this.tracer.updateContext(contextToAdd);
    }
    /**
     * Gets the tracing context of the transport instance
     */ getTraceContext() {
        return this.tracer.getContext();
    }
}
Transport.ErrorMessage_ListenTimeout = "No Ledger device found (timeout)";
Transport.ErrorMessage_NoDeviceFound = "No Ledger device found";
exports.default = Transport;

},{"88b312045e1ca92b":"fCgem","events":"1VQLm","@ledgerhq/errors":"EVZMy","@ledgerhq/logs":"i4OI0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1VQLm":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var R = typeof Reflect === "object" ? Reflect : null;
var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === "function") ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === "error";
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === "function") ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit("newListener", type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === "function") // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
        }
    } else if (typeof list !== "function") {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === "function") this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === "function") return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === "function") return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === "function") return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === "function") emitter.removeListener("error", errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== "error") addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") eventTargetAgnosticAddListener(emitter, "error", handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === "function") // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

},{}],"EVZMy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "serializeError", ()=>(0, _helpers.serializeError));
parcelHelpers.export(exports, "deserializeError", ()=>(0, _helpers.deserializeError));
parcelHelpers.export(exports, "createCustomErrorClass", ()=>(0, _helpers.createCustomErrorClass));
parcelHelpers.export(exports, "addCustomErrorDeserializer", ()=>(0, _helpers.addCustomErrorDeserializer));
parcelHelpers.export(exports, "AccountNameRequiredError", ()=>AccountNameRequiredError);
parcelHelpers.export(exports, "AccountNotSupported", ()=>AccountNotSupported);
parcelHelpers.export(exports, "AccountAwaitingSendPendingOperations", ()=>AccountAwaitingSendPendingOperations);
parcelHelpers.export(exports, "AmountRequired", ()=>AmountRequired);
parcelHelpers.export(exports, "BluetoothRequired", ()=>BluetoothRequired);
parcelHelpers.export(exports, "BtcUnmatchedApp", ()=>BtcUnmatchedApp);
parcelHelpers.export(exports, "CantOpenDevice", ()=>CantOpenDevice);
parcelHelpers.export(exports, "CashAddrNotSupported", ()=>CashAddrNotSupported);
parcelHelpers.export(exports, "ClaimRewardsFeesWarning", ()=>ClaimRewardsFeesWarning);
parcelHelpers.export(exports, "CurrencyNotSupported", ()=>CurrencyNotSupported);
parcelHelpers.export(exports, "DeviceAppVerifyNotSupported", ()=>DeviceAppVerifyNotSupported);
parcelHelpers.export(exports, "DeviceGenuineSocketEarlyClose", ()=>DeviceGenuineSocketEarlyClose);
parcelHelpers.export(exports, "DeviceNotGenuineError", ()=>DeviceNotGenuineError);
parcelHelpers.export(exports, "DeviceOnDashboardExpected", ()=>DeviceOnDashboardExpected);
parcelHelpers.export(exports, "DeviceOnDashboardUnexpected", ()=>DeviceOnDashboardUnexpected);
parcelHelpers.export(exports, "DeviceInOSUExpected", ()=>DeviceInOSUExpected);
parcelHelpers.export(exports, "DeviceHalted", ()=>DeviceHalted);
parcelHelpers.export(exports, "DeviceNameInvalid", ()=>DeviceNameInvalid);
parcelHelpers.export(exports, "DeviceSocketFail", ()=>DeviceSocketFail);
parcelHelpers.export(exports, "DeviceSocketNoBulkStatus", ()=>DeviceSocketNoBulkStatus);
parcelHelpers.export(exports, "DeviceNeedsRestart", ()=>DeviceNeedsRestart);
parcelHelpers.export(exports, "UnresponsiveDeviceError", ()=>UnresponsiveDeviceError);
parcelHelpers.export(exports, "DisconnectedDevice", ()=>DisconnectedDevice);
parcelHelpers.export(exports, "DisconnectedDeviceDuringOperation", ()=>DisconnectedDeviceDuringOperation);
parcelHelpers.export(exports, "DeviceExtractOnboardingStateError", ()=>DeviceExtractOnboardingStateError);
parcelHelpers.export(exports, "DeviceOnboardingStatePollingError", ()=>DeviceOnboardingStatePollingError);
parcelHelpers.export(exports, "EnpointConfigError", ()=>EnpointConfigError);
parcelHelpers.export(exports, "EthAppPleaseEnableContractData", ()=>EthAppPleaseEnableContractData);
parcelHelpers.export(exports, "FeeEstimationFailed", ()=>FeeEstimationFailed);
parcelHelpers.export(exports, "FirmwareNotRecognized", ()=>FirmwareNotRecognized);
parcelHelpers.export(exports, "HardResetFail", ()=>HardResetFail);
parcelHelpers.export(exports, "InvalidXRPTag", ()=>InvalidXRPTag);
parcelHelpers.export(exports, "InvalidAddress", ()=>InvalidAddress);
parcelHelpers.export(exports, "InvalidNonce", ()=>InvalidNonce);
parcelHelpers.export(exports, "InvalidAddressBecauseDestinationIsAlsoSource", ()=>InvalidAddressBecauseDestinationIsAlsoSource);
parcelHelpers.export(exports, "LatestMCUInstalledError", ()=>LatestMCUInstalledError);
parcelHelpers.export(exports, "UnknownMCU", ()=>UnknownMCU);
parcelHelpers.export(exports, "LedgerAPIError", ()=>LedgerAPIError);
parcelHelpers.export(exports, "LedgerAPIErrorWithMessage", ()=>LedgerAPIErrorWithMessage);
parcelHelpers.export(exports, "LedgerAPINotAvailable", ()=>LedgerAPINotAvailable);
parcelHelpers.export(exports, "ManagerAppAlreadyInstalledError", ()=>ManagerAppAlreadyInstalledError);
parcelHelpers.export(exports, "ManagerAppRelyOnBTCError", ()=>ManagerAppRelyOnBTCError);
parcelHelpers.export(exports, "ManagerAppDepInstallRequired", ()=>ManagerAppDepInstallRequired);
parcelHelpers.export(exports, "ManagerAppDepUninstallRequired", ()=>ManagerAppDepUninstallRequired);
parcelHelpers.export(exports, "ManagerDeviceLockedError", ()=>ManagerDeviceLockedError);
parcelHelpers.export(exports, "ManagerFirmwareNotEnoughSpaceError", ()=>ManagerFirmwareNotEnoughSpaceError);
parcelHelpers.export(exports, "ManagerNotEnoughSpaceError", ()=>ManagerNotEnoughSpaceError);
parcelHelpers.export(exports, "ManagerUninstallBTCDep", ()=>ManagerUninstallBTCDep);
parcelHelpers.export(exports, "NetworkDown", ()=>NetworkDown);
parcelHelpers.export(exports, "NetworkError", ()=>NetworkError);
parcelHelpers.export(exports, "NoAddressesFound", ()=>NoAddressesFound);
parcelHelpers.export(exports, "NotEnoughBalance", ()=>NotEnoughBalance);
parcelHelpers.export(exports, "NotEnoughBalanceSwap", ()=>NotEnoughBalanceSwap);
parcelHelpers.export(exports, "NotEnoughBalanceToDelegate", ()=>NotEnoughBalanceToDelegate);
parcelHelpers.export(exports, "NotEnoughBalanceInParentAccount", ()=>NotEnoughBalanceInParentAccount);
parcelHelpers.export(exports, "NotEnoughSpendableBalance", ()=>NotEnoughSpendableBalance);
parcelHelpers.export(exports, "NotEnoughBalanceBecauseDestinationNotCreated", ()=>NotEnoughBalanceBecauseDestinationNotCreated);
parcelHelpers.export(exports, "NoAccessToCamera", ()=>NoAccessToCamera);
parcelHelpers.export(exports, "NotEnoughGas", ()=>NotEnoughGas);
parcelHelpers.export(exports, "NotEnoughGasSwap", ()=>NotEnoughGasSwap);
parcelHelpers.export(exports, "TronEmptyAccount", ()=>TronEmptyAccount);
parcelHelpers.export(exports, "MaybeKeepTronAccountAlive", ()=>MaybeKeepTronAccountAlive);
parcelHelpers.export(exports, "NotSupportedLegacyAddress", ()=>NotSupportedLegacyAddress);
parcelHelpers.export(exports, "GasLessThanEstimate", ()=>GasLessThanEstimate);
parcelHelpers.export(exports, "PriorityFeeTooLow", ()=>PriorityFeeTooLow);
parcelHelpers.export(exports, "PriorityFeeTooHigh", ()=>PriorityFeeTooHigh);
parcelHelpers.export(exports, "PriorityFeeHigherThanMaxFee", ()=>PriorityFeeHigherThanMaxFee);
parcelHelpers.export(exports, "MaxFeeTooLow", ()=>MaxFeeTooLow);
parcelHelpers.export(exports, "PasswordsDontMatchError", ()=>PasswordsDontMatchError);
parcelHelpers.export(exports, "PasswordIncorrectError", ()=>PasswordIncorrectError);
parcelHelpers.export(exports, "RecommendSubAccountsToEmpty", ()=>RecommendSubAccountsToEmpty);
parcelHelpers.export(exports, "RecommendUndelegation", ()=>RecommendUndelegation);
parcelHelpers.export(exports, "TimeoutTagged", ()=>TimeoutTagged);
parcelHelpers.export(exports, "UnexpectedBootloader", ()=>UnexpectedBootloader);
parcelHelpers.export(exports, "MCUNotGenuineToDashboard", ()=>MCUNotGenuineToDashboard);
parcelHelpers.export(exports, "RecipientRequired", ()=>RecipientRequired);
parcelHelpers.export(exports, "UnavailableTezosOriginatedAccountReceive", ()=>UnavailableTezosOriginatedAccountReceive);
parcelHelpers.export(exports, "UnavailableTezosOriginatedAccountSend", ()=>UnavailableTezosOriginatedAccountSend);
parcelHelpers.export(exports, "UpdateFetchFileFail", ()=>UpdateFetchFileFail);
parcelHelpers.export(exports, "UpdateIncorrectHash", ()=>UpdateIncorrectHash);
parcelHelpers.export(exports, "UpdateIncorrectSig", ()=>UpdateIncorrectSig);
parcelHelpers.export(exports, "UpdateYourApp", ()=>UpdateYourApp);
parcelHelpers.export(exports, "UserRefusedDeviceNameChange", ()=>UserRefusedDeviceNameChange);
parcelHelpers.export(exports, "UserRefusedAddress", ()=>UserRefusedAddress);
parcelHelpers.export(exports, "UserRefusedFirmwareUpdate", ()=>UserRefusedFirmwareUpdate);
parcelHelpers.export(exports, "UserRefusedAllowManager", ()=>UserRefusedAllowManager);
parcelHelpers.export(exports, "UserRefusedOnDevice", ()=>UserRefusedOnDevice);
parcelHelpers.export(exports, "ExpertModeRequired", ()=>ExpertModeRequired);
parcelHelpers.export(exports, "TransportOpenUserCancelled", ()=>TransportOpenUserCancelled);
parcelHelpers.export(exports, "TransportInterfaceNotAvailable", ()=>TransportInterfaceNotAvailable);
parcelHelpers.export(exports, "TransportRaceCondition", ()=>TransportRaceCondition);
parcelHelpers.export(exports, "TransportWebUSBGestureRequired", ()=>TransportWebUSBGestureRequired);
parcelHelpers.export(exports, "TransactionHasBeenValidatedError", ()=>TransactionHasBeenValidatedError);
parcelHelpers.export(exports, "TransportExchangeTimeoutError", ()=>TransportExchangeTimeoutError);
parcelHelpers.export(exports, "DeviceShouldStayInApp", ()=>DeviceShouldStayInApp);
parcelHelpers.export(exports, "WebsocketConnectionError", ()=>WebsocketConnectionError);
parcelHelpers.export(exports, "WebsocketConnectionFailed", ()=>WebsocketConnectionFailed);
parcelHelpers.export(exports, "WrongDeviceForAccount", ()=>WrongDeviceForAccount);
parcelHelpers.export(exports, "WrongDeviceForAccountPayout", ()=>WrongDeviceForAccountPayout);
parcelHelpers.export(exports, "WrongDeviceForAccountRefund", ()=>WrongDeviceForAccountRefund);
parcelHelpers.export(exports, "WrongAppForCurrency", ()=>WrongAppForCurrency);
parcelHelpers.export(exports, "ETHAddressNonEIP", ()=>ETHAddressNonEIP);
parcelHelpers.export(exports, "CantScanQRCode", ()=>CantScanQRCode);
parcelHelpers.export(exports, "FeeNotLoaded", ()=>FeeNotLoaded);
parcelHelpers.export(exports, "FeeNotLoadedSwap", ()=>FeeNotLoadedSwap);
parcelHelpers.export(exports, "FeeRequired", ()=>FeeRequired);
parcelHelpers.export(exports, "FeeTooHigh", ()=>FeeTooHigh);
parcelHelpers.export(exports, "PendingOperation", ()=>PendingOperation);
parcelHelpers.export(exports, "SyncError", ()=>SyncError);
parcelHelpers.export(exports, "PairingFailed", ()=>PairingFailed);
parcelHelpers.export(exports, "PeerRemovedPairing", ()=>PeerRemovedPairing);
parcelHelpers.export(exports, "GenuineCheckFailed", ()=>GenuineCheckFailed);
parcelHelpers.export(exports, "LedgerAPI4xx", ()=>LedgerAPI4xx);
parcelHelpers.export(exports, "LedgerAPI5xx", ()=>LedgerAPI5xx);
parcelHelpers.export(exports, "FirmwareOrAppUpdateRequired", ()=>FirmwareOrAppUpdateRequired);
parcelHelpers.export(exports, "ReplacementTransactionUnderpriced", ()=>ReplacementTransactionUnderpriced);
parcelHelpers.export(exports, "OpReturnDataSizeLimit", ()=>OpReturnDataSizeLimit);
parcelHelpers.export(exports, "DustLimit", ()=>DustLimit);
parcelHelpers.export(exports, "LanguageNotFound", ()=>LanguageNotFound);
parcelHelpers.export(exports, "NoDBPathGiven", ()=>NoDBPathGiven);
parcelHelpers.export(exports, "DBWrongPassword", ()=>DBWrongPassword);
parcelHelpers.export(exports, "DBNotReset", ()=>DBNotReset);
parcelHelpers.export(exports, "SequenceNumberError", ()=>SequenceNumberError);
parcelHelpers.export(exports, "DisabledTransactionBroadcastError", ()=>DisabledTransactionBroadcastError);
parcelHelpers.export(exports, "HwTransportErrorType", ()=>HwTransportErrorType);
/**
 * Represents an error coming from the usage of any Transport implementation.
 *
 * Needed to map a specific implementation error into an error that
 * can be managed by any code unaware of the specific Transport implementation
 * that was used.
 */ parcelHelpers.export(exports, "HwTransportError", ()=>HwTransportError);
/**
 * TransportError is used for any generic transport errors.
 * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.
 */ parcelHelpers.export(exports, "TransportError", ()=>TransportError);
parcelHelpers.export(exports, "StatusCodes", ()=>StatusCodes);
parcelHelpers.export(exports, "getAltStatusMessage", ()=>getAltStatusMessage);
/**
 * Error thrown when a device returned a non success status.
 * the error.statusCode is one of the `StatusCodes` exported by this library.
 */ parcelHelpers.export(exports, "TransportStatusError", ()=>TransportStatusError);
parcelHelpers.export(exports, "LockedDeviceError", ()=>LockedDeviceError);
var _helpers = require("./helpers");
const AccountNameRequiredError = (0, _helpers.createCustomErrorClass)("AccountNameRequired");
const AccountNotSupported = (0, _helpers.createCustomErrorClass)("AccountNotSupported");
const AccountAwaitingSendPendingOperations = (0, _helpers.createCustomErrorClass)("AccountAwaitingSendPendingOperations");
const AmountRequired = (0, _helpers.createCustomErrorClass)("AmountRequired");
const BluetoothRequired = (0, _helpers.createCustomErrorClass)("BluetoothRequired");
const BtcUnmatchedApp = (0, _helpers.createCustomErrorClass)("BtcUnmatchedApp");
const CantOpenDevice = (0, _helpers.createCustomErrorClass)("CantOpenDevice");
const CashAddrNotSupported = (0, _helpers.createCustomErrorClass)("CashAddrNotSupported");
const ClaimRewardsFeesWarning = (0, _helpers.createCustomErrorClass)("ClaimRewardsFeesWarning");
const CurrencyNotSupported = (0, _helpers.createCustomErrorClass)("CurrencyNotSupported");
const DeviceAppVerifyNotSupported = (0, _helpers.createCustomErrorClass)("DeviceAppVerifyNotSupported");
const DeviceGenuineSocketEarlyClose = (0, _helpers.createCustomErrorClass)("DeviceGenuineSocketEarlyClose");
const DeviceNotGenuineError = (0, _helpers.createCustomErrorClass)("DeviceNotGenuine");
const DeviceOnDashboardExpected = (0, _helpers.createCustomErrorClass)("DeviceOnDashboardExpected");
const DeviceOnDashboardUnexpected = (0, _helpers.createCustomErrorClass)("DeviceOnDashboardUnexpected");
const DeviceInOSUExpected = (0, _helpers.createCustomErrorClass)("DeviceInOSUExpected");
const DeviceHalted = (0, _helpers.createCustomErrorClass)("DeviceHalted");
const DeviceNameInvalid = (0, _helpers.createCustomErrorClass)("DeviceNameInvalid");
const DeviceSocketFail = (0, _helpers.createCustomErrorClass)("DeviceSocketFail");
const DeviceSocketNoBulkStatus = (0, _helpers.createCustomErrorClass)("DeviceSocketNoBulkStatus");
const DeviceNeedsRestart = (0, _helpers.createCustomErrorClass)("DeviceSocketNoBulkStatus");
const UnresponsiveDeviceError = (0, _helpers.createCustomErrorClass)("UnresponsiveDeviceError");
const DisconnectedDevice = (0, _helpers.createCustomErrorClass)("DisconnectedDevice");
const DisconnectedDeviceDuringOperation = (0, _helpers.createCustomErrorClass)("DisconnectedDeviceDuringOperation");
const DeviceExtractOnboardingStateError = (0, _helpers.createCustomErrorClass)("DeviceExtractOnboardingStateError");
const DeviceOnboardingStatePollingError = (0, _helpers.createCustomErrorClass)("DeviceOnboardingStatePollingError");
const EnpointConfigError = (0, _helpers.createCustomErrorClass)("EnpointConfig");
const EthAppPleaseEnableContractData = (0, _helpers.createCustomErrorClass)("EthAppPleaseEnableContractData");
const FeeEstimationFailed = (0, _helpers.createCustomErrorClass)("FeeEstimationFailed");
const FirmwareNotRecognized = (0, _helpers.createCustomErrorClass)("FirmwareNotRecognized");
const HardResetFail = (0, _helpers.createCustomErrorClass)("HardResetFail");
const InvalidXRPTag = (0, _helpers.createCustomErrorClass)("InvalidXRPTag");
const InvalidAddress = (0, _helpers.createCustomErrorClass)("InvalidAddress");
const InvalidNonce = (0, _helpers.createCustomErrorClass)("InvalidNonce");
const InvalidAddressBecauseDestinationIsAlsoSource = (0, _helpers.createCustomErrorClass)("InvalidAddressBecauseDestinationIsAlsoSource");
const LatestMCUInstalledError = (0, _helpers.createCustomErrorClass)("LatestMCUInstalledError");
const UnknownMCU = (0, _helpers.createCustomErrorClass)("UnknownMCU");
const LedgerAPIError = (0, _helpers.createCustomErrorClass)("LedgerAPIError");
const LedgerAPIErrorWithMessage = (0, _helpers.createCustomErrorClass)("LedgerAPIErrorWithMessage");
const LedgerAPINotAvailable = (0, _helpers.createCustomErrorClass)("LedgerAPINotAvailable");
const ManagerAppAlreadyInstalledError = (0, _helpers.createCustomErrorClass)("ManagerAppAlreadyInstalled");
const ManagerAppRelyOnBTCError = (0, _helpers.createCustomErrorClass)("ManagerAppRelyOnBTC");
const ManagerAppDepInstallRequired = (0, _helpers.createCustomErrorClass)("ManagerAppDepInstallRequired");
const ManagerAppDepUninstallRequired = (0, _helpers.createCustomErrorClass)("ManagerAppDepUninstallRequired");
const ManagerDeviceLockedError = (0, _helpers.createCustomErrorClass)("ManagerDeviceLocked");
const ManagerFirmwareNotEnoughSpaceError = (0, _helpers.createCustomErrorClass)("ManagerFirmwareNotEnoughSpace");
const ManagerNotEnoughSpaceError = (0, _helpers.createCustomErrorClass)("ManagerNotEnoughSpace");
const ManagerUninstallBTCDep = (0, _helpers.createCustomErrorClass)("ManagerUninstallBTCDep");
const NetworkDown = (0, _helpers.createCustomErrorClass)("NetworkDown");
const NetworkError = (0, _helpers.createCustomErrorClass)("NetworkError");
const NoAddressesFound = (0, _helpers.createCustomErrorClass)("NoAddressesFound");
const NotEnoughBalance = (0, _helpers.createCustomErrorClass)("NotEnoughBalance");
const NotEnoughBalanceSwap = (0, _helpers.createCustomErrorClass)("NotEnoughBalanceSwap");
const NotEnoughBalanceToDelegate = (0, _helpers.createCustomErrorClass)("NotEnoughBalanceToDelegate");
const NotEnoughBalanceInParentAccount = (0, _helpers.createCustomErrorClass)("NotEnoughBalanceInParentAccount");
const NotEnoughSpendableBalance = (0, _helpers.createCustomErrorClass)("NotEnoughSpendableBalance");
const NotEnoughBalanceBecauseDestinationNotCreated = (0, _helpers.createCustomErrorClass)("NotEnoughBalanceBecauseDestinationNotCreated");
const NoAccessToCamera = (0, _helpers.createCustomErrorClass)("NoAccessToCamera");
const NotEnoughGas = (0, _helpers.createCustomErrorClass)("NotEnoughGas");
const NotEnoughGasSwap = (0, _helpers.createCustomErrorClass)("NotEnoughGasSwap");
const TronEmptyAccount = (0, _helpers.createCustomErrorClass)("TronEmptyAccount");
const MaybeKeepTronAccountAlive = (0, _helpers.createCustomErrorClass)("MaybeKeepTronAccountAlive");
const NotSupportedLegacyAddress = (0, _helpers.createCustomErrorClass)("NotSupportedLegacyAddress");
const GasLessThanEstimate = (0, _helpers.createCustomErrorClass)("GasLessThanEstimate");
const PriorityFeeTooLow = (0, _helpers.createCustomErrorClass)("PriorityFeeTooLow");
const PriorityFeeTooHigh = (0, _helpers.createCustomErrorClass)("PriorityFeeTooHigh");
const PriorityFeeHigherThanMaxFee = (0, _helpers.createCustomErrorClass)("PriorityFeeHigherThanMaxFee");
const MaxFeeTooLow = (0, _helpers.createCustomErrorClass)("MaxFeeTooLow");
const PasswordsDontMatchError = (0, _helpers.createCustomErrorClass)("PasswordsDontMatch");
const PasswordIncorrectError = (0, _helpers.createCustomErrorClass)("PasswordIncorrect");
const RecommendSubAccountsToEmpty = (0, _helpers.createCustomErrorClass)("RecommendSubAccountsToEmpty");
const RecommendUndelegation = (0, _helpers.createCustomErrorClass)("RecommendUndelegation");
const TimeoutTagged = (0, _helpers.createCustomErrorClass)("TimeoutTagged");
const UnexpectedBootloader = (0, _helpers.createCustomErrorClass)("UnexpectedBootloader");
const MCUNotGenuineToDashboard = (0, _helpers.createCustomErrorClass)("MCUNotGenuineToDashboard");
const RecipientRequired = (0, _helpers.createCustomErrorClass)("RecipientRequired");
const UnavailableTezosOriginatedAccountReceive = (0, _helpers.createCustomErrorClass)("UnavailableTezosOriginatedAccountReceive");
const UnavailableTezosOriginatedAccountSend = (0, _helpers.createCustomErrorClass)("UnavailableTezosOriginatedAccountSend");
const UpdateFetchFileFail = (0, _helpers.createCustomErrorClass)("UpdateFetchFileFail");
const UpdateIncorrectHash = (0, _helpers.createCustomErrorClass)("UpdateIncorrectHash");
const UpdateIncorrectSig = (0, _helpers.createCustomErrorClass)("UpdateIncorrectSig");
const UpdateYourApp = (0, _helpers.createCustomErrorClass)("UpdateYourApp");
const UserRefusedDeviceNameChange = (0, _helpers.createCustomErrorClass)("UserRefusedDeviceNameChange");
const UserRefusedAddress = (0, _helpers.createCustomErrorClass)("UserRefusedAddress");
const UserRefusedFirmwareUpdate = (0, _helpers.createCustomErrorClass)("UserRefusedFirmwareUpdate");
const UserRefusedAllowManager = (0, _helpers.createCustomErrorClass)("UserRefusedAllowManager");
const UserRefusedOnDevice = (0, _helpers.createCustomErrorClass)("UserRefusedOnDevice"); // TODO rename because it's just for transaction refusal
const ExpertModeRequired = (0, _helpers.createCustomErrorClass)("ExpertModeRequired");
const TransportOpenUserCancelled = (0, _helpers.createCustomErrorClass)("TransportOpenUserCancelled");
const TransportInterfaceNotAvailable = (0, _helpers.createCustomErrorClass)("TransportInterfaceNotAvailable");
const TransportRaceCondition = (0, _helpers.createCustomErrorClass)("TransportRaceCondition");
const TransportWebUSBGestureRequired = (0, _helpers.createCustomErrorClass)("TransportWebUSBGestureRequired");
const TransactionHasBeenValidatedError = (0, _helpers.createCustomErrorClass)("TransactionHasBeenValidatedError");
const TransportExchangeTimeoutError = (0, _helpers.createCustomErrorClass)("TransportExchangeTimeoutError");
const DeviceShouldStayInApp = (0, _helpers.createCustomErrorClass)("DeviceShouldStayInApp");
const WebsocketConnectionError = (0, _helpers.createCustomErrorClass)("WebsocketConnectionError");
const WebsocketConnectionFailed = (0, _helpers.createCustomErrorClass)("WebsocketConnectionFailed");
const WrongDeviceForAccount = (0, _helpers.createCustomErrorClass)("WrongDeviceForAccount");
const WrongDeviceForAccountPayout = (0, _helpers.createCustomErrorClass)("WrongDeviceForAccountPayout");
const WrongDeviceForAccountRefund = (0, _helpers.createCustomErrorClass)("WrongDeviceForAccountRefund");
const WrongAppForCurrency = (0, _helpers.createCustomErrorClass)("WrongAppForCurrency");
const ETHAddressNonEIP = (0, _helpers.createCustomErrorClass)("ETHAddressNonEIP");
const CantScanQRCode = (0, _helpers.createCustomErrorClass)("CantScanQRCode");
const FeeNotLoaded = (0, _helpers.createCustomErrorClass)("FeeNotLoaded");
const FeeNotLoadedSwap = (0, _helpers.createCustomErrorClass)("FeeNotLoadedSwap");
const FeeRequired = (0, _helpers.createCustomErrorClass)("FeeRequired");
const FeeTooHigh = (0, _helpers.createCustomErrorClass)("FeeTooHigh");
const PendingOperation = (0, _helpers.createCustomErrorClass)("PendingOperation");
const SyncError = (0, _helpers.createCustomErrorClass)("SyncError");
const PairingFailed = (0, _helpers.createCustomErrorClass)("PairingFailed");
const PeerRemovedPairing = (0, _helpers.createCustomErrorClass)("PeerRemovedPairing");
const GenuineCheckFailed = (0, _helpers.createCustomErrorClass)("GenuineCheckFailed");
const LedgerAPI4xx = (0, _helpers.createCustomErrorClass)("LedgerAPI4xx");
const LedgerAPI5xx = (0, _helpers.createCustomErrorClass)("LedgerAPI5xx");
const FirmwareOrAppUpdateRequired = (0, _helpers.createCustomErrorClass)("FirmwareOrAppUpdateRequired");
const ReplacementTransactionUnderpriced = (0, _helpers.createCustomErrorClass)("ReplacementTransactionUnderpriced");
const OpReturnDataSizeLimit = (0, _helpers.createCustomErrorClass)("OpReturnSizeLimit");
const DustLimit = (0, _helpers.createCustomErrorClass)("DustLimit");
const LanguageNotFound = (0, _helpers.createCustomErrorClass)("LanguageNotFound");
const NoDBPathGiven = (0, _helpers.createCustomErrorClass)("NoDBPathGiven");
const DBWrongPassword = (0, _helpers.createCustomErrorClass)("DBWrongPassword");
const DBNotReset = (0, _helpers.createCustomErrorClass)("DBNotReset");
const SequenceNumberError = (0, _helpers.createCustomErrorClass)("SequenceNumberError");
const DisabledTransactionBroadcastError = (0, _helpers.createCustomErrorClass)("DisabledTransactionBroadcastError");
var HwTransportErrorType;
(function(HwTransportErrorType) {
    HwTransportErrorType["Unknown"] = "Unknown";
    HwTransportErrorType["LocationServicesDisabled"] = "LocationServicesDisabled";
    HwTransportErrorType["LocationServicesUnauthorized"] = "LocationServicesUnauthorized";
    HwTransportErrorType["BluetoothScanStartFailed"] = "BluetoothScanStartFailed";
})(HwTransportErrorType || (HwTransportErrorType = {}));
class HwTransportError extends Error {
    constructor(type, message){
        super(message);
        this.name = "HwTransportError";
        this.type = type;
        // Needed as long as we target < ES6
        Object.setPrototypeOf(this, HwTransportError.prototype);
    }
}
class TransportError extends Error {
    constructor(message, id){
        const name = "TransportError";
        super(message || name);
        this.name = name;
        this.message = message;
        this.stack = new Error(message).stack;
        this.id = id;
    }
}
(0, _helpers.addCustomErrorDeserializer)("TransportError", (e)=>new TransportError(e.message, e.id));
const StatusCodes = {
    ACCESS_CONDITION_NOT_FULFILLED: 0x9804,
    ALGORITHM_NOT_SUPPORTED: 0x9484,
    CLA_NOT_SUPPORTED: 0x6e00,
    CODE_BLOCKED: 0x9840,
    CODE_NOT_INITIALIZED: 0x9802,
    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 0x6981,
    CONDITIONS_OF_USE_NOT_SATISFIED: 0x6985,
    CONTRADICTION_INVALIDATION: 0x9810,
    CONTRADICTION_SECRET_CODE_STATUS: 0x9808,
    DEVICE_IN_RECOVERY_MODE: 0x662f,
    CUSTOM_IMAGE_EMPTY: 0x662e,
    FILE_ALREADY_EXISTS: 0x6a89,
    FILE_NOT_FOUND: 0x9404,
    GP_AUTH_FAILED: 0x6300,
    HALTED: 0x6faa,
    INCONSISTENT_FILE: 0x9408,
    INCORRECT_DATA: 0x6a80,
    INCORRECT_LENGTH: 0x6700,
    INCORRECT_P1_P2: 0x6b00,
    INS_NOT_SUPPORTED: 0x6d00,
    DEVICE_NOT_ONBOARDED: 0x6d07,
    DEVICE_NOT_ONBOARDED_2: 0x6611,
    INVALID_KCV: 0x9485,
    INVALID_OFFSET: 0x9402,
    LICENSING: 0x6f42,
    LOCKED_DEVICE: 0x5515,
    MAX_VALUE_REACHED: 0x9850,
    MEMORY_PROBLEM: 0x9240,
    MISSING_CRITICAL_PARAMETER: 0x6800,
    NO_EF_SELECTED: 0x9400,
    NOT_ENOUGH_MEMORY_SPACE: 0x6a84,
    OK: 0x9000,
    PIN_REMAINING_ATTEMPTS: 0x63c0,
    REFERENCED_DATA_NOT_FOUND: 0x6a88,
    SECURITY_STATUS_NOT_SATISFIED: 0x6982,
    TECHNICAL_PROBLEM: 0x6f00,
    UNKNOWN_APDU: 0x6d02,
    USER_REFUSED_ON_DEVICE: 0x5501,
    NOT_ENOUGH_SPACE: 0x5102,
    APP_NOT_FOUND_OR_INVALID_CONTEXT: 0x5123,
    INVALID_APP_NAME_LENGTH: 0x670a,
    GEN_AES_KEY_FAILED: 0x5419,
    INTERNAL_CRYPTO_OPERATION_FAILED: 0x541a,
    INTERNAL_COMPUTE_AES_CMAC_FAILED: 0x541b,
    ENCRYPT_APP_STORAGE_FAILED: 0x541c,
    INVALID_BACKUP_STATE: 0x6642,
    PIN_NOT_SET: 0x5502,
    INVALID_BACKUP_LENGTH: 0x6733,
    INVALID_RESTORE_STATE: 0x6643,
    INVALID_CHUNK_LENGTH: 0x6734,
    INVALID_BACKUP_HEADER: 0x684a
};
function getAltStatusMessage(code) {
    switch(code){
        // improve text of most common errors
        case 0x6700:
            return "Incorrect length";
        case 0x6800:
            return "Missing critical parameter";
        case 0x6982:
            return "Security not satisfied (dongle locked or have invalid access rights)";
        case 0x6985:
            return "Condition of use not satisfied (denied by the user?)";
        case 0x6a80:
            return "Invalid data received";
        case 0x6b00:
            return "Invalid parameter received";
        case 0x5515:
            return "Locked device";
    }
    if (0x6f00 <= code && code <= 0x6fff) return "Internal error, please report";
}
class TransportStatusError extends Error {
    /**
     * @param statusCode The error status code coming from a Transport implementation
     * @param options containing:
     *  - canBeMappedToChildError: enable the mapping of TransportStatusError to an error extending/inheriting from it
     *  . Ex: LockedDeviceError. Default to true.
     */ constructor(statusCode, { canBeMappedToChildError = true } = {}){
        const statusText = Object.keys(StatusCodes).find((k)=>StatusCodes[k] === statusCode) || "UNKNOWN_ERROR";
        const smsg = getAltStatusMessage(statusCode) || statusText;
        const statusCodeStr = statusCode.toString(16);
        const message = `Ledger device: ${smsg} (0x${statusCodeStr})`;
        super(message);
        this.name = "TransportStatusError";
        this.statusCode = statusCode;
        this.statusText = statusText;
        Object.setPrototypeOf(this, TransportStatusError.prototype);
        // Maps to a LockedDeviceError
        if (canBeMappedToChildError && statusCode === StatusCodes.LOCKED_DEVICE) return new LockedDeviceError(message);
    }
}
class LockedDeviceError extends TransportStatusError {
    constructor(message){
        super(StatusCodes.LOCKED_DEVICE, {
            canBeMappedToChildError: false
        });
        if (message) this.message = message;
        this.name = "LockedDeviceError";
        Object.setPrototypeOf(this, LockedDeviceError.prototype);
    }
}
(0, _helpers.addCustomErrorDeserializer)("TransportStatusError", (e)=>new TransportStatusError(e.statusCode));

},{"./helpers":"blDCg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"blDCg":[function(require,module,exports) {
/* eslint-disable no-continue */ /* eslint-disable no-unused-vars */ /* eslint-disable no-param-reassign */ /* eslint-disable no-prototype-builtins */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addCustomErrorDeserializer", ()=>addCustomErrorDeserializer);
parcelHelpers.export(exports, "createCustomErrorClass", ()=>createCustomErrorClass);
parcelHelpers.export(exports, "deserializeError", ()=>deserializeError);
parcelHelpers.export(exports, "serializeError", ()=>serializeError);
const errorClasses = {};
const deserializers = {};
const addCustomErrorDeserializer = (name, deserializer)=>{
    deserializers[name] = deserializer;
};
const createCustomErrorClass = (name)=>{
    class CustomErrorClass extends Error {
        constructor(message, fields, options){
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            super(message || name, options);
            // Set the prototype explicitly. See https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(this, CustomErrorClass.prototype);
            this.name = name;
            if (fields) for(const k in fields)// eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            this[k] = fields[k];
            if (options && isObject(options) && "cause" in options && !("cause" in this)) {
                // .cause was specified but the superconstructor
                // did not create an instance property.
                const cause = options.cause;
                this.cause = cause;
                if ("stack" in cause) this.stack = this.stack + "\nCAUSE: " + cause.stack;
            }
        }
    }
    errorClasses[name] = CustomErrorClass;
    return CustomErrorClass;
};
function isObject(value) {
    return typeof value === "object";
}
const deserializeError = (object)=>{
    if (object && typeof object === "object") {
        try {
            if (typeof object.message === "string") {
                const msg = JSON.parse(object.message);
                if (msg.message && msg.name) object = msg;
            }
        } catch (e) {
        // nothing
        }
        let error;
        if (typeof object.name === "string") {
            const { name } = object;
            const des = deserializers[name];
            if (des) error = des(object);
            else {
                let constructor = name === "Error" ? Error : errorClasses[name];
                if (!constructor) {
                    console.warn("deserializing an unknown class '" + name + "'");
                    constructor = createCustomErrorClass(name);
                }
                error = Object.create(constructor.prototype);
                try {
                    for(const prop in object)if (object.hasOwnProperty(prop)) error[prop] = object[prop];
                } catch (e) {
                // sometimes setting a property can fail (e.g. .name)
                }
            }
        } else if (typeof object.message === "string") error = new Error(object.message);
        if (error && !error.stack && Error.captureStackTrace) Error.captureStackTrace(error, deserializeError);
        return error;
    }
    return new Error(String(object));
};
const serializeError = (value)=>{
    if (!value) return value;
    if (typeof value === "object") return destroyCircular(value, []);
    if (typeof value === "function") return `[Function: ${value.name || "anonymous"}]`;
    return value;
};
// https://www.npmjs.com/package/destroy-circular
function destroyCircular(from, seen) {
    const to = {};
    seen.push(from);
    for (const key of Object.keys(from)){
        const value = from[key];
        if (typeof value === "function") continue;
        if (!value || typeof value !== "object") {
            to[key] = value;
            continue;
        }
        if (seen.indexOf(from[key]) === -1) {
            to[key] = destroyCircular(from[key], seen.slice(0));
            continue;
        }
        to[key] = "[Circular]";
    }
    if (typeof from.name === "string") to.name = from.name;
    if (typeof from.message === "string") to.message = from.message;
    if (typeof from.stack === "string") to.stack = from.stack;
    return to;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"i4OI0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "log", ()=>log);
parcelHelpers.export(exports, "trace", ()=>trace);
/**
 * A simple tracer class, that can be used to avoid repetition when using the `trace` function
 *
 * Its goal is to capture more context than a log function.
 * This is simple for now, but can be improved later.
 *
 * @param type A given type (not level) for the current local tracer ("hw", "withDevice", etc.)
 * @param context Anything representing the context where the log occurred
 */ parcelHelpers.export(exports, "LocalTracer", ()=>LocalTracer);
parcelHelpers.export(exports, "listen", ()=>listen);
let id = 0;
const subscribers = [];
const log = (type, message, data)=>{
    const obj = {
        type,
        id: String(++id),
        date: new Date()
    };
    if (message) obj.message = message;
    if (data) obj.data = data;
    dispatch(obj);
};
const trace = ({ type, message, data, context })=>{
    const obj = {
        type,
        id: String(++id),
        date: new Date()
    };
    if (message) obj.message = message;
    if (data) obj.data = data;
    if (context) obj.context = context;
    dispatch(obj);
};
class LocalTracer {
    constructor(type, context){
        this.type = type;
        this.context = context;
    }
    trace(message, data) {
        trace({
            type: this.type,
            message,
            data,
            context: this.context
        });
    }
    getContext() {
        return this.context;
    }
    setContext(context) {
        this.context = context;
    }
    updateContext(contextToAdd) {
        this.context = Object.assign(Object.assign({}, this.context), contextToAdd);
    }
    getType() {
        return this.type;
    }
    setType(type) {
        this.type = type;
    }
    /**
     * Create a new instance of the LocalTracer with an updated `type`
     *
     * It does not mutate the calling instance, but returns a new LocalTracer,
     * following a simple builder pattern.
     */ withType(type) {
        return new LocalTracer(type, this.context);
    }
    /**
     * Create a new instance of the LocalTracer with a new `context`
     *
     * It does not mutate the calling instance, but returns a new LocalTracer,
     * following a simple builder pattern.
     *
     * @param context A TraceContext, that can undefined to reset the context
     */ withContext(context) {
        return new LocalTracer(this.type, context);
    }
    /**
     * Create a new instance of the LocalTracer with an updated `context`,
     * on which an additional context is merged with the existing one.
     *
     * It does not mutate the calling instance, but returns a new LocalTracer,
     * following a simple builder pattern.
     */ withUpdatedContext(contextToAdd) {
        return new LocalTracer(this.type, Object.assign(Object.assign({}, this.context), contextToAdd));
    }
}
const listen = (cb)=>{
    subscribers.push(cb);
    return ()=>{
        const i = subscribers.indexOf(cb);
        if (i !== -1) {
            // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952
            subscribers[i] = subscribers[subscribers.length - 1];
            subscribers.pop();
        }
    };
};
function dispatch(log) {
    for(let i = 0; i < subscribers.length; i++)try {
        subscribers[i](log);
    } catch (e) {
        console.error(e);
    }
}
if (typeof window !== "undefined") window.__ledgerLogsListen = listen;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3BsQA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _errors = require("@ledgerhq/errors");
var Buffer = require("ebb2a684f25c5c57").Buffer;
const Tag = 0x05;
function asUInt16BE(value) {
    const b = Buffer.alloc(2);
    b.writeUInt16BE(value, 0);
    return b;
}
const initialAcc = {
    data: Buffer.alloc(0),
    dataLength: 0,
    sequence: 0
};
/**
 * Object to handle HID frames (encoding and decoding)
 *
 * @param channel
 * @param packetSize The HID protocol packet size in bytes (usually 64)
 */ const createHIDframing = (channel, packetSize)=>{
    return {
        /**
         * Frames/encodes an APDU message into HID USB packets/frames
         *
         * @param apdu The APDU message to send, in a Buffer containing [cla, ins, p1, p2, data length, data(if not empty)]
         * @returns an array of HID USB frames ready to be sent
         */ makeBlocks (apdu) {
            // Encodes the APDU length in 2 bytes before the APDU itself.
            // The length is measured as the number of bytes.
            // As the size of the APDU `data` should have been added in 1 byte just before `data`,
            // the minimum size of an APDU is 5 bytes.
            let data = Buffer.concat([
                asUInt16BE(apdu.length),
                apdu
            ]);
            const blockSize = packetSize - 5;
            const nbBlocks = Math.ceil(data.length / blockSize);
            // Fills data with 0-padding
            data = Buffer.concat([
                data,
                Buffer.alloc(nbBlocks * blockSize - data.length + 1).fill(0)
            ]);
            const blocks = [];
            for(let i = 0; i < nbBlocks; i++){
                const head = Buffer.alloc(5);
                head.writeUInt16BE(channel, 0);
                head.writeUInt8(Tag, 2);
                head.writeUInt16BE(i, 3);
                // `slice` and not `subarray`: this might not be a Node Buffer, but probably only a Uint8Array
                const chunk = data.slice(i * blockSize, (i + 1) * blockSize);
                blocks.push(Buffer.concat([
                    head,
                    chunk
                ]));
            }
            return blocks;
        },
        /**
         * Reduces HID USB packets/frames to one response.
         *
         * @param acc The value resulting from (accumulating) the previous call of reduceResponse.
         *   On first call initialized to `initialAcc`. The accumulator enables handling multi-frames messages.
         * @param chunk Current chunk to reduce into accumulator
         * @returns An accumulator value updated with the current chunk
         */ reduceResponse (acc, chunk) {
            let { data, dataLength, sequence } = acc || initialAcc;
            if (chunk.readUInt16BE(0) !== channel) throw new (0, _errors.TransportError)("Invalid channel", "InvalidChannel");
            if (chunk.readUInt8(2) !== Tag) throw new (0, _errors.TransportError)("Invalid tag", "InvalidTag");
            if (chunk.readUInt16BE(3) !== sequence) throw new (0, _errors.TransportError)("Invalid sequence", "InvalidSequence");
            // Gets the total length of the response from the 1st frame
            if (!acc) dataLength = chunk.readUInt16BE(5);
            sequence++;
            // The total length on the 1st frame takes 2 more bytes
            const chunkData = chunk.slice(acc ? 5 : 7);
            data = Buffer.concat([
                data,
                chunkData
            ]);
            // Removes any 0 padding
            if (data.length > dataLength) data = data.slice(0, dataLength);
            return {
                data,
                dataLength,
                sequence
            };
        },
        /**
         * Returns the response message that has been reduced from the HID USB frames
         *
         * @param acc The accumulator
         * @returns A Buffer containing the cleaned response message, or null if no response message, or undefined if the
         *   accumulator is incorrect (message length is not valid)
         */ getReducedResult (acc) {
            if (acc && acc.dataLength === acc.data.length) return acc.data;
        }
    };
};
exports.default = createHIDframing;

},{"ebb2a684f25c5c57":"fCgem","@ledgerhq/errors":"EVZMy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fnHxP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IIGenericHID", ()=>IIGenericHID);
parcelHelpers.export(exports, "IIKeyboardHID", ()=>IIKeyboardHID);
parcelHelpers.export(exports, "IIU2F", ()=>IIU2F);
parcelHelpers.export(exports, "IICCID", ()=>IICCID);
parcelHelpers.export(exports, "IIWebUSB", ()=>IIWebUSB);
parcelHelpers.export(exports, "DeviceModelId", ()=>DeviceModelId);
parcelHelpers.export(exports, "ledgerUSBVendorId", ()=>ledgerUSBVendorId);
parcelHelpers.export(exports, "getDeviceModel", ()=>getDeviceModel);
parcelHelpers.export(exports, "identifyTargetId", ()=>identifyTargetId);
parcelHelpers.export(exports, "identifyUSBProductId", ()=>identifyUSBProductId);
parcelHelpers.export(exports, "identifyProductName", ()=>identifyProductName);
parcelHelpers.export(exports, "getBluetoothServiceUuids", ()=>getBluetoothServiceUuids);
parcelHelpers.export(exports, "getInfosForServiceUuid", ()=>getInfosForServiceUuid);
var _semver = require("semver");
var _semverDefault = parcelHelpers.interopDefault(_semver);
const IIGenericHID = 0x01;
const IIKeyboardHID = 0x02;
const IIU2F = 0x04;
const IICCID = 0x08;
const IIWebUSB = 0x10;
var DeviceModelId;
(function(DeviceModelId) {
    /** Ledger Blue */ DeviceModelId["blue"] = "blue";
    /** Ledger Nano S */ DeviceModelId["nanoS"] = "nanoS";
    /** Ledger Nano S Plus */ DeviceModelId["nanoSP"] = "nanoSP";
    /** Ledger Nano X */ DeviceModelId["nanoX"] = "nanoX";
    /** Ledger Stax */ DeviceModelId["stax"] = "stax";
    /** Ledger Flex ("europa" is the internal name) */ DeviceModelId["europa"] = "europa";
})(DeviceModelId || (DeviceModelId = {}));
const devices = {
    [DeviceModelId.blue]: {
        id: DeviceModelId.blue,
        productName: "Ledger\xa0Blue",
        productIdMM: 0x00,
        legacyUsbProductId: 0x0000,
        usbOnly: true,
        memorySize: 491520,
        masks: [
            0x31000000,
            0x31010000
        ],
        getBlockSize: (_firwareVersion)=>4096
    },
    [DeviceModelId.nanoS]: {
        id: DeviceModelId.nanoS,
        productName: "Ledger\xa0Nano\xa0S",
        productIdMM: 0x10,
        legacyUsbProductId: 0x0001,
        usbOnly: true,
        memorySize: 327680,
        masks: [
            0x31100000
        ],
        getBlockSize: (firmwareVersion)=>{
            var _a;
            return (0, _semverDefault.default).lt((_a = (0, _semverDefault.default).coerce(firmwareVersion)) !== null && _a !== void 0 ? _a : "", "2.0.0") ? 4096 : 2048;
        }
    },
    [DeviceModelId.nanoX]: {
        id: DeviceModelId.nanoX,
        productName: "Ledger\xa0Nano\xa0X",
        productIdMM: 0x40,
        legacyUsbProductId: 0x0004,
        usbOnly: false,
        memorySize: 2097152,
        masks: [
            0x33000000
        ],
        getBlockSize: (_firwareVersion)=>4096,
        bluetoothSpec: [
            {
                serviceUuid: "13d63400-2c97-0004-0000-4c6564676572",
                notifyUuid: "13d63400-2c97-0004-0001-4c6564676572",
                writeUuid: "13d63400-2c97-0004-0002-4c6564676572",
                writeCmdUuid: "13d63400-2c97-0004-0003-4c6564676572"
            }
        ]
    },
    [DeviceModelId.nanoSP]: {
        id: DeviceModelId.nanoSP,
        productName: "Ledger Nano S Plus",
        productIdMM: 0x50,
        legacyUsbProductId: 0x0005,
        usbOnly: true,
        memorySize: 1569792,
        masks: [
            0x33100000
        ],
        getBlockSize: (_firmwareVersion)=>32
    },
    [DeviceModelId.stax]: {
        id: DeviceModelId.stax,
        productName: "Ledger\xa0Stax",
        productIdMM: 0x60,
        legacyUsbProductId: 0x0006,
        usbOnly: false,
        memorySize: 1569792,
        masks: [
            0x33200000
        ],
        getBlockSize: (_firmwareVersion)=>32,
        bluetoothSpec: [
            {
                serviceUuid: "13d63400-2c97-6004-0000-4c6564676572",
                notifyUuid: "13d63400-2c97-6004-0001-4c6564676572",
                writeUuid: "13d63400-2c97-6004-0002-4c6564676572",
                writeCmdUuid: "13d63400-2c97-6004-0003-4c6564676572"
            }
        ]
    },
    [DeviceModelId.europa]: {
        id: DeviceModelId.europa,
        productName: "Ledger\xa0Flex",
        productIdMM: 0x70,
        legacyUsbProductId: 0x0007,
        usbOnly: false,
        memorySize: 1569792,
        masks: [
            0x33300000
        ],
        getBlockSize: (_firmwareVersion)=>32,
        bluetoothSpec: [
            {
                serviceUuid: "13d63400-2c97-3004-0000-4c6564676572",
                notifyUuid: "13d63400-2c97-3004-0001-4c6564676572",
                writeUuid: "13d63400-2c97-3004-0002-4c6564676572",
                writeCmdUuid: "13d63400-2c97-3004-0003-4c6564676572"
            }
        ]
    }
};
const productMap = {
    Blue: DeviceModelId.blue,
    "Nano S": DeviceModelId.nanoS,
    "Nano S Plus": DeviceModelId.nanoSP,
    "Nano X": DeviceModelId.nanoX,
    Stax: DeviceModelId.stax,
    Europa: DeviceModelId.europa
};
const devicesList = Object.values(devices);
const ledgerUSBVendorId = 0x2c97;
const getDeviceModel = (id)=>{
    const info = devices[id];
    if (!info) throw new Error("device '" + id + "' does not exist");
    return info;
};
const identifyTargetId = (targetId)=>{
    const deviceModel = devicesList.find(({ masks })=>masks.find((mask)=>(targetId & 0xffff0000) === mask));
    return deviceModel;
};
const identifyUSBProductId = (usbProductId)=>{
    const legacy = devicesList.find((d)=>d.legacyUsbProductId === usbProductId);
    if (legacy) return legacy;
    const mm = usbProductId >> 8;
    const deviceModel = devicesList.find((d)=>d.productIdMM === mm);
    return deviceModel;
};
const identifyProductName = (productName)=>{
    const deviceModel = devicesList.find((d)=>d.id === productMap[productName]);
    return deviceModel;
};
const bluetoothServices = [];
const serviceUuidToInfos = {};
for(const id in devices){
    const deviceModel = devices[id];
    const { bluetoothSpec } = deviceModel;
    if (bluetoothSpec) for(let i = 0; i < bluetoothSpec.length; i++){
        const spec = bluetoothSpec[i];
        bluetoothServices.push(spec.serviceUuid);
        serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, "")] = Object.assign({
            deviceModel
        }, spec);
    }
}
const getBluetoothServiceUuids = ()=>bluetoothServices;
const getInfosForServiceUuid = (uuid)=>serviceUuidToInfos[uuid.toLowerCase()];

},{"semver":"3th7M","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3th7M":[function(require,module,exports) {
// just pre-load all the stuff that index.js lazily exports
const internalRe = require("2ef367e729437dbf");
const constants = require("15796d6f714ec7ac");
const SemVer = require("784948b06600d9b2");
const identifiers = require("70f963db887a798c");
const parse = require("3f445ade66470b21");
const valid = require("f44378b7de87a0b4");
const clean = require("7742c78cf22bae39");
const inc = require("a751dd1df28d6bbb");
const diff = require("e000803318fe9f2f");
const major = require("d290038a9a954b0a");
const minor = require("c5e4bbab325a5aae");
const patch = require("5c0bb8d32de60bb3");
const prerelease = require("323f12e5af5ebd1e");
const compare = require("29cf114a56181e64");
const rcompare = require("827db0815bb2f2cd");
const compareLoose = require("b644f26560ec8124");
const compareBuild = require("606d0e43dd66a24c");
const sort = require("1560ed361cfa42e6");
const rsort = require("f9e1f00918a8cfd7");
const gt = require("3694a9720f15d6ac");
const lt = require("4559dbda8a777185");
const eq = require("14a4b88a0b1fd3a5");
const neq = require("416d9b63c3df2ead");
const gte = require("d39630b19344a843");
const lte = require("3fb74c9a41c1cef6");
const cmp = require("3435ca1bbec7b99");
const coerce = require("d67409238c8fc031");
const Comparator = require("1d07035d00450bca");
const Range = require("b280ab3e26924ac1");
const satisfies = require("ba9d0d2a3e49b569");
const toComparators = require("e6b2802b2233287d");
const maxSatisfying = require("2bfdfb0adcbcb71b");
const minSatisfying = require("264df1ba0d261fad");
const minVersion = require("cd4980125683761f");
const validRange = require("a0319a4a98954087");
const outside = require("fc457e2bda4345b2");
const gtr = require("c885d2b556186a1a");
const ltr = require("58740c779f187b15");
const intersects = require("22421cf146448c92");
const simplifyRange = require("439ddbc649d6486");
const subset = require("f1e57a2c808f532d");
module.exports = {
    parse,
    valid,
    clean,
    inc,
    diff,
    major,
    minor,
    patch,
    prerelease,
    compare,
    rcompare,
    compareLoose,
    compareBuild,
    sort,
    rsort,
    gt,
    lt,
    eq,
    neq,
    gte,
    lte,
    cmp,
    coerce,
    Comparator,
    Range,
    satisfies,
    toComparators,
    maxSatisfying,
    minSatisfying,
    minVersion,
    validRange,
    outside,
    gtr,
    ltr,
    intersects,
    simplifyRange,
    subset,
    SemVer,
    re: internalRe.re,
    src: internalRe.src,
    tokens: internalRe.t,
    SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
    RELEASE_TYPES: constants.RELEASE_TYPES,
    compareIdentifiers: identifiers.compareIdentifiers,
    rcompareIdentifiers: identifiers.rcompareIdentifiers
};

},{"2ef367e729437dbf":"3aKaA","15796d6f714ec7ac":"kfqYl","784948b06600d9b2":"7HV8v","70f963db887a798c":"3Ushi","3f445ade66470b21":"fKLuB","f44378b7de87a0b4":"fONiE","7742c78cf22bae39":"lDszQ","a751dd1df28d6bbb":"knExV","e000803318fe9f2f":"gd8W5","d290038a9a954b0a":"aQdxS","c5e4bbab325a5aae":"5Jk7e","5c0bb8d32de60bb3":"k27vv","323f12e5af5ebd1e":"53tgW","29cf114a56181e64":"d0byB","827db0815bb2f2cd":"aVRRy","b644f26560ec8124":"cRDDp","606d0e43dd66a24c":"8IgjV","1560ed361cfa42e6":"uRtcB","f9e1f00918a8cfd7":"faT9h","3694a9720f15d6ac":"4Ummg","4559dbda8a777185":"cevz4","14a4b88a0b1fd3a5":"g8cVO","416d9b63c3df2ead":"6pfyl","d39630b19344a843":"10dKg","3fb74c9a41c1cef6":"g8gHq","3435ca1bbec7b99":"duXdn","d67409238c8fc031":"mfbCy","1d07035d00450bca":"gVFDT","b280ab3e26924ac1":"iSOAN","ba9d0d2a3e49b569":"4GGCq","e6b2802b2233287d":"h7PG2","2bfdfb0adcbcb71b":"k7Iyh","264df1ba0d261fad":"gedPT","cd4980125683761f":"bD9nR","a0319a4a98954087":"hrqD8","fc457e2bda4345b2":"WXkQN","c885d2b556186a1a":"3m3un","58740c779f187b15":"lVkgp","22421cf146448c92":"3twh6","439ddbc649d6486":"2hxzT","f1e57a2c808f532d":"f8DRU"}],"3aKaA":[function(require,module,exports) {
const { MAX_SAFE_COMPONENT_LENGTH, MAX_SAFE_BUILD_LENGTH, MAX_LENGTH } = require("9328c2484f003df4");
const debug = require("9075cfb365332427");
exports = module.exports = {};
// The actual regexps go on exports.re
const re = exports.re = [];
const safeRe = exports.safeRe = [];
const src = exports.src = [];
const t = exports.t = {};
let R = 0;
const LETTERDASHNUMBER = "[a-zA-Z0-9-]";
// Replace some greedy regex tokens to prevent regex dos issues. These regex are
// used internally via the safeRe object since all inputs in this library get
// normalized first to trim and collapse all extra whitespace. The original
// regexes are exported for userland consumption and lower level usage. A
// future breaking change could export the safer regex only with a note that
// all input should have extra whitespace removed.
const safeRegexReplacements = [
    [
        "\\s",
        1
    ],
    [
        "\\d",
        MAX_LENGTH
    ],
    [
        LETTERDASHNUMBER,
        MAX_SAFE_BUILD_LENGTH
    ]
];
const makeSafeRegex = (value)=>{
    for (const [token, max] of safeRegexReplacements)value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
    return value;
};
const createToken = (name, value, isGlobal)=>{
    const safe = makeSafeRegex(value);
    const index = R++;
    debug(name, index, value);
    t[name] = index;
    src[index] = value;
    re[index] = new RegExp(value, isGlobal ? "g" : undefined);
    safeRe[index] = new RegExp(safe, isGlobal ? "g" : undefined);
};
// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.
// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.
createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.
createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
// ## Main Version
// Three dot-separated numeric identifiers.
createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.` + `(${src[t.NUMERICIDENTIFIER]})\\.` + `(${src[t.NUMERICIDENTIFIER]})`);
createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})`);
// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.
createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.
createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.
createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.
createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.
// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.
createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
createToken("FULL", `^${src[t.FULLPLAIN]}$`);
// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
createToken("GTLT", "((?:<|>)?=?)");
// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` + `(?:\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?` + `)?)?`);
createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?` + `)?)?`);
createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
// Coercion.
// Extract anything that could conceivably be a part of a valid semver
createToken("COERCEPLAIN", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})` + `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);
createToken("COERCE", `${src[t.COERCEPLAIN]}(?:$|[^\\d])`);
createToken("COERCEFULL", src[t.COERCEPLAIN] + `(?:${src[t.PRERELEASE]})?` + `(?:${src[t.BUILD]})?` + `(?:$|[^\\d])`);
createToken("COERCERTL", src[t.COERCE], true);
createToken("COERCERTLFULL", src[t.COERCEFULL], true);
// Tilde ranges.
// Meaning is "reasonably at or greater than"
createToken("LONETILDE", "(?:~>?)");
createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
exports.tildeTrimReplace = "$1~";
createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
// Caret ranges.
// Meaning is "at least and backwards compatible with"
createToken("LONECARET", "(?:\\^)");
createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
exports.caretTrimReplace = "$1^";
createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
// A simple gt/lt/eq thing, or just "" to indicate "any version"
createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
exports.comparatorTrimReplace = "$1$2$3";
// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})` + `\\s+-\\s+` + `(${src[t.XRANGEPLAIN]})` + `\\s*$`);
createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})` + `\\s+-\\s+` + `(${src[t.XRANGEPLAINLOOSE]})` + `\\s*$`);
// Star ranges basically just allow anything at all.
createToken("STAR", "(<|>)?=?\\s*\\*");
// >=0.0.0 is like a star
createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");

},{"9328c2484f003df4":"kfqYl","9075cfb365332427":"bFCt8"}],"kfqYl":[function(require,module,exports) {
// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
const SEMVER_SPEC_VERSION = "2.0.0";
const MAX_LENGTH = 256;
const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */ 9007199254740991;
// Max safe segment length for coercion.
const MAX_SAFE_COMPONENT_LENGTH = 16;
// Max safe length for a build identifier. The max length minus 6 characters for
// the shortest version with a build 0.0.0+BUILD.
const MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
const RELEASE_TYPES = [
    "major",
    "premajor",
    "minor",
    "preminor",
    "patch",
    "prepatch",
    "prerelease"
];
module.exports = {
    MAX_LENGTH,
    MAX_SAFE_COMPONENT_LENGTH,
    MAX_SAFE_BUILD_LENGTH,
    MAX_SAFE_INTEGER,
    RELEASE_TYPES,
    SEMVER_SPEC_VERSION,
    FLAG_INCLUDE_PRERELEASE: 1,
    FLAG_LOOSE: 2
};

},{}],"bFCt8":[function(require,module,exports) {
var process = require("3e9ec50def946db3");
const debug = (typeof process === "object" && process.env && undefined, ()=>{});
module.exports = debug;

},{"3e9ec50def946db3":"d5jf4"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"7HV8v":[function(require,module,exports) {
const debug = require("595c172e7d863d06");
const { MAX_LENGTH, MAX_SAFE_INTEGER } = require("bd8d57fbca62978a");
const { safeRe: re, t } = require("2b364a26e67d9817");
const parseOptions = require("f1a723539d6cc9b5");
const { compareIdentifiers } = require("2451a15946a38fcd");
class SemVer {
    constructor(version, options){
        options = parseOptions(options);
        if (version instanceof SemVer) {
            if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) return version;
            else version = version.version;
        } else if (typeof version !== "string") throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`);
        if (version.length > MAX_LENGTH) throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
        debug("SemVer", version, options);
        this.options = options;
        this.loose = !!options.loose;
        // this isn't actually relevant for versions, but keep it so that we
        // don't run into trouble passing this.options around.
        this.includePrerelease = !!options.includePrerelease;
        const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
        if (!m) throw new TypeError(`Invalid Version: ${version}`);
        this.raw = version;
        // these are actually numbers
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];
        if (this.major > MAX_SAFE_INTEGER || this.major < 0) throw new TypeError("Invalid major version");
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) throw new TypeError("Invalid minor version");
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) throw new TypeError("Invalid patch version");
        // numberify any prerelease numeric ids
        if (!m[4]) this.prerelease = [];
        else this.prerelease = m[4].split(".").map((id)=>{
            if (/^[0-9]+$/.test(id)) {
                const num = +id;
                if (num >= 0 && num < MAX_SAFE_INTEGER) return num;
            }
            return id;
        });
        this.build = m[5] ? m[5].split(".") : [];
        this.format();
    }
    format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) this.version += `-${this.prerelease.join(".")}`;
        return this.version;
    }
    toString() {
        return this.version;
    }
    compare(other) {
        debug("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof SemVer)) {
            if (typeof other === "string" && other === this.version) return 0;
            other = new SemVer(other, this.options);
        }
        if (other.version === this.version) return 0;
        return this.compareMain(other) || this.comparePre(other);
    }
    compareMain(other) {
        if (!(other instanceof SemVer)) other = new SemVer(other, this.options);
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    }
    comparePre(other) {
        if (!(other instanceof SemVer)) other = new SemVer(other, this.options);
        // NOT having a prerelease is > having one
        if (this.prerelease.length && !other.prerelease.length) return -1;
        else if (!this.prerelease.length && other.prerelease.length) return 1;
        else if (!this.prerelease.length && !other.prerelease.length) return 0;
        let i = 0;
        do {
            const a = this.prerelease[i];
            const b = other.prerelease[i];
            debug("prerelease compare", i, a, b);
            if (a === undefined && b === undefined) return 0;
            else if (b === undefined) return 1;
            else if (a === undefined) return -1;
            else if (a === b) continue;
            else return compareIdentifiers(a, b);
        }while (++i);
    }
    compareBuild(other) {
        if (!(other instanceof SemVer)) other = new SemVer(other, this.options);
        let i = 0;
        do {
            const a = this.build[i];
            const b = other.build[i];
            debug("build compare", i, a, b);
            if (a === undefined && b === undefined) return 0;
            else if (b === undefined) return 1;
            else if (a === undefined) return -1;
            else if (a === b) continue;
            else return compareIdentifiers(a, b);
        }while (++i);
    }
    // preminor will bump the version up to the next minor release, and immediately
    // down to pre-release. premajor and prepatch work the same way.
    inc(release, identifier, identifierBase) {
        switch(release){
            case "premajor":
                this.prerelease.length = 0;
                this.patch = 0;
                this.minor = 0;
                this.major++;
                this.inc("pre", identifier, identifierBase);
                break;
            case "preminor":
                this.prerelease.length = 0;
                this.patch = 0;
                this.minor++;
                this.inc("pre", identifier, identifierBase);
                break;
            case "prepatch":
                // If this is already a prerelease, it will bump to the next version
                // drop any prereleases that might already exist, since they are not
                // relevant at this point.
                this.prerelease.length = 0;
                this.inc("patch", identifier, identifierBase);
                this.inc("pre", identifier, identifierBase);
                break;
            // If the input is a non-prerelease version, this acts the same as
            // prepatch.
            case "prerelease":
                if (this.prerelease.length === 0) this.inc("patch", identifier, identifierBase);
                this.inc("pre", identifier, identifierBase);
                break;
            case "major":
                // If this is a pre-major version, bump up to the same major version.
                // Otherwise increment major.
                // 1.0.0-5 bumps to 1.0.0
                // 1.1.0 bumps to 2.0.0
                if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) this.major++;
                this.minor = 0;
                this.patch = 0;
                this.prerelease = [];
                break;
            case "minor":
                // If this is a pre-minor version, bump up to the same minor version.
                // Otherwise increment minor.
                // 1.2.0-5 bumps to 1.2.0
                // 1.2.1 bumps to 1.3.0
                if (this.patch !== 0 || this.prerelease.length === 0) this.minor++;
                this.patch = 0;
                this.prerelease = [];
                break;
            case "patch":
                // If this is not a pre-release version, it will increment the patch.
                // If it is a pre-release it will bump up to the same patch version.
                // 1.2.0-5 patches to 1.2.0
                // 1.2.0 patches to 1.2.1
                if (this.prerelease.length === 0) this.patch++;
                this.prerelease = [];
                break;
            // This probably shouldn't be used publicly.
            // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
            case "pre":
                {
                    const base = Number(identifierBase) ? 1 : 0;
                    if (!identifier && identifierBase === false) throw new Error("invalid increment argument: identifier is empty");
                    if (this.prerelease.length === 0) this.prerelease = [
                        base
                    ];
                    else {
                        let i = this.prerelease.length;
                        while(--i >= 0)if (typeof this.prerelease[i] === "number") {
                            this.prerelease[i]++;
                            i = -2;
                        }
                        if (i === -1) {
                            // didn't increment anything
                            if (identifier === this.prerelease.join(".") && identifierBase === false) throw new Error("invalid increment argument: identifier already exists");
                            this.prerelease.push(base);
                        }
                    }
                    if (identifier) {
                        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
                        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
                        let prerelease = [
                            identifier,
                            base
                        ];
                        if (identifierBase === false) prerelease = [
                            identifier
                        ];
                        if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                            if (isNaN(this.prerelease[1])) this.prerelease = prerelease;
                        } else this.prerelease = prerelease;
                    }
                    break;
                }
            default:
                throw new Error(`invalid increment argument: ${release}`);
        }
        this.raw = this.format();
        if (this.build.length) this.raw += `+${this.build.join(".")}`;
        return this;
    }
}
module.exports = SemVer;

},{"595c172e7d863d06":"bFCt8","bd8d57fbca62978a":"kfqYl","2b364a26e67d9817":"3aKaA","f1a723539d6cc9b5":"1qAg7","2451a15946a38fcd":"3Ushi"}],"1qAg7":[function(require,module,exports) {
// parse out just the options we care about
const looseOption = Object.freeze({
    loose: true
});
const emptyOpts = Object.freeze({});
const parseOptions = (options)=>{
    if (!options) return emptyOpts;
    if (typeof options !== "object") return looseOption;
    return options;
};
module.exports = parseOptions;

},{}],"3Ushi":[function(require,module,exports) {
const numeric = /^[0-9]+$/;
const compareIdentifiers = (a, b)=>{
    const anum = numeric.test(a);
    const bnum = numeric.test(b);
    if (anum && bnum) {
        a = +a;
        b = +b;
    }
    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
};
const rcompareIdentifiers = (a, b)=>compareIdentifiers(b, a);
module.exports = {
    compareIdentifiers,
    rcompareIdentifiers
};

},{}],"fKLuB":[function(require,module,exports) {
const SemVer = require("575e97778d3944c0");
const parse = (version, options, throwErrors = false)=>{
    if (version instanceof SemVer) return version;
    try {
        return new SemVer(version, options);
    } catch (er) {
        if (!throwErrors) return null;
        throw er;
    }
};
module.exports = parse;

},{"575e97778d3944c0":"7HV8v"}],"fONiE":[function(require,module,exports) {
const parse = require("6a6e19c11f3ced24");
const valid = (version, options)=>{
    const v = parse(version, options);
    return v ? v.version : null;
};
module.exports = valid;

},{"6a6e19c11f3ced24":"fKLuB"}],"lDszQ":[function(require,module,exports) {
const parse = require("661ff2c6ff41830b");
const clean = (version, options)=>{
    const s = parse(version.trim().replace(/^[=v]+/, ""), options);
    return s ? s.version : null;
};
module.exports = clean;

},{"661ff2c6ff41830b":"fKLuB"}],"knExV":[function(require,module,exports) {
const SemVer = require("9a4ed023da196604");
const inc = (version, release, options, identifier, identifierBase)=>{
    if (typeof options === "string") {
        identifierBase = identifier;
        identifier = options;
        options = undefined;
    }
    try {
        return new SemVer(version instanceof SemVer ? version.version : version, options).inc(release, identifier, identifierBase).version;
    } catch (er) {
        return null;
    }
};
module.exports = inc;

},{"9a4ed023da196604":"7HV8v"}],"gd8W5":[function(require,module,exports) {
const parse = require("3b6d0e3ec696b30a");
const diff = (version1, version2)=>{
    const v1 = parse(version1, null, true);
    const v2 = parse(version2, null, true);
    const comparison = v1.compare(v2);
    if (comparison === 0) return null;
    const v1Higher = comparison > 0;
    const highVersion = v1Higher ? v1 : v2;
    const lowVersion = v1Higher ? v2 : v1;
    const highHasPre = !!highVersion.prerelease.length;
    const lowHasPre = !!lowVersion.prerelease.length;
    if (lowHasPre && !highHasPre) {
        // Going from prerelease -> no prerelease requires some special casing
        // If the low version has only a major, then it will always be a major
        // Some examples:
        // 1.0.0-1 -> 1.0.0
        // 1.0.0-1 -> 1.1.1
        // 1.0.0-1 -> 2.0.0
        if (!lowVersion.patch && !lowVersion.minor) return "major";
        // Otherwise it can be determined by checking the high version
        if (highVersion.patch) // anything higher than a patch bump would result in the wrong version
        return "patch";
        if (highVersion.minor) // anything higher than a minor bump would result in the wrong version
        return "minor";
        // bumping major/minor/patch all have same result
        return "major";
    }
    // add the `pre` prefix if we are going to a prerelease version
    const prefix = highHasPre ? "pre" : "";
    if (v1.major !== v2.major) return prefix + "major";
    if (v1.minor !== v2.minor) return prefix + "minor";
    if (v1.patch !== v2.patch) return prefix + "patch";
    // high and low are preleases
    return "prerelease";
};
module.exports = diff;

},{"3b6d0e3ec696b30a":"fKLuB"}],"aQdxS":[function(require,module,exports) {
const SemVer = require("53a097ab5c27a647");
const major = (a, loose)=>new SemVer(a, loose).major;
module.exports = major;

},{"53a097ab5c27a647":"7HV8v"}],"5Jk7e":[function(require,module,exports) {
const SemVer = require("f130a90acb01ac10");
const minor = (a, loose)=>new SemVer(a, loose).minor;
module.exports = minor;

},{"f130a90acb01ac10":"7HV8v"}],"k27vv":[function(require,module,exports) {
const SemVer = require("54b9ac3bbdf83b31");
const patch = (a, loose)=>new SemVer(a, loose).patch;
module.exports = patch;

},{"54b9ac3bbdf83b31":"7HV8v"}],"53tgW":[function(require,module,exports) {
const parse = require("ff5ab55da1933db3");
const prerelease = (version, options)=>{
    const parsed = parse(version, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
};
module.exports = prerelease;

},{"ff5ab55da1933db3":"fKLuB"}],"d0byB":[function(require,module,exports) {
const SemVer = require("f16c9f4397244ee0");
const compare = (a, b, loose)=>new SemVer(a, loose).compare(new SemVer(b, loose));
module.exports = compare;

},{"f16c9f4397244ee0":"7HV8v"}],"aVRRy":[function(require,module,exports) {
const compare = require("4bfcc14a9711a47b");
const rcompare = (a, b, loose)=>compare(b, a, loose);
module.exports = rcompare;

},{"4bfcc14a9711a47b":"d0byB"}],"cRDDp":[function(require,module,exports) {
const compare = require("95c8404dc369c13b");
const compareLoose = (a, b)=>compare(a, b, true);
module.exports = compareLoose;

},{"95c8404dc369c13b":"d0byB"}],"8IgjV":[function(require,module,exports) {
const SemVer = require("3659675d95d38f3");
const compareBuild = (a, b, loose)=>{
    const versionA = new SemVer(a, loose);
    const versionB = new SemVer(b, loose);
    return versionA.compare(versionB) || versionA.compareBuild(versionB);
};
module.exports = compareBuild;

},{"3659675d95d38f3":"7HV8v"}],"uRtcB":[function(require,module,exports) {
const compareBuild = require("7c22e552e691e157");
const sort = (list, loose)=>list.sort((a, b)=>compareBuild(a, b, loose));
module.exports = sort;

},{"7c22e552e691e157":"8IgjV"}],"faT9h":[function(require,module,exports) {
const compareBuild = require("468f4992c854a69a");
const rsort = (list, loose)=>list.sort((a, b)=>compareBuild(b, a, loose));
module.exports = rsort;

},{"468f4992c854a69a":"8IgjV"}],"4Ummg":[function(require,module,exports) {
const compare = require("85515ef2889f4f89");
const gt = (a, b, loose)=>compare(a, b, loose) > 0;
module.exports = gt;

},{"85515ef2889f4f89":"d0byB"}],"cevz4":[function(require,module,exports) {
const compare = require("9d2d7734c37f90e6");
const lt = (a, b, loose)=>compare(a, b, loose) < 0;
module.exports = lt;

},{"9d2d7734c37f90e6":"d0byB"}],"g8cVO":[function(require,module,exports) {
const compare = require("d6abf8ed12ec38c1");
const eq = (a, b, loose)=>compare(a, b, loose) === 0;
module.exports = eq;

},{"d6abf8ed12ec38c1":"d0byB"}],"6pfyl":[function(require,module,exports) {
const compare = require("5232df27c4c4faa9");
const neq = (a, b, loose)=>compare(a, b, loose) !== 0;
module.exports = neq;

},{"5232df27c4c4faa9":"d0byB"}],"10dKg":[function(require,module,exports) {
const compare = require("9183f7fbecba58ae");
const gte = (a, b, loose)=>compare(a, b, loose) >= 0;
module.exports = gte;

},{"9183f7fbecba58ae":"d0byB"}],"g8gHq":[function(require,module,exports) {
const compare = require("e55eadc974580af5");
const lte = (a, b, loose)=>compare(a, b, loose) <= 0;
module.exports = lte;

},{"e55eadc974580af5":"d0byB"}],"duXdn":[function(require,module,exports) {
const eq = require("bff7f16298b8dbaa");
const neq = require("6a1bb69c2d499261");
const gt = require("dca4b9c05150a919");
const gte = require("7b5dc70556970d6c");
const lt = require("a3a3bcc6e4d6bbdf");
const lte = require("5f1835ee4d0596f3");
const cmp = (a, op, b, loose)=>{
    switch(op){
        case "===":
            if (typeof a === "object") a = a.version;
            if (typeof b === "object") b = b.version;
            return a === b;
        case "!==":
            if (typeof a === "object") a = a.version;
            if (typeof b === "object") b = b.version;
            return a !== b;
        case "":
        case "=":
        case "==":
            return eq(a, b, loose);
        case "!=":
            return neq(a, b, loose);
        case ">":
            return gt(a, b, loose);
        case ">=":
            return gte(a, b, loose);
        case "<":
            return lt(a, b, loose);
        case "<=":
            return lte(a, b, loose);
        default:
            throw new TypeError(`Invalid operator: ${op}`);
    }
};
module.exports = cmp;

},{"bff7f16298b8dbaa":"g8cVO","6a1bb69c2d499261":"6pfyl","dca4b9c05150a919":"4Ummg","7b5dc70556970d6c":"10dKg","a3a3bcc6e4d6bbdf":"cevz4","5f1835ee4d0596f3":"g8gHq"}],"mfbCy":[function(require,module,exports) {
const SemVer = require("25529d97ade3ccdf");
const parse = require("90724e3140f56906");
const { safeRe: re, t } = require("49971e907f1359e9");
const coerce = (version, options)=>{
    if (version instanceof SemVer) return version;
    if (typeof version === "number") version = String(version);
    if (typeof version !== "string") return null;
    options = options || {};
    let match = null;
    if (!options.rtl) match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE]);
    else {
        // Find the right-most coercible string that does not share
        // a terminus with a more left-ward coercible string.
        // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
        // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'
        //
        // Walk through the string checking with a /g regexp
        // Manually set the index so as to pick up overlapping matches.
        // Stop when we get a match that ends at the string end, since no
        // coercible string can be more right-ward without the same terminus.
        const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL];
        let next;
        while((next = coerceRtlRegex.exec(version)) && (!match || match.index + match[0].length !== version.length)){
            if (!match || next.index + next[0].length !== match.index + match[0].length) match = next;
            coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
        }
        // leave it in a clean state
        coerceRtlRegex.lastIndex = -1;
    }
    if (match === null) return null;
    const major = match[2];
    const minor = match[3] || "0";
    const patch = match[4] || "0";
    const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : "";
    const build = options.includePrerelease && match[6] ? `+${match[6]}` : "";
    return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options);
};
module.exports = coerce;

},{"25529d97ade3ccdf":"7HV8v","90724e3140f56906":"fKLuB","49971e907f1359e9":"3aKaA"}],"gVFDT":[function(require,module,exports) {
const ANY = Symbol("SemVer ANY");
// hoisted class for cyclic dependency
class Comparator {
    static get ANY() {
        return ANY;
    }
    constructor(comp, options){
        options = parseOptions(options);
        if (comp instanceof Comparator) {
            if (comp.loose === !!options.loose) return comp;
            else comp = comp.value;
        }
        comp = comp.trim().split(/\s+/).join(" ");
        debug("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) this.value = "";
        else this.value = this.operator + this.semver.version;
        debug("comp", this);
    }
    parse(comp) {
        const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
        const m = comp.match(r);
        if (!m) throw new TypeError(`Invalid comparator: ${comp}`);
        this.operator = m[1] !== undefined ? m[1] : "";
        if (this.operator === "=") this.operator = "";
        // if it literally is just '>' or '' then allow anything.
        if (!m[2]) this.semver = ANY;
        else this.semver = new SemVer(m[2], this.options.loose);
    }
    toString() {
        return this.value;
    }
    test(version) {
        debug("Comparator.test", version, this.options.loose);
        if (this.semver === ANY || version === ANY) return true;
        if (typeof version === "string") try {
            version = new SemVer(version, this.options);
        } catch (er) {
            return false;
        }
        return cmp(version, this.operator, this.semver, this.options);
    }
    intersects(comp, options) {
        if (!(comp instanceof Comparator)) throw new TypeError("a Comparator is required");
        if (this.operator === "") {
            if (this.value === "") return true;
            return new Range(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
            if (comp.value === "") return true;
            return new Range(this.value, options).test(comp.semver);
        }
        options = parseOptions(options);
        // Special cases where nothing can possibly be lower
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) return false;
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) return false;
        // Same direction increasing (> or >=)
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) return true;
        // Same direction decreasing (< or <=)
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) return true;
        // same SemVer and both sides are inclusive (<= or >=)
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) return true;
        // opposite directions less than
        if (cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) return true;
        // opposite directions greater than
        if (cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) return true;
        return false;
    }
}
module.exports = Comparator;
const parseOptions = require("b6563e9809bd921f");
const { safeRe: re, t } = require("f844ee6695e23038");
const cmp = require("e62b495d112b67cb");
const debug = require("13b490d953a8241f");
const SemVer = require("f688b7fbae163ad8");
const Range = require("b8839ba12a91a5c9");

},{"b6563e9809bd921f":"1qAg7","f844ee6695e23038":"3aKaA","e62b495d112b67cb":"duXdn","13b490d953a8241f":"bFCt8","f688b7fbae163ad8":"7HV8v","b8839ba12a91a5c9":"iSOAN"}],"iSOAN":[function(require,module,exports) {
const SPACE_CHARACTERS = /\s+/g;
// hoisted class for cyclic dependency
class Range {
    constructor(range, options){
        options = parseOptions(options);
        if (range instanceof Range) {
            if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) return range;
            else return new Range(range.raw, options);
        }
        if (range instanceof Comparator) {
            // just put it in the set and return
            this.raw = range.value;
            this.set = [
                [
                    range
                ]
            ];
            this.formatted = undefined;
            return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        // First reduce all whitespace as much as possible so we do not have to rely
        // on potentially slow regexes like \s*. This is then stored and used for
        // future error messages as well.
        this.raw = range.trim().replace(SPACE_CHARACTERS, " ");
        // First, split on ||
        this.set = this.raw.split("||")// map the range to a 2d array of comparators
        .map((r)=>this.parseRange(r.trim()))// throw out any comparator lists that are empty
        // this generally means that it was not a valid range, which is allowed
        // in loose mode, but will still throw if the WHOLE range is invalid.
        .filter((c)=>c.length);
        if (!this.set.length) throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        // if we have any that are not the null set, throw out null sets.
        if (this.set.length > 1) {
            // keep the first one, in case they're all null sets
            const first = this.set[0];
            this.set = this.set.filter((c)=>!isNullSet(c[0]));
            if (this.set.length === 0) this.set = [
                first
            ];
            else if (this.set.length > 1) {
                // if we have any that are *, then the range is just *
                for (const c of this.set)if (c.length === 1 && isAny(c[0])) {
                    this.set = [
                        c
                    ];
                    break;
                }
            }
        }
        this.formatted = undefined;
    }
    get range() {
        if (this.formatted === undefined) {
            this.formatted = "";
            for(let i = 0; i < this.set.length; i++){
                if (i > 0) this.formatted += "||";
                const comps = this.set[i];
                for(let k = 0; k < comps.length; k++){
                    if (k > 0) this.formatted += " ";
                    this.formatted += comps[k].toString().trim();
                }
            }
        }
        return this.formatted;
    }
    format() {
        return this.range;
    }
    toString() {
        return this.range;
    }
    parseRange(range) {
        // memoize range parsing for performance.
        // this is a very hot path, and fully deterministic.
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range;
        const cached = cache.get(memoKey);
        if (cached) return cached;
        const loose = this.options.loose;
        // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
        const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug("hyphen replace", range);
        // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
        range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
        debug("comparator trim", range);
        // `~ 1.2.3` => `~1.2.3`
        range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
        debug("tilde trim", range);
        // `^ 1.2.3` => `^1.2.3`
        range = range.replace(re[t.CARETTRIM], caretTrimReplace);
        debug("caret trim", range);
        // At this point, the range is completely trimmed and
        // ready to be split into comparators.
        let rangeList = range.split(" ").map((comp)=>parseComparator(comp, this.options)).join(" ").split(/\s+/)// >=0.0.0 is equivalent to *
        .map((comp)=>replaceGTE0(comp, this.options));
        if (loose) // in loose mode, throw out any that are not valid comparators
        rangeList = rangeList.filter((comp)=>{
            debug("loose invalid filter", comp, this.options);
            return !!comp.match(re[t.COMPARATORLOOSE]);
        });
        debug("range list", rangeList);
        // if any comparators are the null set, then replace with JUST null set
        // if more than one comparator, remove any * comparators
        // also, don't include the same comparator more than once
        const rangeMap = new Map();
        const comparators = rangeList.map((comp)=>new Comparator(comp, this.options));
        for (const comp of comparators){
            if (isNullSet(comp)) return [
                comp
            ];
            rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) rangeMap.delete("");
        const result = [
            ...rangeMap.values()
        ];
        cache.set(memoKey, result);
        return result;
    }
    intersects(range, options) {
        if (!(range instanceof Range)) throw new TypeError("a Range is required");
        return this.set.some((thisComparators)=>{
            return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators)=>{
                return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator)=>{
                    return rangeComparators.every((rangeComparator)=>{
                        return thisComparator.intersects(rangeComparator, options);
                    });
                });
            });
        });
    }
    // if ANY of the sets match ALL of its comparators, then pass
    test(version) {
        if (!version) return false;
        if (typeof version === "string") try {
            version = new SemVer(version, this.options);
        } catch (er) {
            return false;
        }
        for(let i = 0; i < this.set.length; i++){
            if (testSet(this.set[i], version, this.options)) return true;
        }
        return false;
    }
}
module.exports = Range;
const LRU = require("96f33215aad25ada");
const cache = new LRU();
const parseOptions = require("17bb122b9b0740d9");
const Comparator = require("df9131adcc191f91");
const debug = require("1c7c6c8abfe9bd3b");
const SemVer = require("d77fd978650b507f");
const { safeRe: re, t, comparatorTrimReplace, tildeTrimReplace, caretTrimReplace } = require("9bd5ca5276add1c4");
const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require("8c8074dc7fc46964");
const isNullSet = (c)=>c.value === "<0.0.0-0";
const isAny = (c)=>c.value === "";
// take a set of comparators and determine whether there
// exists a version which can satisfy it
const isSatisfiable = (comparators, options)=>{
    let result = true;
    const remainingComparators = comparators.slice();
    let testComparator = remainingComparators.pop();
    while(result && remainingComparators.length){
        result = remainingComparators.every((otherComparator)=>{
            return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
    }
    return result;
};
// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
const parseComparator = (comp, options)=>{
    debug("comp", comp, options);
    comp = replaceCarets(comp, options);
    debug("caret", comp);
    comp = replaceTildes(comp, options);
    debug("tildes", comp);
    comp = replaceXRanges(comp, options);
    debug("xrange", comp);
    comp = replaceStars(comp, options);
    debug("stars", comp);
    return comp;
};
const isX = (id)=>!id || id.toLowerCase() === "x" || id === "*";
// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
// ~0.0.1 --> >=0.0.1 <0.1.0-0
const replaceTildes = (comp, options)=>{
    return comp.trim().split(/\s+/).map((c)=>replaceTilde(c, options)).join(" ");
};
const replaceTilde = (comp, options)=>{
    const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
    return comp.replace(r, (_, M, m, p, pr)=>{
        debug("tilde", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) ret = "";
        else if (isX(m)) ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        else if (isX(p)) // ~1.2 == >=1.2.0 <1.3.0-0
        ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        else if (pr) {
            debug("replaceTilde pr", pr);
            ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else // ~1.2.3 == >=1.2.3 <1.3.0-0
        ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        debug("tilde return", ret);
        return ret;
    });
};
// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
// ^1.2.3 --> >=1.2.3 <2.0.0-0
// ^1.2.0 --> >=1.2.0 <2.0.0-0
// ^0.0.1 --> >=0.0.1 <0.0.2-0
// ^0.1.0 --> >=0.1.0 <0.2.0-0
const replaceCarets = (comp, options)=>{
    return comp.trim().split(/\s+/).map((c)=>replaceCaret(c, options)).join(" ");
};
const replaceCaret = (comp, options)=>{
    debug("caret", comp, options);
    const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
    const z = options.includePrerelease ? "-0" : "";
    return comp.replace(r, (_, M, m, p, pr)=>{
        debug("caret", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) ret = "";
        else if (isX(m)) ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        else if (isX(p)) {
            if (M === "0") ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
            else ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
        } else if (pr) {
            debug("replaceCaret pr", pr);
            if (M === "0") {
                if (m === "0") ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
                else ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            } else ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
        } else {
            debug("no pr");
            if (M === "0") {
                if (m === "0") ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
                else ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            } else ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
        }
        debug("caret return", ret);
        return ret;
    });
};
const replaceXRanges = (comp, options)=>{
    debug("replaceXRanges", comp, options);
    return comp.split(/\s+/).map((c)=>replaceXRange(c, options)).join(" ");
};
const replaceXRange = (comp, options)=>{
    comp = comp.trim();
    const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
    return comp.replace(r, (ret, gtlt, M, m, p, pr)=>{
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) gtlt = "";
        // if we're including prereleases in the match, then we need
        // to fix this to -0, the lowest possible prerelease value
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
            if (gtlt === ">" || gtlt === "<") // nothing is allowed
            ret = "<0.0.0-0";
            else // nothing is forbidden
            ret = "*";
        } else if (gtlt && anyX) {
            // we know patch is an x, because we have any x at all.
            // replace X with 0
            if (xm) m = 0;
            p = 0;
            if (gtlt === ">") {
                // >1 => >=2.0.0
                // >1.2 => >=1.3.0
                gtlt = ">=";
                if (xm) {
                    M = +M + 1;
                    m = 0;
                    p = 0;
                } else {
                    m = +m + 1;
                    p = 0;
                }
            } else if (gtlt === "<=") {
                // <=0.7.x is actually <0.8.0, since any 0.7.x should
                // pass.  Similarly, <=7.x is actually <8.0.0, etc.
                gtlt = "<";
                if (xm) M = +M + 1;
                else m = +m + 1;
            }
            if (gtlt === "<") pr = "-0";
            ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        else if (xp) ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        debug("xRange return", ret);
        return ret;
    });
};
// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
const replaceStars = (comp, options)=>{
    debug("replaceStars", comp, options);
    // Looseness is ignored here.  star is always as loose as it gets!
    return comp.trim().replace(re[t.STAR], "");
};
const replaceGTE0 = (comp, options)=>{
    debug("replaceGTE0", comp, options);
    return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
};
// This function is passed to string.replace(re[t.HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0-0
// TODO build?
const hyphenReplace = (incPr)=>($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr)=>{
        if (isX(fM)) from = "";
        else if (isX(fm)) from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
        else if (isX(fp)) from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
        else if (fpr) from = `>=${from}`;
        else from = `>=${from}${incPr ? "-0" : ""}`;
        if (isX(tM)) to = "";
        else if (isX(tm)) to = `<${+tM + 1}.0.0-0`;
        else if (isX(tp)) to = `<${tM}.${+tm + 1}.0-0`;
        else if (tpr) to = `<=${tM}.${tm}.${tp}-${tpr}`;
        else if (incPr) to = `<${tM}.${tm}.${+tp + 1}-0`;
        else to = `<=${to}`;
        return `${from} ${to}`.trim();
    };
const testSet = (set, version, options)=>{
    for(let i = 0; i < set.length; i++){
        if (!set[i].test(version)) return false;
    }
    if (version.prerelease.length && !options.includePrerelease) {
        // Find the set of versions that are allowed to have prereleases
        // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
        // That should allow `1.2.3-pr.2` to pass.
        // However, `1.2.4-alpha.notready` should NOT be allowed,
        // even though it's within the range set by the comparators.
        for(let i = 0; i < set.length; i++){
            debug(set[i].semver);
            if (set[i].semver === Comparator.ANY) continue;
            if (set[i].semver.prerelease.length > 0) {
                const allowed = set[i].semver;
                if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) return true;
            }
        }
        // Version has a -pre, but it's not one of the ones we like.
        return false;
    }
    return true;
};

},{"96f33215aad25ada":"kQNrn","17bb122b9b0740d9":"1qAg7","df9131adcc191f91":"gVFDT","1c7c6c8abfe9bd3b":"bFCt8","d77fd978650b507f":"7HV8v","9bd5ca5276add1c4":"3aKaA","8c8074dc7fc46964":"kfqYl"}],"kQNrn":[function(require,module,exports) {
class LRUCache {
    constructor(){
        this.max = 1000;
        this.map = new Map();
    }
    get(key) {
        const value = this.map.get(key);
        if (value === undefined) return undefined;
        else {
            // Remove the key from the map and add it to the end
            this.map.delete(key);
            this.map.set(key, value);
            return value;
        }
    }
    delete(key) {
        return this.map.delete(key);
    }
    set(key, value) {
        const deleted = this.delete(key);
        if (!deleted && value !== undefined) {
            // If cache is full, delete the least recently used item
            if (this.map.size >= this.max) {
                const firstKey = this.map.keys().next().value;
                this.delete(firstKey);
            }
            this.map.set(key, value);
        }
        return this;
    }
}
module.exports = LRUCache;

},{}],"4GGCq":[function(require,module,exports) {
const Range = require("b60a47303a13d107");
const satisfies = (version, range, options)=>{
    try {
        range = new Range(range, options);
    } catch (er) {
        return false;
    }
    return range.test(version);
};
module.exports = satisfies;

},{"b60a47303a13d107":"iSOAN"}],"h7PG2":[function(require,module,exports) {
const Range = require("f497be9904aac7c0");
// Mostly just for testing and legacy API reasons
const toComparators = (range, options)=>new Range(range, options).set.map((comp)=>comp.map((c)=>c.value).join(" ").trim().split(" "));
module.exports = toComparators;

},{"f497be9904aac7c0":"iSOAN"}],"k7Iyh":[function(require,module,exports) {
const SemVer = require("96d622a81d57358d");
const Range = require("f2865e94142488ab");
const maxSatisfying = (versions, range, options)=>{
    let max = null;
    let maxSV = null;
    let rangeObj = null;
    try {
        rangeObj = new Range(range, options);
    } catch (er) {
        return null;
    }
    versions.forEach((v)=>{
        if (rangeObj.test(v)) // satisfies(v, range, options)
        {
            if (!max || maxSV.compare(v) === -1) {
                // compare(max, v, true)
                max = v;
                maxSV = new SemVer(max, options);
            }
        }
    });
    return max;
};
module.exports = maxSatisfying;

},{"96d622a81d57358d":"7HV8v","f2865e94142488ab":"iSOAN"}],"gedPT":[function(require,module,exports) {
const SemVer = require("fea3851ba09d8834");
const Range = require("9d2799b098b5c4c7");
const minSatisfying = (versions, range, options)=>{
    let min = null;
    let minSV = null;
    let rangeObj = null;
    try {
        rangeObj = new Range(range, options);
    } catch (er) {
        return null;
    }
    versions.forEach((v)=>{
        if (rangeObj.test(v)) // satisfies(v, range, options)
        {
            if (!min || minSV.compare(v) === 1) {
                // compare(min, v, true)
                min = v;
                minSV = new SemVer(min, options);
            }
        }
    });
    return min;
};
module.exports = minSatisfying;

},{"fea3851ba09d8834":"7HV8v","9d2799b098b5c4c7":"iSOAN"}],"bD9nR":[function(require,module,exports) {
const SemVer = require("4c531b1d555da497");
const Range = require("76327127dc36ed58");
const gt = require("a5ac47b45ae8684c");
const minVersion = (range, loose)=>{
    range = new Range(range, loose);
    let minver = new SemVer("0.0.0");
    if (range.test(minver)) return minver;
    minver = new SemVer("0.0.0-0");
    if (range.test(minver)) return minver;
    minver = null;
    for(let i = 0; i < range.set.length; ++i){
        const comparators = range.set[i];
        let setMin = null;
        comparators.forEach((comparator)=>{
            // Clone to avoid manipulating the comparator's semver object.
            const compver = new SemVer(comparator.semver.version);
            switch(comparator.operator){
                case ">":
                    if (compver.prerelease.length === 0) compver.patch++;
                    else compver.prerelease.push(0);
                    compver.raw = compver.format();
                /* fallthrough */ case "":
                case ">=":
                    if (!setMin || gt(compver, setMin)) setMin = compver;
                    break;
                case "<":
                case "<=":
                    break;
                /* istanbul ignore next */ default:
                    throw new Error(`Unexpected operation: ${comparator.operator}`);
            }
        });
        if (setMin && (!minver || gt(minver, setMin))) minver = setMin;
    }
    if (minver && range.test(minver)) return minver;
    return null;
};
module.exports = minVersion;

},{"4c531b1d555da497":"7HV8v","76327127dc36ed58":"iSOAN","a5ac47b45ae8684c":"4Ummg"}],"hrqD8":[function(require,module,exports) {
const Range = require("fd2c35053245b1fd");
const validRange = (range, options)=>{
    try {
        // Return '*' instead of '' so that truthiness works.
        // This will throw if it's invalid anyway
        return new Range(range, options).range || "*";
    } catch (er) {
        return null;
    }
};
module.exports = validRange;

},{"fd2c35053245b1fd":"iSOAN"}],"WXkQN":[function(require,module,exports) {
const SemVer = require("65977c6c7fab41e0");
const Comparator = require("8b0890ac7a0294ed");
const { ANY } = Comparator;
const Range = require("9baad77301d611e2");
const satisfies = require("1a3d276234841886");
const gt = require("8f784c6ef2cd1972");
const lt = require("3c234e2ddd9db68a");
const lte = require("88893a74cd9f934");
const gte = require("6cccfcce37ef6329");
const outside = (version, range, hilo, options)=>{
    version = new SemVer(version, options);
    range = new Range(range, options);
    let gtfn, ltefn, ltfn, comp, ecomp;
    switch(hilo){
        case ">":
            gtfn = gt;
            ltefn = lte;
            ltfn = lt;
            comp = ">";
            ecomp = ">=";
            break;
        case "<":
            gtfn = lt;
            ltefn = gte;
            ltfn = gt;
            comp = "<";
            ecomp = "<=";
            break;
        default:
            throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    // If it satisfies the range it is not outside
    if (satisfies(version, range, options)) return false;
    // From now on, variable terms are as if we're in "gtr" mode.
    // but note that everything is flipped for the "ltr" function.
    for(let i = 0; i < range.set.length; ++i){
        const comparators = range.set[i];
        let high = null;
        let low = null;
        comparators.forEach((comparator)=>{
            if (comparator.semver === ANY) comparator = new Comparator(">=0.0.0");
            high = high || comparator;
            low = low || comparator;
            if (gtfn(comparator.semver, high.semver, options)) high = comparator;
            else if (ltfn(comparator.semver, low.semver, options)) low = comparator;
        });
        // If the edge version comparator has a operator then our version
        // isn't outside it
        if (high.operator === comp || high.operator === ecomp) return false;
        // If the lowest version comparator has an operator and our version
        // is less than it then it isn't higher than the range
        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) return false;
        else if (low.operator === ecomp && ltfn(version, low.semver)) return false;
    }
    return true;
};
module.exports = outside;

},{"65977c6c7fab41e0":"7HV8v","8b0890ac7a0294ed":"gVFDT","9baad77301d611e2":"iSOAN","1a3d276234841886":"4GGCq","8f784c6ef2cd1972":"4Ummg","3c234e2ddd9db68a":"cevz4","88893a74cd9f934":"g8gHq","6cccfcce37ef6329":"10dKg"}],"3m3un":[function(require,module,exports) {
// Determine if version is greater than all the versions possible in the range.
const outside = require("be5e984e16e512b9");
const gtr = (version, range, options)=>outside(version, range, ">", options);
module.exports = gtr;

},{"be5e984e16e512b9":"WXkQN"}],"lVkgp":[function(require,module,exports) {
const outside = require("b7f00e21a32b75a5");
// Determine if version is less than all the versions possible in the range
const ltr = (version, range, options)=>outside(version, range, "<", options);
module.exports = ltr;

},{"b7f00e21a32b75a5":"WXkQN"}],"3twh6":[function(require,module,exports) {
const Range = require("5205f80872e81710");
const intersects = (r1, r2, options)=>{
    r1 = new Range(r1, options);
    r2 = new Range(r2, options);
    return r1.intersects(r2, options);
};
module.exports = intersects;

},{"5205f80872e81710":"iSOAN"}],"2hxzT":[function(require,module,exports) {
// given a set of versions and a range, create a "simplified" range
// that includes the same versions that the original range does
// If the original range is shorter than the simplified one, return that.
const satisfies = require("e72123f17434788");
const compare = require("3eb9817061c82995");
module.exports = (versions, range, options)=>{
    const set = [];
    let first = null;
    let prev = null;
    const v = versions.sort((a, b)=>compare(a, b, options));
    for (const version of v){
        const included = satisfies(version, range, options);
        if (included) {
            prev = version;
            if (!first) first = version;
        } else {
            if (prev) set.push([
                first,
                prev
            ]);
            prev = null;
            first = null;
        }
    }
    if (first) set.push([
        first,
        null
    ]);
    const ranges = [];
    for (const [min, max] of set){
        if (min === max) ranges.push(min);
        else if (!max && min === v[0]) ranges.push("*");
        else if (!max) ranges.push(`>=${min}`);
        else if (min === v[0]) ranges.push(`<=${max}`);
        else ranges.push(`${min} - ${max}`);
    }
    const simplified = ranges.join(" || ");
    const original = typeof range.raw === "string" ? range.raw : String(range);
    return simplified.length < original.length ? simplified : range;
};

},{"e72123f17434788":"4GGCq","3eb9817061c82995":"d0byB"}],"f8DRU":[function(require,module,exports) {
const Range = require("c141b0432e6ae71b");
const Comparator = require("94bed966a1054073");
const { ANY } = Comparator;
const satisfies = require("acfaf6445a9794b");
const compare = require("d9ed82a69c119cf4");
// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
// - Every simple range `r1, r2, ...` is a null set, OR
// - Every simple range `r1, r2, ...` which is not a null set is a subset of
//   some `R1, R2, ...`
//
// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
// - If c is only the ANY comparator
//   - If C is only the ANY comparator, return true
//   - Else if in prerelease mode, return false
//   - else replace c with `[>=0.0.0]`
// - If C is only the ANY comparator
//   - if in prerelease mode, return true
//   - else replace C with `[>=0.0.0]`
// - Let EQ be the set of = comparators in c
// - If EQ is more than one, return true (null set)
// - Let GT be the highest > or >= comparator in c
// - Let LT be the lowest < or <= comparator in c
// - If GT and LT, and GT.semver > LT.semver, return true (null set)
// - If any C is a = range, and GT or LT are set, return false
// - If EQ
//   - If GT, and EQ does not satisfy GT, return true (null set)
//   - If LT, and EQ does not satisfy LT, return true (null set)
//   - If EQ satisfies every C, return true
//   - Else return false
// - If GT
//   - If GT.semver is lower than any > or >= comp in C, return false
//   - If GT is >=, and GT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the GT.semver tuple, return false
// - If LT
//   - If LT.semver is greater than any < or <= comp in C, return false
//   - If LT is <=, and LT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the LT.semver tuple, return false
// - Else return true
const subset = (sub, dom, options = {})=>{
    if (sub === dom) return true;
    sub = new Range(sub, options);
    dom = new Range(dom, options);
    let sawNonNull = false;
    OUTER: for (const simpleSub of sub.set){
        for (const simpleDom of dom.set){
            const isSub = simpleSubset(simpleSub, simpleDom, options);
            sawNonNull = sawNonNull || isSub !== null;
            if (isSub) continue OUTER;
        }
        // the null set is a subset of everything, but null simple ranges in
        // a complex range should be ignored.  so if we saw a non-null range,
        // then we know this isn't a subset, but if EVERY simple range was null,
        // then it is a subset.
        if (sawNonNull) return false;
    }
    return true;
};
const minimumVersionWithPreRelease = [
    new Comparator(">=0.0.0-0")
];
const minimumVersion = [
    new Comparator(">=0.0.0")
];
const simpleSubset = (sub, dom, options)=>{
    if (sub === dom) return true;
    if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY) return true;
        else if (options.includePrerelease) sub = minimumVersionWithPreRelease;
        else sub = minimumVersion;
    }
    if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease) return true;
        else dom = minimumVersion;
    }
    const eqSet = new Set();
    let gt, lt;
    for (const c of sub){
        if (c.operator === ">" || c.operator === ">=") gt = higherGT(gt, c, options);
        else if (c.operator === "<" || c.operator === "<=") lt = lowerLT(lt, c, options);
        else eqSet.add(c.semver);
    }
    if (eqSet.size > 1) return null;
    let gtltComp;
    if (gt && lt) {
        gtltComp = compare(gt.semver, lt.semver, options);
        if (gtltComp > 0) return null;
        else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<=")) return null;
    }
    // will iterate one or zero times
    for (const eq of eqSet){
        if (gt && !satisfies(eq, String(gt), options)) return null;
        if (lt && !satisfies(eq, String(lt), options)) return null;
        for (const c of dom){
            if (!satisfies(eq, String(c), options)) return false;
        }
        return true;
    }
    let higher, lower;
    let hasDomLT, hasDomGT;
    // if the subset has a prerelease, we need a comparator in the superset
    // with the same tuple and a prerelease, or it's not a subset
    let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
    let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
    // exception: <1.2.3-0 is the same as <1.2.3
    if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) needDomLTPre = false;
    for (const c of dom){
        hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
        hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
        if (gt) {
            if (needDomGTPre) {
                if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) needDomGTPre = false;
            }
            if (c.operator === ">" || c.operator === ">=") {
                higher = higherGT(gt, c, options);
                if (higher === c && higher !== gt) return false;
            } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c), options)) return false;
        }
        if (lt) {
            if (needDomLTPre) {
                if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) needDomLTPre = false;
            }
            if (c.operator === "<" || c.operator === "<=") {
                lower = lowerLT(lt, c, options);
                if (lower === c && lower !== lt) return false;
            } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options)) return false;
        }
        if (!c.operator && (lt || gt) && gtltComp !== 0) return false;
    }
    // if there was a < or >, and nothing in the dom, then must be false
    // UNLESS it was limited by another range in the other direction.
    // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0
    if (gt && hasDomLT && !lt && gtltComp !== 0) return false;
    if (lt && hasDomGT && !gt && gtltComp !== 0) return false;
    // we needed a prerelease range in a specific tuple, but didn't get one
    // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
    // because it includes prereleases in the 1.2.3 tuple
    if (needDomGTPre || needDomLTPre) return false;
    return true;
};
// >=1.2.3 is lower than >1.2.3
const higherGT = (a, b, options)=>{
    if (!a) return b;
    const comp = compare(a.semver, b.semver, options);
    return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
};
// <=1.2.3 is higher than <1.2.3
const lowerLT = (a, b, options)=>{
    if (!a) return b;
    const comp = compare(a.semver, b.semver, options);
    return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
};
module.exports = subset;

},{"c141b0432e6ae71b":"iSOAN","94bed966a1054073":"gVFDT","acfaf6445a9794b":"4GGCq","d9ed82a69c119cf4":"d0byB"}],"2JAI7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* export async function getMoneroAddress() {
  try {
    console.log("Attempting to get Monero address now...");

    // Request access to the Ledger device
    const transport = await TransportWebHID.create();

    // Define APDU command parameters
    const cla = 0xE0; // Class byte for Ledger Monero app
    const ins = 0x46; // INS_DERIVE_SUBADDRESS_PUBLIC_KEY
    const p1 = 0x00; // First parameter
    const p2 = 0x00; // Second parameter

    // Derivation path: 44'/128'/0'/0/0
    const derivationPath = [
      0x8000002c, // 44'
      0x80000080, // 128'
      0x80000000, // 0'
      //0x00000000, // 0
      //0x00000000, // 0
    ];
    const data = serializeDerivationPath(derivationPath);

    console.log("Serialized Derivation Path:", data);

    // Send the APDU command to the Ledger device
    const response = await transport.send(cla, ins, p1, p2, data);

    // Listen to Ledger logs for debugging
    listen((log) => console.log(log));
    //console.log("Monero Address Response:", response);
    if (response.length > 2) {
      const statusCode = response.slice(0,-2); // Last 2 bytes are the status word
      if (statusCode[0] === 0x90 && statusCode[1] === 0x00) {
        console.log("Success:", response);
      } else {
        console.error("Error with status code:", statusCode);
      }
    }
  } catch (error) {
    console.error("Error getting Monero address:", error);
  }
} */ parcelHelpers.export(exports, "getMoneroAddress", ()=>getMoneroAddress);
var _esnextMapGroupByJs = require("core-js/modules/esnext.map.group-by.js");
var _esnextSymbolDisposeJs = require("core-js/modules/esnext.symbol.dispose.js");
var _webImmediateJs = require("core-js/modules/web.immediate.js");
var _logs = require("@ledgerhq/logs");
var _hwTransportWebhid = require("@ledgerhq/hw-transport-webhid");
var _hwTransportWebhidDefault = parcelHelpers.interopDefault(_hwTransportWebhid);
var _serializeDerivationPath = require("./serializeDerivationPath");
async function getMoneroAddress() {
    try {
        const transport = await (0, _hwTransportWebhidDefault.default).create();
        const path = [
            0x8000002c,
            0x80000080,
            0x80000000,
            0x00000000,
            0x00000000
        ]; // 44'/128'/0'/0/0
        const serializedPath = (0, _serializeDerivationPath.serializeDerivationPath)(path);
        const response = await transport.send(0xE0, 0x46, 0x00, 0x00, serializedPath);
        // Assuming the address is in the response and converting it to a string
        const address = new TextDecoder().decode(response.subarray(0, response.length - 2)); // Remove status bytes
        return address;
    } catch (error) {
        console.error("Error getting Monero address:", error);
        throw error;
    }
}

},{"core-js/modules/esnext.map.group-by.js":"3AR1K","core-js/modules/esnext.symbol.dispose.js":"b9ez5","core-js/modules/web.immediate.js":"49tUX","@ledgerhq/logs":"i4OI0","@ledgerhq/hw-transport-webhid":"8O295","./serializeDerivationPath":"h5x5j","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3AR1K":[function(require,module,exports) {
"use strict";
// TODO: Remove from `core-js@4`
require("4d92d9132913bacd");

},{"4d92d9132913bacd":"c4yOM"}],"c4yOM":[function(require,module,exports) {
"use strict";
var $ = require("6567f4dade5d8960");
var uncurryThis = require("f35d7393646ad055");
var aCallable = require("c4503f7eb1018306");
var requireObjectCoercible = require("d7c6ba4f404b5360");
var iterate = require("ff883ec9010d6328");
var MapHelpers = require("f9f796f22480c881");
var IS_PURE = require("dc5cfe657d3f962b");
var fails = require("59f5d275c85c76");
var Map = MapHelpers.Map;
var has = MapHelpers.has;
var get = MapHelpers.get;
var set = MapHelpers.set;
var push = uncurryThis([].push);
var DOES_NOT_WORK_WITH_PRIMITIVES = IS_PURE || fails(function() {
    return Map.groupBy("ab", function(it) {
        return it;
    }).get("a").length !== 1;
});
// `Map.groupBy` method
// https://github.com/tc39/proposal-array-grouping
$({
    target: "Map",
    stat: true,
    forced: IS_PURE || DOES_NOT_WORK_WITH_PRIMITIVES
}, {
    groupBy: function groupBy(items, callbackfn) {
        requireObjectCoercible(items);
        aCallable(callbackfn);
        var map = new Map();
        var k = 0;
        iterate(items, function(value) {
            var key = callbackfn(value, k++);
            if (!has(map, key)) set(map, key, [
                value
            ]);
            else push(get(map, key), value);
        });
        return map;
    }
});

},{"6567f4dade5d8960":"dIGt4","f35d7393646ad055":"7GlkT","c4503f7eb1018306":"gOMir","d7c6ba4f404b5360":"fOR0B","ff883ec9010d6328":"4OXGm","f9f796f22480c881":"f9Wim","dc5cfe657d3f962b":"5ZsyC","59f5d275c85c76":"hL6D2"}],"dIGt4":[function(require,module,exports) {
"use strict";
var globalThis = require("23dea28abc8414d1");
var getOwnPropertyDescriptor = require("2ec751f39e500b85").f;
var createNonEnumerableProperty = require("b4567636b28a3b3a");
var defineBuiltIn = require("50460aa43dd4048a");
var defineGlobalProperty = require("581238c99f8c2c30");
var copyConstructorProperties = require("566a383894c688bc");
var isForced = require("f0e2e697f04e8ad9");
/*
  options.target         - name of the target object
  options.global         - target is the global object
  options.stat           - export as static methods of target
  options.proto          - export as prototype methods of target
  options.real           - real prototype method for the `pure` version
  options.forced         - export even if the native feature is available
  options.bind           - bind methods to the target, required for the `pure` version
  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe         - use the simple assignment of property instead of delete + defineProperty
  options.sham           - add a flag to not completely full polyfills
  options.enumerable     - export as enumerable property
  options.dontCallGetSet - prevent calling a getter on target
  options.name           - the .name of the function if it does not match the key
*/ module.exports = function(options, source) {
    var TARGET = options.target;
    var GLOBAL = options.global;
    var STATIC = options.stat;
    var FORCED, target, key, targetProperty, sourceProperty, descriptor;
    if (GLOBAL) target = globalThis;
    else if (STATIC) target = globalThis[TARGET] || defineGlobalProperty(TARGET, {});
    else target = globalThis[TARGET] && globalThis[TARGET].prototype;
    if (target) for(key in source){
        sourceProperty = source[key];
        if (options.dontCallGetSet) {
            descriptor = getOwnPropertyDescriptor(target, key);
            targetProperty = descriptor && descriptor.value;
        } else targetProperty = target[key];
        FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
        // contained in target
        if (!FORCED && targetProperty !== undefined) {
            if (typeof sourceProperty == typeof targetProperty) continue;
            copyConstructorProperties(sourceProperty, targetProperty);
        }
        // add a flag to not completely full polyfills
        if (options.sham || targetProperty && targetProperty.sham) createNonEnumerableProperty(sourceProperty, "sham", true);
        defineBuiltIn(target, key, sourceProperty, options);
    }
};

},{"23dea28abc8414d1":"9fY7y","2ec751f39e500b85":"lk5NI","b4567636b28a3b3a":"8CL42","50460aa43dd4048a":"6XwEX","581238c99f8c2c30":"ggjnO","566a383894c688bc":"9Z12i","f0e2e697f04e8ad9":"6uTCZ"}],"9fY7y":[function(require,module,exports) {
var global = arguments[3];
"use strict";
var check = function(it) {
    return it && it.Math === Math && it;
};
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports = // eslint-disable-next-line es/no-global-this -- safe
check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
check(typeof self == "object" && self) || check(typeof global == "object" && global) || check(typeof this == "object" && this) || // eslint-disable-next-line no-new-func -- fallback
function() {
    return this;
}() || Function("return this")();

},{}],"lk5NI":[function(require,module,exports) {
"use strict";
var DESCRIPTORS = require("c04e6fb248689dba");
var call = require("553ec943aa2a4554");
var propertyIsEnumerableModule = require("bbc5e69071aa2fbd");
var createPropertyDescriptor = require("1d2ffbfd99e01f41");
var toIndexedObject = require("c4ea69a78a643d87");
var toPropertyKey = require("8ab18ff766aa2ab9");
var hasOwn = require("3761c5d34b7aa48f");
var IE8_DOM_DEFINE = require("c4dfcc26308f1b4a");
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
    O = toIndexedObject(O);
    P = toPropertyKey(P);
    if (IE8_DOM_DEFINE) try {
        return $getOwnPropertyDescriptor(O, P);
    } catch (error) {}
    if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
};

},{"c04e6fb248689dba":"92ZIi","553ec943aa2a4554":"d7JlP","bbc5e69071aa2fbd":"7SuiS","1d2ffbfd99e01f41":"1lpav","c4ea69a78a643d87":"jLWwQ","8ab18ff766aa2ab9":"5XWKd","3761c5d34b7aa48f":"gC2Q5","c4dfcc26308f1b4a":"qS9uN"}],"92ZIi":[function(require,module,exports) {
"use strict";
var fails = require("735b783268fd06c0");
// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function() {
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    return Object.defineProperty({}, 1, {
        get: function() {
            return 7;
        }
    })[1] !== 7;
});

},{"735b783268fd06c0":"hL6D2"}],"hL6D2":[function(require,module,exports) {
"use strict";
module.exports = function(exec) {
    try {
        return !!exec();
    } catch (error) {
        return true;
    }
};

},{}],"d7JlP":[function(require,module,exports) {
"use strict";
var NATIVE_BIND = require("44e025d030d66023");
var call = Function.prototype.call;
module.exports = NATIVE_BIND ? call.bind(call) : function() {
    return call.apply(call, arguments);
};

},{"44e025d030d66023":"i16Dq"}],"i16Dq":[function(require,module,exports) {
"use strict";
var fails = require("2642aa7619056f20");
module.exports = !fails(function() {
    // eslint-disable-next-line es/no-function-prototype-bind -- safe
    var test = (function() {}).bind();
    // eslint-disable-next-line no-prototype-builtins -- safe
    return typeof test != "function" || test.hasOwnProperty("prototype");
});

},{"2642aa7619056f20":"hL6D2"}],"7SuiS":[function(require,module,exports) {
"use strict";
var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({
    1: 2
}, 1);
// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
    var descriptor = getOwnPropertyDescriptor(this, V);
    return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;

},{}],"1lpav":[function(require,module,exports) {
"use strict";
module.exports = function(bitmap, value) {
    return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value: value
    };
};

},{}],"jLWwQ":[function(require,module,exports) {
"use strict";
// toObject with fallback for non-array-like ES3 strings
var IndexedObject = require("9d8f8f50ac9468eb");
var requireObjectCoercible = require("f7224aed72953ac4");
module.exports = function(it) {
    return IndexedObject(requireObjectCoercible(it));
};

},{"9d8f8f50ac9468eb":"kPk5h","f7224aed72953ac4":"fOR0B"}],"kPk5h":[function(require,module,exports) {
"use strict";
var uncurryThis = require("7ba7e65983d7b662");
var fails = require("df551e12a7c872dd");
var classof = require("1d34ea813cebff9c");
var $Object = Object;
var split = uncurryThis("".split);
// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function() {
    // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
    // eslint-disable-next-line no-prototype-builtins -- safe
    return !$Object("z").propertyIsEnumerable(0);
}) ? function(it) {
    return classof(it) === "String" ? split(it, "") : $Object(it);
} : $Object;

},{"7ba7e65983d7b662":"7GlkT","df551e12a7c872dd":"hL6D2","1d34ea813cebff9c":"bdfmm"}],"7GlkT":[function(require,module,exports) {
"use strict";
var NATIVE_BIND = require("829dd7a4e960cf9e");
var FunctionPrototype = Function.prototype;
var call = FunctionPrototype.call;
var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);
module.exports = NATIVE_BIND ? uncurryThisWithBind : function(fn) {
    return function() {
        return call.apply(fn, arguments);
    };
};

},{"829dd7a4e960cf9e":"i16Dq"}],"bdfmm":[function(require,module,exports) {
"use strict";
var uncurryThis = require("1c71c3f6daac476c");
var toString = uncurryThis({}.toString);
var stringSlice = uncurryThis("".slice);
module.exports = function(it) {
    return stringSlice(toString(it), 8, -1);
};

},{"1c71c3f6daac476c":"7GlkT"}],"fOR0B":[function(require,module,exports) {
"use strict";
var isNullOrUndefined = require("74607922ed30019f");
var $TypeError = TypeError;
// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function(it) {
    if (isNullOrUndefined(it)) throw new $TypeError("Can't call method on " + it);
    return it;
};

},{"74607922ed30019f":"gM5ar"}],"gM5ar":[function(require,module,exports) {
"use strict";
// we can't use just `it == null` since of `document.all` special case
// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec
module.exports = function(it) {
    return it === null || it === undefined;
};

},{}],"5XWKd":[function(require,module,exports) {
"use strict";
var toPrimitive = require("53a3a67ac381c4e8");
var isSymbol = require("b992ca9cdcf7937b");
// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
module.exports = function(argument) {
    var key = toPrimitive(argument, "string");
    return isSymbol(key) ? key : key + "";
};

},{"53a3a67ac381c4e8":"a2mK1","b992ca9cdcf7937b":"4aV4F"}],"a2mK1":[function(require,module,exports) {
"use strict";
var call = require("70235907dc93b4b0");
var isObject = require("46fb53dace408c8e");
var isSymbol = require("677bdc4d74d2f983");
var getMethod = require("80395bcde336a28b");
var ordinaryToPrimitive = require("49552a7324952190");
var wellKnownSymbol = require("aea01c71276624bf");
var $TypeError = TypeError;
var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
module.exports = function(input, pref) {
    if (!isObject(input) || isSymbol(input)) return input;
    var exoticToPrim = getMethod(input, TO_PRIMITIVE);
    var result;
    if (exoticToPrim) {
        if (pref === undefined) pref = "default";
        result = call(exoticToPrim, input, pref);
        if (!isObject(result) || isSymbol(result)) return result;
        throw new $TypeError("Can't convert object to primitive value");
    }
    if (pref === undefined) pref = "number";
    return ordinaryToPrimitive(input, pref);
};

},{"70235907dc93b4b0":"d7JlP","46fb53dace408c8e":"Z0pBo","677bdc4d74d2f983":"4aV4F","80395bcde336a28b":"9Zfiw","49552a7324952190":"7MME2","aea01c71276624bf":"gTwyA"}],"Z0pBo":[function(require,module,exports) {
"use strict";
var isCallable = require("f87cee1cb79cbcca");
module.exports = function(it) {
    return typeof it == "object" ? it !== null : isCallable(it);
};

},{"f87cee1cb79cbcca":"l3Kyn"}],"l3Kyn":[function(require,module,exports) {
"use strict";
// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot
var documentAll = typeof document == "object" && document.all;
// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
// eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing
module.exports = typeof documentAll == "undefined" && documentAll !== undefined ? function(argument) {
    return typeof argument == "function" || argument === documentAll;
} : function(argument) {
    return typeof argument == "function";
};

},{}],"4aV4F":[function(require,module,exports) {
"use strict";
var getBuiltIn = require("6b6c481cdfb7df35");
var isCallable = require("2af44fcbdbf14c83");
var isPrototypeOf = require("76e903e830c40e7c");
var USE_SYMBOL_AS_UID = require("7e2fe930b3598e22");
var $Object = Object;
module.exports = USE_SYMBOL_AS_UID ? function(it) {
    return typeof it == "symbol";
} : function(it) {
    var $Symbol = getBuiltIn("Symbol");
    return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
};

},{"6b6c481cdfb7df35":"6ZUSY","2af44fcbdbf14c83":"l3Kyn","76e903e830c40e7c":"3jtKQ","7e2fe930b3598e22":"2Ye8Q"}],"6ZUSY":[function(require,module,exports) {
"use strict";
var globalThis = require("e057fc33d60763c1");
var isCallable = require("f1d62079325906cb");
var aFunction = function(argument) {
    return isCallable(argument) ? argument : undefined;
};
module.exports = function(namespace, method) {
    return arguments.length < 2 ? aFunction(globalThis[namespace]) : globalThis[namespace] && globalThis[namespace][method];
};

},{"e057fc33d60763c1":"9fY7y","f1d62079325906cb":"l3Kyn"}],"3jtKQ":[function(require,module,exports) {
"use strict";
var uncurryThis = require("83f14842ef67e16a");
module.exports = uncurryThis({}.isPrototypeOf);

},{"83f14842ef67e16a":"7GlkT"}],"2Ye8Q":[function(require,module,exports) {
"use strict";
/* eslint-disable es/no-symbol -- required for testing */ var NATIVE_SYMBOL = require("da4a972af0214ea0");
module.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";

},{"da4a972af0214ea0":"8KyTD"}],"8KyTD":[function(require,module,exports) {
"use strict";
/* eslint-disable es/no-symbol -- required for testing */ var V8_VERSION = require("53b951dfb9de4d22");
var fails = require("b37df495bcdc1d99");
var globalThis = require("e5929e9affd2affc");
var $String = globalThis.String;
// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function() {
    var symbol = Symbol("symbol detection");
    // Chrome 38 Symbol has incorrect toString conversion
    // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
    // nb: Do not call `String` directly to avoid this being optimized out to `symbol+''` which will,
    // of course, fail.
    return !$String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});

},{"53b951dfb9de4d22":"8UQPO","b37df495bcdc1d99":"hL6D2","e5929e9affd2affc":"9fY7y"}],"8UQPO":[function(require,module,exports) {
"use strict";
var globalThis = require("d049c1c2aa0eee5b");
var userAgent = require("4eb5796bbafe334d");
var process = globalThis.process;
var Deno = globalThis.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;
if (v8) {
    match = v8.split(".");
    // in old Chrome, versions of V8 isn't V8 = Chrome / 10
    // but their correct versions are not interesting for us
    version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}
// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent) {
    match = userAgent.match(/Edge\/(\d+)/);
    if (!match || match[1] >= 74) {
        match = userAgent.match(/Chrome\/(\d+)/);
        if (match) version = +match[1];
    }
}
module.exports = version;

},{"d049c1c2aa0eee5b":"9fY7y","4eb5796bbafe334d":"lApyY"}],"lApyY":[function(require,module,exports) {
"use strict";
var globalThis = require("888bcb4c75dc4ad");
var navigator = globalThis.navigator;
var userAgent = navigator && navigator.userAgent;
module.exports = userAgent ? String(userAgent) : "";

},{"888bcb4c75dc4ad":"9fY7y"}],"9Zfiw":[function(require,module,exports) {
"use strict";
var aCallable = require("bbfed17b24e215f4");
var isNullOrUndefined = require("492a86e2970f6a26");
// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
module.exports = function(V, P) {
    var func = V[P];
    return isNullOrUndefined(func) ? undefined : aCallable(func);
};

},{"bbfed17b24e215f4":"gOMir","492a86e2970f6a26":"gM5ar"}],"gOMir":[function(require,module,exports) {
"use strict";
var isCallable = require("4094667126ecac05");
var tryToString = require("fce2a7573db493fa");
var $TypeError = TypeError;
// `Assert: IsCallable(argument) is true`
module.exports = function(argument) {
    if (isCallable(argument)) return argument;
    throw new $TypeError(tryToString(argument) + " is not a function");
};

},{"4094667126ecac05":"l3Kyn","fce2a7573db493fa":"4O7d7"}],"4O7d7":[function(require,module,exports) {
"use strict";
var $String = String;
module.exports = function(argument) {
    try {
        return $String(argument);
    } catch (error) {
        return "Object";
    }
};

},{}],"7MME2":[function(require,module,exports) {
"use strict";
var call = require("abe9ca006f56626e");
var isCallable = require("c96b3a89fec6248a");
var isObject = require("551615fda0214f1b");
var $TypeError = TypeError;
// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
module.exports = function(input, pref) {
    var fn, val;
    if (pref === "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
    if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
    if (pref !== "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
    throw new $TypeError("Can't convert object to primitive value");
};

},{"abe9ca006f56626e":"d7JlP","c96b3a89fec6248a":"l3Kyn","551615fda0214f1b":"Z0pBo"}],"gTwyA":[function(require,module,exports) {
"use strict";
var globalThis = require("ad5ef4474219c101");
var shared = require("6a2cda01df6b4c79");
var hasOwn = require("dccc28ffa5beeb54");
var uid = require("48d6af1225853d44");
var NATIVE_SYMBOL = require("9f762329148684");
var USE_SYMBOL_AS_UID = require("1ce268781e409df2");
var Symbol = globalThis.Symbol;
var WellKnownSymbolsStore = shared("wks");
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol["for"] || Symbol : Symbol && Symbol.withoutSetter || uid;
module.exports = function(name) {
    if (!hasOwn(WellKnownSymbolsStore, name)) WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol, name) ? Symbol[name] : createWellKnownSymbol("Symbol." + name);
    return WellKnownSymbolsStore[name];
};

},{"ad5ef4474219c101":"9fY7y","6a2cda01df6b4c79":"i1mHK","dccc28ffa5beeb54":"gC2Q5","48d6af1225853d44":"a3SEE","9f762329148684":"8KyTD","1ce268781e409df2":"2Ye8Q"}],"i1mHK":[function(require,module,exports) {
"use strict";
var store = require("84eeed9891aafe14");
module.exports = function(key, value) {
    return store[key] || (store[key] = value || {});
};

},{"84eeed9891aafe14":"l4ncH"}],"l4ncH":[function(require,module,exports) {
"use strict";
var IS_PURE = require("7b43004672b1879f");
var globalThis = require("bc8329e77dc2c1cc");
var defineGlobalProperty = require("dfb72a1d809f7b02");
var SHARED = "__core-js_shared__";
var store = module.exports = globalThis[SHARED] || defineGlobalProperty(SHARED, {});
(store.versions || (store.versions = [])).push({
    version: "3.38.1",
    mode: IS_PURE ? "pure" : "global",
    copyright: "\xa9 2014-2024 Denis Pushkarev (zloirock.ru)",
    license: "https://github.com/zloirock/core-js/blob/v3.38.1/LICENSE",
    source: "https://github.com/zloirock/core-js"
});

},{"7b43004672b1879f":"5ZsyC","bc8329e77dc2c1cc":"9fY7y","dfb72a1d809f7b02":"ggjnO"}],"5ZsyC":[function(require,module,exports) {
"use strict";
module.exports = false;

},{}],"ggjnO":[function(require,module,exports) {
"use strict";
var globalThis = require("2d1c29655635b9ea");
// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;
module.exports = function(key, value) {
    try {
        defineProperty(globalThis, key, {
            value: value,
            configurable: true,
            writable: true
        });
    } catch (error) {
        globalThis[key] = value;
    }
    return value;
};

},{"2d1c29655635b9ea":"9fY7y"}],"gC2Q5":[function(require,module,exports) {
"use strict";
var uncurryThis = require("f5dcaa60a713971f");
var toObject = require("ab17c4f45fcf0841");
var hasOwnProperty = uncurryThis({}.hasOwnProperty);
// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
// eslint-disable-next-line es/no-object-hasown -- safe
module.exports = Object.hasOwn || function hasOwn(it, key) {
    return hasOwnProperty(toObject(it), key);
};

},{"f5dcaa60a713971f":"7GlkT","ab17c4f45fcf0841":"5cb35"}],"5cb35":[function(require,module,exports) {
"use strict";
var requireObjectCoercible = require("f45a7b5dcdc4a410");
var $Object = Object;
// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function(argument) {
    return $Object(requireObjectCoercible(argument));
};

},{"f45a7b5dcdc4a410":"fOR0B"}],"a3SEE":[function(require,module,exports) {
"use strict";
var uncurryThis = require("5da0fe4507da20a3");
var id = 0;
var postfix = Math.random();
var toString = uncurryThis(1.0.toString);
module.exports = function(key) {
    return "Symbol(" + (key === undefined ? "" : key) + ")_" + toString(++id + postfix, 36);
};

},{"5da0fe4507da20a3":"7GlkT"}],"qS9uN":[function(require,module,exports) {
"use strict";
var DESCRIPTORS = require("9b4278b13c076bf");
var fails = require("8aee5d88a5f9b6b5");
var createElement = require("1db4d60148afcf21");
// Thanks to IE8 for its funny defineProperty
module.exports = !DESCRIPTORS && !fails(function() {
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    return Object.defineProperty(createElement("div"), "a", {
        get: function() {
            return 7;
        }
    }).a !== 7;
});

},{"9b4278b13c076bf":"92ZIi","8aee5d88a5f9b6b5":"hL6D2","1db4d60148afcf21":"4bOHl"}],"4bOHl":[function(require,module,exports) {
"use strict";
var globalThis = require("845bcece0e6d354");
var isObject = require("824df78b2e007250");
var document = globalThis.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);
module.exports = function(it) {
    return EXISTS ? document.createElement(it) : {};
};

},{"845bcece0e6d354":"9fY7y","824df78b2e007250":"Z0pBo"}],"8CL42":[function(require,module,exports) {
"use strict";
var DESCRIPTORS = require("a8753383ef98ee18");
var definePropertyModule = require("189ab650b8f71085");
var createPropertyDescriptor = require("1168c8162aa30435");
module.exports = DESCRIPTORS ? function(object, key, value) {
    return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function(object, key, value) {
    object[key] = value;
    return object;
};

},{"a8753383ef98ee18":"92ZIi","189ab650b8f71085":"iJR4w","1168c8162aa30435":"1lpav"}],"iJR4w":[function(require,module,exports) {
"use strict";
var DESCRIPTORS = require("ca50eb9163928400");
var IE8_DOM_DEFINE = require("d482f9e5478795e8");
var V8_PROTOTYPE_DEFINE_BUG = require("b6ad7537efb06f4b");
var anObject = require("16365a73399e7fe7");
var toPropertyKey = require("fab1d366c47796d9");
var $TypeError = TypeError;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = "enumerable";
var CONFIGURABLE = "configurable";
var WRITABLE = "writable";
// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPropertyKey(P);
    anObject(Attributes);
    if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
        var current = $getOwnPropertyDescriptor(O, P);
        if (current && current[WRITABLE]) {
            O[P] = Attributes.value;
            Attributes = {
                configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
                enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
                writable: false
            };
        }
    }
    return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPropertyKey(P);
    anObject(Attributes);
    if (IE8_DOM_DEFINE) try {
        return $defineProperty(O, P, Attributes);
    } catch (error) {}
    if ("get" in Attributes || "set" in Attributes) throw new $TypeError("Accessors not supported");
    if ("value" in Attributes) O[P] = Attributes.value;
    return O;
};

},{"ca50eb9163928400":"92ZIi","d482f9e5478795e8":"qS9uN","b6ad7537efb06f4b":"ka1Un","16365a73399e7fe7":"4isCr","fab1d366c47796d9":"5XWKd"}],"ka1Un":[function(require,module,exports) {
"use strict";
var DESCRIPTORS = require("b22a5a2de93e3ad2");
var fails = require("249a5b857c2dfccd");
// V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334
module.exports = DESCRIPTORS && fails(function() {
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    return Object.defineProperty(function() {}, "prototype", {
        value: 42,
        writable: false
    }).prototype !== 42;
});

},{"b22a5a2de93e3ad2":"92ZIi","249a5b857c2dfccd":"hL6D2"}],"4isCr":[function(require,module,exports) {
"use strict";
var isObject = require("2b6c6258a0a6082f");
var $String = String;
var $TypeError = TypeError;
// `Assert: Type(argument) is Object`
module.exports = function(argument) {
    if (isObject(argument)) return argument;
    throw new $TypeError($String(argument) + " is not an object");
};

},{"2b6c6258a0a6082f":"Z0pBo"}],"6XwEX":[function(require,module,exports) {
"use strict";
var isCallable = require("99ee13632b3fa68");
var definePropertyModule = require("9ebb3e3004fccc0a");
var makeBuiltIn = require("f10cc812a3094053");
var defineGlobalProperty = require("d354802d852d9c2b");
module.exports = function(O, key, value, options) {
    if (!options) options = {};
    var simple = options.enumerable;
    var name = options.name !== undefined ? options.name : key;
    if (isCallable(value)) makeBuiltIn(value, name, options);
    if (options.global) {
        if (simple) O[key] = value;
        else defineGlobalProperty(key, value);
    } else {
        try {
            if (!options.unsafe) delete O[key];
            else if (O[key]) simple = true;
        } catch (error) {}
        if (simple) O[key] = value;
        else definePropertyModule.f(O, key, {
            value: value,
            enumerable: false,
            configurable: !options.nonConfigurable,
            writable: !options.nonWritable
        });
    }
    return O;
};

},{"99ee13632b3fa68":"l3Kyn","9ebb3e3004fccc0a":"iJR4w","f10cc812a3094053":"cTB4k","d354802d852d9c2b":"ggjnO"}],"cTB4k":[function(require,module,exports) {
"use strict";
var uncurryThis = require("ca84677f1ebd1804");
var fails = require("13360f2842eba261");
var isCallable = require("103e488c0928755a");
var hasOwn = require("cbf9b0e0779cc368");
var DESCRIPTORS = require("3f2eb7efeae2f72b");
var CONFIGURABLE_FUNCTION_NAME = require("548b10f284264c72").CONFIGURABLE;
var inspectSource = require("358f00f3103bd55b");
var InternalStateModule = require("9b2ce14119fd2412");
var enforceInternalState = InternalStateModule.enforce;
var getInternalState = InternalStateModule.get;
var $String = String;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;
var stringSlice = uncurryThis("".slice);
var replace = uncurryThis("".replace);
var join = uncurryThis([].join);
var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function() {
    return defineProperty(function() {}, "length", {
        value: 8
    }).length !== 8;
});
var TEMPLATE = String(String).split("String");
var makeBuiltIn = module.exports = function(value, name, options) {
    if (stringSlice($String(name), 0, 7) === "Symbol(") name = "[" + replace($String(name), /^Symbol\(([^)]*)\).*$/, "$1") + "]";
    if (options && options.getter) name = "get " + name;
    if (options && options.setter) name = "set " + name;
    if (!hasOwn(value, "name") || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {
        if (DESCRIPTORS) defineProperty(value, "name", {
            value: name,
            configurable: true
        });
        else value.name = name;
    }
    if (CONFIGURABLE_LENGTH && options && hasOwn(options, "arity") && value.length !== options.arity) defineProperty(value, "length", {
        value: options.arity
    });
    try {
        if (options && hasOwn(options, "constructor") && options.constructor) {
            if (DESCRIPTORS) defineProperty(value, "prototype", {
                writable: false
            });
        } else if (value.prototype) value.prototype = undefined;
    } catch (error) {}
    var state = enforceInternalState(value);
    if (!hasOwn(state, "source")) state.source = join(TEMPLATE, typeof name == "string" ? name : "");
    return value;
};
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
// eslint-disable-next-line no-extend-native -- required
Function.prototype.toString = makeBuiltIn(function toString() {
    return isCallable(this) && getInternalState(this).source || inspectSource(this);
}, "toString");

},{"ca84677f1ebd1804":"7GlkT","13360f2842eba261":"hL6D2","103e488c0928755a":"l3Kyn","cbf9b0e0779cc368":"gC2Q5","3f2eb7efeae2f72b":"92ZIi","548b10f284264c72":"l6Kgd","358f00f3103bd55b":"9jh7O","9b2ce14119fd2412":"7AMlF"}],"l6Kgd":[function(require,module,exports) {
"use strict";
var DESCRIPTORS = require("8ad2bacb0e20b95c");
var hasOwn = require("4eabfd8f83afc9d5");
var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
var EXISTS = hasOwn(FunctionPrototype, "name");
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() {}).name === "something";
var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, "name").configurable);
module.exports = {
    EXISTS: EXISTS,
    PROPER: PROPER,
    CONFIGURABLE: CONFIGURABLE
};

},{"8ad2bacb0e20b95c":"92ZIi","4eabfd8f83afc9d5":"gC2Q5"}],"9jh7O":[function(require,module,exports) {
"use strict";
var uncurryThis = require("26e26db98367212e");
var isCallable = require("40ed9a4f6ae66648");
var store = require("485d48d6f4c6739e");
var functionToString = uncurryThis(Function.toString);
// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(store.inspectSource)) store.inspectSource = function(it) {
    return functionToString(it);
};
module.exports = store.inspectSource;

},{"26e26db98367212e":"7GlkT","40ed9a4f6ae66648":"l3Kyn","485d48d6f4c6739e":"l4ncH"}],"7AMlF":[function(require,module,exports) {
"use strict";
var NATIVE_WEAK_MAP = require("d3f0c9f3327b2fd6");
var globalThis = require("28c3574d0c39fe7e");
var isObject = require("f82e6cc0ac249fa5");
var createNonEnumerableProperty = require("c0ae163eea4ef97");
var hasOwn = require("6dea7358344877bb");
var shared = require("3e035a1241da2f0");
var sharedKey = require("88d6ccc27e779e5a");
var hiddenKeys = require("d40b9b3abdbb956e");
var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
var TypeError = globalThis.TypeError;
var WeakMap = globalThis.WeakMap;
var set, get, has;
var enforce = function(it) {
    return has(it) ? get(it) : set(it, {});
};
var getterFor = function(TYPE) {
    return function(it) {
        var state;
        if (!isObject(it) || (state = get(it)).type !== TYPE) throw new TypeError("Incompatible receiver, " + TYPE + " required");
        return state;
    };
};
if (NATIVE_WEAK_MAP || shared.state) {
    var store = shared.state || (shared.state = new WeakMap());
    /* eslint-disable no-self-assign -- prototype methods protection */ store.get = store.get;
    store.has = store.has;
    store.set = store.set;
    /* eslint-enable no-self-assign -- prototype methods protection */ set = function(it, metadata) {
        if (store.has(it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        store.set(it, metadata);
        return metadata;
    };
    get = function(it) {
        return store.get(it) || {};
    };
    has = function(it) {
        return store.has(it);
    };
} else {
    var STATE = sharedKey("state");
    hiddenKeys[STATE] = true;
    set = function(it, metadata) {
        if (hasOwn(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        createNonEnumerableProperty(it, STATE, metadata);
        return metadata;
    };
    get = function(it) {
        return hasOwn(it, STATE) ? it[STATE] : {};
    };
    has = function(it) {
        return hasOwn(it, STATE);
    };
}
module.exports = {
    set: set,
    get: get,
    has: has,
    enforce: enforce,
    getterFor: getterFor
};

},{"d3f0c9f3327b2fd6":"2PZTl","28c3574d0c39fe7e":"9fY7y","f82e6cc0ac249fa5":"Z0pBo","c0ae163eea4ef97":"8CL42","6dea7358344877bb":"gC2Q5","3e035a1241da2f0":"l4ncH","88d6ccc27e779e5a":"eAjGz","d40b9b3abdbb956e":"661m4"}],"2PZTl":[function(require,module,exports) {
"use strict";
var globalThis = require("8b1a8c1dbfd18eb5");
var isCallable = require("aa77fff8d5ef0565");
var WeakMap = globalThis.WeakMap;
module.exports = isCallable(WeakMap) && /native code/.test(String(WeakMap));

},{"8b1a8c1dbfd18eb5":"9fY7y","aa77fff8d5ef0565":"l3Kyn"}],"eAjGz":[function(require,module,exports) {
"use strict";
var shared = require("dbc8182adeb8c92f");
var uid = require("90b4ffb58508a6e5");
var keys = shared("keys");
module.exports = function(key) {
    return keys[key] || (keys[key] = uid(key));
};

},{"dbc8182adeb8c92f":"i1mHK","90b4ffb58508a6e5":"a3SEE"}],"661m4":[function(require,module,exports) {
"use strict";
module.exports = {};

},{}],"9Z12i":[function(require,module,exports) {
"use strict";
var hasOwn = require("d91d786cc71453ce");
var ownKeys = require("88cb809f98beddc6");
var getOwnPropertyDescriptorModule = require("10ea642aad5f7c21");
var definePropertyModule = require("39ff598ce822187e");
module.exports = function(target, source, exceptions) {
    var keys = ownKeys(source);
    var defineProperty = definePropertyModule.f;
    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
};

},{"d91d786cc71453ce":"gC2Q5","88cb809f98beddc6":"1CX1A","10ea642aad5f7c21":"lk5NI","39ff598ce822187e":"iJR4w"}],"1CX1A":[function(require,module,exports) {
"use strict";
var getBuiltIn = require("3cc1e4329d869e34");
var uncurryThis = require("2b8e77cbdbe3db7a");
var getOwnPropertyNamesModule = require("d703bcb62fcda216");
var getOwnPropertySymbolsModule = require("157674bad2772c6d");
var anObject = require("a09e060b9cae3c6c");
var concat = uncurryThis([].concat);
// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys(it) {
    var keys = getOwnPropertyNamesModule.f(anObject(it));
    var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
    return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
};

},{"3cc1e4329d869e34":"6ZUSY","2b8e77cbdbe3db7a":"7GlkT","d703bcb62fcda216":"fjY04","157674bad2772c6d":"4DWO3","a09e060b9cae3c6c":"4isCr"}],"fjY04":[function(require,module,exports) {
"use strict";
var internalObjectKeys = require("6d8591e17a49376c");
var enumBugKeys = require("2c933f93dd98f385");
var hiddenKeys = enumBugKeys.concat("length", "prototype");
// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return internalObjectKeys(O, hiddenKeys);
};

},{"6d8591e17a49376c":"hl5T1","2c933f93dd98f385":"9RnJm"}],"hl5T1":[function(require,module,exports) {
"use strict";
var uncurryThis = require("363ee0e6bb4f46a7");
var hasOwn = require("3183fe0b0bf6f6ac");
var toIndexedObject = require("28192ac12e934672");
var indexOf = require("a5f9c5d8e993ccd6").indexOf;
var hiddenKeys = require("57775908f1581bc6");
var push = uncurryThis([].push);
module.exports = function(object, names) {
    var O = toIndexedObject(object);
    var i = 0;
    var result = [];
    var key;
    for(key in O)!hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
    // Don't enum bug & hidden keys
    while(names.length > i)if (hasOwn(O, key = names[i++])) ~indexOf(result, key) || push(result, key);
    return result;
};

},{"363ee0e6bb4f46a7":"7GlkT","3183fe0b0bf6f6ac":"gC2Q5","28192ac12e934672":"jLWwQ","a5f9c5d8e993ccd6":"n5IsC","57775908f1581bc6":"661m4"}],"n5IsC":[function(require,module,exports) {
"use strict";
var toIndexedObject = require("d5dcbcd68ac5acd0");
var toAbsoluteIndex = require("212b13aecfa48226");
var lengthOfArrayLike = require("e5a8b3e1da4c5637");
// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function(IS_INCLUDES) {
    return function($this, el, fromIndex) {
        var O = toIndexedObject($this);
        var length = lengthOfArrayLike(O);
        if (length === 0) return !IS_INCLUDES && -1;
        var index = toAbsoluteIndex(fromIndex, length);
        var value;
        // Array#includes uses SameValueZero equality algorithm
        // eslint-disable-next-line no-self-compare -- NaN check
        if (IS_INCLUDES && el !== el) while(length > index){
            value = O[index++];
            // eslint-disable-next-line no-self-compare -- NaN check
            if (value !== value) return true;
        // Array#indexOf ignores holes, Array#includes - not
        }
        else for(; length > index; index++){
            if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
        }
        return !IS_INCLUDES && -1;
    };
};
module.exports = {
    // `Array.prototype.includes` method
    // https://tc39.es/ecma262/#sec-array.prototype.includes
    includes: createMethod(true),
    // `Array.prototype.indexOf` method
    // https://tc39.es/ecma262/#sec-array.prototype.indexof
    indexOf: createMethod(false)
};

},{"d5dcbcd68ac5acd0":"jLWwQ","212b13aecfa48226":"5yh27","e5a8b3e1da4c5637":"lY4mS"}],"5yh27":[function(require,module,exports) {
"use strict";
var toIntegerOrInfinity = require("72fe0a53ad43912c");
var max = Math.max;
var min = Math.min;
// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function(index, length) {
    var integer = toIntegerOrInfinity(index);
    return integer < 0 ? max(integer + length, 0) : min(integer, length);
};

},{"72fe0a53ad43912c":"kLXGe"}],"kLXGe":[function(require,module,exports) {
"use strict";
var trunc = require("3403cba02b5f61d8");
// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
module.exports = function(argument) {
    var number = +argument;
    // eslint-disable-next-line no-self-compare -- NaN check
    return number !== number || number === 0 ? 0 : trunc(number);
};

},{"3403cba02b5f61d8":"7O8gb"}],"7O8gb":[function(require,module,exports) {
"use strict";
var ceil = Math.ceil;
var floor = Math.floor;
// `Math.trunc` method
// https://tc39.es/ecma262/#sec-math.trunc
// eslint-disable-next-line es/no-math-trunc -- safe
module.exports = Math.trunc || function trunc(x) {
    var n = +x;
    return (n > 0 ? floor : ceil)(n);
};

},{}],"lY4mS":[function(require,module,exports) {
"use strict";
var toLength = require("23d9716c54a2ab90");
// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
module.exports = function(obj) {
    return toLength(obj.length);
};

},{"23d9716c54a2ab90":"fU04N"}],"fU04N":[function(require,module,exports) {
"use strict";
var toIntegerOrInfinity = require("c48d3a8b8ac52b0b");
var min = Math.min;
// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function(argument) {
    var len = toIntegerOrInfinity(argument);
    return len > 0 ? min(len, 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};

},{"c48d3a8b8ac52b0b":"kLXGe"}],"9RnJm":[function(require,module,exports) {
"use strict";
// IE8- don't enum bug keys
module.exports = [
    "constructor",
    "hasOwnProperty",
    "isPrototypeOf",
    "propertyIsEnumerable",
    "toLocaleString",
    "toString",
    "valueOf"
];

},{}],"4DWO3":[function(require,module,exports) {
"use strict";
// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;

},{}],"6uTCZ":[function(require,module,exports) {
"use strict";
var fails = require("10299561ea0c7870");
var isCallable = require("8b1ecdaf59f07210");
var replacement = /#|\.prototype\./;
var isForced = function(feature, detection) {
    var value = data[normalize(feature)];
    return value === POLYFILL ? true : value === NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
};
var normalize = isForced.normalize = function(string) {
    return String(string).replace(replacement, ".").toLowerCase();
};
var data = isForced.data = {};
var NATIVE = isForced.NATIVE = "N";
var POLYFILL = isForced.POLYFILL = "P";
module.exports = isForced;

},{"10299561ea0c7870":"hL6D2","8b1ecdaf59f07210":"l3Kyn"}],"4OXGm":[function(require,module,exports) {
"use strict";
var bind = require("2f267ed50e670495");
var call = require("c0af58bb1ef1cc62");
var anObject = require("7fa6542c03ca9239");
var tryToString = require("fa596d1a4c07b72a");
var isArrayIteratorMethod = require("fd753cc641a6f10a");
var lengthOfArrayLike = require("2a15dee148d3db96");
var isPrototypeOf = require("417f9a13deeb58a6");
var getIterator = require("43af53be1b24dae5");
var getIteratorMethod = require("bf7ad32b21aed0b4");
var iteratorClose = require("5241389e1d6eeb73");
var $TypeError = TypeError;
var Result = function(stopped, result) {
    this.stopped = stopped;
    this.result = result;
};
var ResultPrototype = Result.prototype;
module.exports = function(iterable, unboundFunction, options) {
    var that = options && options.that;
    var AS_ENTRIES = !!(options && options.AS_ENTRIES);
    var IS_RECORD = !!(options && options.IS_RECORD);
    var IS_ITERATOR = !!(options && options.IS_ITERATOR);
    var INTERRUPTED = !!(options && options.INTERRUPTED);
    var fn = bind(unboundFunction, that);
    var iterator, iterFn, index, length, result, next, step;
    var stop = function(condition) {
        if (iterator) iteratorClose(iterator, "normal", condition);
        return new Result(true, condition);
    };
    var callFn = function(value) {
        if (AS_ENTRIES) {
            anObject(value);
            return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
        }
        return INTERRUPTED ? fn(value, stop) : fn(value);
    };
    if (IS_RECORD) iterator = iterable.iterator;
    else if (IS_ITERATOR) iterator = iterable;
    else {
        iterFn = getIteratorMethod(iterable);
        if (!iterFn) throw new $TypeError(tryToString(iterable) + " is not iterable");
        // optimisation for array iterators
        if (isArrayIteratorMethod(iterFn)) {
            for(index = 0, length = lengthOfArrayLike(iterable); length > index; index++){
                result = callFn(iterable[index]);
                if (result && isPrototypeOf(ResultPrototype, result)) return result;
            }
            return new Result(false);
        }
        iterator = getIterator(iterable, iterFn);
    }
    next = IS_RECORD ? iterable.next : iterator.next;
    while(!(step = call(next, iterator)).done){
        try {
            result = callFn(step.value);
        } catch (error) {
            iteratorClose(iterator, "throw", error);
        }
        if (typeof result == "object" && result && isPrototypeOf(ResultPrototype, result)) return result;
    }
    return new Result(false);
};

},{"2f267ed50e670495":"7vpmS","c0af58bb1ef1cc62":"d7JlP","7fa6542c03ca9239":"4isCr","fa596d1a4c07b72a":"4O7d7","fd753cc641a6f10a":"l33Z9","2a15dee148d3db96":"lY4mS","417f9a13deeb58a6":"3jtKQ","43af53be1b24dae5":"hjwee","bf7ad32b21aed0b4":"d8BiC","5241389e1d6eeb73":"hs7nW"}],"7vpmS":[function(require,module,exports) {
"use strict";
var uncurryThis = require("92f6f475baa85665");
var aCallable = require("547ee4f9dab0cc76");
var NATIVE_BIND = require("5acd31cba656d393");
var bind = uncurryThis(uncurryThis.bind);
// optional / simple context binding
module.exports = function(fn, that) {
    aCallable(fn);
    return that === undefined ? fn : NATIVE_BIND ? bind(fn, that) : function() {
        return fn.apply(that, arguments);
    };
};

},{"92f6f475baa85665":"5Hioa","547ee4f9dab0cc76":"gOMir","5acd31cba656d393":"i16Dq"}],"5Hioa":[function(require,module,exports) {
"use strict";
var classofRaw = require("8e77093015e1e67f");
var uncurryThis = require("9daa4dbbca634c9e");
module.exports = function(fn) {
    // Nashorn bug:
    //   https://github.com/zloirock/core-js/issues/1128
    //   https://github.com/zloirock/core-js/issues/1130
    if (classofRaw(fn) === "Function") return uncurryThis(fn);
};

},{"8e77093015e1e67f":"bdfmm","9daa4dbbca634c9e":"7GlkT"}],"l33Z9":[function(require,module,exports) {
"use strict";
var wellKnownSymbol = require("85b004b6ab4bc5da");
var Iterators = require("6de391ad2976ca02");
var ITERATOR = wellKnownSymbol("iterator");
var ArrayPrototype = Array.prototype;
// check on default Array iterator
module.exports = function(it) {
    return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};

},{"85b004b6ab4bc5da":"gTwyA","6de391ad2976ca02":"30XHR"}],"30XHR":[function(require,module,exports) {
"use strict";
module.exports = {};

},{}],"hjwee":[function(require,module,exports) {
"use strict";
var call = require("132ebf774107ae29");
var aCallable = require("e248489b4825ceb7");
var anObject = require("18a343d2ef625577");
var tryToString = require("7e576a1564cef99e");
var getIteratorMethod = require("4a7b0311be0471b2");
var $TypeError = TypeError;
module.exports = function(argument, usingIterator) {
    var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
    if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));
    throw new $TypeError(tryToString(argument) + " is not iterable");
};

},{"132ebf774107ae29":"d7JlP","e248489b4825ceb7":"gOMir","18a343d2ef625577":"4isCr","7e576a1564cef99e":"4O7d7","4a7b0311be0471b2":"d8BiC"}],"d8BiC":[function(require,module,exports) {
"use strict";
var classof = require("32d61dafd81dde78");
var getMethod = require("84e24a6ac7559d3a");
var isNullOrUndefined = require("f0707282c0d93eeb");
var Iterators = require("1c181d5c49efd5d1");
var wellKnownSymbol = require("d10d0e0ae49498c5");
var ITERATOR = wellKnownSymbol("iterator");
module.exports = function(it) {
    if (!isNullOrUndefined(it)) return getMethod(it, ITERATOR) || getMethod(it, "@@iterator") || Iterators[classof(it)];
};

},{"32d61dafd81dde78":"dKT7A","84e24a6ac7559d3a":"9Zfiw","f0707282c0d93eeb":"gM5ar","1c181d5c49efd5d1":"30XHR","d10d0e0ae49498c5":"gTwyA"}],"dKT7A":[function(require,module,exports) {
"use strict";
var TO_STRING_TAG_SUPPORT = require("397e535b3976d304");
var isCallable = require("eebd8012c2d2c3ae");
var classofRaw = require("8da113eeaf06c4ba");
var wellKnownSymbol = require("df252844008f634");
var TO_STRING_TAG = wellKnownSymbol("toStringTag");
var $Object = Object;
// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function() {
    return arguments;
}()) === "Arguments";
// fallback for IE11 Script Access Denied error
var tryGet = function(it, key) {
    try {
        return it[key];
    } catch (error) {}
};
// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
    var O, tag, result;
    return it === undefined ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) === "Object" && isCallable(O.callee) ? "Arguments" : result;
};

},{"397e535b3976d304":"3Do6Z","eebd8012c2d2c3ae":"l3Kyn","8da113eeaf06c4ba":"bdfmm","df252844008f634":"gTwyA"}],"3Do6Z":[function(require,module,exports) {
"use strict";
var wellKnownSymbol = require("6306cd4835715127");
var TO_STRING_TAG = wellKnownSymbol("toStringTag");
var test = {};
test[TO_STRING_TAG] = "z";
module.exports = String(test) === "[object z]";

},{"6306cd4835715127":"gTwyA"}],"hs7nW":[function(require,module,exports) {
"use strict";
var call = require("a4a3a7d4a45c4219");
var anObject = require("feb876e7da2df7bd");
var getMethod = require("2e660cdfabd9c61f");
module.exports = function(iterator, kind, value) {
    var innerResult, innerError;
    anObject(iterator);
    try {
        innerResult = getMethod(iterator, "return");
        if (!innerResult) {
            if (kind === "throw") throw value;
            return value;
        }
        innerResult = call(innerResult, iterator);
    } catch (error) {
        innerError = true;
        innerResult = error;
    }
    if (kind === "throw") throw value;
    if (innerError) throw innerResult;
    anObject(innerResult);
    return value;
};

},{"a4a3a7d4a45c4219":"d7JlP","feb876e7da2df7bd":"4isCr","2e660cdfabd9c61f":"9Zfiw"}],"f9Wim":[function(require,module,exports) {
"use strict";
var uncurryThis = require("89734044d2e98b8d");
// eslint-disable-next-line es/no-map -- safe
var MapPrototype = Map.prototype;
module.exports = {
    // eslint-disable-next-line es/no-map -- safe
    Map: Map,
    set: uncurryThis(MapPrototype.set),
    get: uncurryThis(MapPrototype.get),
    has: uncurryThis(MapPrototype.has),
    remove: uncurryThis(MapPrototype["delete"]),
    proto: MapPrototype
};

},{"89734044d2e98b8d":"7GlkT"}],"b9ez5":[function(require,module,exports) {
"use strict";
var globalThis = require("3efb7a023fcb5137");
var defineWellKnownSymbol = require("efe796c38aca437b");
var defineProperty = require("d6dbf5d754dc3607").f;
var getOwnPropertyDescriptor = require("9075339d618418b3").f;
var Symbol = globalThis.Symbol;
// `Symbol.dispose` well-known symbol
// https://github.com/tc39/proposal-explicit-resource-management
defineWellKnownSymbol("dispose");
if (Symbol) {
    var descriptor = getOwnPropertyDescriptor(Symbol, "dispose");
    // workaround of NodeJS 20.4 bug
    // https://github.com/nodejs/node/issues/48699
    // and incorrect descriptor from some transpilers and userland helpers
    if (descriptor.enumerable && descriptor.configurable && descriptor.writable) defineProperty(Symbol, "dispose", {
        value: descriptor.value,
        enumerable: false,
        configurable: false,
        writable: false
    });
}

},{"3efb7a023fcb5137":"9fY7y","efe796c38aca437b":"en5fF","d6dbf5d754dc3607":"iJR4w","9075339d618418b3":"lk5NI"}],"en5fF":[function(require,module,exports) {
"use strict";
var path = require("8d5159b7d317832f");
var hasOwn = require("42a3ea18819bfbb");
var wrappedWellKnownSymbolModule = require("7ec639749e279eeb");
var defineProperty = require("cbbe4becefd5c21c").f;
module.exports = function(NAME) {
    var Symbol = path.Symbol || (path.Symbol = {});
    if (!hasOwn(Symbol, NAME)) defineProperty(Symbol, NAME, {
        value: wrappedWellKnownSymbolModule.f(NAME)
    });
};

},{"8d5159b7d317832f":"gKjqB","42a3ea18819bfbb":"gC2Q5","7ec639749e279eeb":"9TrPc","cbbe4becefd5c21c":"iJR4w"}],"gKjqB":[function(require,module,exports) {
"use strict";
var globalThis = require("34c09090b9638032");
module.exports = globalThis;

},{"34c09090b9638032":"9fY7y"}],"9TrPc":[function(require,module,exports) {
"use strict";
var wellKnownSymbol = require("2e34ececd06658d9");
exports.f = wellKnownSymbol;

},{"2e34ececd06658d9":"gTwyA"}],"49tUX":[function(require,module,exports) {
"use strict";
// TODO: Remove this module from `core-js@4` since it's split to modules listed below
require("52e9b3eefbbce1ed");
require("292fa64716f5b39e");

},{"52e9b3eefbbce1ed":"fOGFr","292fa64716f5b39e":"l7FDS"}],"fOGFr":[function(require,module,exports) {
"use strict";
var $ = require("79389288a80b279c");
var globalThis = require("e4d64249a0133d14");
var clearImmediate = require("84ba5ca62b8b14c9").clear;
// `clearImmediate` method
// http://w3c.github.io/setImmediate/#si-clearImmediate
$({
    global: true,
    bind: true,
    enumerable: true,
    forced: globalThis.clearImmediate !== clearImmediate
}, {
    clearImmediate: clearImmediate
});

},{"79389288a80b279c":"dIGt4","e4d64249a0133d14":"9fY7y","84ba5ca62b8b14c9":"7jDg7"}],"7jDg7":[function(require,module,exports) {
"use strict";
var globalThis = require("629a4d99f4fe5b2e");
var apply = require("e574be68c288c7c8");
var bind = require("df212787338802d3");
var isCallable = require("afdf018c2d01bbc6");
var hasOwn = require("35a3e849940fd612");
var fails = require("b8bf5434d2248ca7");
var html = require("731f9370cc21fc3b");
var arraySlice = require("ec358060964e4bde");
var createElement = require("907adb6d219da7a3");
var validateArgumentsLength = require("f398561ebd49a798");
var IS_IOS = require("8a8e342aaad83bb");
var IS_NODE = require("6eef8b4e43dd6731");
var set = globalThis.setImmediate;
var clear = globalThis.clearImmediate;
var process = globalThis.process;
var Dispatch = globalThis.Dispatch;
var Function = globalThis.Function;
var MessageChannel = globalThis.MessageChannel;
var String = globalThis.String;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = "onreadystatechange";
var $location, defer, channel, port;
fails(function() {
    // Deno throws a ReferenceError on `location` access without `--location` flag
    $location = globalThis.location;
});
var run = function(id) {
    if (hasOwn(queue, id)) {
        var fn = queue[id];
        delete queue[id];
        fn();
    }
};
var runner = function(id) {
    return function() {
        run(id);
    };
};
var eventListener = function(event) {
    run(event.data);
};
var globalPostMessageDefer = function(id) {
    // old engines have not location.origin
    globalThis.postMessage(String(id), $location.protocol + "//" + $location.host);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!set || !clear) {
    set = function setImmediate(handler) {
        validateArgumentsLength(arguments.length, 1);
        var fn = isCallable(handler) ? handler : Function(handler);
        var args = arraySlice(arguments, 1);
        queue[++counter] = function() {
            apply(fn, undefined, args);
        };
        defer(counter);
        return counter;
    };
    clear = function clearImmediate(id) {
        delete queue[id];
    };
    // Node.js 0.8-
    if (IS_NODE) defer = function(id) {
        process.nextTick(runner(id));
    };
    else if (Dispatch && Dispatch.now) defer = function(id) {
        Dispatch.now(runner(id));
    };
    else if (MessageChannel && !IS_IOS) {
        channel = new MessageChannel();
        port = channel.port2;
        channel.port1.onmessage = eventListener;
        defer = bind(port.postMessage, port);
    // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
    } else if (globalThis.addEventListener && isCallable(globalThis.postMessage) && !globalThis.importScripts && $location && $location.protocol !== "file:" && !fails(globalPostMessageDefer)) {
        defer = globalPostMessageDefer;
        globalThis.addEventListener("message", eventListener, false);
    // IE8-
    } else if (ONREADYSTATECHANGE in createElement("script")) defer = function(id) {
        html.appendChild(createElement("script"))[ONREADYSTATECHANGE] = function() {
            html.removeChild(this);
            run(id);
        };
    };
    else defer = function(id) {
        setTimeout(runner(id), 0);
    };
}
module.exports = {
    set: set,
    clear: clear
};

},{"629a4d99f4fe5b2e":"9fY7y","e574be68c288c7c8":"148ka","df212787338802d3":"7vpmS","afdf018c2d01bbc6":"l3Kyn","35a3e849940fd612":"gC2Q5","b8bf5434d2248ca7":"hL6D2","731f9370cc21fc3b":"2pze4","ec358060964e4bde":"RsFXo","907adb6d219da7a3":"4bOHl","f398561ebd49a798":"b9O3D","8a8e342aaad83bb":"cGUFx","6eef8b4e43dd6731":"35LXH"}],"148ka":[function(require,module,exports) {
"use strict";
var NATIVE_BIND = require("d07466971ded2aca");
var FunctionPrototype = Function.prototype;
var apply = FunctionPrototype.apply;
var call = FunctionPrototype.call;
// eslint-disable-next-line es/no-reflect -- safe
module.exports = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function() {
    return call.apply(apply, arguments);
});

},{"d07466971ded2aca":"i16Dq"}],"2pze4":[function(require,module,exports) {
"use strict";
var getBuiltIn = require("14cb391fa4a0dda8");
module.exports = getBuiltIn("document", "documentElement");

},{"14cb391fa4a0dda8":"6ZUSY"}],"RsFXo":[function(require,module,exports) {
"use strict";
var uncurryThis = require("5250b5c9324ccbe");
module.exports = uncurryThis([].slice);

},{"5250b5c9324ccbe":"7GlkT"}],"b9O3D":[function(require,module,exports) {
"use strict";
var $TypeError = TypeError;
module.exports = function(passed, required) {
    if (passed < required) throw new $TypeError("Not enough arguments");
    return passed;
};

},{}],"cGUFx":[function(require,module,exports) {
"use strict";
var userAgent = require("88313d0d5d3e28c");
// eslint-disable-next-line redos/no-vulnerable -- safe
module.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);

},{"88313d0d5d3e28c":"lApyY"}],"35LXH":[function(require,module,exports) {
"use strict";
var ENVIRONMENT = require("5fac34e3c4c0e043");
module.exports = ENVIRONMENT === "NODE";

},{"5fac34e3c4c0e043":"888a9"}],"888a9":[function(require,module,exports) {
"use strict";
/* global Bun, Deno -- detection */ var globalThis = require("7dc361f46ecde901");
var userAgent = require("9f6e24ecbba66a9e");
var classof = require("a008a59fdc341842");
var userAgentStartsWith = function(string) {
    return userAgent.slice(0, string.length) === string;
};
module.exports = function() {
    if (userAgentStartsWith("Bun/")) return "BUN";
    if (userAgentStartsWith("Cloudflare-Workers")) return "CLOUDFLARE";
    if (userAgentStartsWith("Deno/")) return "DENO";
    if (userAgentStartsWith("Node.js/")) return "NODE";
    if (globalThis.Bun && typeof Bun.version == "string") return "BUN";
    if (globalThis.Deno && typeof Deno.version == "object") return "DENO";
    if (classof(globalThis.process) === "process") return "NODE";
    if (globalThis.window && globalThis.document) return "BROWSER";
    return "REST";
}();

},{"7dc361f46ecde901":"9fY7y","9f6e24ecbba66a9e":"lApyY","a008a59fdc341842":"bdfmm"}],"l7FDS":[function(require,module,exports) {
"use strict";
var $ = require("33581c362196ed1f");
var globalThis = require("503bb555249cad41");
var setTask = require("4219ce460223bd08").set;
var schedulersFix = require("738dc378e6a94c64");
// https://github.com/oven-sh/bun/issues/1633
var setImmediate = globalThis.setImmediate ? schedulersFix(setTask, false) : setTask;
// `setImmediate` method
// http://w3c.github.io/setImmediate/#si-setImmediate
$({
    global: true,
    bind: true,
    enumerable: true,
    forced: globalThis.setImmediate !== setImmediate
}, {
    setImmediate: setImmediate
});

},{"33581c362196ed1f":"dIGt4","503bb555249cad41":"9fY7y","4219ce460223bd08":"7jDg7","738dc378e6a94c64":"cAPb6"}],"cAPb6":[function(require,module,exports) {
"use strict";
var globalThis = require("aa6765693e58a0fe");
var apply = require("a68ecfcbf29c46f6");
var isCallable = require("7087588d33667af2");
var ENVIRONMENT = require("864edee099e8affb");
var USER_AGENT = require("3a3a5a2cfab86f21");
var arraySlice = require("cff2c830bdea4f24");
var validateArgumentsLength = require("58a74f00cee1ac64");
var Function = globalThis.Function;
// dirty IE9- and Bun 0.3.0- checks
var WRAP = /MSIE .\./.test(USER_AGENT) || ENVIRONMENT === "BUN" && function() {
    var version = globalThis.Bun.version.split(".");
    return version.length < 3 || version[0] === "0" && (version[1] < 3 || version[1] === "3" && version[2] === "0");
}();
// IE9- / Bun 0.3.0- setTimeout / setInterval / setImmediate additional parameters fix
// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
// https://github.com/oven-sh/bun/issues/1633
module.exports = function(scheduler, hasTimeArg) {
    var firstParamIndex = hasTimeArg ? 2 : 1;
    return WRAP ? function(handler, timeout /* , ...arguments */ ) {
        var boundArgs = validateArgumentsLength(arguments.length, 1) > firstParamIndex;
        var fn = isCallable(handler) ? handler : Function(handler);
        var params = boundArgs ? arraySlice(arguments, firstParamIndex) : [];
        var callback = boundArgs ? function() {
            apply(fn, this, params);
        } : fn;
        return hasTimeArg ? scheduler(callback, timeout) : scheduler(callback);
    } : scheduler;
};

},{"aa6765693e58a0fe":"9fY7y","a68ecfcbf29c46f6":"148ka","7087588d33667af2":"l3Kyn","864edee099e8affb":"888a9","3a3a5a2cfab86f21":"lApyY","cff2c830bdea4f24":"RsFXo","58a74f00cee1ac64":"b9O3D"}],"h5x5j":[function(require,module,exports) {
// src/hardware/serializeDerivationPath.js
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "serializeDerivationPath", ()=>serializeDerivationPath);
function serializeDerivationPath(path) {
    const buffer = new ArrayBuffer(1 + path.length * 4); // 1 byte for path length + 4 bytes for each path element
    const dataView = new DataView(buffer);
    dataView.setUint8(0, path.length); // First byte: path length
    path.forEach((element, index)=>{
        dataView.setUint32(1 + index * 4, element);
    });
    return new Uint8Array(buffer);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"X1LcC":[function(require,module,exports) {
$(window).on("scroll", function() {
    if ($(window).scrollTop() > 50) {
        $("div.nav-section-above800px").addClass("headeronscrolldown");
        $("nav ul").addClass("ulonscrolldown");
        $("nav img").addClass("logoImageShrink");
        /* NOTE: For class selector make sure you have '.'' */ $(".topLinks-flex-container").addClass("topLinks-transition");
        /* Remove */ $("nav img").removeClass("logoImageExpand");
    } else {
        $("div.nav-section-above800px").removeClass("headeronscrolldown");
        $("nav ul").removeClass("ulonscrolldown");
        $("nav img").removeClass("logoImageShrink");
        $(".topLinks-flex-container").removeClass("topLinks-transition");
        /* Add */ $("nav img").addClass("logoImageExpand");
    }
});

},{}]},["gDk1O","8NmNK"], "8NmNK", "parcelRequire1e94")

//# sourceMappingURL=index.bada3e25.js.map
